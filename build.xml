<?xml version="1.0"?>

<project name="dotcms.org" default="compile" basedir=".">
    <!-- property name="build.compiler" value="jikes" / -->

    <!-- Load version props -->
    <property file="src/com/liferay/portal/util/build.properties"/>
    <property file="test/build.properties" />
    <property file="../build.conf" />

    <!-- vars -->
    <property name="src.dir" value="src" />
    <property name="src.conf.dir" value="src-conf" />
    <property name="src.tests.dir" value="test" />
    <property name="src.jsp" value="build/jsp" />
    <property name="build.dir" value="build" />
    <property name="build.classes" value="${build.dir}/classes" />
    <property name="build.ant" value="${build.dir}/ant" />
    <property name="build.log4j" value="${build.dir}/log4j" />
    <property name="build.lib" value="${build.dir}/lib" />
    <property name="lib.app" value="${basedir}/dotCMS/WEB-INF/lib" />
    <property name="classes.app" value="${basedir}/dotCMS/WEB-INF/classes" />
    <property name="osgi.velocity.dir" value="${basedir}/dotCMS/WEB-INF/velocity/osgi" />
    <property name="osgi.html.dir" value="${basedir}/dotCMS/html/osgi" />
    <property name="build.war" value="${build.dir}/war" />
    <property name="build.compiler.fulldepend" value="true" />
    <property name="deploy.dir" value="${basedir}/dotCMS/WEB-INF/lib" />
    <property name="ant.build.javac.target" value="1.8"/>
    <property name="war.name" value="ROOT"/>
    <property name="endorsed_libs" value="${basedir}/dotCMS/WEB-INF/endorsed_libs" />
    <property name="agent.version" value="31"/>

    <property name="plugin.root.dir.default" value="${basedir}/dotCMS"/>
    <property name="plugin.jar.deploy.dir.default" value="${basedir}/../../dotCMS/WEB-INF/lib" />

    <property name="dist.update" value="false"/>
    <property name="distribution.output" value="../dist" />
    <property name="distribution.file.output" value="${distribution.output}/.." />
    <property name="distribution.bin.output" value="${distribution.output}/bin" />
    <property name="distribution.dotserver.output" value="${distribution.output}/dotserver" />
    <property name="distribution.plugins.output" value="${distribution.output}/plugins" />
    <property name="distribution.docs.output" value="${distribution.output}/docs" />

    <property name="license.project.home" value="../license"/>
    <property name="enterprise.project.home" value="../enterprise-2.x"/>

    <property name="tomcat.branch" value="${tomcat.install.branch}"/>
    <property name="tomcat.home" value="${tomcat.install.location}"/>
    <property name="tomcat.version" value="${tomcat.install.version}"/>
    <property name="jboss7.home" value="${jboss7.install.location}"/>
    <property name="jboss7.version" value="${jboss7.install.version}"/>
	
	<property name="release.build" value="${dotcms.release.build}"/>

    <tstamp>
        <format property="CURRENT_YEAR" pattern="yyyy" locale="en,GB"/>
    </tstamp>
    <property name="javadoc.title" value="&lt;h1&gt;dotCMS ${dotcms.release.version} API Specification&lt;/h1&gt;" />
    <property name="javadoc.bottom" value="&lt;i&gt;Copyright &#169; ${CURRENT_YEAR} dotCMS Inc. All Rights Reserved.&lt;/i&gt;" />

    <tstamp>
        <format property="TODAY_FORMATTED" pattern="MMM dd, yyyy"/>
    </tstamp>

    <path id="build-classpath">
        <pathelement path="${build.classes}" />
    </path>

    <path id="tests-classpath">
        <pathelement location="${java.home}/../lib/tools.jar"/>

        <fileset dir="libs/test">
            <include name="*.jar" />
        </fileset>

        <fileset dir="libs/buildlibs">
            <include name="*.jar" />
        </fileset>

        <!--We should be able to remove it soon-->
        <fileset dir="libs/buildlibs/jsp">
            <include name="jasper.jar" />
            <include name="jasper-el.jar" />
            <include name="el-api.jar" />
            <include name="tomcat-util.jar" />
            <include name="tomcat-juli.jar" />
            <include name="tomcat-api.jar" />
        </fileset>
        <!--We should be able to remove it soon-->

        <fileset dir="${lib.app}">
            <include name="**/*.jar" />
            <exclude name="**/dotcms_*.jar" />
        </fileset>
        <pathelement path="${build.classes}" />
    </path>

    <path id="files-classpath">
        <pathelement location="${java.home}/../lib/tools.jar"/>

        <fileset dir="libs/buildlibs">
            <include name="*.jar" />
        </fileset>

        <!--We should be able to remove it soon-->
        <fileset dir="libs/buildlibs/jsp">
            <include name="jasper.jar" />
            <include name="jasper-el.jar" />
            <include name="el-api.jar" />
            <include name="tomcat-util.jar" />
            <include name="tomcat-juli.jar" />
            <include name="tomcat-api.jar" />
        </fileset>
        <!--We should be able to remove it soon-->

        <fileset dir="${lib.app}">
            <include name="**/*.jar" />
            <exclude name="**/dotcms_*.jar" />
        </fileset>
        <pathelement path="${build.classes}" />
    </path>

    <!-- classpath only used for plugins no other task should use it because it locks the jar files -->
    <path id="ant-files-classpath-custom">

        <pathelement location="${java.home}/../lib/tools.jar"/>

        <fileset dir="../../${target.root}/WEB-INF/lib">
            <include name="ant-tooling-*.jar" />
            <include name="commons-lang-*.jar" />
            <include name="log4j-api*.jar" />
            <include name="log4j-core*.jar" />
            <include name="log4j-web*.jar" />
        </fileset>
    </path>
    <path id="ant-files-classpath">

        <pathelement location="${java.home}/../lib/tools.jar"/>

        <fileset dir="${lib.app}">
            <include name="ant-tooling-*.jar" />
            <include name="commons-lang-*.jar" />
            <include name="log4j-api*.jar" />
            <include name="log4j-core*.jar" />
            <include name="log4j-web*.jar" />
        </fileset>
    </path>

    <!-- include ant-contrib -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- Target to create the build directories prior to the -->
    <!-- compile target. -->
    <target name="prepare">
        <mkdir dir="${distribution.output}" />
        <mkdir dir="${build.dir}" />
        <mkdir dir="${build.classes}" />
        <mkdir dir="${build.lib}" />
    </target>

    <available file=".git" type="dir" property="git.present"/>
    <target name="git.revision" description="Store git revision in ${repository.version}" if="git.present">

        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="rev-parse"/>
            <arg value="--short=7"/>
            <arg value="HEAD"/>
        </exec>
        <condition property="repository.version" value="${git.revision}" else="unknown">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>

        <propertyfile file="${src.dir}/com/liferay/portal/util/build.properties">
            <entry key="dotcms.release.build" value="${repository.version}"/>
            <entry key="dotcms.release.date" value="${TODAY_FORMATTED}"/>
        </propertyfile>
        <!--
        If the Hash for the repo version (${repository.version}) has changed, 
        it needs to be read from a variable instead of read directly from the 
        build.properties file because Core Ant properties are immutable
        -->
    	<var name="release.build" unset="true"/>
    	<property name="release.build" value="${repository.version}"/>
    	
    </target>

    <target name="clean-tinymce-gz" description="Removes all generated .gz pre-compressed files by tinymce_gzip.jsp">
        <delete>
            <fileset dir="dotCMS/html/js/tinymce/js/tinymce/" includes="*.gz"/>
        </delete>
    </target>

    <target name="clean-core" description="Removes all compiled classes, jar." depends="check-src-build">
        <replaceregexp flags="s" match="&lt;!-- BEGIN JSPS --&gt;(.*)&lt;!-- END JSPS --&gt;"
                       replace="&lt;!-- BEGIN JSPS --&gt; &lt;!-- END JSPS --&gt;">
            <fileset dir="dotCMS/WEB-INF/">
                <include name="web.xml"/>
            </fileset>
        </replaceregexp>
        <delete>
            <fileset dir="${deploy.dir}" includes="dotcms_*.jar" excludes="dotcms_ant.jar" />
        </delete>
        <delete dir="${build.dir}" />
        <delete dir="${src.jsp}" />
        <delete dir="${distribution.output}" />
        <delete failonerror="false" includeemptydirs="true">
            <fileset dir="${classes.app}" includes="**/*" />
        </delete>
        <delete dir="${osgi.html.dir}" />
        <delete dir="${osgi.velocity.dir}" />
    </target>


    <target name="clean-jsp" description="Removes all compiled jsp files from the tomcat instance.">
        <delete dir="${tomcat.home}/work/Catalina" />
    </target>

    <target name="compile" depends="check-src-build,prepare" description="Compiles all source code.">
        <javac debug="true" encoding="UTF-8" debuglevel="lines,vars,source" fork="true" srcdir="${src.dir}" destdir="${build.classes}" source="1.8" target="1.8" compiler="javac1.8" nowarn="true" optimize="true" memoryinitialsize="256m" memorymaximumsize="1024m">
            <classpath refid="files-classpath" />
        </javac>
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSSeq.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSSeq.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSId.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSId.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSSeq_NOSQLGEN.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSSeq_NOSQLGEN.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSId_NOSQLGEN.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSId_NOSQLGEN.hbm.xml" />
        <copydir dest="${build.classes}/com/dotmarketing/startup/runonce/sql" src="${src.dir}/com/dotmarketing/startup/runonce/sql"></copydir>
        <copy todir="${build.classes}/org/apache/velocity/runtime/defaults/">
            <fileset dir="${src.dir}/org/apache/velocity/runtime/defaults/"/>
        </copy>
    </target>

    <target name="checkWindows" description="Sets the isWindows property if the OS family is windows">
        <condition property="isWindows">
            <os family="windows" />
        </condition>
    </target>


    <target name="jar" depends="git.revision, compile" description="Generates dotcms.jar in the 'lib' directory.">
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSSeq.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSSeq.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSId.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSId.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSSeq_NOSQLGEN.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSSeq_NOSQLGEN.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSId_NOSQLGEN.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSId_NOSQLGEN.hbm.xml" />
        <copydir dest="${build.classes}/com/dotmarketing/startup/runonce/sql" src="${src.dir}/com/dotmarketing/startup/runonce/sql"></copydir>
        <copy file="${src.dir}/com/liferay/portal/util/build.properties" tofile="${build.classes}/com/liferay/portal/util/build.properties" />

        <jar jarfile="${build.lib}/dotcms_${dotcms.release.version}_${release.build}.jar" basedir="${build.classes}" />
    </target>

    <target name="jar-with-tests" depends="compile, compile-tests" description="Generates dotcms.jar in the 'lib' directory includind tests classes.">
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSSeq.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSSeq.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSId.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSId.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSSeq_NOSQLGEN.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSSeq_NOSQLGEN.hbm.xml" />
        <copy file="${src.dir}/com/dotmarketing/beans/DotCMSId_NOSQLGEN.hbm.xml" tofile="${build.classes}/com/dotmarketing/beans/DotCMSId_NOSQLGEN.hbm.xml" />
        <copydir dest="${build.classes}/com/dotmarketing/startup/runonce/sql" src="${src.dir}/com/dotmarketing/startup/runonce/sql"></copydir>
        <copy file="${src.dir}/com/liferay/portal/util/build.properties" tofile="${build.classes}/com/liferay/portal/util/build.properties" />

        <jar jarfile="${build.lib}/dotcms_${dotcms.release.version}_${release.build}.jar" basedir="${build.classes}" />
    </target>

    <!-- Configure the directory into which the web application is built -->
    <property name="build" value="build" />

    <!-- Configure the folder and context path for this application -->
    <property name="webapp" value="dotCMS" />
    <property name="path" value="/dotCMS" />

    <property name="webapp.path" value="${build}/webapp${path}" />


    <target name="deploy-config" description="Verify if there is specified a custom location for the dotcms installation. When the war structure is use the 'target.root' property will be set in order to specify where the war folder is located, if not present the normal dotcms git structure is assumed.">

        <if>
            <!--
            Verify if there is specified a custom location for the dotcms installation.
            When the war structure is use the "target.root" property will be set in order to
            specify where the war folder is located, if not present the normal dotcms git structure is assumed.
            -->
            <contains string="${target.root}" substring="target.root"/>
            <then>
                <copy todir="${classes.app}">
                    <fileset dir="${src.conf.dir}">
                        <exclude name="**/.svn" />
                        <exclude name="**/.git" />
                    </fileset>
                </copy>
            </then>
            <else>
                <var name="distributionPath" value="${basedir}/../.."/>
                <copy todir="${plugin.root.dir}/WEB-INF/classes">
                    <fileset dir="${distributionPath}/bin/system/${src.conf.dir}">
                        <exclude name="**/.svn" />
                        <exclude name="**/.git" />
                    </fileset>
                </copy>
            </else>
        </if>
    </target>

    <target name="deploy-core-jsp" depends="jsp,jar,deploy-config" description="will compile, jar and copy to server lib and update the about page of the site">
        <delete>
            <fileset dir="${deploy.dir}" includes="dotcms_*.jar" excludes="dotcms_ant.jar" />
        </delete>
        <copy file="${build.lib}/dotcms_${dotcms.release.version}_${release.build}.jar" tofile="${deploy.dir}/dotcms_${dotcms.release.version}_${release.build}.jar" />
        <!-- Freetts -->
        <delete dir="${build.classes}" />
    </target>

    <target name="deploy-core-with-tests-jsp" depends="jsp,jar-with-tests,deploy-config" description="will compile, jar and copy to server lib and update the about page of the site">
        <delete>
            <fileset dir="${deploy.dir}" includes="dotcms_*.jar" excludes="dotcms_ant.jar" />
        </delete>
        <copy file="${build.lib}/dotcms_${dotcms.release.version}_${release.build}.jar" tofile="${deploy.dir}/dotcms_${dotcms.release.version}_${release.build}.jar" />
        <!-- Freetts -->
        <delete dir="${build.classes}" />
    </target>

    <target name="deploy-core" depends="jar,deploy-config" description="Will compile, generate the dotCMS jar and copy the jar to the server libs folder.">
        <delete>
            <fileset dir="${deploy.dir}" includes="dotcms_*.jar" excludes="dotcms_ant.jar" />
        </delete>
        <copy file="${build.lib}/dotcms_${dotcms.release.version}_${release.build}.jar" tofile="${deploy.dir}/dotcms_${dotcms.release.version}_${release.build}.jar" />
        <!-- Freetts -->
        <delete dir="${build.classes}" />
    </target>

    <target name="deploy-core-with-tests" depends="jar-with-tests,deploy-config" description="will compile, jar and copy to server lib and update the about page of the site">
        <delete>
            <fileset dir="${deploy.dir}" includes="dotcms_*.jar" excludes="dotcms_ant.jar" />
        </delete>
        <copy file="${build.lib}/dotcms_${dotcms.release.version}_${release.build}.jar" tofile="${deploy.dir}/dotcms_${dotcms.release.version}_${release.build}.jar" />
        <!-- Freetts -->
        <delete dir="${build.classes}" />
    </target>

    <target name="build-core-jsp" depends="jsp,jar" description="will compile, build sql scripts and update the about page of the site" />

    <target name="build-core" depends="jar" description="will compile, build sql scripts and update the about page of the site" />

    <target name="deploy" depends="jar,deploy-config" description="will compile, jar and copy to server lib and update the about page of the site">
        <delete>
            <fileset dir="${deploy.dir}" includes="dotcms_*.jar" excludes="dotcms_ant.jar" />
        </delete>
        <copy file="${build.lib}/dotcms_${dotcms.release.version}_${release.build}.jar" tofile="${deploy.dir}/dotcms_${dotcms.release.version}_${release.build}.jar" />
        <antcall target="deploy-plugins" />
    </target>

    <target name="jsp" depends="compile">

        <taskdef classname="com.dotmarketing.util.jasper.DotJasperTask" name="jasper2" >
            <classpath id="jspc.classpath" refid="files-classpath">
            </classpath>
        </taskdef>


        <jasper2
                validateXml="false"
                uriroot="dotCMS"
                javaEncoding="UTF-8"
                webXmlFragment="dotCMS/WEB-INF/generated_web.xml"
                outputDir="${src.jsp}/">

        </jasper2>
        <javac debug="true" debuglevel="lines,vars,source"  encoding="UTF-8"
               fork="true" srcdir="${src.jsp}" destdir="${build.classes}" source="1.8"
               target="1.8" compiler="javac1.8" nowarn="true" optimize="true"
               memoryinitialsize="256m" memorymaximumsize="1024m">
            <classpath refid="files-classpath" />
        </javac>

        <loadfile property="generated.web"
                  srcFile="dotCMS/WEB-INF/generated_web.xml"/>

        <replaceregexp flags="s" match="&lt;!-- BEGIN JSPS --&gt;(.*)&lt;!-- END JSPS --&gt;"
                       replace="&lt;!-- BEGIN JSPS --&gt; ${generated.web} &lt;!-- END JSPS --&gt;">
            <fileset dir="dotCMS/WEB-INF/">
                <include name="web.xml"/>
            </fileset>
        </replaceregexp>
    </target>

    <target name="create-dist" description="Creates the final distribution files for dotCMS.">

        <var name="tomcat.home" value="${distribution.dotserver.output}/tomcat-${tomcat.version}"/>

        <antcall target="clean" />

        <!--Clone tomcat-->
        <git-clone-pull repository="https://github.com/dotCMS/tomcat.git" version="${tomcat.branch}" dest="${tomcat.home}"/>

        <!--Generate the war-->
        <antcall target="war" />

        <!--Move the war to the ./dotserver/tomcat-7.x.x/webapps folder-->
        <antcall target="move-war-tomcat" />

        <!--bin folder (./bin)-->
        <copy todir="${distribution.bin.output}">
            <fileset dir="bin">
                <exclude name="com/**"/>
                <exclude name="net/**"/>
                <exclude name="org/**"/>
                <exclude name="**/*.class"/>
            </fileset>
        </copy>

        <!--bin folder (./bin/system/src-conf)-->
        <copy todir="${distribution.bin.output}/system/src-conf">
            <fileset dir="src-conf">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!--plugins folder (./plugins) -->
        <copy todir="${distribution.plugins.output}">
            <fileset dir="plugins">
                <exclude name="**/.git" />
            </fileset>
        </copy>

        <!--docs folder (./docs) -->
        <copy todir="${distribution.docs.output}">
            <fileset dir="docs">
                <include name="**/*"/>
            </fileset>
        </copy>

        <!--Set some startup variables-->
        <replace file="${distribution.bin.output}/build.conf"><!--Unix-->
            <replacefilter token="#SERVER_FOLDER" value="SERVER_FOLDER"/>
            <replacefilter token="{server.folder}" value="dotserver/tomcat-${tomcat.version}"/>

            <replacefilter token="#HOME_FOLDER" value="HOME_FOLDER"/>
            <replacefilter token="{home.folder}" value="$SERVER_FOLDER/webapps/ROOT"/>

            <replacefilter token="#target.root" value="target.root"/>
            <replacefilter token="{dotcms.home}" value="dotserver/tomcat-${tomcat.version}/webapps/ROOT"/>
        </replace>
        <replace file="${distribution.bin.output}/build.conf.bat"><!--For windows-->
            <replacefilter token="rem set" value="set"/>

            <replacefilter token="{server.folder}" value="dotserver\tomcat-${tomcat.version}"/>
            <replacefilter token="{home.folder}" value="dotserver\tomcat-${tomcat.version}\webapps\ROOT"/>
            <replacefilter token="{dotcms.home}" value="dotserver\tomcat-${tomcat.version}\webapps\ROOT"/>
        </replace>

        <copy file="build.xml" todir="${distribution.bin.output}/ant"/>

        <!--<antcall target="javadoc" />-->

        <if>
            <equals arg1="${dist.update}" arg2="true"/>
            <then>
                <delete file="${distribution.dotserver.output}/tomcat-${tomcat.version}/webapps/ROOT/starter.zip"/>
            </then>
        </if>

        <zip destfile="${distribution.file.output}/dotcms_${dotcms.release.version}.zip" basedir="${distribution.output}"/>

        <if>
            <equals arg1="${dist.update}" arg2="false"/>
            <then>
                <tar destfile="${distribution.file.output}/dotcms_${dotcms.release.version}.tar.gz" compression="gzip" longfile="gnu">
                    <tarfileset dir="${distribution.output}">
                        <include name="**/**"/>
                    </tarfileset>
                    <tarfileset dir="${distribution.output}/bin" prefix="/bin" filemode="755">
                        <include name="**/*.sh"/>
                    </tarfileset>
                    <tarfileset dir="${distribution.output}/dotserver/tomcat-${tomcat.version}/bin" prefix="/dotserver/tomcat-${tomcat.version}/bin" filemode="755">
                        <include name="**/*.sh"/>
                    </tarfileset>

                    <tarfileset dir="${distribution.output}/dotserver/tomcat-${tomcat.version}/webapps/ROOT" prefix="/dotserver/tomcat-${tomcat.version}/webapps/ROOT" filemode="755">
                        <include name="**/*.sh"/>
                    </tarfileset>

                </tar>
            </then>
        </if>

        <delete dir="${distribution.output}" />
    </target>

    <target name="create-update-dist" description="Creates an update distribution zip file.">

        <var name="dist.update" unset="true"/>
        <property name="dist.update" value="true"/>

        <antcall target="create-dist"/>
    </target>


    <target name="javadoc" description="creates javadoc for dotCMS">
        <javadoc maxmemory="1024m" packagenames="com.dotmarketing.*,com.dotcms.*" classpath="lib.app" sourcepath="${src.dir}" excludepackagenames="com.dummy.test.doc-files.*" defaultexcludes="yes" destdir="dotCMS/api" author="true" version="true" use="true" windowtitle="dotCMS API">
            <classpath refid="files-classpath" />
            <doctitle>
                ${javadoc.title}
            </doctitle>
            <bottom>
                ${javadoc.bottom}
            </bottom>
            <tag name="todo" scope="all" description="To do:" />
        </javadoc>

    </target>

    <target name="compile-tests" depends="prepare,compile,deploy-config" description="Compiles all test source code.">

        <copy todir="${lib.app}">
            <fileset dir="libs/test/">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <javac encoding="UTF-8" debug="true" debuglevel="lines,vars,source" fork="true" srcdir="${src.tests.dir}" destdir="${build.classes}" source="1.8" target="1.8" compiler="javac1.8" nowarn="true" optimize="true" memoryinitialsize="256m" memorymaximumsize="1024m">
            <classpath refid="files-classpath" />
        </javac>
        <copy todir="${build.classes}">
            <fileset dir="${src.tests.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

    </target>

    <target name="create-jar-tests" depends="prepare,compile" description="Compiles all test source code and outputs a jar with the tests only">
        <mkdir dir="${build.dir}/testbuild" />
        <javac encoding="UTF-8" debug="true" debuglevel="lines,vars,source" fork="true" srcdir="${src.tests.dir}" destdir="${build.dir}/testbuild" source="1.8" target="1.8" compiler="javac1.8" nowarn="true" optimize="true" memoryinitialsize="256m" memorymaximumsize="1024m">
            <classpath refid="tests-classpath" />
        </javac>
        <copy todir="${build.dir}/testbuild">
            <fileset dir="${src.tests.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <jar jarfile="${distribution.file.output}/dotcms_tests_${dotcms.release.version}.jar" basedir="${build.dir}/testbuild" />

        <copy todir="${distribution.file.output}">
            <fileset dir="libs/test/">
                <include name="*.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="uncomment-test-servlet" description="By default we need ServletTestRunner to be commented in web.xml so deployments doesn't have /dotTest as a public endpoint.">

        <!--Comment-->
        <replaceregexp flags="s" match="&lt;!-- TEST FRAMEWORK SERVLETS --&gt;"
                       replace="&lt;!-- TEST FRAMEWORK SERVLETS ">
            <fileset dir="dotCMS/WEB-INF/">
                <include name="web.xml"/>
            </fileset>
        </replaceregexp>
        <replaceregexp flags="s" match="&lt;!-- END OF TEST FRAMEWORK SERVLETS --&gt;"
                       replace="END OF TEST FRAMEWORK SERVLETS --&gt;">
            <fileset dir="dotCMS/WEB-INF/">
                <include name="web.xml"/>
            </fileset>
        </replaceregexp>

        <!--Uncomment-->
        <replaceregexp flags="s" match="&lt;!-- TEST FRAMEWORK SERVLETS"
                       replace="&lt;!-- TEST FRAMEWORK SERVLETS --&gt;">
            <fileset dir="dotCMS/WEB-INF/">
                <include name="web.xml"/>
            </fileset>
        </replaceregexp>

        <replaceregexp flags="s" match="END OF TEST FRAMEWORK SERVLETS --&gt;"
                       replace="&lt;!-- END OF TEST FRAMEWORK SERVLETS --&gt;">
            <fileset dir="dotCMS/WEB-INF/">
                <include name="web.xml"/>
            </fileset>
        </replaceregexp>
    </target>


    <!--Plugin tasks-->

    <target name="build-jsp" depends="build-core-jsp,build-plugins" description="build the dotCMS core and plugins" />

    <target name="build" depends="build-core,build-plugins" description="build the dotCMS core and plugins" />

    <target name="deploy-jsp" depends="build-jsp, deploy-core-jsp, deploy-plugins" description="@Deprecated: Compiles the jsp files and deploys core and plugins." />

    <target name="deploy-tests" depends="uncomment-test-servlet, build, deploy-core-with-tests, deploy-plugins" description="builds and deploys core, plugins and unit tests" />

    <target name="clean" depends="clean-plugins,undeploy-plugins,clean-core,clean-tinymce-gz" description="Cleans plugins and core code and also undeploys plugins" />

    <macrodef name="iterate">
        <attribute name="target"/>
        <sequential>
            <subant target="@{target}">
                <fileset dir="plugins" includes="*/build.xml"/>
            </subant>
        </sequential>
    </macrodef>
    <macrodef name="iterate-dist">
        <attribute name="target"/>
        <sequential>
            <subant target="@{target}">
                <fileset dir="../../plugins" includes="*/build.xml"/>
            </subant>
        </sequential>
    </macrodef>

    <target name="build-plugins" depends="setup-deploy-location" description="builds plugins but does not deploy">

        <var name="lib.app" unset="true"/>
        <property name="lib.app" value="${plugin.root.dir}/WEB-INF/lib"/>

        <if>
            <!--
            Verify if there is specified a custom location for the dotcms installation.
            When the war structure is used the "target.root" property will be set in order to
            specify where the war folder is located, if not present the normal dotcms git structure is assumed.
            -->
            <contains string="${target.root}" substring="target.root"/>
            <then>
                <iterate target="build"/>
            </then>
            <else>
                <iterate-dist target="build"/>
            </else>
        </if>

    </target>

    <target name="clean-plugins" description="undeploys and cleans plugins" depends="undeploy-plugins">
        <if>
            <!--
            Verify if there is specified a custom location for the dotcms installation.
            When the war structure is used the "target.root" property will be set in order to
            specify where the war folder is located, if not present the normal dotcms git structure is assumed.
            -->
            <contains string="${target.root}" substring="target.root"/>
            <then>
                <iterate target="clean"/>
            </then>
            <else>
                <iterate-dist target="clean"/>
            </else>
        </if>
    </target>

    <target name="unbuild-plugins" description="Cleans plugins">
        <if>
            <!--
            Verify if there is specified a custom location for the dotcms installation.
            When the war structure is used the "target.root" property will be set in order to
            specify where the war folder is located, if not present the normal dotcms git structure is assumed.
            -->
            <contains string="${target.root}" substring="target.root"/>
            <then>
                <iterate target="clean"/>
            </then>
            <else>
                <iterate-dist target="clean"/>
            </else>
        </if>
    </target>

    <target name="-check-use-file">
        <available property="file.exists" file="build.properties"/>
    </target>

    <target name="use-file" depends="-check-use-file" if="file.exists">
        <loadproperties srcFile="build.properties"/>
    </target>


    <target name="setup-deploy-location" depends="use-file" description="sets up the locations where to deploy">
        <condition property="plugin.root.dir" value="${basedir}/../../${target.root}" else="${plugin.root.dir.default}">
            <isset property="target.root"/>
        </condition>
        <condition property="plugin.jar.deploy.dir" value="${target.root}/WEB-INF/lib" else="${plugin.root.dir.default}/WEB-INF/lib">
            <isset property="target.root"/>
        </condition>
        <echo>Deploying plugins to: ${plugin.root.dir} | ${plugin.jar.deploy.dir}</echo>
    </target>

    <target name="deploy-plugins" depends="build-plugins, undeploy-plugins" description="builds and deploys plugins">

        <echo>Copying plugins to: ${plugin.root.dir}</echo>

        <if>
            <!--
            Verify if there is specified a custom location for the dotcms installation.
            When the war structure is used the "target.root" property will be set in order to
            specify where the war folder is located, if not present the normal dotcms git structure is assumed.
            -->
            <contains string="${target.root}" substring="target.root"/>
            <then>
                <var name="distributionPath" value="${basedir}"/>
                <var name="pluginsPath" value="plugins"/>
            </then>
            <else>
                <var name="distributionPath" value="${basedir}/../.."/>
                <var name="pluginsPath" value="../../plugins"/>
            </else>
        </if>

        <copy todir="${plugin.root.dir}/WEB-INF/classes" file="${pluginsPath}/plugins.xml" />
        <subant target="deploy-plugin" genericantfile="${basedir}/build.xml">
            <dirset dir="${pluginsPath}" includes="*"/>
            <property name="plugin.root.dir" value="${plugin.root.dir}"/>
            <property name="target.root" value="${target.root}"/>
            <property name="plugin.jar.deploy.dir" value="${plugin.jar.deploy.dir}"/>
        </subant>

        <if>
            <contains string="${target.root}" substring="target.root"/>
            <then>
                <taskdef classname="com.dotmarketing.plugin.ant.DeployTask" name="plugin-deploy-task">
                    <classpath id="plugin-deploy-task.classpath" refid="ant-files-classpath"/>
                </taskdef>
            </then>
            <else>
                <taskdef classname="com.dotmarketing.plugin.ant.DeployTask" name="plugin-deploy-task">
                    <classpath id="plugin-deploy-task.classpath" refid="ant-files-classpath-custom"/>
                </taskdef>
            </else>
        </if>

        <echo>Deploying plugins from: ${plugin.root.dir}</echo>
        <plugin-deploy-task distributionPath="${distributionPath}" dotcmsHome="${plugin.root.dir}" plugins="${plugin.root.dir}/WEB-INF/lib"/>
    </target>

    <target name="deploy-plugin">

        <if>
            <!--
            Verify if there is specified a custom location for the dotcms installation.
            When the war structure is used the "target.root" property will be set in order to
            specify where the war folder is located, if not present the normal dotcms git structure is assumed.
            -->
            <contains string="${target.root}" substring="target.root"/>
            <then>
                <copy todir="${plugin.jar.deploy.dir}">
                    <fileset dir="build/jar/" />
                </copy>
            </then>
            <else>
                <copy todir="../../${plugin.jar.deploy.dir}">
                    <fileset dir="build/jar/" />
                </copy>
            </else>
        </if>

    </target>

    <target name="undeploy-plugins" depends="setup-deploy-location" description="Undeploys all plugins, returns overridden files to default state. This task does not need to be executed as a pre-condition of deploy-plugins because that task executes it automatically.">

        <var name="lib.app" unset="true"/>
        <property name="lib.app" value="${plugin.root.dir}/WEB-INF/lib"/>

        <if>
            <!--
            Verify if there is specified a custom location for the dotcms installation.
            When the war structure is used the "target.root" property will be set in order to
            specify where the war folder is located, if not present the normal dotcms git structure is assumed.
            -->
            <contains string="${target.root}" substring="target.root"/>
            <then>

                <var name="distributionPath" value="${basedir}"/>

                <taskdef classname="com.dotmarketing.plugin.ant.UndeployTask" name="plugin-undeploy-task">
                    <classpath id="plugin-deploy-task.classpath" refid="ant-files-classpath">
                    </classpath>
                </taskdef>
            </then>
            <else>

                <var name="distributionPath" value="${basedir}/../.."/>

                <taskdef classname="com.dotmarketing.plugin.ant.UndeployTask" name="plugin-undeploy-task">
                    <classpath id="plugin-deploy-task.classpath" refid="ant-files-classpath-custom">
                    </classpath>
                </taskdef>
            </else>
        </if>

        <echo>Undeploying plugins from: ${plugin.root.dir}</echo>
        <plugin-undeploy-task distributionPath="${distributionPath}" dotcmsHome="${plugin.root.dir}" plugins="${plugin.root.dir}/WEB-INF/lib"/>

        <delete>
            <fileset dir="${plugin.root.dir}/WEB-INF/lib" includes="**/plugin-*.jar"/>
            <fileset dir="${plugin.root.dir}/WEB-INF/lib" includes="**/pluginlib-*.jar"/>
        </delete>
        <delete file="${plugin.root.dir}/WEB-INF/classes/plugins.xml" />
        <delete dir="${plugin.root.dir}/html/plugins" failonerror="false" />

        <antcall target="deploy-config" />
    </target>

    <target name="clean-plugins-libs" depends="setup-deploy-location" description="Deletes the plugins jars from the lib folder.">
        <delete>
            <fileset dir="${plugin.root.dir}/WEB-INF/lib" includes="**/plugin-*.jar"/>
            <fileset dir="${plugin.root.dir}/WEB-INF/lib" includes="**/pluginlib-*.jar"/>
        </delete>
    </target>

    <target name="check-src-build" description="Checks to see if a build-core is possible. Fails if the src directory is missing. This prevents sourceless installs from running a clean" >
        <available file="${src.dir}/com/dotmarketing" type="dir" property="src.dir.present" />
        <fail message="Source directory not present. If trying to deploy plugins, please use bin/deploy-plugins.sh or bin/deploy-plugins.bat instead" unless="src.dir.present" />
    </target>

    <target name="war" depends="deploy" description="builds dotCMS as a war without the jsps precompiled">
        <antcall target="war-file"/><!--This depends on depends="war-file"-->
    </target>
    <target name="war-tests" depends="deploy-tests" description="builds dotCMS as a war without the jsps precompiled">
        <antcall target="war-file"/>
    </target>

    <target name="war-file" description="Builds dotCMS as a war">

        <!--Clean-up-->
        <delete dir="${build.war}"/>
        <mkdir dir="${build.war}"/>

        <!--Prepare the content of the war-->
        <copy todir="${build.war}/${war.name}.war">
            <fileset dir="dotCMS/">
                <exclude name="assets/"/>
                <exclude name="WEB-INF/backup/"/>
                <exclude name="WEB-INF/dotlucene/"/>
                <exclude name="WEB-INF/classes/"/>
                <exclude name="dot_secure/"/>
                <exclude name="dotsecure/"/>
            </fileset>
        </copy>
        <copy todir="${build.war}/${war.name}.war/WEB-INF/classes" overwrite="true" includeemptydirs="false">
            <fileset dir="dotCMS/WEB-INF/classes">
                <exclude name="**/.svn" />
                <exclude name="**/.git" />
            </fileset>
        </copy>

        <!--Create the war-->
        <war destfile="${build.war}/dotcms_${dotcms.release.version}.war" webxml="dotCMS/WEB-INF/web.xml">
            <fileset dir="${build.war}/${war.name}.war">
                <exclude name="WEB-INF/web.xml"/>
            </fileset>
        </war>
    </target>

    <!--
    Task mean to be use from a distribution structure using the buildwar.sh script.
    This task will just use the already deployed folder inside the app server and compressed to a war file.
    -->
    <target name="custom-dist-war" depends="deploy-plugins" description="Builds a dotCMS as a war. (Task mean to be use from a distribution structure using the buildwar.sh script. This task will just use the already deployed folder inside the app server and compressed into a war file.)">

        <!--Clean-up-->
        <delete dir="../../WAR"/>
        <mkdir dir="../../WAR"/>

        <!--Create the war-->
        <war destfile="../../WAR/${war.name}.war" webxml="${basedir}/../../${target.root}/WEB-INF/web.xml">
            <fileset dir="${basedir}/../../${target.root}">
                <exclude name="WEB-INF/web.xml"/>
                <exclude name="**/*.db"/>
                <exclude name="assets/**"/>
                <exclude name="dotsecure/**"/>
            </fileset>
        </war>
    </target>

    <target name="undeploy-war-tomcat">
        <delete dir="${tomcat.home}/webapps/ROOT"/>
    </target>
    <target name="undeploy-war-jboss7">
        <delete file="${jboss7.home}/standalone/deployments/${war.name}.war.dodeploy"/>
        <delete dir="${jboss7.home}/standalone/deployments/${war.name}.war"/>
    </target>

    <target name="deploy-war-tomcat" depends="clone-pull-tomcat, war" description="Will checkout the tomcat app server, generate a war structure and copy it to the just checked out tomcat. If the app server exist instead of a checkout a git pull will be use.">
        <antcall target="move-war-tomcat"/>
    </target>

    <target name="deploy-war-tomcat-dev"  description="Same as deploy-war-tomcat but will use the no obfuscated version of the license and enterprise jars. (Useful for development)">
        <antcall target="generate-move-clean-projects-tomcat"/>
        <antcall target="deploy-war-tomcat"/>
    </target>

    <target name="generate-move-clean-projects-tomcat">
        <antcall target="generate-move-clean-license-tomcat"/>
        <antcall target="generate-move-clean-enterprise-tomcat"/>
    </target>

    <target name="generate-move-clean-license-tomcat">

        <!--Generate the projects jars-->
        <ant antfile="${license.project.home}/build.xml" target="jar" inheritAll="false"/>

        <!--Delete the old jars-->
        <delete>
            <fileset dir="${tomcat.home}/webapps/ROOT/WEB-INF/lib" includes="eelic-*"/>
            <fileset dir="dotCMS/WEB-INF/lib" includes="eelic-*" />
        </delete>

        <!--Copy the jar-->
        <copy todir="${tomcat.home}/webapps/ROOT/WEB-INF/lib">
            <fileset dir="${license.project.home}/build">
                <include name="eelic_clean.jar"/>
            </fileset>
        </copy>
        <copy todir="dotCMS/WEB-INF/lib">
            <fileset dir="${license.project.home}/build">
                <include name="eelic_clean.jar"/>
            </fileset>
        </copy>
    </target>

    <target name="generate-move-clean-enterprise-tomcat">

        <!--Generate the projects jars-->
        <ant antfile="${enterprise.project.home}/build.xml" target="jar" inheritAll="false"/>

        <!--Delete the old jars-->
        <delete>
            <fileset dir="${tomcat.home}/webapps/ROOT/WEB-INF/lib" includes="ee-*" />
            <fileset dir="dotCMS/WEB-INF/lib" includes="ee-*" />
        </delete>

        <!--Copy the jar-->
        <copy todir="${tomcat.home}/webapps/ROOT/WEB-INF/lib">
            <fileset dir="${enterprise.project.home}/build">
                <include name="ee_clean.jar"/>
            </fileset>
        </copy>
        <copy todir="dotCMS/WEB-INF/lib">
            <fileset dir="${enterprise.project.home}/build">
                <include name="ee_clean.jar"/>
            </fileset>
        </copy>
    </target>

    <!--
        Same as the deploy-war-tomcat except that it will backup the assets and dotsecure folders in order to restore them after the deploy.
        This is useful in cases when you need to make a deploy-war-tomcat but keeping your current data.
    -->
    <target name="deploy-war-tomcat-backup" depends="clone-pull-tomcat, backup-war-tomcat-data, war" description="Same as 'deploy-war-tomcat' but will also backup and restore the assets, dotsecure, META-INF and h2 database folders. (Useful for development)">
        <antcall target="move-war-tomcat"/>
        <antcall target="restore-backup-war-tomcat-data"/>
    </target>
    <!--
        Same as the deploy-war-tomcat-tests except that it will backup the assets and dotsecure folders in order to restore them after the deploy.
        This is useful in cases when you need to make a deploy-war-tomcat-tests but keeping your current data.
    -->
    <target name="deploy-war-tomcat-tests-backup" depends="clone-pull-tomcat, backup-war-tomcat-data, war-tests" description="Same as 'deploy-war-tomcat-backup' but also includes the junit tests.">
        <antcall target="move-war-tomcat"/>
        <antcall target="restore-backup-war-tomcat-data"/>
    </target>
    <target name="deploy-war-tomcat-tests" depends="clone-pull-tomcat, war-tests" description="Same as 'deploy-war-tomcat' but also includes the junit tests.">
        <antcall target="move-war-tomcat"/>
    </target>
    <target name="deploy-war-jboss7" depends="clone-pull-jboss7, war" description="Will checkout the jboss app server, generate a war structure and copy it to the just checked out jboss. If the app server exist instead of a checkout a git pull will be use.">
        <antcall target="move-war-jboss7"/>
    </target>
    <target name="deploy-jsp-tomcat" description="Moves the jsp files from a git checkout to the tomcat (Useful for development).">
        <var name="exploded.war.location" value="${tomcat.home}/webapps/ROOT"/>
        <antcall target="deploy-jsp-app-server"/>
    </target>
    <target name="deploy-jsp-jboss7" description="Moves the jsp files from a git checkout to the jboss (Useful for development).">
        <var name="exploded.war.location" value="${jboss7.home}/standalone/deployments/${war.name}.war"/>
        <antcall target="deploy-jsp-app-server"/>
    </target>
    <target name="deploy-jsp-app-server" description="Moves the jsp files from a git checkout to a specified app server location (Useful for development).">
        <copy todir="${exploded.war.location}/html/" overwrite="true">
            <fileset dir="dotCMS/html/">
                <exclude name="**/.git" />
            </fileset>
        </copy>

        <copy todir="${exploded.war.location}/portal/" overwrite="true">
            <fileset dir="dotCMS/portal/">
                <exclude name="**/.git" />
            </fileset>
        </copy>

        <copy todir="${exploded.war.location}/WEB-INF/jsp/" overwrite="true">
            <fileset dir="dotCMS/WEB-INF/jsp/">
                <exclude name="**/.git" />
            </fileset>
        </copy>
    </target>

    <target name="move-war-tomcat" depends="undeploy-war-tomcat" description="Moves the generated war under the build folder to the tomcat webapps folder.">
        <copy todir="${tomcat.home}/lib/">
            <fileset dir="libs/buildlibs/">
                <include name="mail.jar"/>
                <include name="mssql-jdbc-6.2.2.jre8.jar"/>
                <include name="mysql-connector-java-5.1.37-bin.jar"/>
                <include name="postgresql-42.2.2.jar"/>
                <include name="ojdbc5.jar"/>
            </fileset>
        </copy>

        <copy todir="${tomcat.home}/webapps/ROOT">
            <fileset dir="${build.war}/${war.name}.war">
                <exclude name="**/.git" />
            </fileset>
        </copy>

        <mkdir dir="${tomcat.home}/webapps/ROOT/META-INF"/>
        <copy file="extra/tomcat/context.xml" tofile="${tomcat.home}/webapps/ROOT/META-INF/context.xml"/>
    </target>

    <target name="move-war-jboss7" depends="undeploy-war-jboss7" description="Moves the generated war under the build folder to the jboss deployments folder.">

        <touch file="${jboss7.home}/standalone/deployments/${war.name}.war.dodeploy"/>

        <copy todir="${jboss7.home}/standalone/deployments/${war.name}.war">
            <fileset dir="${build.war}/${war.name}.war"/>
        </copy>
    </target>

    <target name="backup-war-tomcat-data">

        <mkdir dir="${tomcat.home}/temp"/>

        <delete dir="${tomcat.home}/temp/assets"/>
        <move todir="${tomcat.home}/temp/assets" failonerror="false">
            <fileset dir="${tomcat.home}/webapps/ROOT/assets">
                <include name="**/*"/>
            </fileset>
        </move>

        <delete dir="${tomcat.home}/temp/dotsecure"/>
        <move todir="${tomcat.home}/temp/dotsecure" failonerror="false">
            <fileset dir="${tomcat.home}/webapps/ROOT/dotsecure">
                <include name="**/*"/>
            </fileset>
        </move>

        <delete dir="${tomcat.home}/temp/META-INF"/>
        <move todir="${tomcat.home}/temp/META-INF" failonerror="false">
            <fileset dir="${tomcat.home}/webapps/ROOT/META-INF">
                <include name="**/*"/>
            </fileset>
        </move>

        <delete dir="${tomcat.home}/temp/h2"/>
        <move todir="${tomcat.home}/temp/h2" failonerror="false">
            <fileset dir="${tomcat.home}/webapps/ROOT/WEB-INF/H2_DATABASE">
                <include name="*.db" />
            </fileset>
        </move>

    </target>

    <target name="restore-backup-war-tomcat-data" description="Restores the backup generated by the 'backup-war-tomcat-data' task.">

        <delete dir="${tomcat.home}/webapps/ROOT/assets"/>
        <move todir="${tomcat.home}/webapps/ROOT/assets" failonerror="false">
            <fileset dir="${tomcat.home}/temp/assets">
                <include name="**/*"/>
            </fileset>
        </move>

        <delete dir="${tomcat.home}/webapps/ROOT/dotsecure"/>
        <move todir="${tomcat.home}/webapps/ROOT/dotsecure" failonerror="false">
            <fileset dir="${tomcat.home}/temp/dotsecure">
                <include name="**/*"/>
            </fileset>
        </move>

        <delete dir="${tomcat.home}/webapps/ROOT/META-INF"/>
        <move todir="${tomcat.home}/webapps/ROOT/META-INF" failonerror="false">
            <fileset dir="${tomcat.home}/temp/META-INF">
                <include name="**/*"/>
            </fileset>
        </move>

        <move todir="${tomcat.home}/webapps/ROOT/WEB-INF/H2_DATABASE" overwrite="true" failonerror="false">
            <fileset dir="${tomcat.home}/temp/h2">
                <include name="*.db" />
            </fileset>
        </move>

        <delete dir="${tomcat.home}/temp"/>
        <delete dir="${tomcat.home}/webapps/ROOT/WEB-INF/classes/com"/>

    </target>

    <target name="clone-pull-tomcat">
        <git-clone-pull repository="https://github.com/dotCMS/tomcat.git" version="${tomcat.branch}" dest="${tomcat.home}"/>
    </target>
    <target name="clone-pull-jboss7">
        <git-clone-pull repository="https://github.com/dotCMS/jboss7.git" version="${jboss7.version}" dest="${jboss7.home}"/>
    </target>

    <!--++++++++++++++++++++++++++++++++++++++++++-->
    <!--GIT COMMANDS-->
    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="dir" default=""/>
        <attribute default="false" name="failonerror"/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}" >
                <arg value="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>
    <macrodef name="git-clone-pull">
        <attribute name="repository"/>
        <attribute name="version"/>
        <attribute name="dest"/>
        <attribute default="false" name="failonerror"/>
        <sequential>
            <git command="clone">
                <args>
                    <arg value="-b"/>
                    <arg value="@{version}"/>
                    <arg value="@{repository}"/>
                    <arg value="@{dest}"/>
                </args>
            </git>
            <git command="pull" dir="@{dest}"/>
        </sequential>
    </macrodef>
    <!--<target name="clone-tomcat">
        <git command="clone">
            <args>
                <arg value="https://github.com/dotCMS/tomcat.git"/>
                <arg value="../app-servers/tomcat"/>
            </args>
        </git>
    </target>-->
    <!--GIT COMMANDS-->
    <!--++++++++++++++++++++++++++++++++++++++++++-->

</project>
