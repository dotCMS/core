# Custom Values EXAMPLE for DotCMS JMeter Performance Testing
# ============================================================
# 
# ⚠️  WARNING: DO NOT EDIT THIS FILE DIRECTLY! ⚠️
# 
# This is an EXAMPLE file that should NOT be modified with your actual configuration.
# It provides templates and examples for creating your own custom values file.
#
# CORRECT USAGE:
#   1. Let the script copy this file: ./dotcms-analytics-test.sh setup
#   2. OR manually copy: cp custom-values.yaml.example my-values.yaml
#   3. Then edit your copy with your specific configuration
#
# AUTOMATED USAGE:
#   ./dotcms-analytics-test.sh setup --dotcms-host demo.dotcms.com
#   # This creates custom-values.yaml automatically
#
# MANUAL USAGE:
#   cp custom-values.yaml.example production-values.yaml
#   # Edit production-values.yaml with your configuration
#   ./dotcms-analytics-test.sh setup --values-file production-values.yaml
#
# DIRECT HELM USAGE:
#   helm install my-jmeter ./helm-chart/jmeter-performance -f custom-values.yaml
# =============================================================================
# REQUIRED CONFIGURATION (must be provided)
# =============================================================================

# DotCMS API Configuration
endpoints:
  dotcms:
    # REQUIRED: Your DotCMS instance hostname
    host: "demo.dotcms.com"
    # port: 443
    # scheme: "https"
    # path: "/api/v1/analytics/content/event"

# Authentication Configuration
auth:
  # ALWAYS use Kubernetes secret for secure token storage (recommended)
  useSecret: true
  
  # ⚠️ SECURITY WARNING: Never put actual tokens in this file!
  # Tokens are managed via:
  #   1. Environment variables (DOTCMS_JWT_TOKEN, DOTCMS_ANALYTICS_KEY)
  #   2. Interactive setup prompts (generates tokens securely)
  #   3. Kubernetes secrets (automatic when useSecret: true)
  # See README.md → Authentication Setup for detailed instructions
  jwtToken: ""

# =============================================================================
# ANALYTICS CONFIGURATION
# =============================================================================

# Analytics Platform Settings (uncomment to override defaults)
# endpoints:
#   analytics:
#     # Analytics platform hostname
#     host: "analytics.example.com"
#     port: 8001
#     scheme: "http"
#     path: "/api/v1/event"
#     # Analytics key: Managed via Kubernetes secret (see README.md for setup)
#     key: ""

# =============================================================================
# ENVIRONMENT CONFIGURATION  
# =============================================================================

# Environment Settings (uncomment to customize)
# environment:
#   name: "production"
#   cluster: "prod-cluster"
#   customer: "your-company"
#   docHost: "demo.dotcms.com"

# =============================================================================
# KUBERNETES CONFIGURATION
# =============================================================================

# Namespace Configuration (uncomment to override)
# namespace:
#   name: "analytics-prod"
#   create: false

# =============================================================================
# RESOURCE ALLOCATION
# =============================================================================

# Pod Resource Configuration
# pod:
#   name: "jmeter-test-pod"
#   restartPolicy: "Never"
#   
#   # Container Image
#   image:
#     repository: "alpine/jmeter"
#     tag: "latest"
#     pullPolicy: "IfNotPresent"
#   
#   # Resource Limits and Requests
#   resources:
#     requests:
#       cpu: "4000m"      # 4 CPU cores
#       memory: "16Gi"    # 16GB RAM
#     limits:
#       cpu: "8000m"      # 8 CPU cores maximum
#       memory: "32Gi"    # 32GB RAM maximum
#   
#   # JMeter JVM Configuration
#   jvm:
#     # Heap size configuration
#     heap: "-Xms12g -Xmx24g"
#     # Full JVM arguments
#     args: "-Xms12g -Xmx24g -XX:+UseG1GC -XX:MaxGCPauseMillis=100 -XX:G1ReservePercent=20 -Dnashorn.args=--no-deprecation-warning"

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Test Configuration Defaults
# testing:
#   defaults:
#     threads: 1000
#     eventsPerSecond: 2000
#     duration: 900          # 15 minutes
#     rampup: 120           # 2 minutes
#     maxResponseTime: 10000 # 10 seconds
#     connectTimeout: 15000
#     responseTimeout: 30000
#   
#   # Performance Limits Testing
#   limits:
#     dotcms:
#       levels: [500, 1000, 1500, 2000]
#       maxThreads: 1000
#       minThreads: 10
#       threadsPerEps: 2
#     
#     analytics:
#       levels: [1000, 2000, 3000, 4000]
#       maxThreads: 500
#       minThreads: 20
#       threadsPerEps: 4
#     
#     testDuration: 900     # 15 minutes per test
#     rampupTime: 120      # 2 minutes ramp up
#     errorThreshold: 80   # Stop at 80% error rate

# =============================================================================
# CONFIGMAP CONFIGURATION
# =============================================================================

# ConfigMap Settings (advanced users)
# configMaps:
#   scripts:
#     name: "jmeter-scripts"
#     mountPath: "/opt/jmeter-scripts"
#     defaultMode: 0755
#   
#   jmx:
#     name: "jmeter-jmx-tests"
#     mountPath: "/opt/jmx-tests"
#     
#   config:
#     name: "jmeter-config"
#     mountPath: "/opt/config"

# =============================================================================
# VOLUME CONFIGURATION
# =============================================================================

# Volume Settings
# volumes:
#   results:
#     name: "test-results"
#     mountPath: "/opt/test-results"

# =============================================================================
# LABELS AND ANNOTATIONS
# =============================================================================

# Metadata Configuration
# labels:
#   app: "jmeter-load-test"
#   component: "performance-testing"
#   version: "1.0.0"
#   environment: "production"

# annotations:
#   description: "JMeter Performance Testing for DotCMS Analytics APIs - Production"
#   contact: "platform-team@your-company.com"
#   documentation: "https://wiki.your-company.com/jmeter-testing"

# =============================================================================
# EXAMPLE CONFIGURATIONS
# =============================================================================

# Example 1: High-Performance Production Setup
# --------------------------------------------
# endpoints:
#   dotcms:
#     host: "production.dotcms.cloud"
# 
# pod:
#   resources:
#     requests:
#       cpu: "8000m"
#       memory: "32Gi" 
#     limits:
#       cpu: "16000m"
#       memory: "64Gi"
#   jvm:
#     heap: "-Xms24g -Xmx48g"
# 
# testing:
#   defaults:
#     threads: 2000
#     eventsPerSecond: 5000
#     duration: 1800

# Example 2: Development/Staging Setup
# ------------------------------------
# endpoints:
#   dotcms:
#     host: "staging.dotcms.com"
# 
# namespace:
#   name: "analytics-staging"
# 
# pod:
#   resources:
#     requests:
#       cpu: "1000m"
#       memory: "4Gi"
#     limits:
#       cpu: "2000m" 
#       memory: "8Gi"
# 
# testing:
#   defaults:
#     threads: 100
#     eventsPerSecond: 200
#     duration: 300

# Example 3: Custom Analytics Platform
# ------------------------------------
# endpoints:
#   dotcms:
#     host: "demo.dotcms.com"
#   analytics:
#     host: "custom-analytics.company.com"
#     port: 9000
#     scheme: "https"
#     key: "custom.analytics.key.here"