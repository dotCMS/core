/**
 *
 * Set 'use-pre-3_5-build' to true in gradle.properties to enable this build path.
 *
 * Note that the 'copyTo*' tasks within this .gradle file intentionally avoid using a task type of copy ( `task copyToFelix(type='Copy') {... }` ). This is
 * to avoid gradle caching of state, which breaks the build due to the 'pre-compile' nature of these four initial copy steps.
 */

configurations {
    antLibs
}

def felixFolder = "dotCMS/WEB-INF/felix/bundle"
def libsFolder = "dotCMS/WEB-INF/lib"
def dotCmsFolder = "dotCMS"

apply from: "$rootDir/dependencies.gradle"

configurations.compile.extendsFrom(configurations.felix)

task copyToFelix(type: Copy) {
        from configurations.felix
        into felixFolder
        include '**/dot.org.apache.felix.bundlerepository*.jar'
        include '**/dot.org.apache.felix.fileinstall*.jar'
        include '**/dot.org.apache.felix.gogo.*.jar'
        include '**/dot.org.apache.felix.http.bundle*.jar'
}

task copyToLibDir(type: Sync) {
        from configurations.compile
        into libsFolder
        exclude '**/dot.org.apache.felix.bundlerepository*.jar'
        exclude '**/dot.org.apache.felix.fileinstall*.jar'
        exclude '**/dot.org.apache.felix.gogo.*.jar'
        exclude '**/*.zip'
}


task copyStarterProject(type: Copy) {
        from configurations.starterContent
        into dotCmsFolder
        include '**/starter*.zip'
        rename(/starter(.+)\.zip/, "starter.zip")
}

task copyCoreWebContent(type: Copy) {
        from(zipTree(configurations.coreWeb.files[0]))
        into "${dotCmsFolder}/html/js/_rulesengine"
}

task copyToLib(dependsOn: [copyToFelix, copyToLibDir, copyStarterProject, copyCoreWebContent]) {
    description = 'Synchronizes the dependencies with the libs folders (dotCMS/WEB-INF/lib, dotCMS/WEB-INF/felix/bundle) and copies the starter.zip'
    doLast {
        println "Copied libs"
    }
}


dependencies {
    antLibs group: 'org.apache.ant', name: 'ant-junit', version: '1.9.3'
    antLibs group: 'ant-contrib', name: 'ant-contrib', version: '1.0b3'
    antLibs group: 'com.dotcms', name: 'ant-tooling-log4j', version: '1.1'
    antLibs group: 'com.dotcms.lib', name: 'dot.commons-lang', version: '2.4_2'
    antLibs group: 'com.dotcms.lib', name: 'dot.tika-app', version: '1.3_3'
    antLibs group: 'com.dotcms.lib', name: 'dot.log4j-1.2-api', version: '2.3_1'
    antLibs group: 'com.dotcms.lib', name: 'dot.log4j-api', version: '2.3_1'
    antLibs group: 'com.dotcms.lib', name: 'dot.log4j-core', version: '2.3_1'
    antLibs group: 'com.dotcms.lib', name: 'dot.log4j-web', version: '2.3_1'
    antLibs group: 'com.dotcms.lib', name: 'dot.slf4j-api', version: '1.7.12_2'
    antLibs group: 'com.dotcms.lib', name: 'dot.slf4j-jcl', version: '1.7.12_2'
}

/**
 * Load the properties found at the provided path into the root project, making them accessible via "rootProject.getProperty('foo')".
 * Also adds the properties to the global 'ant' object.
 * @param path
 * @return
 */
public void loadProps(String path) {
    File f = file(path);
    if(!f.exists()) {
        throw new Exception("Could not load properties from ${path}, as it does not exist")
    }
    Properties props = new Properties()
    props.load(new FileInputStream(f))
    logger.info("Loading Properties from ${path} into 'rootProject[*]' and 'ant[*]'.")
    props.each { k, v ->
        logger.info("\t${k}: ${v}");
        rootProject.ext.set(k, v)
        ant.properties[k] = v
    }
}

/**
 * Load props from the build.properties file in source control.
 */
loadProps("${rootProject.projectDir}/src/com/liferay/portal/util/build.properties")
loadProps("${rootProject.projectDir}/build.properties")

task loadAntProps() {
    logger.info("Loading properties defined in ant onto gradle's 'rootProject':")
    ant.properties.each { k, v ->
        logger.info("\t${k}: ${v}");
        rootProject.ext.set(k, v)
    }
}

def _prepare() {
    file("${project.projectDir}/dotCMS/WEB-INF/lib").mkdirs()
}

_prepare()

ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
configurations.antLibs.each { File f ->
    logger.info("Adding to ant classpath: ${f.toURI().toURL()}")
    antClassLoader.addURL(f.toURI().toURL())
}


ant.importBuild 'build.xml'
copyToLib.mustRunAfter(clean)
compile.dependsOn(copyToLib)
project.'create-dist'.dependsOn(copyToLib)


