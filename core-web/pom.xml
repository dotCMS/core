<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.dotcms</groupId>
        <artifactId>dotcms-nodejs-parent</artifactId>
        <version>${revision}${sha1}${changelist}</version>
        <relativePath>../nodejs-parent/pom.xml</relativePath>
    </parent>

    <artifactId>dotcms-core-web</artifactId>
    <packaging>war</packaging>

    <properties>
        <maven.deploy.skip>false</maven.deploy.skip>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.plugin.cargo.version>1.9.0</maven.plugin.cargo.version>
        <cargo.tomcat.major.version>9</cargo.tomcat.major.version>
        <nx.build.options></nx.build.options>
        <cargo.server.port>8084</cargo.server.port>
        <yarn.install.cmd>--frozen-lockfile</yarn.install.cmd>
        <skip.npm.install>false</skip.npm.install>
        <sonar.sources>apps,libs</sonar.sources>
        <sonar.exclusions>**/node_modules/**,**/*.spec.ts</sonar.exclusions>
        <sonar.tests>apps,libs</sonar.tests>
        <sonar.test.inclusions>**/*.spec.ts</sonar.test.inclusions>
        <skip.core-web.updates>false</skip.core-web.updates>
        <skip.validate>true</skip.validate>
        <git.origin.branch>origin/main</git.origin.branch>
        <nx.affected.options>--base=${git.origin.branch} --head=HEAD</nx.affected.options>
        <pretty.quick.options>--branch=${git.origin.branch}</pretty.quick.options>
        <skip.nx.reset.execution>true</skip.nx.reset.execution>

        <!-- E2E Properties -->
        <e2e.test.skip>true</e2e.test.skip>
        <e2e.test.env>local</e2e.test.env>
        <e2e.frontend.dir>${project.basedir}/apps/dotcms-ui-e2e</e2e.frontend.dir>
        <playwright.add.cmd>global add playwright</playwright.add.cmd>
        <playwright.install.cmd>playwright install --with-deps</playwright.install.cmd>
        <e2e.test.debug></e2e.test.debug>
        <e2e.test.specific></e2e.test.specific>
        <!-- Updated NX command for running E2E tests -->
        <e2e.test.cmd>nx e2e dotcms-ui-e2e --env=${e2e.test.env}</e2e.test.cmd>
        <e2e.post.test.cmd>run post-testing</e2e.post.test.cmd> <!-- This might also need to be an NX command or could be a script within dotcms-ui-e2e package.json -->
        <dotcms.e2e.port>8088</dotcms.e2e.port>
        <wiremock.port>8089</wiremock.port>
        <e2e.server.url>http://localhost:${dotcms.e2e.port}</e2e.server.url>
        <clean.docker.volumes>true</clean.docker.volumes>
        <dotcms.e2e.image>dotcms/dotcms:latest</dotcms.e2e.image> <!-- Placeholder image -->
        <wiremock.api.key>YOUR_WIREMOCK_API_KEY</wiremock.api.key> <!-- Needs to be configured -->
        <docker.image.wiremock>wiremock/wiremock:2.35.0</docker.image.wiremock> <!-- Specify a version -->
        <docker.wm.volume>${project.basedir}/apps/dotcms-ui-e2e/src/test/resources/wiremock</docker.wm.volume> <!-- Adjust if path is different -->
        <docker.wm.volume.internal>/home/wiremock</docker.wm.volume.internal>
        <cleanup.before.tests>true</cleanup.before.tests>
        <docker.jacoco.skip>true</docker.jacoco.skip> <!-- Assuming skip by default -->
        <!-- End E2E Properties -->
    </properties>

    <dependencies>

    </dependencies>
    <build>

        <plugins>
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>dist</directory>
                            <includes>
                                <include>**/*</include>
                            </includes>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>process-resources</phase>
                        <configuration>
                            <target>
                                echo "Using node.js ${node.js.version}"
                                <echo append="false" file="${basedir}/.nvmrc">${node.js.version}</echo>
                                <!--
                                <filter token="node.js.version" value="${node.js.version}"/>
                                <copy file="${basedir}/version-template.txt" tofile="${basedir}/.nvmrc" overwrite="true" filtering="true"/>
                                -->
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.github.eirslett</groupId>
                <artifactId>frontend-maven-plugin</artifactId>
                <configuration>
                    <!-- Base config defined in dotcms-core-web-parent -->
                </configuration>

                <executions>
                    <execution>
                        <id>install</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>

                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>generate-resources</phase>

                        <configuration>
                            <skip>${skip.npm.install}</skip>
                            <arguments>${yarn.install.cmd}</arguments>
                        </configuration>
                    </execution>



                    <execution>
                        <id>lint-test</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>generate-resources</phase>
                        <configuration>
                            <skip>${skip.validate}</skip>
                            <arguments>nx affected -t lint --exclude='tag:skip:lint'</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>format-test</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>generate-resources</phase>
                        <configuration>
                            <skip>${skip.validate}</skip>
                            <arguments>nx format:check</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>build dotcms-ui</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>

                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>compile</phase>

                        <configuration>
                            <arguments>run nx --verbose build dotcms-ui  ${nx.build.options}</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>build dotcms-block-editor</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>

                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>compile</phase>

                        <configuration>
                            <arguments>run nx run dotcms-block-editor:build</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>build dotcms-binary-field-builder</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>

                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>compile</phase>

                        <configuration>
                            <arguments>run nx run dotcms-binary-field-builder:build</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>build edit-content-bridge</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>

                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>compile</phase>

                        <configuration>
                            <arguments>run nx run edit-content-bridge:build</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>test</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>

                        <!-- optional: the default phase is "generate-resources" -->
                        <phase>test</phase>

                        <configuration>
                            <skip>${skipTests}</skip>
                            <arguments>run nx run-many -t test --exclude='tag:skip:test'</arguments>
                        </configuration>
                    </execution>

                    <execution>
                        <id>nx-reset</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>validate</phase>
                        <configuration>
                            <arguments>exec nx reset</arguments>
                            <skip>${skip.nx.reset.execution}</skip>
                        </configuration>
                    </execution>

                    <!-- E2E Test Executions -->
                    <execution>
                        <id>install-e2e-deps</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <workingDirectory>${e2e.frontend.dir}</workingDirectory>
                            <!-- The old POM used 'install --frozen-lockfile'. Current yarn.install.cmd is '--frozen-lockfile'. Adding 'install' keyword. -->
                            <arguments>install ${yarn.install.cmd}</arguments>
                            <skip>${skip.npm.install}</skip> <!-- Or use ${e2e.test.skip} if deps should only install when tests run -->
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-playwright</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <workingDirectory>${e2e.frontend.dir}</workingDirectory>
                            <skip>${e2e.test.skip}</skip>
                            <arguments>${playwright.add.cmd}</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>install-playwright</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <workingDirectory>${e2e.frontend.dir}</workingDirectory>
                            <skip>${e2e.test.skip}</skip>
                            <arguments>${playwright.install.cmd}</arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run-e2e-tests</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>integration-test</phase>
                        <configuration>
                            <workingDirectory>${e2e.frontend.dir}</workingDirectory>
                            <skip>${e2e.test.skip}</skip>
                            <arguments>${e2e.test.cmd}</arguments>
                            <environmentVariables>
                                <PLAYWRIGHT_SPECIFIC>${e2e.test.specific}</PLAYWRIGHT_SPECIFIC>
                                <PLAYWRIGHT_DEBUG>${e2e.test.debug}</PLAYWRIGHT_DEBUG>
                                <E2E_SERVER_URL>${e2e.server.url}</E2E_SERVER_URL>
                            </environmentVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run-post-e2e-script</id>
                        <goals>
                            <goal>yarn</goal>
                        </goals>
                        <phase>integration-test</phase> <!-- Consider post-integration-test if it needs to run after verification -->
                        <configuration>
                            <workingDirectory>${e2e.frontend.dir}</workingDirectory>
                            <skip>${e2e.test.skip}</skip>
                            <arguments>${e2e.post.test.cmd}</arguments>
                        </configuration>
                    </execution>
                    <!-- End E2E Test Executions -->
                </executions>

            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <skipTests>${e2e.test.skip}</skipTests>
                </configuration>
                <executions>
                    <execution>
                        <id>integration-test</id>
                        <phase>none</phase> <!-- Actual test execution by frontend-maven-plugin -->
                    </execution>
                    <execution>
                        <id>verify</id>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                        <phase>verify</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <webResources>
                        <resource>
                            <!-- this is relative to the pom.xml directory -->
                            <directory>${project.basedir}/dist/apps/dotcms-ui</directory>
                            <filtering>false</filtering>
                            <targetPath>dotAdmin</targetPath>
                        </resource>
                        <resource>
                            <directory>${project.basedir}/dist/libs/dotcms-webcomponents/dist</directory>
                            <filtering>false</filtering>
                            <includes>
                                <include>dotcms-webcomponents/**/*</include>
                            </includes>
                        </resource>

                        <resource>
                            <directory>${project.basedir}/dist/apps/dotcms-binary-field-builder</directory>
                            <filtering>false</filtering>
                            <targetPath>dotcms-binary-field-builder</targetPath>
                        </resource>

                        <resource>
                            <directory>${project.basedir}/dist/apps/dotcms-block-editor</directory>
                            <filtering>false</filtering>
                            <targetPath>dotcms-block-editor</targetPath>
                        </resource>

                        <resource>
                            <directory>${project.basedir}/dist/libs/edit-content-bridge</directory>
                            <filtering>false</filtering>
                            <targetPath>html/js/legacy_custom_field_bridge</targetPath>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.cargo</groupId>
                <artifactId>cargo-maven3-plugin</artifactId>
                <version>${version.cargo.plugin}</version>
                <configuration>

                    <container>
                        <timeout>1800000</timeout>
                        <systemProperties>
                            <file.encoding>UTF-8</file.encoding>
                        </systemProperties>

                        <dependencies>

                        </dependencies>
                    </container>
                    <configuration>

                        <!--<home>${project.build.directory}/catalina-base</home>-->
                        <properties>
                            <!--    <cargo.servlet.port>${cargo.samples.servlet.port}</cargo.servlet.port>
                                <cargo.rmi.port>${cargo.samples.rmi.port}</cargo.rmi.port>
                                <cargo.tomcat.ajp.port>${cargo.samples.tomcat.ajp.port}</cargo.tomcat.ajp.port>
                          -->

                            <cargo.servlet.port>${cargo.server.port}</cargo.servlet.port>

                        </properties>
                    </configuration>
                    <deployables>
                        <deployable>
                            <properties>
                                <context>/</context>
                            </properties>
                        </deployable>
                    </deployables>
                </configuration>

            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.43.4</version> <!-- Use a recent version -->
                <configuration>
                    <showLogs>true</showLogs>
                    <follow>true</follow>
                    <skip>${e2e.test.skip}</skip>
                    <images>
                        <image>
                            <name>${docker.image.wiremock}</name>
                            <alias>wiremock</alias>
                            <run>
                                <ports>
                                    <port>${wiremock.port}:8080</port>
                                </ports>
                                <volumes>
                                    <bind>
                                        <volume>${docker.wm.volume}:${docker.wm.volume.internal}</volume>
                                    </bind>
                                </volumes>
                                <log>
                                    <prefix>[WireMock]</prefix>
                                    <color>green</color>
                                </log>
                            </run>
                        </image>
                        <image>
                            <name>${dotcms.e2e.image}</name>
                            <alias>dotcms</alias>
                            <run>
                                <ports>
                                    <port>${dotcms.e2e.port}:8080</port>
                                </ports>
                                <env>
                                    <CATALINA_OPTS>-XX:+PrintFlagsFinal</CATALINA_OPTS>
                                    <DB_MAX_TOTAL>15</DB_MAX_TOTAL>
                                    <DOT_INDEX_POLICY_SINGLE_CONTENT>FORCE</DOT_INDEX_POLICY_SINGLE_CONTENT>
                                    <DOT_ASYNC_REINDEX_COMMIT_LISTENERS>false</DOT_ASYNC_REINDEX_COMMIT_LISTENERS>
                                    <DOT_ASYNC_COMMIT_LISTENERS>false</DOT_ASYNC_COMMIT_LISTENERS>
                                    <DOT_CACHE_GRAPHQLQUERYCACHE_SECONDS>600</DOT_CACHE_GRAPHQLQUERYCACHE_SECONDS>
                                    <JVM_ENDPOINT_TEST_PASS>obfuscate_me</JVM_ENDPOINT_TEST_PASS>
                                    <DOT_ENABLE_SCRIPTING>true</DOT_ENABLE_SCRIPTING>
                                    <!-- Updated to use the Docker internal WireMock hostname 'wiremock' on its default port 8080 -->
                                    <DOT_ANNOUNCEMENTS_BASE_URL>http://localhost:${dotcms.e2e.port}</DOT_ANNOUNCEMENTS_BASE_URL> <!-- This should be the public URL -->
                                    <DOT_ALLOW_ACCESS_TO_PRIVATE_SUBNETS>true</DOT_ALLOW_ACCESS_TO_PRIVATE_SUBNETS>
                                    <DOT_DOTCMS_DEV_MODE>true</DOT_DOTCMS_DEV_MODE>
                                    <DOT_AI_API_URL>http://wiremock:8080/c</DOT_AI_API_URL>
                                    <DOT_AI_IMAGE_API_URL>http://wiremock:8080/i</DOT_AI_IMAGE_API_URL>
                                    <DOT_AI_EMBEDDINGS_API_URL>http://wiremock:8080/e</DOT_AI_EMBEDDINGS_API_URL>
                                    <DOT_AI_MODELS_API_URL>http://wiremock:8080/m</DOT_AI_MODELS_API_URL>
                                </env>
                                <links>
                                    <link>wiremock:wiremock</link> <!-- Link to the wiremock container by its alias -->
                                </links>
                                <log>
                                    <prefix>[dotCMS]</prefix>
                                    <color>blue</color>
                                </log>
                            </run>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <execution>
                        <id>cleanup-at-start</id>
                        <goals>
                            <goal>stop</goal>
                            <goal>remove</goal> <!-- 'remove' is the goal for removing containers, 'volume-remove' is for volumes -->
                        </goals>
                        <phase>pre-integration-test</phase>
                        <configuration>
                            <!-- Configure to remove volumes if needed, typically done via docker daemon settings or manually -->
                            <!-- <removeVolumes>${clean.docker.volumes}</removeVolumes> -->
                        </configuration>
                    </execution>
                    <execution>
                        <id>start</id>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <phase>pre-integration-test</phase>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <phase>post-integration-test</phase> <!-- Run after integration tests and verification -->
                    </execution>
                </executions>
            </plugin>
        </plugins>

    </build>

    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
            </plugin>
        </plugins>
    </reporting>

    <profiles>
        <profile>
            <id>prod</id>
            <activation>
                <property>
                    <name>prod</name>
                </property>
            </activation>
            <properties>
                <nx.build.options>--prod</nx.build.options>
                <yarn.install.cmd>--frozen-lockfile --prefer-offline</yarn.install.cmd>
            </properties>
            <build/>
        </profile>

        <profile>
            <id>do-nx-reset</id>
            <activation>
                <property>
                    <name>nx.reset</name>
                </property>
            </activation>
            <properties>
                <skip.nx.reset.execution>false</skip.nx.reset.execution>
            </properties>
        </profile>

        <profile>
            <id>validate</id>
            <properties>
                <skip.validate>false</skip.validate>
            </properties>
        </profile>

        <profile>
            <id>is_pr</id>
            <!-- Configuration specific to PRs -->
            <activation>
                <property>
                    <name>github.event.name</name>
                    <value>pull_request</value>
                </property>
            </activation>
            <properties>
                <git.origin.branch>origin/main</git.origin.branch>
                <nx.affected.options>--base=${git.origin.branch} --head=HEAD</nx.affected.options>
                <pretty.quick.options>--branch=${git.origin.branch}</pretty.quick.options>
                <skip.validate>false</skip.validate>
            </properties>
        </profile>

        <profile>
            <id>format</id>
            <build>
                <defaultGoal>generate-resources</defaultGoal>
                <plugins>
                    <plugin>
                        <groupId>com.github.eirslett</groupId>
                        <artifactId>frontend-maven-plugin</artifactId>
                        <configuration>
                            <!-- Base config defined in dotcms-core-web-parent -->
                        </configuration>
                        <executions>
                            <execution>
                                <id>auto-format</id>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>
                                <!-- optional: the default phase is "generate-resources" -->
                                <phase>generate-resources</phase>
                                <configuration>
                                    <skip>${skip.core-web.updates}</skip>
                                    <arguments>run format</arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>auto-lint</id>
                                <goals>
                                    <goal>yarn</goal>
                                </goals>
                                <!-- optional: the default phase is "generate-resources" -->
                                <phase>generate-resources</phase>
                                <configuration>
                                    <skip>${skip.core-web.updates}</skip>
                                    <arguments>ng lint</arguments>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>


</project>
