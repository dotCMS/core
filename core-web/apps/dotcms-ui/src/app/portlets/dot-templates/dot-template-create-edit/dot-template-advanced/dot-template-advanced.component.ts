import {
    Component,
    EventEmitter,
    OnDestroy,
    OnInit,
    Output,
    Input,
    SimpleChanges,
    OnChanges
} from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';

import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

import { DotContainer } from '@shared/models/container/dot-container.model';
import { DotTemplateItem } from '../store/dot-template.store';
import { DotPortletToolbarActions } from '@models/dot-portlet-toolbar.model/dot-portlet-toolbar-actions.model';
import { DotMessageService } from '@services/dot-message/dot-messages.service';

interface MonacoEditorOperation {
    range: number;
    text: string;
    forceMoveMarkers: boolean;
}

interface MonacoEditorInfo {
    name: string;
    editor: MonacoEditor;
}

interface MonacoEditor {
    getSelection: () => number;
    executeEdits: (action: string, data: MonacoEditorOperation[]) => void;
}

@Component({
    selector: 'dot-template-advanced',
    templateUrl: './dot-template-advanced.component.html',
    styleUrls: ['./dot-template-advanced.scss']
})
export class DotTemplateAdvancedComponent implements OnInit, OnDestroy, OnChanges {
    @Output() updateTemplate = new EventEmitter<DotTemplateItem>();
    @Output() save = new EventEmitter<DotTemplateItem>();
    @Output() cancel = new EventEmitter();

    @Input() body: string;
    @Input() didTemplateChanged: boolean;

    // `any` because the type of the editor in the ngx-monaco-editor package is not typed
    editor: MonacoEditor;
    form: UntypedFormGroup;
    actions: DotPortletToolbarActions;
    private destroy$: Subject<boolean> = new Subject<boolean>();

    constructor(private fb: UntypedFormBuilder, private dotMessageService: DotMessageService) {}

    ngOnInit(): void {
        this.form = this.fb.group({ body: this.body });

        this.form.valueChanges
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.updateTemplate.emit(this.form.value));

        this.actions = this.getActions(!this.didTemplateChanged);
    }

    ngOnChanges(changes: SimpleChanges) {
        if (changes.didTemplateChanged) {
            this.actions = this.getActions(!changes.didTemplateChanged.currentValue);
        }
    }

    ngOnDestroy(): void {
        this.destroy$.next(true);
        this.destroy$.complete();
    }

    /**
     * This method initializes the monaco editor
     *
     * @param {MonacoEditorInfo} editorInfo
     * @memberof DotTemplateComponent
     */
    initEditor(editorInfo: MonacoEditorInfo): void {
        this.editor = editorInfo.editor;
    }

    /**
     * This method handles the change event of the searchable selector and
     * inserts the container to the editor
     *
     * @param {DotContainer} container
     * @memberof DotTemplateComponent
     */
    containerChange(container: DotContainer): void {
        const selection = this.editor.getSelection();

        const id = this.setContainerId(container);

        const text = `## Container: ${
            container.name
        }\n## This is autogenerated code that cannot be changed\n#parseContainer('${id}','${Date.now()}')\n`;
        const operation = { range: selection, text: text, forceMoveMarkers: true };
        this.editor.executeEdits('source', [operation]);
    }

    private setContainerId({ identifier, parentPermissionable }: DotContainer): string {
        const regex = new RegExp('//' + parentPermissionable.hostname);

        return identifier?.includes(parentPermissionable.hostname)
            ? identifier.replace(regex, '')
            : identifier;
    }

    private getActions(disabled = true): DotPortletToolbarActions {
        return {
            primary: [
                {
                    label: this.dotMessageService.get('save'),
                    disabled: disabled,
                    command: () => {
                        this.save.emit(this.form.value);
                    }
                }
            ],
            cancel: () => {
                this.cancel.emit();
            }
        };
    }
}
