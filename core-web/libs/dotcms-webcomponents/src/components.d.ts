/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DotCMSContentlet, DotCMSContentTypeLayoutColumn, DotCMSContentTypeLayoutRow, DotContentState, DotHttpErrorResponse } from "../../dotcms-models/src/index";
import { DotBinaryFileEvent, DotFieldStatusEvent, DotFieldValueEvent, DotInputCalendarStatusEvent, DotKeyValueField } from "./models";
import { DotCardContentletEvent, DotCardContentletItem } from "./models/dot-card-contentlet.model";
import { DotContentletItem } from "./models/dot-contentlet-item.model";
import { DotContextMenuOption } from "./models/dot-context-menu.model";
import { DotContextMenuAction } from "./models/dot-context-menu-action.model";
import { DotSelectButtonOption } from "./models/dotSelectButtonOption";
export { DotCMSContentlet, DotCMSContentTypeLayoutColumn, DotCMSContentTypeLayoutRow, DotContentState, DotHttpErrorResponse } from "../../dotcms-models/src/index";
export { DotBinaryFileEvent, DotFieldStatusEvent, DotFieldValueEvent, DotInputCalendarStatusEvent, DotKeyValueField } from "./models";
export { DotCardContentletEvent, DotCardContentletItem } from "./models/dot-card-contentlet.model";
export { DotContentletItem } from "./models/dot-contentlet-item.model";
export { DotContextMenuOption } from "./models/dot-context-menu.model";
export { DotContextMenuAction } from "./models/dot-context-menu-action.model";
export { DotSelectButtonOption } from "./models/dotSelectButtonOption";
export namespace Components {
    interface DotAssetDropZone {
        /**
          * Allowed file extensions
         */
        "acceptTypes": string[];
        /**
          * Legend to be shown when creating dotAssets
         */
        "createAssetsText": string;
        "customUploadFiles": (props: {
        files: File[],
        onSuccess: () => void,
        updateProgress: (progress: number) => void,
        onError: (header: string, message: string) => void
    }) => Promise<any>;
        /**
          * Labels to be shown in error dialog
         */
        "dialogLabels": { closeButton: string; uploadErrorHeader: string; dotAssetErrorHeader: string; errorHeader: string; };
        "displayIndicator": boolean;
        /**
          * URL to endpoint to create dotAssets
         */
        "dotAssetsURL": string;
        /**
          * Legend to be shown when dropping files
         */
        "dropFilesText": string;
        /**
          * Specify the the folder where the dotAssets will be placed
         */
        "folder": string;
        /**
          * Specify the max size of each file to be uploaded
         */
        "maxFileSize": string;
        /**
          * Error to be shown when try to upload a bigger size file than allowed
         */
        "multiMaxSizeErrorLabel": string;
        /**
          * Error to be shown when try to upload a bigger size file than allowed
         */
        "singeMaxSizeErrorLabel": string;
        /**
          * Allowed file extensions
         */
        "typesErrorLabel": string;
        /**
          * Error to be shown when an error happened on the uploading process
         */
        "uploadErrorLabel": string;
        /**
          * Legend to be shown when uploading files
         */
        "uploadFileText": string;
    }
    interface DotAutocomplete {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data": () => Promise<string[]> | string[];
        /**
          * (optional) Duraction in ms to start search into the autocomplete
         */
        "debounce": number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional)  Max results to show after a autocomplete search
         */
        "maxResults": number;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder": string;
        /**
          * (optional)  Min characters to start search in the autocomplete input
         */
        "threshold": number;
    }
    interface DotBadge {
        "bgColor": string;
        "bordered": boolean;
        "color": string;
        "size": string;
    }
    /**
     * Represent a dotcms binary file control.
     * @export 
     * @class DotBinaryFileComponent
     */
    interface DotBinaryFile {
        /**
          * (optional) Text that be shown when the URL is not valid
         */
        "URLValidationMessage": string;
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept": string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel": string;
        /**
          * Clear value of selected file, when the endpoint fails.
         */
        "clearValue": () => Promise<void>;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "errorMessage": string;
        /**
          * (optional) Text that be shown when the file size is not valid
         */
        "fileSizeValidationMessage": string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Set the max file size limit
         */
        "maxFileLength": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder": string;
        /**
          * (optional) Name of the file uploaded
         */
        "previewImageName": string;
        /**
          * (optional) URL of the file uploaded
         */
        "previewImageUrl": string;
        /**
          * (optional) Determine if it is required
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage": string;
    }
    /**
     * Represent a dotcms text field for the binary file preview.
     * @export 
     * @class DotBinaryFilePreviewComponent
     */
    interface DotBinaryFilePreview {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel": string;
        /**
          * file name to be displayed
         */
        "fileName": string;
        /**
          * (optional) file URL to be displayed
         */
        "previewUrl": string;
    }
    /**
     * Represent a dotcms text field for the binary file element.
     * @export 
     * @class DotBinaryFile
     */
    interface DotBinaryTextField {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept": string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * Value specifies the value of the <input> element
         */
        "value": any;
    }
    /**
     * Represent a dotcms text field for the binary file element.
     * @export 
     * @class DotBinaryFile
     */
    interface DotBinaryUploadButton {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept": string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel": string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Set the max file size limit
         */
        "maxFileLength": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
    }
    interface DotCard {
    }
    interface DotCardContentlet {
        "checked": boolean;
        "hideMenu": () => Promise<void>;
        "iconSize": string;
        "item": DotCardContentletItem;
        "showMenu": (x: number, y: number) => Promise<void>;
        "showVideoThumbnail": boolean;
        "thumbnailSize": string;
    }
    interface DotCardView {
        "clearValue": () => Promise<void>;
        "getValue": () => Promise<DotContentletItem[]>;
        "items": DotCardContentletItem[];
        "showVideoThumbnail": boolean;
        "value": string;
    }
    interface DotCheckbox {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label checkbox options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotSelectComponent
         */
        "reset": () => Promise<void>;
        /**
          * Value set from the checkbox option
         */
        "value": string;
    }
    interface DotChip {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel": string;
        /**
          * (optional) If is true disabled the delete button
         */
        "disabled": boolean;
        /**
          * Chip's label
         */
        "label": string;
    }
    /**
     * Represent a mapping of legacy icons if DotCMS
     * @export 
     * @class DotFileIcon
     */
    interface DotContentletIcon {
        "icon": string;
        "size": string;
    }
    interface DotContentletLockIcon {
        "locked": boolean;
        "size": string;
    }
    interface DotContentletThumbnail {
        "alt": string;
        "contentlet": DotContentletItem;
        "cover": boolean;
        "height": string;
        "iconSize": string;
        "showVideoThumbnail": boolean;
        "width": string;
    }
    interface DotContextMenu {
        "fontSize": string;
        "hide": () => Promise<void>;
        "options": DotContextMenuOption<DotContextMenuAction>[];
        "show": (x: number, y: number, position?: string) => Promise<void>;
    }
    interface DotDataViewButton {
        "value": string;
    }
    interface DotDate {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step": string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage": string;
        /**
          * Value format yyyy-mm-dd  e.g., 2005-12-01
         */
        "value": string;
    }
    interface DotDateRange {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Date format used by the field when displayed
         */
        "displayFormat": string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max value that the field will allow to set
         */
        "max": string;
        /**
          * (optional) Min value that the field will allow to set
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Text to be rendered next to presets field
         */
        "presetLabel": string;
        /**
          * (optional) Array of date presets formatted as [{ label: 'PRESET_LABEL', days: NUMBER }]
         */
        "presets": { label: string; days: number; }[];
        /**
          * (optional) Determine if it is needed
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Value formatted with start and end date splitted with a comma
         */
        "value": string;
    }
    interface DotDateTime {
        /**
          * (optional) The string to use in the date label field
         */
        "dateLabel": string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the filed, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input fields date && time e.g., 2,10
         */
        "step": string;
        /**
          * (optional) The string to use in the time label field
         */
        "timeLabel": string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage": string;
        /**
          * Value format yyyy-mm-dd hh:mm:ss e.g., 2005-12-01 15:22:00
         */
        "value": string;
    }
    interface DotErrorMessage {
    }
    interface DotForm {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow": string;
        /**
          * Layout metada to be rendered
         */
        "layout": DotCMSContentTypeLayoutRow[];
        /**
          * (optional) Text to be rendered on Reset button
         */
        "resetLabel": string;
        /**
          * (optional) Text to be rendered on Submit button
         */
        "submitLabel": string;
        /**
          * Content type variable name
         */
        "variable": string;
    }
    interface DotFormColumn {
        /**
          * Fields metada to be rendered
         */
        "column": DotCMSContentTypeLayoutColumn;
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow": string;
    }
    interface DotFormRow {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow": string;
        /**
          * Fields metada to be rendered
         */
        "row": DotCMSContentTypeLayoutRow;
    }
    interface DotHtmlToImage {
        "height": string;
        "value": string;
        "width": string;
    }
    interface DotInputCalendar {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Max, maximum value that the field will allow to set, expect a Date Format
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set, expect a Date Format.
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step": string;
        /**
          * type specifies the type of input element to display
         */
        "type": string;
        /**
          * Value specifies the value of the input element
         */
        "value": string;
    }
    interface DotKeyValue {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "duplicatedKeyMessage": string;
        /**
          * (optional) Label for the add button in the key-value-form
         */
        "formAddButtonLabel": string;
        /**
          * (optional) The string to use in the key label in the key-value-form
         */
        "formKeyLabel": string;
        /**
          * (optional) Placeholder for the key input text in the key-value-form
         */
        "formKeyPlaceholder": string;
        /**
          * (optional) The string to use in the value label in the key-value-form
         */
        "formValueLabel": string;
        /**
          * (optional) Placeholder for the value input text in the key-value-form
         */
        "formValuePlaceholder": string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) The string to use in the delete button of a key/value item
         */
        "listDeleteLabel": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Allows unique keys only
         */
        "uniqueKeys": boolean;
        /**
          * Value of the field
         */
        "value": string;
        /**
          * (optional) The string containing the value to be parsed for whitelist key/value
         */
        "whiteList": string;
        /**
          * (optional) The string to use in the empty option of whitelist dropdown key/value item
         */
        "whiteListEmptyOptionLabel": string;
    }
    /**
     * Represent a dotcms label control.
     * @export 
     * @class DotLabelComponent
     */
    interface DotLabel {
        /**
          * (optional) Text to be rendered
         */
        "label": string;
        /**
          * (optional) Field name
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
    }
    interface DotMaterialIconPicker {
        /**
          * Label set for the input color
         */
        "colorLabel": string;
        /**
          * Color value set from the input
         */
        "colorValue": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value for input placeholder
         */
        "placeholder": string;
        /**
          * Show/Hide color picker
         */
        "showColor": string;
        /**
          * Size value set for font-size
         */
        "size": string;
        /**
          * Values that the auto-complete textbox should search for
         */
        "suggestionlist": string[];
        /**
          * Value set from the dropdown option
         */
        "value": string;
    }
    /**
     * Represent a dotcms multi select control.
     * @export 
     * @class DotSelectComponent
     */
    interface DotMultiSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotSelectComponent
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Size number of the multi-select dropdown (default=3)
         */
        "size": string;
        /**
          * Value set from the dropdown option
         */
        "value": string;
    }
    /**
     * Represent a dotCMS DotProgressBar control.
     * @export 
     * @class DotProgressBar
     */
    interface DotProgressBar {
        /**
          * indicates the progress to be show, a value 1 to 100
         */
        "progress": number;
        /**
          * text to be show bellow the progress bar
         */
        "text": string;
    }
    /**
     * Represent a dotcms radio control.
     * @export 
     * @class DotRadioComponent
     */
    interface DotRadio {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label ratio options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * Value set from the ratio option
         */
        "value": string;
    }
    /**
     * Represent a dotcms select control.
     * @export 
     * @class DotSelectComponent
     */
    interface DotSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotSelectComponent
         */
        "reset": () => Promise<void>;
        /**
          * Value set from the dropdown option
         */
        "value": string;
    }
    interface DotSelectButton {
        "options": DotSelectButtonOption[];
        "value": string;
    }
    interface DotStateIcon {
        "labels": { archived: string; published: string; revision: string; draft: string; };
        "size": string;
        "state": DotContentState;
    }
    interface DotTags {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data": () => Promise<string[]> | string[];
        /**
          * Duraction in ms to start search into the autocomplete
         */
        "debounce": number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and value is not set
         */
        "requiredMessage": string;
        /**
          * Reset properties of the filed, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * Min characters to start search in the autocomplete input
         */
        "threshold": number;
        /**
          * Value formatted splitted with a comma, for example: tag-1,tag-2
         */
        "value": string;
    }
    /**
     * Represent a dotcms textarea control.
     * @export 
     * @class DotTextareaComponent
     */
    interface DotTextarea {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to textarea element
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotTextareaComponent
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage": string;
        /**
          * Value specifies the value of the textarea element
         */
        "value": string;
    }
    /**
     * Represent a dotcms input control.
     * @export 
     * @class DotTextfieldComponent
     */
    interface DotTextfield {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder": string;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * type specifies the type of input element to display
         */
        "type": string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage": string;
        /**
          * Value specifies the value of the input element
         */
        "value": string;
    }
    interface DotTime {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be  hh:mm:ss
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be hh:mm:ss
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step": string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage": string;
        /**
          * Value format hh:mm:ss e.g., 15:22:00
         */
        "value": string;
    }
    interface DotTooltip {
        "content": string;
        "delay": number;
        "for": string;
        "position": string;
    }
    interface DotVideoThumbnail {
        /**
          * @type {DotContentletItem}
          * @memberof DotVideoThumbnail
         */
        "contentlet": DotContentletItem;
        /**
          * @type {boolean}
          * @memberof DotVideoThumbnail
         */
        "cover": boolean;
    }
    interface KeyValueForm {
        /**
          * (optional) Label for the add item button
         */
        "addButtonLabel": string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled": boolean;
        /**
          * (optional) Label for the empty option in white-list select
         */
        "emptyDropdownOptionLabel": string;
        /**
          * (optional) The string to use in the key input label
         */
        "keyLabel": string;
        /**
          * (optional) Placeholder for the key input text
         */
        "keyPlaceholder": string;
        /**
          * (optional) The string to use in the value input label
         */
        "valueLabel": string;
        /**
          * (optional) Placeholder for the value input text
         */
        "valuePlaceholder": string;
        /**
          * (optional) The string to use for white-list key/values
         */
        "whiteList": string;
    }
    interface KeyValueTable {
        /**
          * (optional) Label for the delete button in each item list
         */
        "buttonLabel": string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled": boolean;
        /**
          * (optional) Message to show when the list of items is empty
         */
        "emptyMessage": string;
        /**
          * (optional) Items to render in the list of key value
         */
        "items": DotKeyValueField[];
    }
}
export interface DotAssetDropZoneCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotAssetDropZoneElement;
}
export interface DotAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotAutocompleteElement;
}
export interface DotBinaryFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotBinaryFileElement;
}
export interface DotBinaryFilePreviewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotBinaryFilePreviewElement;
}
export interface DotBinaryTextFieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotBinaryTextFieldElement;
}
export interface DotBinaryUploadButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotBinaryUploadButtonElement;
}
export interface DotCardContentletCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotCardContentletElement;
}
export interface DotCardViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotCardViewElement;
}
export interface DotCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotCheckboxElement;
}
export interface DotChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotChipElement;
}
export interface DotDateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotDateElement;
}
export interface DotDateRangeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotDateRangeElement;
}
export interface DotDateTimeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotDateTimeElement;
}
export interface DotFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotFormElement;
}
export interface DotHtmlToImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotHtmlToImageElement;
}
export interface DotInputCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotInputCalendarElement;
}
export interface DotKeyValueCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotKeyValueElement;
}
export interface DotMaterialIconPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotMaterialIconPickerElement;
}
export interface DotMultiSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotMultiSelectElement;
}
export interface DotRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotRadioElement;
}
export interface DotSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotSelectElement;
}
export interface DotSelectButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotSelectButtonElement;
}
export interface DotTagsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotTagsElement;
}
export interface DotTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotTextareaElement;
}
export interface DotTextfieldCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotTextfieldElement;
}
export interface DotTimeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDotTimeElement;
}
export interface KeyValueFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKeyValueFormElement;
}
export interface KeyValueTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLKeyValueTableElement;
}
declare global {
    interface HTMLDotAssetDropZoneElementEventMap {
        "uploadComplete": DotCMSContentlet[] | DotHttpErrorResponse[] | any;
    }
    interface HTMLDotAssetDropZoneElement extends Components.DotAssetDropZone, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotAssetDropZoneElementEventMap>(type: K, listener: (this: HTMLDotAssetDropZoneElement, ev: DotAssetDropZoneCustomEvent<HTMLDotAssetDropZoneElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotAssetDropZoneElementEventMap>(type: K, listener: (this: HTMLDotAssetDropZoneElement, ev: DotAssetDropZoneCustomEvent<HTMLDotAssetDropZoneElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotAssetDropZoneElement: {
        prototype: HTMLDotAssetDropZoneElement;
        new (): HTMLDotAssetDropZoneElement;
    };
    interface HTMLDotAutocompleteElementEventMap {
        "selection": string;
        "enter": string;
        "lostFocus": FocusEvent;
    }
    interface HTMLDotAutocompleteElement extends Components.DotAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotAutocompleteElementEventMap>(type: K, listener: (this: HTMLDotAutocompleteElement, ev: DotAutocompleteCustomEvent<HTMLDotAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotAutocompleteElementEventMap>(type: K, listener: (this: HTMLDotAutocompleteElement, ev: DotAutocompleteCustomEvent<HTMLDotAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotAutocompleteElement: {
        prototype: HTMLDotAutocompleteElement;
        new (): HTMLDotAutocompleteElement;
    };
    interface HTMLDotBadgeElement extends Components.DotBadge, HTMLStencilElement {
    }
    var HTMLDotBadgeElement: {
        prototype: HTMLDotBadgeElement;
        new (): HTMLDotBadgeElement;
    };
    interface HTMLDotBinaryFileElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    /**
     * Represent a dotcms binary file control.
     * @export 
     * @class DotBinaryFileComponent
     */
    interface HTMLDotBinaryFileElement extends Components.DotBinaryFile, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotBinaryFileElementEventMap>(type: K, listener: (this: HTMLDotBinaryFileElement, ev: DotBinaryFileCustomEvent<HTMLDotBinaryFileElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotBinaryFileElementEventMap>(type: K, listener: (this: HTMLDotBinaryFileElement, ev: DotBinaryFileCustomEvent<HTMLDotBinaryFileElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotBinaryFileElement: {
        prototype: HTMLDotBinaryFileElement;
        new (): HTMLDotBinaryFileElement;
    };
    interface HTMLDotBinaryFilePreviewElementEventMap {
        "delete": any;
    }
    /**
     * Represent a dotcms text field for the binary file preview.
     * @export 
     * @class DotBinaryFilePreviewComponent
     */
    interface HTMLDotBinaryFilePreviewElement extends Components.DotBinaryFilePreview, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotBinaryFilePreviewElementEventMap>(type: K, listener: (this: HTMLDotBinaryFilePreviewElement, ev: DotBinaryFilePreviewCustomEvent<HTMLDotBinaryFilePreviewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotBinaryFilePreviewElementEventMap>(type: K, listener: (this: HTMLDotBinaryFilePreviewElement, ev: DotBinaryFilePreviewCustomEvent<HTMLDotBinaryFilePreviewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotBinaryFilePreviewElement: {
        prototype: HTMLDotBinaryFilePreviewElement;
        new (): HTMLDotBinaryFilePreviewElement;
    };
    interface HTMLDotBinaryTextFieldElementEventMap {
        "fileChange": DotBinaryFileEvent;
        "lostFocus": any;
    }
    /**
     * Represent a dotcms text field for the binary file element.
     * @export 
     * @class DotBinaryFile
     */
    interface HTMLDotBinaryTextFieldElement extends Components.DotBinaryTextField, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotBinaryTextFieldElementEventMap>(type: K, listener: (this: HTMLDotBinaryTextFieldElement, ev: DotBinaryTextFieldCustomEvent<HTMLDotBinaryTextFieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotBinaryTextFieldElementEventMap>(type: K, listener: (this: HTMLDotBinaryTextFieldElement, ev: DotBinaryTextFieldCustomEvent<HTMLDotBinaryTextFieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotBinaryTextFieldElement: {
        prototype: HTMLDotBinaryTextFieldElement;
        new (): HTMLDotBinaryTextFieldElement;
    };
    interface HTMLDotBinaryUploadButtonElementEventMap {
        "fileChange": DotBinaryFileEvent;
    }
    /**
     * Represent a dotcms text field for the binary file element.
     * @export 
     * @class DotBinaryFile
     */
    interface HTMLDotBinaryUploadButtonElement extends Components.DotBinaryUploadButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotBinaryUploadButtonElementEventMap>(type: K, listener: (this: HTMLDotBinaryUploadButtonElement, ev: DotBinaryUploadButtonCustomEvent<HTMLDotBinaryUploadButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotBinaryUploadButtonElementEventMap>(type: K, listener: (this: HTMLDotBinaryUploadButtonElement, ev: DotBinaryUploadButtonCustomEvent<HTMLDotBinaryUploadButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotBinaryUploadButtonElement: {
        prototype: HTMLDotBinaryUploadButtonElement;
        new (): HTMLDotBinaryUploadButtonElement;
    };
    interface HTMLDotCardElement extends Components.DotCard, HTMLStencilElement {
    }
    var HTMLDotCardElement: {
        prototype: HTMLDotCardElement;
        new (): HTMLDotCardElement;
    };
    interface HTMLDotCardContentletElementEventMap {
        "checkboxChange": DotCardContentletEvent;
        "contextMenuClick": MouseEvent;
    }
    interface HTMLDotCardContentletElement extends Components.DotCardContentlet, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotCardContentletElementEventMap>(type: K, listener: (this: HTMLDotCardContentletElement, ev: DotCardContentletCustomEvent<HTMLDotCardContentletElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotCardContentletElementEventMap>(type: K, listener: (this: HTMLDotCardContentletElement, ev: DotCardContentletCustomEvent<HTMLDotCardContentletElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotCardContentletElement: {
        prototype: HTMLDotCardContentletElement;
        new (): HTMLDotCardContentletElement;
    };
    interface HTMLDotCardViewElementEventMap {
        "selected": any;
        "cardClick": any;
    }
    interface HTMLDotCardViewElement extends Components.DotCardView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotCardViewElementEventMap>(type: K, listener: (this: HTMLDotCardViewElement, ev: DotCardViewCustomEvent<HTMLDotCardViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotCardViewElementEventMap>(type: K, listener: (this: HTMLDotCardViewElement, ev: DotCardViewCustomEvent<HTMLDotCardViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotCardViewElement: {
        prototype: HTMLDotCardViewElement;
        new (): HTMLDotCardViewElement;
    };
    interface HTMLDotCheckboxElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    interface HTMLDotCheckboxElement extends Components.DotCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotCheckboxElementEventMap>(type: K, listener: (this: HTMLDotCheckboxElement, ev: DotCheckboxCustomEvent<HTMLDotCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotCheckboxElementEventMap>(type: K, listener: (this: HTMLDotCheckboxElement, ev: DotCheckboxCustomEvent<HTMLDotCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotCheckboxElement: {
        prototype: HTMLDotCheckboxElement;
        new (): HTMLDotCheckboxElement;
    };
    interface HTMLDotChipElementEventMap {
        "remove": String;
    }
    interface HTMLDotChipElement extends Components.DotChip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotChipElementEventMap>(type: K, listener: (this: HTMLDotChipElement, ev: DotChipCustomEvent<HTMLDotChipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotChipElementEventMap>(type: K, listener: (this: HTMLDotChipElement, ev: DotChipCustomEvent<HTMLDotChipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotChipElement: {
        prototype: HTMLDotChipElement;
        new (): HTMLDotChipElement;
    };
    /**
     * Represent a mapping of legacy icons if DotCMS
     * @export 
     * @class DotFileIcon
     */
    interface HTMLDotContentletIconElement extends Components.DotContentletIcon, HTMLStencilElement {
    }
    var HTMLDotContentletIconElement: {
        prototype: HTMLDotContentletIconElement;
        new (): HTMLDotContentletIconElement;
    };
    interface HTMLDotContentletLockIconElement extends Components.DotContentletLockIcon, HTMLStencilElement {
    }
    var HTMLDotContentletLockIconElement: {
        prototype: HTMLDotContentletLockIconElement;
        new (): HTMLDotContentletLockIconElement;
    };
    interface HTMLDotContentletThumbnailElement extends Components.DotContentletThumbnail, HTMLStencilElement {
    }
    var HTMLDotContentletThumbnailElement: {
        prototype: HTMLDotContentletThumbnailElement;
        new (): HTMLDotContentletThumbnailElement;
    };
    interface HTMLDotContextMenuElement extends Components.DotContextMenu, HTMLStencilElement {
    }
    var HTMLDotContextMenuElement: {
        prototype: HTMLDotContextMenuElement;
        new (): HTMLDotContextMenuElement;
    };
    interface HTMLDotDataViewButtonElement extends Components.DotDataViewButton, HTMLStencilElement {
    }
    var HTMLDotDataViewButtonElement: {
        prototype: HTMLDotDataViewButtonElement;
        new (): HTMLDotDataViewButtonElement;
    };
    interface HTMLDotDateElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    interface HTMLDotDateElement extends Components.DotDate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotDateElementEventMap>(type: K, listener: (this: HTMLDotDateElement, ev: DotDateCustomEvent<HTMLDotDateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotDateElementEventMap>(type: K, listener: (this: HTMLDotDateElement, ev: DotDateCustomEvent<HTMLDotDateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotDateElement: {
        prototype: HTMLDotDateElement;
        new (): HTMLDotDateElement;
    };
    interface HTMLDotDateRangeElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    interface HTMLDotDateRangeElement extends Components.DotDateRange, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotDateRangeElementEventMap>(type: K, listener: (this: HTMLDotDateRangeElement, ev: DotDateRangeCustomEvent<HTMLDotDateRangeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotDateRangeElementEventMap>(type: K, listener: (this: HTMLDotDateRangeElement, ev: DotDateRangeCustomEvent<HTMLDotDateRangeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotDateRangeElement: {
        prototype: HTMLDotDateRangeElement;
        new (): HTMLDotDateRangeElement;
    };
    interface HTMLDotDateTimeElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    interface HTMLDotDateTimeElement extends Components.DotDateTime, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotDateTimeElementEventMap>(type: K, listener: (this: HTMLDotDateTimeElement, ev: DotDateTimeCustomEvent<HTMLDotDateTimeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotDateTimeElementEventMap>(type: K, listener: (this: HTMLDotDateTimeElement, ev: DotDateTimeCustomEvent<HTMLDotDateTimeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotDateTimeElement: {
        prototype: HTMLDotDateTimeElement;
        new (): HTMLDotDateTimeElement;
    };
    interface HTMLDotErrorMessageElement extends Components.DotErrorMessage, HTMLStencilElement {
    }
    var HTMLDotErrorMessageElement: {
        prototype: HTMLDotErrorMessageElement;
        new (): HTMLDotErrorMessageElement;
    };
    interface HTMLDotFormElementEventMap {
        "submit": DotCMSContentlet;
    }
    interface HTMLDotFormElement extends Components.DotForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotFormElementEventMap>(type: K, listener: (this: HTMLDotFormElement, ev: DotFormCustomEvent<HTMLDotFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotFormElementEventMap>(type: K, listener: (this: HTMLDotFormElement, ev: DotFormCustomEvent<HTMLDotFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotFormElement: {
        prototype: HTMLDotFormElement;
        new (): HTMLDotFormElement;
    };
    interface HTMLDotFormColumnElement extends Components.DotFormColumn, HTMLStencilElement {
    }
    var HTMLDotFormColumnElement: {
        prototype: HTMLDotFormColumnElement;
        new (): HTMLDotFormColumnElement;
    };
    interface HTMLDotFormRowElement extends Components.DotFormRow, HTMLStencilElement {
    }
    var HTMLDotFormRowElement: {
        prototype: HTMLDotFormRowElement;
        new (): HTMLDotFormRowElement;
    };
    interface HTMLDotHtmlToImageElementEventMap {
        "pageThumbnail": {
        file: File;
        error?: string;
    };
    }
    interface HTMLDotHtmlToImageElement extends Components.DotHtmlToImage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotHtmlToImageElementEventMap>(type: K, listener: (this: HTMLDotHtmlToImageElement, ev: DotHtmlToImageCustomEvent<HTMLDotHtmlToImageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotHtmlToImageElementEventMap>(type: K, listener: (this: HTMLDotHtmlToImageElement, ev: DotHtmlToImageCustomEvent<HTMLDotHtmlToImageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotHtmlToImageElement: {
        prototype: HTMLDotHtmlToImageElement;
        new (): HTMLDotHtmlToImageElement;
    };
    interface HTMLDotInputCalendarElementEventMap {
        "_dotValueChange": DotFieldValueEvent;
        "_dotStatusChange": DotInputCalendarStatusEvent;
    }
    interface HTMLDotInputCalendarElement extends Components.DotInputCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotInputCalendarElementEventMap>(type: K, listener: (this: HTMLDotInputCalendarElement, ev: DotInputCalendarCustomEvent<HTMLDotInputCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotInputCalendarElementEventMap>(type: K, listener: (this: HTMLDotInputCalendarElement, ev: DotInputCalendarCustomEvent<HTMLDotInputCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotInputCalendarElement: {
        prototype: HTMLDotInputCalendarElement;
        new (): HTMLDotInputCalendarElement;
    };
    interface HTMLDotKeyValueElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    interface HTMLDotKeyValueElement extends Components.DotKeyValue, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotKeyValueElementEventMap>(type: K, listener: (this: HTMLDotKeyValueElement, ev: DotKeyValueCustomEvent<HTMLDotKeyValueElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotKeyValueElementEventMap>(type: K, listener: (this: HTMLDotKeyValueElement, ev: DotKeyValueCustomEvent<HTMLDotKeyValueElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotKeyValueElement: {
        prototype: HTMLDotKeyValueElement;
        new (): HTMLDotKeyValueElement;
    };
    /**
     * Represent a dotcms label control.
     * @export 
     * @class DotLabelComponent
     */
    interface HTMLDotLabelElement extends Components.DotLabel, HTMLStencilElement {
    }
    var HTMLDotLabelElement: {
        prototype: HTMLDotLabelElement;
        new (): HTMLDotLabelElement;
    };
    interface HTMLDotMaterialIconPickerElementEventMap {
        "dotValueChange": { name: string; value: string; colorValue: string };
    }
    interface HTMLDotMaterialIconPickerElement extends Components.DotMaterialIconPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotMaterialIconPickerElementEventMap>(type: K, listener: (this: HTMLDotMaterialIconPickerElement, ev: DotMaterialIconPickerCustomEvent<HTMLDotMaterialIconPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotMaterialIconPickerElementEventMap>(type: K, listener: (this: HTMLDotMaterialIconPickerElement, ev: DotMaterialIconPickerCustomEvent<HTMLDotMaterialIconPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotMaterialIconPickerElement: {
        prototype: HTMLDotMaterialIconPickerElement;
        new (): HTMLDotMaterialIconPickerElement;
    };
    interface HTMLDotMultiSelectElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    /**
     * Represent a dotcms multi select control.
     * @export 
     * @class DotSelectComponent
     */
    interface HTMLDotMultiSelectElement extends Components.DotMultiSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotMultiSelectElementEventMap>(type: K, listener: (this: HTMLDotMultiSelectElement, ev: DotMultiSelectCustomEvent<HTMLDotMultiSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotMultiSelectElementEventMap>(type: K, listener: (this: HTMLDotMultiSelectElement, ev: DotMultiSelectCustomEvent<HTMLDotMultiSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotMultiSelectElement: {
        prototype: HTMLDotMultiSelectElement;
        new (): HTMLDotMultiSelectElement;
    };
    /**
     * Represent a dotCMS DotProgressBar control.
     * @export 
     * @class DotProgressBar
     */
    interface HTMLDotProgressBarElement extends Components.DotProgressBar, HTMLStencilElement {
    }
    var HTMLDotProgressBarElement: {
        prototype: HTMLDotProgressBarElement;
        new (): HTMLDotProgressBarElement;
    };
    interface HTMLDotRadioElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    /**
     * Represent a dotcms radio control.
     * @export 
     * @class DotRadioComponent
     */
    interface HTMLDotRadioElement extends Components.DotRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotRadioElementEventMap>(type: K, listener: (this: HTMLDotRadioElement, ev: DotRadioCustomEvent<HTMLDotRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotRadioElementEventMap>(type: K, listener: (this: HTMLDotRadioElement, ev: DotRadioCustomEvent<HTMLDotRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotRadioElement: {
        prototype: HTMLDotRadioElement;
        new (): HTMLDotRadioElement;
    };
    interface HTMLDotSelectElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    /**
     * Represent a dotcms select control.
     * @export 
     * @class DotSelectComponent
     */
    interface HTMLDotSelectElement extends Components.DotSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotSelectElementEventMap>(type: K, listener: (this: HTMLDotSelectElement, ev: DotSelectCustomEvent<HTMLDotSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotSelectElementEventMap>(type: K, listener: (this: HTMLDotSelectElement, ev: DotSelectCustomEvent<HTMLDotSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotSelectElement: {
        prototype: HTMLDotSelectElement;
        new (): HTMLDotSelectElement;
    };
    interface HTMLDotSelectButtonElementEventMap {
        "selected": string;
    }
    interface HTMLDotSelectButtonElement extends Components.DotSelectButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotSelectButtonElementEventMap>(type: K, listener: (this: HTMLDotSelectButtonElement, ev: DotSelectButtonCustomEvent<HTMLDotSelectButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotSelectButtonElementEventMap>(type: K, listener: (this: HTMLDotSelectButtonElement, ev: DotSelectButtonCustomEvent<HTMLDotSelectButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotSelectButtonElement: {
        prototype: HTMLDotSelectButtonElement;
        new (): HTMLDotSelectButtonElement;
    };
    interface HTMLDotStateIconElement extends Components.DotStateIcon, HTMLStencilElement {
    }
    var HTMLDotStateIconElement: {
        prototype: HTMLDotStateIconElement;
        new (): HTMLDotStateIconElement;
    };
    interface HTMLDotTagsElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    interface HTMLDotTagsElement extends Components.DotTags, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotTagsElementEventMap>(type: K, listener: (this: HTMLDotTagsElement, ev: DotTagsCustomEvent<HTMLDotTagsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotTagsElementEventMap>(type: K, listener: (this: HTMLDotTagsElement, ev: DotTagsCustomEvent<HTMLDotTagsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotTagsElement: {
        prototype: HTMLDotTagsElement;
        new (): HTMLDotTagsElement;
    };
    interface HTMLDotTextareaElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    /**
     * Represent a dotcms textarea control.
     * @export 
     * @class DotTextareaComponent
     */
    interface HTMLDotTextareaElement extends Components.DotTextarea, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotTextareaElementEventMap>(type: K, listener: (this: HTMLDotTextareaElement, ev: DotTextareaCustomEvent<HTMLDotTextareaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotTextareaElementEventMap>(type: K, listener: (this: HTMLDotTextareaElement, ev: DotTextareaCustomEvent<HTMLDotTextareaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotTextareaElement: {
        prototype: HTMLDotTextareaElement;
        new (): HTMLDotTextareaElement;
    };
    interface HTMLDotTextfieldElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    /**
     * Represent a dotcms input control.
     * @export 
     * @class DotTextfieldComponent
     */
    interface HTMLDotTextfieldElement extends Components.DotTextfield, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotTextfieldElementEventMap>(type: K, listener: (this: HTMLDotTextfieldElement, ev: DotTextfieldCustomEvent<HTMLDotTextfieldElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotTextfieldElementEventMap>(type: K, listener: (this: HTMLDotTextfieldElement, ev: DotTextfieldCustomEvent<HTMLDotTextfieldElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotTextfieldElement: {
        prototype: HTMLDotTextfieldElement;
        new (): HTMLDotTextfieldElement;
    };
    interface HTMLDotTimeElementEventMap {
        "dotValueChange": DotFieldValueEvent;
        "dotStatusChange": DotFieldStatusEvent;
    }
    interface HTMLDotTimeElement extends Components.DotTime, HTMLStencilElement {
        addEventListener<K extends keyof HTMLDotTimeElementEventMap>(type: K, listener: (this: HTMLDotTimeElement, ev: DotTimeCustomEvent<HTMLDotTimeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLDotTimeElementEventMap>(type: K, listener: (this: HTMLDotTimeElement, ev: DotTimeCustomEvent<HTMLDotTimeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLDotTimeElement: {
        prototype: HTMLDotTimeElement;
        new (): HTMLDotTimeElement;
    };
    interface HTMLDotTooltipElement extends Components.DotTooltip, HTMLStencilElement {
    }
    var HTMLDotTooltipElement: {
        prototype: HTMLDotTooltipElement;
        new (): HTMLDotTooltipElement;
    };
    interface HTMLDotVideoThumbnailElement extends Components.DotVideoThumbnail, HTMLStencilElement {
    }
    var HTMLDotVideoThumbnailElement: {
        prototype: HTMLDotVideoThumbnailElement;
        new (): HTMLDotVideoThumbnailElement;
    };
    interface HTMLKeyValueFormElementEventMap {
        "add": DotKeyValueField;
        "keyChanged": string;
        "lostFocus": FocusEvent;
    }
    interface HTMLKeyValueFormElement extends Components.KeyValueForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKeyValueFormElementEventMap>(type: K, listener: (this: HTMLKeyValueFormElement, ev: KeyValueFormCustomEvent<HTMLKeyValueFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKeyValueFormElementEventMap>(type: K, listener: (this: HTMLKeyValueFormElement, ev: KeyValueFormCustomEvent<HTMLKeyValueFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKeyValueFormElement: {
        prototype: HTMLKeyValueFormElement;
        new (): HTMLKeyValueFormElement;
    };
    interface HTMLKeyValueTableElementEventMap {
        "delete": number;
        "reorder": any;
    }
    interface HTMLKeyValueTableElement extends Components.KeyValueTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLKeyValueTableElementEventMap>(type: K, listener: (this: HTMLKeyValueTableElement, ev: KeyValueTableCustomEvent<HTMLKeyValueTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLKeyValueTableElementEventMap>(type: K, listener: (this: HTMLKeyValueTableElement, ev: KeyValueTableCustomEvent<HTMLKeyValueTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLKeyValueTableElement: {
        prototype: HTMLKeyValueTableElement;
        new (): HTMLKeyValueTableElement;
    };
    interface HTMLElementTagNameMap {
        "dot-asset-drop-zone": HTMLDotAssetDropZoneElement;
        "dot-autocomplete": HTMLDotAutocompleteElement;
        "dot-badge": HTMLDotBadgeElement;
        "dot-binary-file": HTMLDotBinaryFileElement;
        "dot-binary-file-preview": HTMLDotBinaryFilePreviewElement;
        "dot-binary-text-field": HTMLDotBinaryTextFieldElement;
        "dot-binary-upload-button": HTMLDotBinaryUploadButtonElement;
        "dot-card": HTMLDotCardElement;
        "dot-card-contentlet": HTMLDotCardContentletElement;
        "dot-card-view": HTMLDotCardViewElement;
        "dot-checkbox": HTMLDotCheckboxElement;
        "dot-chip": HTMLDotChipElement;
        "dot-contentlet-icon": HTMLDotContentletIconElement;
        "dot-contentlet-lock-icon": HTMLDotContentletLockIconElement;
        "dot-contentlet-thumbnail": HTMLDotContentletThumbnailElement;
        "dot-context-menu": HTMLDotContextMenuElement;
        "dot-data-view-button": HTMLDotDataViewButtonElement;
        "dot-date": HTMLDotDateElement;
        "dot-date-range": HTMLDotDateRangeElement;
        "dot-date-time": HTMLDotDateTimeElement;
        "dot-error-message": HTMLDotErrorMessageElement;
        "dot-form": HTMLDotFormElement;
        "dot-form-column": HTMLDotFormColumnElement;
        "dot-form-row": HTMLDotFormRowElement;
        "dot-html-to-image": HTMLDotHtmlToImageElement;
        "dot-input-calendar": HTMLDotInputCalendarElement;
        "dot-key-value": HTMLDotKeyValueElement;
        "dot-label": HTMLDotLabelElement;
        "dot-material-icon-picker": HTMLDotMaterialIconPickerElement;
        "dot-multi-select": HTMLDotMultiSelectElement;
        "dot-progress-bar": HTMLDotProgressBarElement;
        "dot-radio": HTMLDotRadioElement;
        "dot-select": HTMLDotSelectElement;
        "dot-select-button": HTMLDotSelectButtonElement;
        "dot-state-icon": HTMLDotStateIconElement;
        "dot-tags": HTMLDotTagsElement;
        "dot-textarea": HTMLDotTextareaElement;
        "dot-textfield": HTMLDotTextfieldElement;
        "dot-time": HTMLDotTimeElement;
        "dot-tooltip": HTMLDotTooltipElement;
        "dot-video-thumbnail": HTMLDotVideoThumbnailElement;
        "key-value-form": HTMLKeyValueFormElement;
        "key-value-table": HTMLKeyValueTableElement;
    }
}
declare namespace LocalJSX {
    interface DotAssetDropZone {
        /**
          * Allowed file extensions
         */
        "acceptTypes"?: string[];
        /**
          * Legend to be shown when creating dotAssets
         */
        "createAssetsText"?: string;
        "customUploadFiles"?: (props: {
        files: File[],
        onSuccess: () => void,
        updateProgress: (progress: number) => void,
        onError: (header: string, message: string) => void
    }) => Promise<any>;
        /**
          * Labels to be shown in error dialog
         */
        "dialogLabels"?: { closeButton: string; uploadErrorHeader: string; dotAssetErrorHeader: string; errorHeader: string; };
        "displayIndicator"?: boolean;
        /**
          * URL to endpoint to create dotAssets
         */
        "dotAssetsURL"?: string;
        /**
          * Legend to be shown when dropping files
         */
        "dropFilesText"?: string;
        /**
          * Specify the the folder where the dotAssets will be placed
         */
        "folder"?: string;
        /**
          * Specify the max size of each file to be uploaded
         */
        "maxFileSize"?: string;
        /**
          * Error to be shown when try to upload a bigger size file than allowed
         */
        "multiMaxSizeErrorLabel"?: string;
        /**
          * Emit an array of Contentlets just created or array of errors
         */
        "onUploadComplete"?: (event: DotAssetDropZoneCustomEvent<DotCMSContentlet[] | DotHttpErrorResponse[] | any>) => void;
        /**
          * Error to be shown when try to upload a bigger size file than allowed
         */
        "singeMaxSizeErrorLabel"?: string;
        /**
          * Allowed file extensions
         */
        "typesErrorLabel"?: string;
        /**
          * Error to be shown when an error happened on the uploading process
         */
        "uploadErrorLabel"?: string;
        /**
          * Legend to be shown when uploading files
         */
        "uploadFileText"?: string;
    }
    interface DotAutocomplete {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data"?: () => Promise<string[]> | string[];
        /**
          * (optional) Duraction in ms to start search into the autocomplete
         */
        "debounce"?: number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional)  Max results to show after a autocomplete search
         */
        "maxResults"?: number;
        "onEnter"?: (event: DotAutocompleteCustomEvent<string>) => void;
        "onLostFocus"?: (event: DotAutocompleteCustomEvent<FocusEvent>) => void;
        "onSelection"?: (event: DotAutocompleteCustomEvent<string>) => void;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder"?: string;
        /**
          * (optional)  Min characters to start search in the autocomplete input
         */
        "threshold"?: number;
    }
    interface DotBadge {
        "bgColor"?: string;
        "bordered"?: boolean;
        "color"?: string;
        "size"?: string;
    }
    /**
     * Represent a dotcms binary file control.
     * @export 
     * @class DotBinaryFileComponent
     */
    interface DotBinaryFile {
        /**
          * (optional) Text that be shown when the URL is not valid
         */
        "URLValidationMessage"?: string;
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept"?: string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "errorMessage"?: string;
        /**
          * (optional) Text that be shown when the file size is not valid
         */
        "fileSizeValidationMessage"?: string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Set the max file size limit
         */
        "maxFileLength"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotBinaryFileCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotBinaryFileCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder"?: string;
        /**
          * (optional) Name of the file uploaded
         */
        "previewImageName"?: string;
        /**
          * (optional) URL of the file uploaded
         */
        "previewImageUrl"?: string;
        /**
          * (optional) Determine if it is required
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage"?: string;
    }
    /**
     * Represent a dotcms text field for the binary file preview.
     * @export 
     * @class DotBinaryFilePreviewComponent
     */
    interface DotBinaryFilePreview {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel"?: string;
        /**
          * file name to be displayed
         */
        "fileName"?: string;
        /**
          * Emit when the file is deleted
         */
        "onDelete"?: (event: DotBinaryFilePreviewCustomEvent<any>) => void;
        /**
          * (optional) file URL to be displayed
         */
        "previewUrl"?: string;
    }
    /**
     * Represent a dotcms text field for the binary file element.
     * @export 
     * @class DotBinaryFile
     */
    interface DotBinaryTextField {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        "onFileChange"?: (event: DotBinaryTextFieldCustomEvent<DotBinaryFileEvent>) => void;
        "onLostFocus"?: (event: DotBinaryTextFieldCustomEvent<any>) => void;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * Value specifies the value of the <input> element
         */
        "value"?: any;
    }
    /**
     * Represent a dotcms text field for the binary file element.
     * @export 
     * @class DotBinaryFile
     */
    interface DotBinaryUploadButton {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept"?: string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Set the max file size limit
         */
        "maxFileLength"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onFileChange"?: (event: DotBinaryUploadButtonCustomEvent<DotBinaryFileEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
    }
    interface DotCard {
    }
    interface DotCardContentlet {
        "checked"?: boolean;
        "iconSize"?: string;
        "item"?: DotCardContentletItem;
        "onCheckboxChange"?: (event: DotCardContentletCustomEvent<DotCardContentletEvent>) => void;
        "onContextMenuClick"?: (event: DotCardContentletCustomEvent<MouseEvent>) => void;
        "showVideoThumbnail"?: boolean;
        "thumbnailSize"?: string;
    }
    interface DotCardView {
        "items"?: DotCardContentletItem[];
        "onCardClick"?: (event: DotCardViewCustomEvent<any>) => void;
        "onSelected"?: (event: DotCardViewCustomEvent<any>) => void;
        "showVideoThumbnail"?: boolean;
        "value"?: string;
    }
    interface DotCheckbox {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotCheckboxCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotCheckboxCustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label checkbox options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * Value set from the checkbox option
         */
        "value"?: string;
    }
    interface DotChip {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel"?: string;
        /**
          * (optional) If is true disabled the delete button
         */
        "disabled"?: boolean;
        /**
          * Chip's label
         */
        "label"?: string;
        "onRemove"?: (event: DotChipCustomEvent<String>) => void;
    }
    /**
     * Represent a mapping of legacy icons if DotCMS
     * @export 
     * @class DotFileIcon
     */
    interface DotContentletIcon {
        "icon"?: string;
        "size"?: string;
    }
    interface DotContentletLockIcon {
        "locked"?: boolean;
        "size"?: string;
    }
    interface DotContentletThumbnail {
        "alt"?: string;
        "contentlet"?: DotContentletItem;
        "cover"?: boolean;
        "height"?: string;
        "iconSize"?: string;
        "showVideoThumbnail"?: boolean;
        "width"?: string;
    }
    interface DotContextMenu {
        "fontSize"?: string;
        "options"?: DotContextMenuOption<DotContextMenuAction>[];
    }
    interface DotDataViewButton {
        "value"?: string;
    }
    interface DotDate {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotDateCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotDateCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step"?: string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage"?: string;
        /**
          * Value format yyyy-mm-dd  e.g., 2005-12-01
         */
        "value"?: string;
    }
    interface DotDateRange {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Date format used by the field when displayed
         */
        "displayFormat"?: string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max value that the field will allow to set
         */
        "max"?: string;
        /**
          * (optional) Min value that the field will allow to set
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotDateRangeCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotDateRangeCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Text to be rendered next to presets field
         */
        "presetLabel"?: string;
        /**
          * (optional) Array of date presets formatted as [{ label: 'PRESET_LABEL', days: NUMBER }]
         */
        "presets"?: { label: string; days: number; }[];
        /**
          * (optional) Determine if it is needed
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Value formatted with start and end date splitted with a comma
         */
        "value"?: string;
    }
    interface DotDateTime {
        /**
          * (optional) The string to use in the date label field
         */
        "dateLabel"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotDateTimeCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotDateTimeCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Step specifies the legal number intervals for the input fields date && time e.g., 2,10
         */
        "step"?: string;
        /**
          * (optional) The string to use in the time label field
         */
        "timeLabel"?: string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage"?: string;
        /**
          * Value format yyyy-mm-dd hh:mm:ss e.g., 2005-12-01 15:22:00
         */
        "value"?: string;
    }
    interface DotErrorMessage {
    }
    interface DotForm {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow"?: string;
        /**
          * Layout metada to be rendered
         */
        "layout"?: DotCMSContentTypeLayoutRow[];
        /**
          * Emit when submit the form
         */
        "onSubmit"?: (event: DotFormCustomEvent<DotCMSContentlet>) => void;
        /**
          * (optional) Text to be rendered on Reset button
         */
        "resetLabel"?: string;
        /**
          * (optional) Text to be rendered on Submit button
         */
        "submitLabel"?: string;
        /**
          * Content type variable name
         */
        "variable"?: string;
    }
    interface DotFormColumn {
        /**
          * Fields metada to be rendered
         */
        "column"?: DotCMSContentTypeLayoutColumn;
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow"?: string;
    }
    interface DotFormRow {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow"?: string;
        /**
          * Fields metada to be rendered
         */
        "row"?: DotCMSContentTypeLayoutRow;
    }
    interface DotHtmlToImage {
        "height"?: string;
        "onPageThumbnail"?: (event: DotHtmlToImageCustomEvent<{
        file: File;
        error?: string;
    }>) => void;
        "value"?: string;
        "width"?: string;
    }
    interface DotInputCalendar {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Max, maximum value that the field will allow to set, expect a Date Format
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set, expect a Date Format.
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "on_dotStatusChange"?: (event: DotInputCalendarCustomEvent<DotInputCalendarStatusEvent>) => void;
        "on_dotValueChange"?: (event: DotInputCalendarCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step"?: string;
        /**
          * type specifies the type of input element to display
         */
        "type"?: string;
        /**
          * Value specifies the value of the input element
         */
        "value"?: string;
    }
    interface DotKeyValue {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "duplicatedKeyMessage"?: string;
        /**
          * (optional) Label for the add button in the key-value-form
         */
        "formAddButtonLabel"?: string;
        /**
          * (optional) The string to use in the key label in the key-value-form
         */
        "formKeyLabel"?: string;
        /**
          * (optional) Placeholder for the key input text in the key-value-form
         */
        "formKeyPlaceholder"?: string;
        /**
          * (optional) The string to use in the value label in the key-value-form
         */
        "formValueLabel"?: string;
        /**
          * (optional) Placeholder for the value input text in the key-value-form
         */
        "formValuePlaceholder"?: string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) The string to use in the delete button of a key/value item
         */
        "listDeleteLabel"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotKeyValueCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotKeyValueCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Allows unique keys only
         */
        "uniqueKeys"?: boolean;
        /**
          * Value of the field
         */
        "value"?: string;
        /**
          * (optional) The string containing the value to be parsed for whitelist key/value
         */
        "whiteList"?: string;
        /**
          * (optional) The string to use in the empty option of whitelist dropdown key/value item
         */
        "whiteListEmptyOptionLabel"?: string;
    }
    /**
     * Represent a dotcms label control.
     * @export 
     * @class DotLabelComponent
     */
    interface DotLabel {
        /**
          * (optional) Text to be rendered
         */
        "label"?: string;
        /**
          * (optional) Field name
         */
        "name"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
    }
    interface DotMaterialIconPicker {
        /**
          * Label set for the input color
         */
        "colorLabel"?: string;
        /**
          * Color value set from the input
         */
        "colorValue"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotValueChange"?: (event: DotMaterialIconPickerCustomEvent<{ name: string; value: string; colorValue: string }>) => void;
        /**
          * Value for input placeholder
         */
        "placeholder"?: string;
        /**
          * Show/Hide color picker
         */
        "showColor"?: string;
        /**
          * Size value set for font-size
         */
        "size"?: string;
        /**
          * Values that the auto-complete textbox should search for
         */
        "suggestionlist"?: string[];
        /**
          * Value set from the dropdown option
         */
        "value"?: string;
    }
    /**
     * Represent a dotcms multi select control.
     * @export 
     * @class DotSelectComponent
     */
    interface DotMultiSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotMultiSelectCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotMultiSelectCustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Size number of the multi-select dropdown (default=3)
         */
        "size"?: string;
        /**
          * Value set from the dropdown option
         */
        "value"?: string;
    }
    /**
     * Represent a dotCMS DotProgressBar control.
     * @export 
     * @class DotProgressBar
     */
    interface DotProgressBar {
        /**
          * indicates the progress to be show, a value 1 to 100
         */
        "progress"?: number;
        /**
          * text to be show bellow the progress bar
         */
        "text"?: string;
    }
    /**
     * Represent a dotcms radio control.
     * @export 
     * @class DotRadioComponent
     */
    interface DotRadio {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotRadioCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotRadioCustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label ratio options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * Value set from the ratio option
         */
        "value"?: string;
    }
    /**
     * Represent a dotcms select control.
     * @export 
     * @class DotSelectComponent
     */
    interface DotSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotSelectCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotSelectCustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * Value set from the dropdown option
         */
        "value"?: string;
    }
    interface DotSelectButton {
        "onSelected"?: (event: DotSelectButtonCustomEvent<string>) => void;
        "options"?: DotSelectButtonOption[];
        "value"?: string;
    }
    interface DotStateIcon {
        "labels"?: { archived: string; published: string; revision: string; draft: string; };
        "size"?: string;
        "state"?: DotContentState;
    }
    interface DotTags {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data"?: () => Promise<string[]> | string[];
        /**
          * Duraction in ms to start search into the autocomplete
         */
        "debounce"?: number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotTagsCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotTagsCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and value is not set
         */
        "requiredMessage"?: string;
        /**
          * Min characters to start search in the autocomplete input
         */
        "threshold"?: number;
        /**
          * Value formatted splitted with a comma, for example: tag-1,tag-2
         */
        "value"?: string;
    }
    /**
     * Represent a dotcms textarea control.
     * @export 
     * @class DotTextareaComponent
     */
    interface DotTextarea {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to textarea element
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotTextareaCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotTextareaCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage"?: string;
        /**
          * Value specifies the value of the textarea element
         */
        "value"?: string;
    }
    /**
     * Represent a dotcms input control.
     * @export 
     * @class DotTextfieldComponent
     */
    interface DotTextfield {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotTextfieldCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotTextfieldCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder"?: string;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * type specifies the type of input element to display
         */
        "type"?: string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage"?: string;
        /**
          * Value specifies the value of the input element
         */
        "value"?: string;
    }
    interface DotTime {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be  hh:mm:ss
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be hh:mm:ss
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onDotStatusChange"?: (event: DotTimeCustomEvent<DotFieldStatusEvent>) => void;
        "onDotValueChange"?: (event: DotTimeCustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step"?: string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage"?: string;
        /**
          * Value format hh:mm:ss e.g., 15:22:00
         */
        "value"?: string;
    }
    interface DotTooltip {
        "content"?: string;
        "delay"?: number;
        "for"?: string;
        "position"?: string;
    }
    interface DotVideoThumbnail {
        /**
          * @type {DotContentletItem}
          * @memberof DotVideoThumbnail
         */
        "contentlet"?: DotContentletItem;
        /**
          * @type {boolean}
          * @memberof DotVideoThumbnail
         */
        "cover"?: boolean;
    }
    interface KeyValueForm {
        /**
          * (optional) Label for the add item button
         */
        "addButtonLabel"?: string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Label for the empty option in white-list select
         */
        "emptyDropdownOptionLabel"?: string;
        /**
          * (optional) The string to use in the key input label
         */
        "keyLabel"?: string;
        /**
          * (optional) Placeholder for the key input text
         */
        "keyPlaceholder"?: string;
        /**
          * Emit the added value, key/value pair
         */
        "onAdd"?: (event: KeyValueFormCustomEvent<DotKeyValueField>) => void;
        /**
          * Emit when key is changed
         */
        "onKeyChanged"?: (event: KeyValueFormCustomEvent<string>) => void;
        /**
          * Emit when any of the input is blur
         */
        "onLostFocus"?: (event: KeyValueFormCustomEvent<FocusEvent>) => void;
        /**
          * (optional) The string to use in the value input label
         */
        "valueLabel"?: string;
        /**
          * (optional) Placeholder for the value input text
         */
        "valuePlaceholder"?: string;
        /**
          * (optional) The string to use for white-list key/values
         */
        "whiteList"?: string;
    }
    interface KeyValueTable {
        /**
          * (optional) Label for the delete button in each item list
         */
        "buttonLabel"?: string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Message to show when the list of items is empty
         */
        "emptyMessage"?: string;
        /**
          * (optional) Items to render in the list of key value
         */
        "items"?: DotKeyValueField[];
        /**
          * Emit the index of the item deleted from the list
         */
        "onDelete"?: (event: KeyValueTableCustomEvent<number>) => void;
        /**
          * Emit the notification of list reordered
         */
        "onReorder"?: (event: KeyValueTableCustomEvent<any>) => void;
    }
    interface IntrinsicElements {
        "dot-asset-drop-zone": DotAssetDropZone;
        "dot-autocomplete": DotAutocomplete;
        "dot-badge": DotBadge;
        "dot-binary-file": DotBinaryFile;
        "dot-binary-file-preview": DotBinaryFilePreview;
        "dot-binary-text-field": DotBinaryTextField;
        "dot-binary-upload-button": DotBinaryUploadButton;
        "dot-card": DotCard;
        "dot-card-contentlet": DotCardContentlet;
        "dot-card-view": DotCardView;
        "dot-checkbox": DotCheckbox;
        "dot-chip": DotChip;
        "dot-contentlet-icon": DotContentletIcon;
        "dot-contentlet-lock-icon": DotContentletLockIcon;
        "dot-contentlet-thumbnail": DotContentletThumbnail;
        "dot-context-menu": DotContextMenu;
        "dot-data-view-button": DotDataViewButton;
        "dot-date": DotDate;
        "dot-date-range": DotDateRange;
        "dot-date-time": DotDateTime;
        "dot-error-message": DotErrorMessage;
        "dot-form": DotForm;
        "dot-form-column": DotFormColumn;
        "dot-form-row": DotFormRow;
        "dot-html-to-image": DotHtmlToImage;
        "dot-input-calendar": DotInputCalendar;
        "dot-key-value": DotKeyValue;
        "dot-label": DotLabel;
        "dot-material-icon-picker": DotMaterialIconPicker;
        "dot-multi-select": DotMultiSelect;
        "dot-progress-bar": DotProgressBar;
        "dot-radio": DotRadio;
        "dot-select": DotSelect;
        "dot-select-button": DotSelectButton;
        "dot-state-icon": DotStateIcon;
        "dot-tags": DotTags;
        "dot-textarea": DotTextarea;
        "dot-textfield": DotTextfield;
        "dot-time": DotTime;
        "dot-tooltip": DotTooltip;
        "dot-video-thumbnail": DotVideoThumbnail;
        "key-value-form": KeyValueForm;
        "key-value-table": KeyValueTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dot-asset-drop-zone": LocalJSX.DotAssetDropZone & JSXBase.HTMLAttributes<HTMLDotAssetDropZoneElement>;
            "dot-autocomplete": LocalJSX.DotAutocomplete & JSXBase.HTMLAttributes<HTMLDotAutocompleteElement>;
            "dot-badge": LocalJSX.DotBadge & JSXBase.HTMLAttributes<HTMLDotBadgeElement>;
            /**
             * Represent a dotcms binary file control.
             * @export 
             * @class DotBinaryFileComponent
             */
            "dot-binary-file": LocalJSX.DotBinaryFile & JSXBase.HTMLAttributes<HTMLDotBinaryFileElement>;
            /**
             * Represent a dotcms text field for the binary file preview.
             * @export 
             * @class DotBinaryFilePreviewComponent
             */
            "dot-binary-file-preview": LocalJSX.DotBinaryFilePreview & JSXBase.HTMLAttributes<HTMLDotBinaryFilePreviewElement>;
            /**
             * Represent a dotcms text field for the binary file element.
             * @export 
             * @class DotBinaryFile
             */
            "dot-binary-text-field": LocalJSX.DotBinaryTextField & JSXBase.HTMLAttributes<HTMLDotBinaryTextFieldElement>;
            /**
             * Represent a dotcms text field for the binary file element.
             * @export 
             * @class DotBinaryFile
             */
            "dot-binary-upload-button": LocalJSX.DotBinaryUploadButton & JSXBase.HTMLAttributes<HTMLDotBinaryUploadButtonElement>;
            "dot-card": LocalJSX.DotCard & JSXBase.HTMLAttributes<HTMLDotCardElement>;
            "dot-card-contentlet": LocalJSX.DotCardContentlet & JSXBase.HTMLAttributes<HTMLDotCardContentletElement>;
            "dot-card-view": LocalJSX.DotCardView & JSXBase.HTMLAttributes<HTMLDotCardViewElement>;
            "dot-checkbox": LocalJSX.DotCheckbox & JSXBase.HTMLAttributes<HTMLDotCheckboxElement>;
            "dot-chip": LocalJSX.DotChip & JSXBase.HTMLAttributes<HTMLDotChipElement>;
            /**
             * Represent a mapping of legacy icons if DotCMS
             * @export 
             * @class DotFileIcon
             */
            "dot-contentlet-icon": LocalJSX.DotContentletIcon & JSXBase.HTMLAttributes<HTMLDotContentletIconElement>;
            "dot-contentlet-lock-icon": LocalJSX.DotContentletLockIcon & JSXBase.HTMLAttributes<HTMLDotContentletLockIconElement>;
            "dot-contentlet-thumbnail": LocalJSX.DotContentletThumbnail & JSXBase.HTMLAttributes<HTMLDotContentletThumbnailElement>;
            "dot-context-menu": LocalJSX.DotContextMenu & JSXBase.HTMLAttributes<HTMLDotContextMenuElement>;
            "dot-data-view-button": LocalJSX.DotDataViewButton & JSXBase.HTMLAttributes<HTMLDotDataViewButtonElement>;
            "dot-date": LocalJSX.DotDate & JSXBase.HTMLAttributes<HTMLDotDateElement>;
            "dot-date-range": LocalJSX.DotDateRange & JSXBase.HTMLAttributes<HTMLDotDateRangeElement>;
            "dot-date-time": LocalJSX.DotDateTime & JSXBase.HTMLAttributes<HTMLDotDateTimeElement>;
            "dot-error-message": LocalJSX.DotErrorMessage & JSXBase.HTMLAttributes<HTMLDotErrorMessageElement>;
            "dot-form": LocalJSX.DotForm & JSXBase.HTMLAttributes<HTMLDotFormElement>;
            "dot-form-column": LocalJSX.DotFormColumn & JSXBase.HTMLAttributes<HTMLDotFormColumnElement>;
            "dot-form-row": LocalJSX.DotFormRow & JSXBase.HTMLAttributes<HTMLDotFormRowElement>;
            "dot-html-to-image": LocalJSX.DotHtmlToImage & JSXBase.HTMLAttributes<HTMLDotHtmlToImageElement>;
            "dot-input-calendar": LocalJSX.DotInputCalendar & JSXBase.HTMLAttributes<HTMLDotInputCalendarElement>;
            "dot-key-value": LocalJSX.DotKeyValue & JSXBase.HTMLAttributes<HTMLDotKeyValueElement>;
            /**
             * Represent a dotcms label control.
             * @export 
             * @class DotLabelComponent
             */
            "dot-label": LocalJSX.DotLabel & JSXBase.HTMLAttributes<HTMLDotLabelElement>;
            "dot-material-icon-picker": LocalJSX.DotMaterialIconPicker & JSXBase.HTMLAttributes<HTMLDotMaterialIconPickerElement>;
            /**
             * Represent a dotcms multi select control.
             * @export 
             * @class DotSelectComponent
             */
            "dot-multi-select": LocalJSX.DotMultiSelect & JSXBase.HTMLAttributes<HTMLDotMultiSelectElement>;
            /**
             * Represent a dotCMS DotProgressBar control.
             * @export 
             * @class DotProgressBar
             */
            "dot-progress-bar": LocalJSX.DotProgressBar & JSXBase.HTMLAttributes<HTMLDotProgressBarElement>;
            /**
             * Represent a dotcms radio control.
             * @export 
             * @class DotRadioComponent
             */
            "dot-radio": LocalJSX.DotRadio & JSXBase.HTMLAttributes<HTMLDotRadioElement>;
            /**
             * Represent a dotcms select control.
             * @export 
             * @class DotSelectComponent
             */
            "dot-select": LocalJSX.DotSelect & JSXBase.HTMLAttributes<HTMLDotSelectElement>;
            "dot-select-button": LocalJSX.DotSelectButton & JSXBase.HTMLAttributes<HTMLDotSelectButtonElement>;
            "dot-state-icon": LocalJSX.DotStateIcon & JSXBase.HTMLAttributes<HTMLDotStateIconElement>;
            "dot-tags": LocalJSX.DotTags & JSXBase.HTMLAttributes<HTMLDotTagsElement>;
            /**
             * Represent a dotcms textarea control.
             * @export 
             * @class DotTextareaComponent
             */
            "dot-textarea": LocalJSX.DotTextarea & JSXBase.HTMLAttributes<HTMLDotTextareaElement>;
            /**
             * Represent a dotcms input control.
             * @export 
             * @class DotTextfieldComponent
             */
            "dot-textfield": LocalJSX.DotTextfield & JSXBase.HTMLAttributes<HTMLDotTextfieldElement>;
            "dot-time": LocalJSX.DotTime & JSXBase.HTMLAttributes<HTMLDotTimeElement>;
            "dot-tooltip": LocalJSX.DotTooltip & JSXBase.HTMLAttributes<HTMLDotTooltipElement>;
            "dot-video-thumbnail": LocalJSX.DotVideoThumbnail & JSXBase.HTMLAttributes<HTMLDotVideoThumbnailElement>;
            "key-value-form": LocalJSX.KeyValueForm & JSXBase.HTMLAttributes<HTMLKeyValueFormElement>;
            "key-value-table": LocalJSX.KeyValueTable & JSXBase.HTMLAttributes<HTMLKeyValueTableElement>;
        }
    }
}
