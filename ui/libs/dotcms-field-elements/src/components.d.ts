/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { DotBinaryFileEvent, DotFieldStatusEvent, DotFieldValueEvent, DotInputCalendarStatusEvent, DotKeyValueField } from "./models";
import { DotCMSContentTypeLayoutColumn, DotCMSContentTypeLayoutRow } from "dotcms-models";
export namespace Components {
    interface DotAutocomplete {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data": () => Promise<string[]> | string[];
        /**
          * (optional) Duraction in ms to start search into the autocomplete
         */
        "debounce": number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional)  Max results to show after a autocomplete search
         */
        "maxResults": number;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder": string;
        /**
          * (optional)  Min characters to start search in the autocomplete input
         */
        "threshold": number;
    }
    interface DotBinaryFile {
        /**
          * (optional) Text that be shown when the URL is not valid
         */
        "URLValidationMessage": string;
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept": string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel": string;
        /**
          * Clear value of selected file, when the endpoint fails.
         */
        "clearValue": () => Promise<void>;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "errorMessage": string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Set the max file size limit
         */
        "maxFileLength": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder": string;
        /**
          * (optional) Name of the file uploaded
         */
        "previewImageName": string;
        /**
          * (optional) URL of the file uploaded
         */
        "previewImageUrl": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage": string;
    }
    interface DotBinaryFilePreview {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel": string;
        /**
          * file name to be displayed
         */
        "fileName": string;
        /**
          * (optional) file URL to be displayed
         */
        "previewUrl": string;
    }
    interface DotBinaryTextField {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept": string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * Value specifies the value of the <input> element
         */
        "value": any;
    }
    interface DotBinaryUploadButton {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept": string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel": string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
    }
    interface DotCheckbox {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label checkbox options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotSelectComponent
         */
        "reset": () => Promise<void>;
        /**
          * Value set from the checkbox option
         */
        "value": string;
    }
    interface DotChip {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel": string;
        /**
          * (optional) If is true disabled the delete button
         */
        "disabled": boolean;
        /**
          * Chip's label
         */
        "label": string;
    }
    interface DotDate {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step": string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage": string;
        /**
          * Value format yyyy-mm-dd  e.g., 2005-12-01
         */
        "value": string;
    }
    interface DotDateRange {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Date format used by the field when displayed
         */
        "displayFormat": string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max value that the field will allow to set
         */
        "max": string;
        /**
          * (optional) Min value that the field will allow to set
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Text to be rendered next to presets field
         */
        "presetLabel": string;
        /**
          * (optional) Array of date presets formatted as [{ label: 'PRESET_LABEL', days: NUMBER }]
         */
        "presets": { label: string; days: number; }[];
        /**
          * (optional) Determine if it is needed
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Value formatted with start and end date splitted with a comma
         */
        "value": string;
    }
    interface DotDateTime {
        /**
          * (optional) The string to use in the date label field
         */
        "dateLabel": string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the filed, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input fields date && time e.g., 2,10
         */
        "step": string;
        /**
          * (optional) The string to use in the time label field
         */
        "timeLabel": string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage": string;
        /**
          * Value format yyyy-mm-dd hh:mm:ss e.g., 2005-12-01 15:22:00
         */
        "value": string;
    }
    interface DotErrorMessage {
    }
    interface DotForm {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow": string;
        /**
          * Layout metada to be rendered
         */
        "layout": DotCMSContentTypeLayoutRow[];
        /**
          * (optional) Text to be rendered on Reset button
         */
        "resetLabel": string;
        /**
          * (optional) Text to be rendered on Submit button
         */
        "submitLabel": string;
        /**
          * Content type variable name
         */
        "variable": string;
    }
    interface DotFormColumn {
        /**
          * Fields metada to be rendered
         */
        "column": DotCMSContentTypeLayoutColumn;
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow": string;
    }
    interface DotFormRow {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow": string;
        /**
          * Fields metada to be rendered
         */
        "row": DotCMSContentTypeLayoutRow;
    }
    interface DotInputCalendar {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Max, maximum value that the field will allow to set, expect a Date Format
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set, expect a Date Format.
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step": string;
        /**
          * type specifies the type of <input> element to display
         */
        "type": string;
        /**
          * Value specifies the value of the <input> element
         */
        "value": string;
    }
    interface DotKeyValue {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Label for the add button in the <key-value-form>
         */
        "formAddButtonLabel": string;
        /**
          * (optional) The string to use in the key label in the <key-value-form>
         */
        "formKeyLabel": string;
        /**
          * (optional) Placeholder for the key input text in the <key-value-form>
         */
        "formKeyPlaceholder": string;
        /**
          * (optional) The string to use in the value label in the <key-value-form>
         */
        "formValueLabel": string;
        /**
          * (optional) Placeholder for the value input text in the <key-value-form>
         */
        "formValuePlaceholder": string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) The string to use in the delete button of a key/value item
         */
        "listDeleteLabel": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * Value of the field
         */
        "value": string;
    }
    interface DotLabel {
        /**
          * (optional) Text to be rendered
         */
        "label": string;
        /**
          * (optional) Field name
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
    }
    interface DotMultiSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotSelectComponent
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Size number of the multi-select dropdown (default=3)
         */
        "size": string;
        /**
          * Value set from the dropdown option
         */
        "value": string;
    }
    interface DotRadio {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label ratio options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * Value set from the ratio option
         */
        "value": string;
    }
    interface DotSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotSelectComponent
         */
        "reset": () => Promise<void>;
        /**
          * Value set from the dropdown option
         */
        "value": string;
    }
    interface DotTags {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data": () => Promise<string[]> | string[];
        /**
          * Duraction in ms to start search into the autocomplete
         */
        "debounce": number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and value is not set
         */
        "requiredMessage": string;
        /**
          * Reset properties of the filed, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * Min characters to start search in the autocomplete input
         */
        "threshold": number;
        /**
          * Value formatted splitted with a comma, for example: tag-1,tag-2
         */
        "value": string;
    }
    interface DotTextarea {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to <textarea> element
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
          * @memberof DotTextareaComponent
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage": string;
        /**
          * Value specifies the value of the <textarea> element
         */
        "value": string;
    }
    interface DotTextfield {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder": string;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * type specifies the type of <input> element to display
         */
        "type": string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage": string;
        /**
          * Value specifies the value of the <input> element
         */
        "value": string;
    }
    interface DotTime {
        /**
          * (optional) Disables field's interaction
         */
        "disabled": boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint": string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label": string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be  hh:mm:ss
         */
        "max": string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be hh:mm:ss
         */
        "min": string;
        /**
          * Name that will be used as ID
         */
        "name": string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required": boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage": string;
        /**
          * Reset properties of the field, clear value and emit events.
         */
        "reset": () => Promise<void>;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step": string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage": string;
        /**
          * Value format hh:mm:ss e.g., 15:22:00
         */
        "value": string;
    }
    interface KeyValueForm {
        /**
          * (optional) Label for the add item button
         */
        "addButtonLabel": string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled": boolean;
        /**
          * (optional) The string to use in the key input label
         */
        "keyLabel": string;
        /**
          * (optional) Placeholder for the key input text
         */
        "keyPlaceholder": string;
        /**
          * (optional) The string to use in the value input label
         */
        "valueLabel": string;
        /**
          * (optional) Placeholder for the value input text
         */
        "valuePlaceholder": string;
    }
    interface KeyValueTable {
        /**
          * (optional) Label for the delete button in each item list
         */
        "buttonLabel": string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled": boolean;
        /**
          * (optional) Message to show when the list of items is empty
         */
        "emptyMessage": string;
        /**
          * (optional) Items to render in the list of key value
         */
        "items": DotKeyValueField[];
    }
}
declare global {
    interface HTMLDotAutocompleteElement extends Components.DotAutocomplete, HTMLStencilElement {
    }
    var HTMLDotAutocompleteElement: {
        prototype: HTMLDotAutocompleteElement;
        new (): HTMLDotAutocompleteElement;
    };
    interface HTMLDotBinaryFileElement extends Components.DotBinaryFile, HTMLStencilElement {
    }
    var HTMLDotBinaryFileElement: {
        prototype: HTMLDotBinaryFileElement;
        new (): HTMLDotBinaryFileElement;
    };
    interface HTMLDotBinaryFilePreviewElement extends Components.DotBinaryFilePreview, HTMLStencilElement {
    }
    var HTMLDotBinaryFilePreviewElement: {
        prototype: HTMLDotBinaryFilePreviewElement;
        new (): HTMLDotBinaryFilePreviewElement;
    };
    interface HTMLDotBinaryTextFieldElement extends Components.DotBinaryTextField, HTMLStencilElement {
    }
    var HTMLDotBinaryTextFieldElement: {
        prototype: HTMLDotBinaryTextFieldElement;
        new (): HTMLDotBinaryTextFieldElement;
    };
    interface HTMLDotBinaryUploadButtonElement extends Components.DotBinaryUploadButton, HTMLStencilElement {
    }
    var HTMLDotBinaryUploadButtonElement: {
        prototype: HTMLDotBinaryUploadButtonElement;
        new (): HTMLDotBinaryUploadButtonElement;
    };
    interface HTMLDotCheckboxElement extends Components.DotCheckbox, HTMLStencilElement {
    }
    var HTMLDotCheckboxElement: {
        prototype: HTMLDotCheckboxElement;
        new (): HTMLDotCheckboxElement;
    };
    interface HTMLDotChipElement extends Components.DotChip, HTMLStencilElement {
    }
    var HTMLDotChipElement: {
        prototype: HTMLDotChipElement;
        new (): HTMLDotChipElement;
    };
    interface HTMLDotDateElement extends Components.DotDate, HTMLStencilElement {
    }
    var HTMLDotDateElement: {
        prototype: HTMLDotDateElement;
        new (): HTMLDotDateElement;
    };
    interface HTMLDotDateRangeElement extends Components.DotDateRange, HTMLStencilElement {
    }
    var HTMLDotDateRangeElement: {
        prototype: HTMLDotDateRangeElement;
        new (): HTMLDotDateRangeElement;
    };
    interface HTMLDotDateTimeElement extends Components.DotDateTime, HTMLStencilElement {
    }
    var HTMLDotDateTimeElement: {
        prototype: HTMLDotDateTimeElement;
        new (): HTMLDotDateTimeElement;
    };
    interface HTMLDotErrorMessageElement extends Components.DotErrorMessage, HTMLStencilElement {
    }
    var HTMLDotErrorMessageElement: {
        prototype: HTMLDotErrorMessageElement;
        new (): HTMLDotErrorMessageElement;
    };
    interface HTMLDotFormElement extends Components.DotForm, HTMLStencilElement {
    }
    var HTMLDotFormElement: {
        prototype: HTMLDotFormElement;
        new (): HTMLDotFormElement;
    };
    interface HTMLDotFormColumnElement extends Components.DotFormColumn, HTMLStencilElement {
    }
    var HTMLDotFormColumnElement: {
        prototype: HTMLDotFormColumnElement;
        new (): HTMLDotFormColumnElement;
    };
    interface HTMLDotFormRowElement extends Components.DotFormRow, HTMLStencilElement {
    }
    var HTMLDotFormRowElement: {
        prototype: HTMLDotFormRowElement;
        new (): HTMLDotFormRowElement;
    };
    interface HTMLDotInputCalendarElement extends Components.DotInputCalendar, HTMLStencilElement {
    }
    var HTMLDotInputCalendarElement: {
        prototype: HTMLDotInputCalendarElement;
        new (): HTMLDotInputCalendarElement;
    };
    interface HTMLDotKeyValueElement extends Components.DotKeyValue, HTMLStencilElement {
    }
    var HTMLDotKeyValueElement: {
        prototype: HTMLDotKeyValueElement;
        new (): HTMLDotKeyValueElement;
    };
    interface HTMLDotLabelElement extends Components.DotLabel, HTMLStencilElement {
    }
    var HTMLDotLabelElement: {
        prototype: HTMLDotLabelElement;
        new (): HTMLDotLabelElement;
    };
    interface HTMLDotMultiSelectElement extends Components.DotMultiSelect, HTMLStencilElement {
    }
    var HTMLDotMultiSelectElement: {
        prototype: HTMLDotMultiSelectElement;
        new (): HTMLDotMultiSelectElement;
    };
    interface HTMLDotRadioElement extends Components.DotRadio, HTMLStencilElement {
    }
    var HTMLDotRadioElement: {
        prototype: HTMLDotRadioElement;
        new (): HTMLDotRadioElement;
    };
    interface HTMLDotSelectElement extends Components.DotSelect, HTMLStencilElement {
    }
    var HTMLDotSelectElement: {
        prototype: HTMLDotSelectElement;
        new (): HTMLDotSelectElement;
    };
    interface HTMLDotTagsElement extends Components.DotTags, HTMLStencilElement {
    }
    var HTMLDotTagsElement: {
        prototype: HTMLDotTagsElement;
        new (): HTMLDotTagsElement;
    };
    interface HTMLDotTextareaElement extends Components.DotTextarea, HTMLStencilElement {
    }
    var HTMLDotTextareaElement: {
        prototype: HTMLDotTextareaElement;
        new (): HTMLDotTextareaElement;
    };
    interface HTMLDotTextfieldElement extends Components.DotTextfield, HTMLStencilElement {
    }
    var HTMLDotTextfieldElement: {
        prototype: HTMLDotTextfieldElement;
        new (): HTMLDotTextfieldElement;
    };
    interface HTMLDotTimeElement extends Components.DotTime, HTMLStencilElement {
    }
    var HTMLDotTimeElement: {
        prototype: HTMLDotTimeElement;
        new (): HTMLDotTimeElement;
    };
    interface HTMLKeyValueFormElement extends Components.KeyValueForm, HTMLStencilElement {
    }
    var HTMLKeyValueFormElement: {
        prototype: HTMLKeyValueFormElement;
        new (): HTMLKeyValueFormElement;
    };
    interface HTMLKeyValueTableElement extends Components.KeyValueTable, HTMLStencilElement {
    }
    var HTMLKeyValueTableElement: {
        prototype: HTMLKeyValueTableElement;
        new (): HTMLKeyValueTableElement;
    };
    interface HTMLElementTagNameMap {
        "dot-autocomplete": HTMLDotAutocompleteElement;
        "dot-binary-file": HTMLDotBinaryFileElement;
        "dot-binary-file-preview": HTMLDotBinaryFilePreviewElement;
        "dot-binary-text-field": HTMLDotBinaryTextFieldElement;
        "dot-binary-upload-button": HTMLDotBinaryUploadButtonElement;
        "dot-checkbox": HTMLDotCheckboxElement;
        "dot-chip": HTMLDotChipElement;
        "dot-date": HTMLDotDateElement;
        "dot-date-range": HTMLDotDateRangeElement;
        "dot-date-time": HTMLDotDateTimeElement;
        "dot-error-message": HTMLDotErrorMessageElement;
        "dot-form": HTMLDotFormElement;
        "dot-form-column": HTMLDotFormColumnElement;
        "dot-form-row": HTMLDotFormRowElement;
        "dot-input-calendar": HTMLDotInputCalendarElement;
        "dot-key-value": HTMLDotKeyValueElement;
        "dot-label": HTMLDotLabelElement;
        "dot-multi-select": HTMLDotMultiSelectElement;
        "dot-radio": HTMLDotRadioElement;
        "dot-select": HTMLDotSelectElement;
        "dot-tags": HTMLDotTagsElement;
        "dot-textarea": HTMLDotTextareaElement;
        "dot-textfield": HTMLDotTextfieldElement;
        "dot-time": HTMLDotTimeElement;
        "key-value-form": HTMLKeyValueFormElement;
        "key-value-table": HTMLKeyValueTableElement;
    }
}
declare namespace LocalJSX {
    interface DotAutocomplete {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data"?: () => Promise<string[]> | string[];
        /**
          * (optional) Duraction in ms to start search into the autocomplete
         */
        "debounce"?: number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional)  Max results to show after a autocomplete search
         */
        "maxResults"?: number;
        "onEnter"?: (event: CustomEvent<string>) => void;
        "onLostFocus"?: (event: CustomEvent<FocusEvent>) => void;
        "onSelection"?: (event: CustomEvent<string>) => void;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder"?: string;
        /**
          * (optional)  Min characters to start search in the autocomplete input
         */
        "threshold"?: number;
    }
    interface DotBinaryFile {
        /**
          * (optional) Text that be shown when the URL is not valid
         */
        "URLValidationMessage"?: string;
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept"?: string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "errorMessage"?: string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Set the max file size limit
         */
        "maxFileLength"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder"?: string;
        /**
          * (optional) Name of the file uploaded
         */
        "previewImageName"?: string;
        /**
          * (optional) URL of the file uploaded
         */
        "previewImageUrl"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage"?: string;
    }
    interface DotBinaryFilePreview {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel"?: string;
        /**
          * file name to be displayed
         */
        "fileName"?: string;
        /**
          * Emit when the file is deleted
         */
        "onDelete"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) file URL to be displayed
         */
        "previewUrl"?: string;
    }
    interface DotBinaryTextField {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        "onFileChange"?: (event: CustomEvent<DotBinaryFileEvent>) => void;
        "onLostFocus"?: (event: CustomEvent<any>) => void;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * Value specifies the value of the <input> element
         */
        "value"?: any;
    }
    interface DotBinaryUploadButton {
        /**
          * (optional) Describes a type of file that may be selected by the user, separated by comma  eg: .pdf,.jpg
         */
        "accept"?: string;
        /**
          * (optional) Text that be shown in the browse file button
         */
        "buttonLabel"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onFileChange"?: (event: CustomEvent<DotBinaryFileEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
    }
    interface DotCheckbox {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label checkbox options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * Value set from the checkbox option
         */
        "value"?: string;
    }
    interface DotChip {
        /**
          * (optional) Delete button's label
         */
        "deleteLabel"?: string;
        /**
          * (optional) If is true disabled the delete button
         */
        "disabled"?: boolean;
        /**
          * Chip's label
         */
        "label"?: string;
        "onRemove"?: (event: CustomEvent<String>) => void;
    }
    interface DotDate {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step"?: string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage"?: string;
        /**
          * Value format yyyy-mm-dd  e.g., 2005-12-01
         */
        "value"?: string;
    }
    interface DotDateRange {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Date format used by the field when displayed
         */
        "displayFormat"?: string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max value that the field will allow to set
         */
        "max"?: string;
        /**
          * (optional) Min value that the field will allow to set
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Text to be rendered next to presets field
         */
        "presetLabel"?: string;
        /**
          * (optional) Array of date presets formatted as [{ label: 'PRESET_LABEL', days: NUMBER }]
         */
        "presets"?: { label: string; days: number; }[];
        /**
          * (optional) Determine if it is needed
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Value formatted with start and end date splitted with a comma
         */
        "value"?: string;
    }
    interface DotDateTime {
        /**
          * (optional) The string to use in the date label field
         */
        "dateLabel"?: string;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be yyyy-mm-dd hh:mm:ss | yyyy-mm-dd | hh:mm:ss
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Step specifies the legal number intervals for the input fields date && time e.g., 2,10
         */
        "step"?: string;
        /**
          * (optional) The string to use in the time label field
         */
        "timeLabel"?: string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage"?: string;
        /**
          * Value format yyyy-mm-dd hh:mm:ss e.g., 2005-12-01 15:22:00
         */
        "value"?: string;
    }
    interface DotErrorMessage {
    }
    interface DotForm {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow"?: string;
        /**
          * Layout metada to be rendered
         */
        "layout"?: DotCMSContentTypeLayoutRow[];
        /**
          * (optional) Text to be rendered on Reset button
         */
        "resetLabel"?: string;
        /**
          * (optional) Text to be rendered on Submit button
         */
        "submitLabel"?: string;
        /**
          * Content type variable name
         */
        "variable"?: string;
    }
    interface DotFormColumn {
        /**
          * Fields metada to be rendered
         */
        "column"?: DotCMSContentTypeLayoutColumn;
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow"?: string;
    }
    interface DotFormRow {
        /**
          * (optional) List of fields (variableName) separated by comma, to be shown
         */
        "fieldsToShow"?: string;
        /**
          * Fields metada to be rendered
         */
        "row"?: DotCMSContentTypeLayoutRow;
    }
    interface DotInputCalendar {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Max, maximum value that the field will allow to set, expect a Date Format
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set, expect a Date Format.
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "on_statusChange"?: (event: CustomEvent<DotInputCalendarStatusEvent>) => void;
        "on_valueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step"?: string;
        /**
          * type specifies the type of <input> element to display
         */
        "type"?: string;
        /**
          * Value specifies the value of the <input> element
         */
        "value"?: string;
    }
    interface DotKeyValue {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Label for the add button in the <key-value-form>
         */
        "formAddButtonLabel"?: string;
        /**
          * (optional) The string to use in the key label in the <key-value-form>
         */
        "formKeyLabel"?: string;
        /**
          * (optional) Placeholder for the key input text in the <key-value-form>
         */
        "formKeyPlaceholder"?: string;
        /**
          * (optional) The string to use in the value label in the <key-value-form>
         */
        "formValueLabel"?: string;
        /**
          * (optional) Placeholder for the value input text in the <key-value-form>
         */
        "formValuePlaceholder"?: string;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) The string to use in the delete button of a key/value item
         */
        "listDeleteLabel"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * Value of the field
         */
        "value"?: string;
    }
    interface DotLabel {
        /**
          * (optional) Text to be rendered
         */
        "label"?: string;
        /**
          * (optional) Field name
         */
        "name"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
    }
    interface DotMultiSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Size number of the multi-select dropdown (default=3)
         */
        "size"?: string;
        /**
          * Value set from the dropdown option
         */
        "value"?: string;
    }
    interface DotRadio {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label ratio options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * Value set from the ratio option
         */
        "value"?: string;
    }
    interface DotSelect {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * Value/Label dropdown options separated by comma, to be formatted as: Value|Label
         */
        "options"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that will be shown when required is set and condition is not met
         */
        "requiredMessage"?: string;
        /**
          * Value set from the dropdown option
         */
        "value"?: string;
    }
    interface DotTags {
        /**
          * Function or array of string to get the data to use for the autocomplete search
         */
        "data"?: () => Promise<string[]> | string[];
        /**
          * Duraction in ms to start search into the autocomplete
         */
        "debounce"?: number;
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) text to show when no value is set
         */
        "placeholder"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and value is not set
         */
        "requiredMessage"?: string;
        /**
          * Min characters to start search in the autocomplete input
         */
        "threshold"?: number;
        /**
          * Value formatted splitted with a comma, for example: tag-1,tag-2
         */
        "value"?: string;
    }
    interface DotTextarea {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to <textarea> element
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage"?: string;
        /**
          * Value specifies the value of the <textarea> element
         */
        "value"?: string;
    }
    interface DotTextfield {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Placeholder specifies a short hint that describes the expected value of the input field
         */
        "placeholder"?: string;
        /**
          * (optional) Regular expresion that is checked against the value to determine if is valid
         */
        "regexCheck"?: string;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * type specifies the type of <input> element to display
         */
        "type"?: string;
        /**
          * (optional) Text that be shown when the Regular Expression condition not met
         */
        "validationMessage"?: string;
        /**
          * Value specifies the value of the <input> element
         */
        "value"?: string;
    }
    interface DotTime {
        /**
          * (optional) Disables field's interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Hint text that suggest a clue of the field
         */
        "hint"?: string;
        /**
          * (optional) Text to be rendered next to input field
         */
        "label"?: string;
        /**
          * (optional) Max, maximum value that the field will allow to set. Format should be  hh:mm:ss
         */
        "max"?: string;
        /**
          * (optional) Min, minimum value that the field will allow to set. Format should be hh:mm:ss
         */
        "min"?: string;
        /**
          * Name that will be used as ID
         */
        "name"?: string;
        "onStatusChange"?: (event: CustomEvent<DotFieldStatusEvent>) => void;
        "onValueChange"?: (event: CustomEvent<DotFieldValueEvent>) => void;
        /**
          * (optional) Determine if it is mandatory
         */
        "required"?: boolean;
        /**
          * (optional) Text that be shown when required is set and condition not met
         */
        "requiredMessage"?: string;
        /**
          * (optional) Step specifies the legal number intervals for the input field
         */
        "step"?: string;
        /**
          * (optional) Text that be shown when min or max are set and condition not met
         */
        "validationMessage"?: string;
        /**
          * Value format hh:mm:ss e.g., 15:22:00
         */
        "value"?: string;
    }
    interface KeyValueForm {
        /**
          * (optional) Label for the add item button
         */
        "addButtonLabel"?: string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) The string to use in the key input label
         */
        "keyLabel"?: string;
        /**
          * (optional) Placeholder for the key input text
         */
        "keyPlaceholder"?: string;
        /**
          * Emit the added value, key/value pair
         */
        "onAdd"?: (event: CustomEvent<DotKeyValueField>) => void;
        /**
          * Emit when any of the input is blur
         */
        "onLostFocus"?: (event: CustomEvent<FocusEvent>) => void;
        /**
          * (optional) The string to use in the value input label
         */
        "valueLabel"?: string;
        /**
          * (optional) Placeholder for the value input text
         */
        "valuePlaceholder"?: string;
    }
    interface KeyValueTable {
        /**
          * (optional) Label for the delete button in each item list
         */
        "buttonLabel"?: string;
        /**
          * (optional) Disables all form interaction
         */
        "disabled"?: boolean;
        /**
          * (optional) Message to show when the list of items is empty
         */
        "emptyMessage"?: string;
        /**
          * (optional) Items to render in the list of key value
         */
        "items"?: DotKeyValueField[];
        /**
          * Emit the index of the item deleted from the list
         */
        "onDelete"?: (event: CustomEvent<number>) => void;
    }
    interface IntrinsicElements {
        "dot-autocomplete": DotAutocomplete;
        "dot-binary-file": DotBinaryFile;
        "dot-binary-file-preview": DotBinaryFilePreview;
        "dot-binary-text-field": DotBinaryTextField;
        "dot-binary-upload-button": DotBinaryUploadButton;
        "dot-checkbox": DotCheckbox;
        "dot-chip": DotChip;
        "dot-date": DotDate;
        "dot-date-range": DotDateRange;
        "dot-date-time": DotDateTime;
        "dot-error-message": DotErrorMessage;
        "dot-form": DotForm;
        "dot-form-column": DotFormColumn;
        "dot-form-row": DotFormRow;
        "dot-input-calendar": DotInputCalendar;
        "dot-key-value": DotKeyValue;
        "dot-label": DotLabel;
        "dot-multi-select": DotMultiSelect;
        "dot-radio": DotRadio;
        "dot-select": DotSelect;
        "dot-tags": DotTags;
        "dot-textarea": DotTextarea;
        "dot-textfield": DotTextfield;
        "dot-time": DotTime;
        "key-value-form": KeyValueForm;
        "key-value-table": KeyValueTable;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dot-autocomplete": LocalJSX.DotAutocomplete & JSXBase.HTMLAttributes<HTMLDotAutocompleteElement>;
            "dot-binary-file": LocalJSX.DotBinaryFile & JSXBase.HTMLAttributes<HTMLDotBinaryFileElement>;
            "dot-binary-file-preview": LocalJSX.DotBinaryFilePreview & JSXBase.HTMLAttributes<HTMLDotBinaryFilePreviewElement>;
            "dot-binary-text-field": LocalJSX.DotBinaryTextField & JSXBase.HTMLAttributes<HTMLDotBinaryTextFieldElement>;
            "dot-binary-upload-button": LocalJSX.DotBinaryUploadButton & JSXBase.HTMLAttributes<HTMLDotBinaryUploadButtonElement>;
            "dot-checkbox": LocalJSX.DotCheckbox & JSXBase.HTMLAttributes<HTMLDotCheckboxElement>;
            "dot-chip": LocalJSX.DotChip & JSXBase.HTMLAttributes<HTMLDotChipElement>;
            "dot-date": LocalJSX.DotDate & JSXBase.HTMLAttributes<HTMLDotDateElement>;
            "dot-date-range": LocalJSX.DotDateRange & JSXBase.HTMLAttributes<HTMLDotDateRangeElement>;
            "dot-date-time": LocalJSX.DotDateTime & JSXBase.HTMLAttributes<HTMLDotDateTimeElement>;
            "dot-error-message": LocalJSX.DotErrorMessage & JSXBase.HTMLAttributes<HTMLDotErrorMessageElement>;
            "dot-form": LocalJSX.DotForm & JSXBase.HTMLAttributes<HTMLDotFormElement>;
            "dot-form-column": LocalJSX.DotFormColumn & JSXBase.HTMLAttributes<HTMLDotFormColumnElement>;
            "dot-form-row": LocalJSX.DotFormRow & JSXBase.HTMLAttributes<HTMLDotFormRowElement>;
            "dot-input-calendar": LocalJSX.DotInputCalendar & JSXBase.HTMLAttributes<HTMLDotInputCalendarElement>;
            "dot-key-value": LocalJSX.DotKeyValue & JSXBase.HTMLAttributes<HTMLDotKeyValueElement>;
            "dot-label": LocalJSX.DotLabel & JSXBase.HTMLAttributes<HTMLDotLabelElement>;
            "dot-multi-select": LocalJSX.DotMultiSelect & JSXBase.HTMLAttributes<HTMLDotMultiSelectElement>;
            "dot-radio": LocalJSX.DotRadio & JSXBase.HTMLAttributes<HTMLDotRadioElement>;
            "dot-select": LocalJSX.DotSelect & JSXBase.HTMLAttributes<HTMLDotSelectElement>;
            "dot-tags": LocalJSX.DotTags & JSXBase.HTMLAttributes<HTMLDotTagsElement>;
            "dot-textarea": LocalJSX.DotTextarea & JSXBase.HTMLAttributes<HTMLDotTextareaElement>;
            "dot-textfield": LocalJSX.DotTextfield & JSXBase.HTMLAttributes<HTMLDotTextfieldElement>;
            "dot-time": LocalJSX.DotTime & JSXBase.HTMLAttributes<HTMLDotTimeElement>;
            "key-value-form": LocalJSX.KeyValueForm & JSXBase.HTMLAttributes<HTMLKeyValueFormElement>;
            "key-value-table": LocalJSX.KeyValueTable & JSXBase.HTMLAttributes<HTMLKeyValueTableElement>;
        }
    }
}
