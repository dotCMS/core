---
description: Angular Rules
globs: core-web/**
alwaysApply: false
---
**You are an Angular, SASS, and TypeScript expert focused on creating scalable and high-performance web applications. Your role is to provide code examples and guidance that adhere to best practices in modularity, performance, and maintainability, following strict type safety, clear naming conventions, and Angular's official style guide.**

## Tech Stack Overview

- **Framework**: Angular 18.2.3
- **UI Components**: PrimeNG 17.18.11
- **State Management**:
  - NgRx Component Store (@ngrx/component-store 18.0.2)
  - NgRx Signals (@ngrx/signals 18.0.2)
- **Styling**: PrimeFlex 3.3.1
- **Testing**: Jest + Testing Library
- **Build System**: Nx 19.6.5

## Modern Angular Development Guidelines

### 1. Component Architecture and Patterns

#### File Structure

Every component MUST have three separate files:
```
feature/
├── components/
│   └── feature-list/
│       ├── feature-list.component.ts    # Component logic
│       ├── feature-list.component.html  # Template
│       └── feature-list.component.scss  # Styles
```

❌ Avoid inline templates and styles:
```typescript
// ❌ Bad: Inline template and styles
@Component({
  selector: "dot-feature",
  template: `<div>Inline template</div>`,
  styles: [`:host { display: block }`]
})
```

✅ Use separate files:
```typescript
// ✅ Good: Separate files
@Component({
  selector: "dot-feature",
  templateUrl: "./feature.component.html",
  styleUrls: ["./feature.component.scss"]
})
```

#### SCSS Guidelines and Variables

1. **Global Variables Usage**

❌ Avoid hardcoding values:
```scss
// ❌ Bad: Hardcoded values
.my-component {
  padding: 16px;
  color: #333;
  background: #f5f5f5;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}
```

✅ Always use global variables:
```scss
// ✅ Good: Using global variables
@use "variables" as *;

.my-component {
  padding: $spacing-3;
  color: $color-palette-gray-500;
  background: $color-palette-gray-100;
  box-shadow: $shadow-m;
}
```

2. **Variables Categories Available**:
   - Colors (`$color-palette-*`)
   - Spacing (`$spacing-*`)
   - Typography (`$font-size-*`)
   - Shadows (`$shadow-*`)
   - Breakpoints (`$screen-*`)
   - Layout measurements (`$toolbar-height`, `$navigation-width`, etc.)
   - Form elements (`$input-*`, `$label-*`)
   - Animation timings (`$basic-speed`)

3. **Required Import**:
Every SCSS file MUST start with:
```scss
@use "variables" as *;
```

4. **Common Use Cases**:
```scss
.component {
    // Spacing
    padding: $spacing-3;
    margin-bottom: $spacing-2;
    
    // Colors
    color: $color-palette-primary;
    background: $color-palette-gray-100;
    border: 1px solid $color-palette-gray-400;
    
    // Typography
    font-size: $font-size-md;
    
    // Shadows
    box-shadow: $shadow-m;
    
    // Responsive
    @media (max-width: $screen-md-max) {
        padding: $spacing-2;
    }
}
```

#### BEM Naming Convention with Variables

All component styles MUST follow BEM using a flat structure and global variables:

```scss
// feature-list.component.scss
@use "variables" as *;

// Block
.feature-list {
  padding: $spacing-3;
  background: $color-palette-gray-100;
  box-shadow: $shadow-m;
}

// Elements
.feature-list__header {
  margin-bottom: $spacing-2;
  border-bottom: 1px solid $color-palette-gray-300;
}

.feature-list__item {
  padding: $spacing-2;
  background: $white;
  border-radius: $border-radius-md;
}

// Modifiers
.feature-list__item--active {
  background: $color-palette-primary-op-10;
  border: 1px solid $color-palette-primary;
}

.feature-list__item--disabled {
  opacity: $field-disabled-opacity;
  background: $color-palette-gray-200;
}

.feature-list--expanded {
  padding: $spacing-4;
}
```

❌ Avoid nesting with BEM:
```scss
// ❌ Bad: Nested BEM
.feature-list {
  &__header {
    // styles
  }
  
  &__item {
    &--active {
      // styles
    }
  }
}
```

✅ Use flat structure:
```scss
// ✅ Good: Flat BEM
.feature-list {
  // block styles
}

.feature-list__header {
  // element styles
}

.feature-list__item {
  // element styles
}

.feature-list__item--active {
  // modifier styles
}
```

Benefits of Flat BEM Structure:
- Easier to debug in browser dev tools
- Clearer specificity
- Better searchability in code
- More predictable CSS output
- Simpler maintenance
- Better performance (browsers read selectors right-to-left)

Rules for BEM Usage:
1. Always use flat structure (avoid nesting with &)
2. Use double underscore (__) for elements
3. Use double hyphen (--) for modifiers
4. Keep class names semantic and purpose-driven
5. Maintain consistent naming across components
6. Document complex class relationships with comments

Example HTML with BEM classes:
```html
<div class="feature-list">
  <header class="feature-list__header">
    <h2 class="feature-list__title">Features</h2>
  </header>
  
  <ul class="feature-list__items">
    <li class="feature-list__item feature-list__item--active">
      <span class="feature-list__item-text">Active Item</span>
    </li>
    <li class="feature-list__item feature-list__item--disabled">
      <span class="feature-list__item-text">Disabled Item</span>
    </li>
  </ul>
</div>
```

#### Signal-First Approach

```typescript
@Component({
  selector: "dot-my-component",
  standalone: true,
  template: `
    <div>Count: {{ count() }}</div>
    <button (click)="increment()">Increment</button>
  `,
})
export class MyComponent {
  // Input Signals
  name = input<string>("");
  config = input<Config>();

  // Computed Signals
  count = signal(0);
  doubleCount = computed(() => this.count() * 2);

  // Effects
  constructor() {
    effect(() => {
      console.log(`Count changed to: ${this.count()}`);
    });
  }

  increment() {
    this.count.update((c) => c + 1);
  }
}
```

#### Component Structure

- Use standalone components by default
- Implement OnPush change detection
- Follow smart/dumb component pattern
- Use modern dependency injection with inject()

```typescript
@Component({
  selector: "dot-feature",
  standalone: true,
  imports: [CommonModule, PrimeNGModule],
  templateUrl: "./feature.component.html",
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class FeatureComponent {
  private readonly store = inject(FeatureStore);
  private readonly service = inject(FeatureService);

  protected readonly vm$ = this.store.vm$;
}
```

#### State Management

Use typed state enums and signals for component state:

```typescript
// ❌ Avoid
export interface BadState {
  isLoading: boolean;
  isError: boolean;
  isSaving: boolean;
}

// ✅ Good: Use ComponentStatus enum
export enum ComponentStatus {
  INIT = "init",
  LOADING = "loading",
  LOADED = "loaded",
  SAVING = "saving",
  ERROR = "error",
}

// ✅ Good: Use signals with ComponentStatus
@Component({
  template: `
    @switch (state()) { @case (ComponentStatus.LOADING) {
    <dot-spinner />
    } @case (ComponentStatus.ERROR) {
    <dot-error [message]="error()" />
    } @case (ComponentStatus.LOADED) {
    <dot-content [data]="data()" />
    } }
  `,
})
export class FeatureComponent {
  readonly state = signal<ComponentStatus>(ComponentStatus.INIT);
  readonly error = signal<string | null>(null);
  readonly data = signal<Data | null>(null);
}
```

### 2. State Management with Signal Store

#### Feature-Based Architecture

```typescript
// 1. Define state interfaces
export interface RootState {
  state: ComponentStatus;
  error: string | null;
}

export interface FeatureState {
  data: Data | null;
  metadata: Metadata | null;
}

// 2. Create feature
export function withFeature() {
  return signalStore(
    // State
    withState<FeatureState>({
      data: null,
      metadata: null,
    }),

    // Computed
    withComputed((store) => ({
      isLoading: computed(() => store.state() === ComponentStatus.LOADING),
    })),

    // Methods
    withMethods((store, service = inject(FeatureService)) => ({
      load: rxMethod<void>(
        pipe(
          tap(() => this.setLoading()),
          switchMap(() =>
            service.getData().pipe(
              tapResponse({
                next: (data) => this.setData(data),
                error: (error) => this.handleError(error),
              })
            )
          )
        )
      ),

      // Utility methods
      setLoading: () =>
        patchState(store, {
          state: ComponentStatus.LOADING,
          error: null,
        }),

      setData: (data: Data) =>
        patchState(store, {
          data,
          state: ComponentStatus.LOADED,
        }),

      handleError: (error: HttpErrorResponse) => {
        service.handleError(error);
        patchState(store, {
          state: ComponentStatus.ERROR,
          error: error.message,
        });
      },
    }))
  );
}

// 3. Compose store
export const AppStore = signalStore(
  withState<RootState>({
    state: ComponentStatus.INIT,
    error: null,
  }),
  withFeature(),
  withOtherFeature()
);
```

### 3. Observable and Signal Integration

#### When to Use Each

1. **Use Signals for**:

   - Component state
   - UI state
   - Form state
   - Computed values
   - State updates within components

2. **Use Observables for**:
   - HTTP requests
   - Event streams (WebSocket, DOM events)
   - Complex data transformations
   - Multi-source data combinations
   - Time-based operations

#### Best Practices

1. **Signal-First Approach**:

```typescript
// ✅ Good: Use signals for component state
@Component({
  template: `<div>{{ count() }}</div>`,
})
export class CounterComponent {
  count = signal(0);
  increment() {
    this.count.update((c) => c + 1);
  }
}
```

2. **Observable with Async Pipe**:

```typescript
// ✅ Good: Use async pipe for observables
@Component({
  template: `
    @if (data$ | async; as data) {
    <dot-content [data]="data" />
    }
  `,
})
export class DataComponent {
  data$ = this.service.getData();
}
```

3. **Observable to Signal**:

```typescript
// ✅ Good: Transform observable to signal when needed
@Component({
  template: `<div>{{ data() }}</div>`,
})
export class HybridComponent implements OnDestroy {
  private readonly destroy$ = new Subject<void>();
  readonly data = signal<Data | null>(null);

  constructor(service: DataService) {
    service
      .getData()
      .pipe(takeUntil(this.destroy$))
      .subscribe((data) => this.data.set(data));
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
}
```

### 4. Error Handling

Use a consistent approach for error handling:

```typescript
@Injectable()
export class FeatureService {
  private readonly errorManager = inject(DotHttpErrorManagerService);

  handleError(error: HttpErrorResponse): void {
    this.errorManager.handle(error);
  }
}

// In components/stores
catchError((error) => {
  this.service.handleError(error);
  return EMPTY;
});
```

### 5. Modern Template Syntax

Use Angular's new control flow and template syntax:

```typescript
@Component({
  selector: "dot-feature",
  standalone: true,
  template: `
    <!-- Use @if instead of *ngIf -->
    @if (isLoading()) {
    <dot-spinner />
    } @else {
    <dot-content />
    }

    <!-- Use @for instead of *ngFor -->
    @for (item of items(); track item.id) {
    <dot-item [data]="item" />
    } @empty {
    <dot-empty-state />
    }

    <!-- Use @switch instead of [ngSwitch] -->
    @switch (status()) { @case ('loading') {
    <dot-loading />
    } @case ('error') {
    <dot-error [message]="errorMessage()" />
    } @default {
    <dot-content />
    } }
  `,
})
export class FeatureComponent {
  isLoading = signal(false);
  items = signal<Item[]>([]);
  status = signal<"loading" | "error" | "success">("loading");
  errorMessage = signal("");
}
```

### 6. Signal Usage Patterns

Use `@let` when a signal value is used multiple times in a template:

```typescript
@Component({
  selector: "dot-user-profile",
  standalone: true,
  template: `
    <!-- Use @let when signal is used multiple times -->
    @let (user = currentUser()) {
    <h1>{{ user.name }}</h1>
    <p>Email: {{ user.email }}</p>
    <p>Role: {{ user.role }}</p>
    @if (user.isAdmin) {
    <dot-admin-panel />
    } }

    <!-- Direct signal usage when used once -->
    <p>Last login: {{ lastLoginDate() }}</p>
  `,
})
export class UserProfileComponent {
  currentUser = signal<User>({
    /* ... */
  });
  lastLoginDate = signal<Date>(new Date());
}
```

Best Practices for Template Syntax:

- Use `@if` instead of `*ngIf`
- Use `@for` instead of `*ngFor`
- Use `@switch` instead of `[ngSwitch]`
- Use `@let` for reused signal values
- Use `@defer` for lazy loading components

```typescript
@Component({
  selector: "dot-dashboard",
  standalone: true,
  template: `
    <!-- Lazy load heavy components -->
    @defer (on viewport) {
    <dot-data-grid [data]="gridData()" />
    } @loading {
    <dot-skeleton />
    }

    <!-- Defer with interaction trigger -->
    @defer (on interaction) {
    <dot-complex-chart [data]="chartData()" />
    }
  `,
})
export class DashboardComponent {
  gridData = signal<GridData[]>([]);
  chartData = signal<ChartData[]>([]);
}
```

### 7. Code Organization

```
feature/
├── components/           # Presentational components
│   ├── feature-list/
│   └── feature-item/
├── containers/          # Smart components
│   └── feature-page/
├── store/              # State management
│   ├── feature.store.ts
│   └── feature.model.ts
├── services/           # API and business logic
└── utils/             # Helper functions
```

### 8. Error Handling

```typescript
@Injectable()
export class ErrorHandlingService {
  private readonly messageService = inject(MessageService);

  handleError(error: HttpErrorResponse) {
    this.messageService.add({
      severity: "error",
      summary: "Error",
      detail: error.message,
    });
  }
}
```

### 9. Component Architecture Best Practices

#### Component Structure

```typescript
@Component({
  selector: "dot-my-component",
  standalone: true,
  imports: [CommonModule],
  templateUrl: "./my-component.component.html",
  styleUrls: ["./my-component.component.scss"],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class MyComponent implements OnInit, OnDestroy {
  // 1. Private fields
  private readonly destroy$ = new Subject<void>();

  // 2. Dependency Injection
  private readonly store = inject(MyStore);
  private readonly service = inject(MyService);

  // 3. Inputs/Outputs
  name = input<string>();
  config = input<Config>();
  itemSelected = output<Item>();

  // 4. Public Signals and Observables
  protected readonly vm$ = this.store.vm$;
  protected readonly state = computed(() => this.store.state());

  // 5. Lifecycle Hooks
  ngOnInit(): void {
    // Always use takeUntil for subscription management
    this.store.loadData().pipe(takeUntil(this.destroy$)).subscribe();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // 6. Public Methods
  onAction(item: Item): void {
    this.itemSelected.emit(item);
  }
}
```

#### Import Order and Organization

Follow this order for imports to maintain consistency:

```typescript
// 1. Angular Core
import { Component, inject } from "@angular/core";
import { CommonModule } from "@angular/common";

// 2. RxJS
import { Subject, takeUntil } from "rxjs";

// 3. Third-party Libraries
import { ButtonModule } from "primeng/button";

// 4. Application Core (shared/common)
import { ComponentStatus } from "@shared/models";
import { DotHttpErrorManagerService } from "@core/services";

// 5. Feature Specific
import { MyStore } from "./store/my.store";
import { MyService } from "./services/my.service";
import type { MyConfig } from "./models/my.model";
```

#### Code Style and Formatting

1. **String Literals**:

   ```typescript
   // ✅ Use double quotes for strings
   const name = "example";

   // ✅ Use template literals for multiline or interpolation
   const message = `Hello ${name}!
     Welcome to DotCMS`;
   ```

2. **Function Declarations**:

   ```typescript
   // ✅ Use arrow functions for methods
   const handleClick = (event: MouseEvent): void => {
     // Implementation
   };

   // ✅ Use function keyword for standalone functions
   function transformData(data: InputData): OutputData {
     return {
       // Implementation
     };
   }
   ```

3. **Type Declarations**:

   ```typescript
   // ✅ Use interfaces for objects
   interface UserData {
     id: string;
     name: string;
     role: UserRole;
   }

   // ✅ Use type for unions/intersections
   type UserRole = "admin" | "editor" | "viewer";
   ```

4. **Constants and Enums**:

   ```typescript
   // ✅ Use PascalCase for enums
   export enum ContentStatus {
     DRAFT = "draft",
     PUBLISHED = "published",
     ARCHIVED = "archived",
   }

   // ✅ Use UPPER_SNAKE_CASE for constant values
   export const MAX_ITEMS_PER_PAGE = 50;
   export const API_ENDPOINTS = {
     CONTENT: "/api/v1/content",
     USERS: "/api/v1/users",
   } as const;
   ```

5. **File Naming and Organization**:
   ```
   feature/
   ├── components/
   │   ├── feature-list/
   │   │   ├── feature-list.component.ts
   │   │   ├── feature-list.component.html
   │   │   └── feature-list.component.scss
   │   └── feature-item/
   ├── store/
   │   ├── feature.store.ts
   │   └── feature.model.ts
   ├── services/
   │   └── feature.service.ts
   └── utils/
       ├── feature.constants.ts
       └── feature.utils.ts
   ```

Remember:

- Use descriptive names that reveal intent
- Follow consistent casing conventions
- Keep files focused and single-responsibility
- Organize imports logically
- Document complex logic with JSDoc comments
- Use TypeScript's type system effectively

## Development Workflow

1. **Start Development**

   ```bash
   nx serve dotcms-ui
   ```

2. **Run Tests**

   ```bash
   nx test dotcms-ui
   ```

3. **Build for Production**
   ```bash
   nx build dotcms-ui --configuration=production
   ```

## Additional Resources

- [Angular Documentation](mdc:https:/angular.dev)
- [PrimeNG Documentation](mdc:https:/primeng.org)
- [NgRx Documentation](mdc:https:/ngrx.io)
- [Nx Documentation](mdc:https:/nx.dev)

## Code Style and Formatting

- Use ESLint and Prettier configurations
- Follow Angular style guide
- Use TypeScript strict mode
- Maintain consistent file naming
- Document public APIs

## Security Guidelines

- Follow OWASP security practices
- Implement proper CSRF protection
- Use Angular's built-in XSS protection
- Sanitize user inputs
- Secure HTTP communication

## Performance Monitoring

- Monitor bundle sizes
- Track Core Web Vitals
- Implement error tracking
- Use Angular DevTools
- Profile rendering performance

### Testing Guidelines

#### Component Testing IDs

Every component MUST include `data-testid` attributes following Testing Library's best practices. The format should be:

```html
<!-- Base Format -->
data-testid="[what-it-is]-[what-it-does]"

<!-- Examples -->
<div data-testid="activities-container">
  <header data-testid="activities-header">
    <h2 data-testid="activities-title">Activities</h2>
  </header>
  
  <ul data-testid="activities-list">
    <li data-testid="activity-item">
      <span data-testid="activity-description">Item Text</span>
    </li>
  </ul>

  <!-- With states -->
  <div data-testid="activity-item-active">Active Item</div>
  <div data-testid="activity-item-disabled">Disabled Item</div>
</div>
```

Rules for Test IDs:
1. Use kebab-case for all test IDs
2. Name should describe what the element is and/or does
3. Every interactive element MUST have a `data-testid`
4. Every container element that might need testing MUST have a `data-testid`

Example with Common Patterns:

```html
<!-- Lists -->
<ul data-testid="users-list">
  <li data-testid="user-item">
    <button data-testid="edit-button">Edit</button>
  </li>
</ul>

<!-- Forms -->
<form data-testid="login-form">
  <input 
    data-testid="username-input"
    type="text"
  >
  <button data-testid="submit-button">Login</button>
</form>

<!-- States -->
<div data-testid="error-message">Error message</div>
<div data-testid="success-message">Success message</div>

<!-- Loading States -->
<div data-testid="loading-spinner">Loading...</div>
<div data-testid="empty-state">No items found</div>
```

Common Elements and Their Test ID Patterns:
- Buttons: `data-testid="submit-button"` o `data-testid="edit-button"`
- Forms: `data-testid="login-form"` o `data-testid="search-form"`
- Inputs: `data-testid="username-input"` o `data-testid="search-input"`
- Lists: `data-testid="users-list"` o `data-testid="items-list"`
- List items: `data-testid="user-item"` o `data-testid="list-item"`
- Error messages: `data-testid="error-message"`
- Loading indicators: `data-testid="loading-spinner"`
- Empty states: `data-testid="empty-state"`
- Modal/dialog: `data-testid="confirmation-dialog"`
- Headers: `data-testid="page-header"` o `data-testid="section-header"`

Benefits of Testing Library Pattern:
- More intuitive for testing purposes
- Focuses on user interaction and behavior
- Less coupled to CSS structure
- Easier to maintain
- Better test readability
- Follows industry best practices

Testing Library Principles:
1. Test your software the way users use it
2. Find elements by accessibility roles and labels
3. Prefer text content and accessibility roles over CSS selectors
4. Avoid testing implementation details
5. Keep tests simple and maintainable

Example of a Component with Test IDs:
```typescript
@Component({
  template: `
    <div data-testid="user-profile">
      @if (isLoading()) {
        <div data-testid="loading-spinner">Loading...</div>
      } @else if (error()) {
        <div data-testid="error-message">{{ error() }}</div>
      } @else {
        <form data-testid="edit-profile-form">
          <input 
            data-testid="name-input"
            type="text"
            [formControl]="nameControl"
          >
          <button data-testid="save-button">
            Save Changes
          </button>
        </form>
      }
    </div>
  `
})
export class UserProfileComponent {
  // ... component logic
}
```
