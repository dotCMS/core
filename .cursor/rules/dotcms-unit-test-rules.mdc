---
description: Unit Test Rules
globs: core-web/{apps,libs}/**/*.{spec.ts,html,ts,mock.ts}
alwaysApply: false
---
# DotCMS Angular Unit Testing Rules

## Tech Stack for Testing

- **Testing Framework**: Jest
- **Testing Library**: Spectator + @testing-library/angular
- **Coverage Tool**: Jest Coverage
- **Mocking**: Jest + ts-mockito
- **E2E**: Playwright (when needed)

## File Structure and Naming

- Test files must be named with `.spec.ts` suffix
- Place test files adjacent to the file being tested
- Follow pattern: `[name].spec.ts` for all testable files
- Group related test files in a `__tests__` directory for complex components
- Create mock files with `.mock.ts` suffix in a `__mocks__` directory

## Element Selection Best Practices

### Using data-testid

1. **ALWAYS use data-testid for element selection**
```html
<!-- ❌ DON'T use class selectors -->
<button class="submit-button">Submit</button>

<!-- ✅ USE data-testid -->
<button data-testid="submit-button">Submit</button>
```

2. **Naming Convention for data-testid**
```html
<!-- Components -->
<div data-testid="user-profile">
  <!-- Form Controls -->
  <input data-testid="user-profile-name-input" />
  <button data-testid="user-profile-save-button">Save</button>
  
  <!-- Lists -->
  <ul data-testid="user-profile-items-list">
    <li data-testid="user-profile-item-1">Item 1</li>
  </ul>
</div>
```

3. **Finding Elements**
```typescript
// ❌ DON'T use class selectors
const button = fixture.debugElement.query(By.css('.submit-button'));

// ❌ DON'T use data-testid directly
const button = fixture.debugElement.query(By.css('[data-testid="submit-button"]'));

// ✅ ALWAYS use byTestId with spectator.query
const button = spectator.query(byTestId('submit-button'));
```

4. **CSS Class Verification**
```typescript
// ❌ DON'T use object notation for class verification
expect(icon).toHaveClass({ pi: true, 'pi-update': true });

// ✅ USE separate string arguments
expect(icon).toHaveClass('pi', 'pi-update');
```

## Basic Test Suite Template with Spectator

```typescript
import { createComponentFactory, Spectator, mockProvider, SpyObject } from '@ngneat/spectator/jest';
import { DotTestBed } from '@tests/dot-test-bed';

describe('ComponentName', () => {
    let spectator: Spectator<ComponentName>;
    let service: SpyObject<RequiredService>;

    const createComponent = createComponentFactory({
        component: ComponentName,
        imports: [CommonModule, DotTestingModule],
        providers: [
            mockProvider(RequiredService, {
                methodName: jest.fn().mockReturnValue(of(mockData))
            })
        ]
    });

    beforeEach(() => {
        spectator = createComponent();
        service = spectator.inject(RequiredService);
    });

    it('should create', () => {
        expect(spectator.component).toBeTruthy();
    });
});
```

## Component Input Handling

### Using setInput for Component Inputs

1. **ALWAYS use setInput for setting component inputs**
```typescript
// ❌ DON'T set inputs directly on the component
spectator.component.inputProperty = 'some value';

// ✅ USE spectator.setInput()
spectator.setInput('inputProperty', 'some value');
```

2. **For Multiple Inputs**
```typescript
// ❌ DON'T set multiple inputs directly
spectator.component.input1 = 'value1';
spectator.component.input2 = 'value2';

// ✅ SET each input separately
spectator.setInput('input1', 'value1');
spectator.setInput('input2', 'value2');

// ✅ Or set multiple inputs at once
spectator.setInput({
  input1: 'value1',
  input2: 'value2'
});
```

3. **Setting inputs and testing changes**
```typescript
// Set initial input
spectator.setInput('users', []);

// Verify initial state
expect(spectator.query(byTestId('no-users-message'))).toBeVisible();

// Set new input value
spectator.setInput('users', [{ id: 1, name: 'John' }]);

// Verify component reacts to input change
expect(spectator.query(byTestId('user-list'))).toBeVisible();
expect(spectator.query(byTestId('no-users-message'))).not.toBeVisible();
```

## User-Centric Testing Guidelines

### 1. Component Testing

```typescript
describe('DotComponent', () => {
    let spectator: Spectator<DotComponent>;
    const createComponent = createComponentFactory({
        component: DotComponent,
        imports: [DotTestingModule],
        providers: [mockProvider(DotService)]
    });

    beforeEach(() => {
        spectator = createComponent();
    });

    // ❌ Don't test implementation details
    it('should call loadData method', () => {
        spectator.component.loadData();
        expect(service.getData).toHaveBeenCalled();
    });

    // ✅ Test user interactions
    it('should load data when user clicks refresh button', () => {
        const spy = jest.spyOn(spectator.inject(DotService), 'getData');
        
        spectator.click(byTestId('refresh-button'));
        
        expect(spy).toHaveBeenCalled();
        expect(spectator.query(byTestId('data-container'))).toContainText('Updated Data');
    });

    // ✅ Test user flows
    it('should show success message after user submits form', async () => {
        // Arrange: Fill form as a user would
        spectator.typeInElement('John', byTestId('name-input'));
        spectator.typeInElement('john@email.com', byTestId('email-input'));

        // Act: Submit form
        spectator.click(byTestId('submit-button'));

        // Assert: Verify what user sees
        await spectator.fixture.whenStable();
        expect(spectator.query(byTestId('success-message'))).toBeVisible();
    });

    // ✅ Test error states from user perspective
    it('should show error message when server fails', async () => {
        const service = spectator.inject(DotService);
        jest.spyOn(service, 'getData').mockReturnValue(throwError(() => new Error()));

        spectator.click(byTestId('load-data-button'));

        await spectator.fixture.whenStable();
        expect(spectator.query(byTestId('error-message'))).toBeVisible();
    });
});
```

### 2. Form Testing

```typescript
describe('UserForm', () => {
    let spectator: Spectator<UserFormComponent>;

    beforeEach(() => {
        spectator = createComponent();
    });

    // ✅ Test form validation from user perspective
    it('should show validation errors when user submits empty form', () => {
        spectator.click(byTestId('submit-button'));

        expect(spectator.query(byTestId('name-error'))).toContainText('Name is required');
        expect(spectator.query(byTestId('email-error'))).toContainText('Email is required');
    });

    // ✅ Test successful form submission
    it('should submit form when all fields are valid', () => {
        // Fill form as a user would
        spectator.typeInElement('John Doe', byTestId('name-input'));
        spectator.typeInElement('john@email.com', byTestId('email-input'));
        spectator.click(byTestId('submit-button'));

        expect(spectator.query(byTestId('success-message'))).toBeVisible();
    });
});
```

### 3. Dialog/Modal Testing

```typescript
describe('ConfirmDialog', () => {
    // ✅ Test modal interactions
    it('should close modal when user clicks cancel', () => {
        spectator.click(byTestId('open-dialog-button'));
        expect(spectator.query(byTestId('confirm-dialog'))).toBeVisible();

        spectator.click(byTestId('dialog-cancel-button'));
        expect(spectator.query(byTestId('confirm-dialog'))).not.toBeVisible();
    });
});
```


## Common Test Utilities

```typescript
// Custom queries for Spectator
export const byTestId = (testId: string) => {
    return `[data-testid="${testId}"]`;
};

// User interaction helpers
export const userActions = {
    fillForm: async (spectator: Spectator<any>, formData: Record<string, string>) => {
        Object.entries(formData).forEach(([field, value]) => {
            spectator.typeInElement(value, byTestId(`${field}-input`));
        });
    },
    submitForm: (spectator: Spectator<any>) => {
        spectator.click(byTestId('submit-button'));
    }
};
```

## Best Practices

1. **User-Centric Testing**
   - Test from user's perspective
   - Simulate real user interactions
   - Verify what the user sees
   - Test error states and loading states

2. **Element Selection**
   - ALWAYS use data-testid
   - ALWAYS use byTestId() for element selection
   - Follow consistent naming convention
   - Add data-testid to elements that need testing
   - Avoid testing implementation details

3. **Component Inputs**
   - ALWAYS use spectator.setInput for component inputs
   - NEVER modify component.inputProperty directly
   - Test component's reaction to input changes

4. **Interaction Testing**
   - Use Spectator's click, typeInElement, etc.
   - Test complete user flows
   - Verify visual feedback
   - Test keyboard interactions when relevant

5. **Async Testing**
   - Use async/await with whenStable
   - Test loading states
   - Verify async operation completion
   - Test error handling

6. **Form Testing**
   - Test validation messages
   - Test form submission
   - Test field interactions
   - Test error states

7. **CSS Class Verification**
   - ALWAYS use multiple string parameters: toHaveClass('class1', 'class2')
   - NEVER use object notation: toHaveClass({ class1: true })

Remember:
- Always think from the user's perspective
- Add data-testid to elements that need testing
- Use Spectator for better testing APIs
- Use setInput for component inputs instead of direct assignment
- Test complete user flows, not just methods
- Verify what the user sees and experiences

### File Organization Best Practices
```
component-name/
├── component-name.component.ts
├── component-name.component.html
├── component-name.component.spec.ts
├── __mocks__/
│   ├── component-name.mock.ts
│   └── service-name.mock.ts
└── __tests__/  # For complex test scenarios
    └── complex-scenario.spec.ts
```

Remember:
- Keep test files next to the components they test
- Include HTML templates in your searches for better context
- Include mock files (*.mock.ts) when needed
- Group related mocks in a `__mocks__` directory
- Use `__tests__` directory for complex test scenarios

# DotCMS Unit Test Guide

This guide provides instructions for running and writing unit tests for the DotCMS multi-module Maven project.

## Running Unit Tests

### Basic Test Commands

Always use the Maven wrapper (`mvnw`):

```bash
# Run all tests
./mvnw clean test

# Run tests in a specific module
./mvnw -pl :dotcms-core test

# Run a specific test class
./mvnw -pl :dotcms-core test -Dtest=MyTestClass

# Run a specific test method
./mvnw -pl :dotcms-core test -Dtest=MyTestClass#myTestMethod

# Skip tests
./mvnw -DskipTests clean install
```

### Integration Tests

```bash
# Run core integration tests
./mvnw -pl :dotcms-integration verify -Dcoreit.test.skip=false

# Run Postman tests
./mvnw -pl :dotcms-postman verify -Dpostman.test.skip=false

# Run Karate tests
./mvnw -pl :dotcms-test-karate verify -Dkarate.test.skip=false
```

### E2E Tests

```bash
# Run E2E Java tests
./mvnw -pl :dotcms-e2e-java verify -De2e.test.skip=false

# Run E2E Node tests
./mvnw -pl :dotcms-e2e-node verify -De2e.test.skip=false

# Run specific E2E Node tests
./mvnw -pl :dotcms-e2e-node verify -De2e.test.skip=false -De2e.test.specific="login.spec.ts"
```

### Just Commands for Testing

If you have `just` installed:

```bash
# Full test suite
just build-test

# Integration tests
just test-integration

# Postman tests
just test-postman collections='ai'

# Karate tests
just test-karate

# E2E tests
just test-e2e-java
just test-e2e-node
```

## Debug Testing

### Debug Integration Tests

```bash
# Debug with suspended execution
just test-integration-debug-suspend

# Or using mvnw directly
./mvnw -pl :dotcms-integration verify -Dcoreit.test.skip=false -Pdebug-suspend
```

### Debug E2E Tests

```bash
# Debug Java E2E tests
just test-e2e-java-debug-suspend

# Debug Node E2E tests with UI mode
just test-e2e-node-debug-ui test="login.spec.ts"

# Debug Node E2E tests with inspector
just test-e2e-node-debug test="login.spec.ts"
```

## Test Environment Setup

```bash
# Prepare for running integration tests in an IDE
just test-integration-ide

# Prepare for running Postman tests in an IDE
just test-postman-ide

# Prepare for running Karate tests in an IDE
just test-karate-ide
```

## Best Practices for Writing Tests

1. Follow the standard Maven test directory structure:
   - Unit tests: `src/test/java`
   - Integration tests: In the dedicated integration test modules

2. Use appropriate test naming conventions:
   - Unit test classes should end with `Test`
   - Integration test classes should end with `IT`

3. Keep tests independent:
   - Don't rely on test execution order
   - Clean up resources after tests

4. Write focused tests:
   - Test one behavior per test method
   - Use descriptive test method names

5. Use test fixtures and utilities:
   - Reuse test setup code
   - Leverage existing test utilities

## JMeter Performance Tests

```bash
# Run JMeter tests
just run-jmeter-tests

# Or using mvnw
./mvnw verify -Djmeter.test.skip=false -pl :dotcms-test-jmeter
```

## Stopping Test Environments

```bash
# Stop integration test services
just test-integration-stop

# Stop Postman test services
just postman-stop

# Stop E2E test services
just test-e2e-stop
```