---
description: Unit Test Rules
globs: core-web/{apps,libs}/**/*.{spec.ts,html,ts,mock.ts}
---
# DotCMS Angular Unit Testing Rules

## Tech Stack for Testing

- **Testing Framework**: Jest
- **Testing Library**: Spectator + @testing-library/angular
- **Coverage Tool**: Jest Coverage
- **Mocking**: Jest + ts-mockito
- **E2E**: Playwrite (when needed)

## File Structure and Naming

- Test files must be named with `.spec.ts` suffix
- Place test files adjacent to the file being tested
- Follow pattern: `[name].spec.ts` for all testable files
- Group related test files in a `__tests__` directory for complex components
- Create mock files with `.mock.ts` suffix in a `__mocks__` directory

## Element Selection Best Practices

### Using data-testid

1. **Always use data-testid for element selection**
```html
<!-- ❌ Don't use class selectors -->
<button class="submit-button">Submit</button>

<!-- ✅ Use data-testid -->
<button data-testid="submit-button">Submit</button>
```

2. **Naming Convention for data-testid**
```html
<!-- Components -->
<div data-testid="user-profile">
  <!-- Form Controls -->
  <input data-testid="user-profile-name-input" />
  <button data-testid="user-profile-save-button">Save</button>
  
  <!-- Lists -->
  <ul data-testid="user-profile-items-list">
    <li data-testid="user-profile-item-1">Item 1</li>
  </ul>
</div>
```

3. **Finding Elements**
```typescript
// ❌ Don't use class selectors
const button = fixture.debugElement.query(By.css('.submit-button'));

// ✅ Use data-testid
const button = screen.getByTestId('submit-button');
```

## Basic Test Suite Template with Spectator

```typescript
import { createComponentFactory, Spectator } from '@ngneat/spectator/jest';
import { DotTestBed } from '@tests/dot-test-bed';

describe('ComponentName', () => {
    let spectator: Spectator<ComponentName>;
    const createComponent = createComponentFactory({
        component: ComponentName,
        imports: [CommonModule, DotTestingModule],
        providers: [
            MockProvider(RequiredService, {
                methodName: () => of(mockData)
            })
        ]
    });

    beforeEach(() => {
        spectator = createComponent();
    });

    it('should create', () => {
        expect(spectator.component).toBeTruthy();
    });
});
```

## User-Centric Testing Guidelines

### 1. Component Testing

```typescript
describe('DotComponent', () => {
    let spectator: Spectator<DotComponent>;
    const createComponent = createComponentFactory({
        component: DotComponent,
        imports: [DotTestingModule],
        providers: [MockProvider(DotService)]
    });

    beforeEach(() => {
        spectator = createComponent();
    });

    // ❌ Don't test implementation details
    it('should call loadData method', () => {
        spectator.component.loadData();
        expect(service.getData).toHaveBeenCalled();
    });

    // ✅ Test user interactions
    it('should load data when user clicks refresh button', () => {
        const spy = jest.spyOn(spectator.inject(DotService), 'getData');
        
        spectator.click(byTestId('refresh-button'));
        
        expect(spy).toHaveBeenCalled();
        expect(spectator.query(byTestId('data-container'))).toContainText('Updated Data');
    });

    // ✅ Test user flows
    it('should show success message after user submits form', async () => {
        // Arrange: Fill form as a user would
        spectator.typeInElement('John', byTestId('name-input'));
        spectator.typeInElement('john@email.com', byTestId('email-input'));

        // Act: Submit form
        spectator.click(byTestId('submit-button'));

        // Assert: Verify what user sees
        await spectator.fixture.whenStable();
        expect(spectator.query(byTestId('success-message'))).toBeVisible();
    });

    // ✅ Test error states from user perspective
    it('should show error message when server fails', async () => {
        const service = spectator.inject(DotService);
        jest.spyOn(service, 'getData').mockReturnValue(throwError(() => new Error()));

        spectator.click(byTestId('load-data-button'));

        await spectator.fixture.whenStable();
        expect(spectator.query(byTestId('error-message'))).toBeVisible();
    });
});
```

### 2. Form Testing

```typescript
describe('UserForm', () => {
    let spectator: Spectator<UserFormComponent>;

    beforeEach(() => {
        spectator = createComponent();
    });

    // ✅ Test form validation from user perspective
    it('should show validation errors when user submits empty form', () => {
        spectator.click(byTestId('submit-button'));

        expect(spectator.query(byTestId('name-error'))).toContainText('Name is required');
        expect(spectator.query(byTestId('email-error'))).toContainText('Email is required');
    });

    // ✅ Test successful form submission
    it('should submit form when all fields are valid', () => {
        // Fill form as a user would
        spectator.typeInElement('John Doe', byTestId('name-input'));
        spectator.typeInElement('john@email.com', byTestId('email-input'));
        spectator.click(byTestId('submit-button'));

        expect(spectator.query(byTestId('success-message'))).toBeVisible();
    });
});
```

### 3. Dialog/Modal Testing

```typescript
describe('ConfirmDialog', () => {
    // ✅ Test modal interactions
    it('should close modal when user clicks cancel', () => {
        spectator.click(byTestId('open-dialog-button'));
        expect(spectator.query(byTestId('confirm-dialog'))).toBeVisible();

        spectator.click(byTestId('dialog-cancel-button'));
        expect(spectator.query(byTestId('confirm-dialog'))).not.toBeVisible();
    });
});
```

## Common Test Utilities

```typescript
// Custom queries for Spectator
export const byTestId = (testId: string) => {
    return `[data-testid="${testId}"]`;
};

// User interaction helpers
export const userActions = {
    fillForm: async (spectator: Spectator<any>, formData: Record<string, string>) => {
        Object.entries(formData).forEach(([field, value]) => {
            spectator.typeInElement(value, byTestId(`${field}-input`));
        });
    },
    submitForm: (spectator: Spectator<any>) => {
        spectator.click(byTestId('submit-button'));
    }
};
```

## Best Practices

1. **User-Centric Testing**
   - Test from user's perspective
   - Simulate real user interactions
   - Verify what the user sees
   - Test error states and loading states

2. **Element Selection**
   - Always use data-testid
   - Follow consistent naming convention
   - Add data-testid to elements that need testing
   - Avoid testing implementation details

3. **Interaction Testing**
   - Use Spectator's click, typeInElement, etc.
   - Test complete user flows
   - Verify visual feedback
   - Test keyboard interactions when relevant

4. **Async Testing**
   - Use async/await with whenStable
   - Test loading states
   - Verify async operation completion
   - Test error handling

5. **Form Testing**
   - Test validation messages
   - Test form submission
   - Test field interactions
   - Test error states

Remember:
- Always think from the user's perspective
- Add data-testid to elements that need testing
- Use Spectator for better testing APIs
- Test complete user flows, not just methods
- Verify what the user sees and experiences




### File Organization Best Practices
```
component-name/
├── component-name.component.ts
├── component-name.component.html
├── component-name.component.spec.ts
├── __mocks__/
│   ├── component-name.mock.ts
│   └── service-name.mock.ts
└── __tests__/  # For complex test scenarios
    └── complex-scenario.spec.ts
```

Remember:
- Keep test files next to the components they test
- Include HTML templates in your searches for better context
- Include mock files (*.mock.ts) when needed
- Group related mocks in a `__mocks__` directory
- Use `__tests__` directory for complex test scenarios 