
h1. README

This bundle plugin is an example of how to create and add Portlets using an OSGI bundle plugin.
This example have the code to create three types of Portlets:
* *Velocity Portlet*: Portlet that will display content using a velocity file
* *Jsp Portlet*: Portlet that will display content using a jsp file
* *Struts Portlet*: Portlet that will call an Struts Action class that will use a jsp file in order to display content.

h2. How to create a bundle plugin for Portles

In order to create this OSGI plugin, you must write the *META-INF/MANIFEST* to be inserted into OSGI jar.

In this *MANIFEST* you must specify (see template plugin):

* *Bundle-Name*: The name of your bundle
* *Bundle-SymbolicName*: A short an unique name for the bundle
* *Bundle-Activator*: Package and name of your Activator class (example: com.dotmarketing.osgi.portlet.Activator)
* *DynamicImport-Package: **
Dynamically add required imports the plugin may need without add them explicitly</spam>
* *Import-Package*: This is a comma separated list of package's name. In this list there must be the packages that you are using inside the bundle plugin and that are exported by the dotCMS runtime.


h2. Beware (!)

In order to work inside the Apache Felix OSGI runtime, the import and export directive must be bidirectional.

The DotCMS must declare the set of packages that will be available to the OSGI plugins by changing the property:
*felix.org.osgi.framework.system.packages.extra* inside the configuration file *src-conf/dotmarketing-config.properties*

Only after that exported packages are defined in this list, a plugin can import the packages and use them inside the OSGI blundle.


h2. Components

h3. Resources:

* *conf/* Folder (Folder that contains the configuration files for the Portlets definitions) - Both files on this folder are MANDATORY (!)
** *conf/portlet.xml* The standard JSR-286 portlet configuration file.
** *conf/liferay-portlet.xml* This file describes some optional Liferay-specific enhancements for JSR-286 portlets that are installed on a Liferay Portal server.

* *ext/* Folder (Folder that contains the files used by the defined Portles)
** *ext/view.vtl* Velocity file use it by the Velocity Portlet
** *ext/hello.jsp* Jsp file use it by the Jsp Portlet
** *ext/strutshelloworld/view.jsp* Used by the Struts Portlet and invoked inside the *HelloWorldAction*
** *ext/strutshelloworld/view_hello.jsp* Used by the Struts Portlet and invoked inside the *HelloWorldAction*

h3. com.dotmarketing.osgi.portlet.HelloWorldAction

Simple Action class that extends from the *com.dotmarketing.portal.struts.DotPortletAction*
The *conf/portlet.xml* file have the definition for an *StrutsPortlet* and that definition have a reference to the mapping for the *HelloWorldAction*.

h3. Activator

This bundle activator extends from *com.dotmarketing.osgi.GenericBundleActivator* and implements *BundleActivator.start()*.
This activator have 2 main important fragments of code:
# Will manually register an *ActionMapping* for our Struts action class *HelloWorldAction* that will be use it by the StrutsPortlet we defined in the configuration files (*conf/*).
# Will manually register the Portlets making use of the method *registerPortlets*.

* PLEASE note the *unregisterServices()* call on the *stop* method, this call is MANDATORY (!) as it will allow us to clean and remove the registered Portlets and related code (like registered ActionMappings ).

h3. Multi language support

The creation of the Portlets will generate the following language keys in order to use them and set the title for the Portlets:
* javax.portlet.title.EXT_HELLO_WORLD
* javax.portlet.title.EXT_JSP_HELLO_WORLD
* javax.portlet.title.EXT_STRUTS_HELLO_WORLD

In order to add multilanguage values for those keys:
*CMS Admin* -> *Language Variables* -> *Edit Default Language Variables* -> Add the values for the above keys
