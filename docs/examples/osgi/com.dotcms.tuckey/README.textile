
h1. README

This bundle plugin is an example of how add Tuckey rewrite Rules using an OSGI bundle plugin.

h2. How to create a bundle plugin for Tuckeys rewrite Rules

In order to create this OSGI plugin, you must write the *META-INF/MANIFEST* to be inserted into OSGI jar.

In this *MANIFEST* you must specify (see template plugin):

* *Bundle-Name*: The name of your bundle
* *Bundle-SymbolicName*: A short an unique name for the bundle
* *Bundle-Activator*: Package and name of your Activator class (example: com.dotmarketing.osgi.tuckey.Activator)
* *DynamicImport-Package: **
Dynamically add required imports the plugin may need without add them explicitly
* *Import-Package*: This is a comma separated list of package's name. In this list there must be the packages that you are
using inside the bundle plugin and that are exported by the dotCMS runtime.


h2. Beware (!)

In order to work inside the Apache Felix OSGI runtime, the import and export directive must be bidirectional.

The DotCMS must declare the set of packages that will be available to the OSGI plugins by changing the file: *dotCMS/WEB-INF/felix/osgi-extra.conf*.
This is possible also using the dotCMS UI (CMS Admin->Dynamic Plugins->Exported Packages).

Only after that exported packages are defined in this list, a plugin can Import the packages to use them inside the OSGI blundle.


h2. Components

h3. com.dotmarketing.osgi.tuckey.HelloWorldServlet

Simple and standard implementation of a HttpServlet that we will use in order to test the added Tuckey Rewrite Rules

h3. Activator

This bundle activator extends from *com.dotmarketing.osgi.GenericBundleActivator* and implements *BundleActivator.start()*.
Will manually register Tuckey Rewrite Rules making use of the method *addRewriteRule*

* PLEASE note the *unregisterServices()* call on the *stop* method, this call is MANDATORY (!) as it will allow us to stop and remove the registered Tuckey Rewrite Rules when the plugin is undeploy.

________________________________________________________________________________________

h2. Testing

* *Accessing our simple test servlet*: http://localhost:8080/app/helloworld
* *Testing the forward rule*: http://localhost:8080/example/url/forward
* *Testing the redirect rule*: http://localhost:8080/example/url/redirect
* *Testing the conditions*: http://localhost:8080/example/url/condition -> If call it using google Chrome it will display the message "from google Chrome" if not, will do nothing (404 error).
