{
	"info": {
		"_postman_id": "d5e911d7-34a2-4553-9c35-053356d4164c",
		"name": "User Resource",
		"description": "Verifies that commonly-used routines for interacting with User data are working as expected. Most of these are related to filtering operations and for back-end use only.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "781456"
	},
	"item": [
		{
			"name": "Users Validations",
			"item": [
				{
					"name": "Get Users Include Anon and Default User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().entity;",
									"",
									"pm.test(\"Contains anonymous\", function () {",
									"    containsAttrAndValue = eval(pm.collectionVariables.get(\"containsAttrAndValue\", containsAttrAndValue.toString()));",
									"    pm.expect(containsAttrAndValue(jsonData, \"userId\" ,\"anonymous\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Contains default\", function () {",
									"    containsAttrAndValue = eval(pm.collectionVariables.get(\"containsAttrAndValue\", containsAttrAndValue.toString()));",
									"    pm.expect(containsAttrAndValue(jsonData, \"userId\" ,\"dotcms.org.default\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Check pagination data\", function () {",
									"    var paginationData = pm.response.json().pagination;",
									"    pm.expect(paginationData.currentPage).to.equal(1);",
									"    pm.expect(paginationData.perPage).to.equal(100);",
									"    pm.expect(paginationData.totalEntries).to.gte(2);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/filter?per_page=100&includeanonymous=true&includedefault=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"filter"
							],
							"query": [
								{
									"key": "per_page",
									"value": "100"
								},
								{
									"key": "includeanonymous",
									"value": "true"
								},
								{
									"key": "includedefault",
									"value": "true"
								}
							]
						},
						"description": "### GET /api/v1/users/filter\n\nThis endpoint retrieves a list of users based on specified filters.\n\n#### Request\n\n- Method: GET\n- URL: `{{serverURL}}/api/v1/users/filter`\n- Query Parameters:\n    - per_page (optional): The number of users to be included per page.\n    - includeanonymous (optional): Indicates whether to include anonymous users in the response.\n    - includedefault (optional): Indicates whether to include default users in the response.\n\n#### Response\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n  \"entity\": [\n    {\n      \"active\": true,\n      \"actualCompanyId\": \"\",\n      \"additionalInfo\": {},\n      \"admin\": true,\n      \"backendUser\": true,\n      \"birthday\": 0,\n      \"comments\": null,\n      \"companyId\": \"\",\n      \"createDate\": 0,\n      \"deleteDate\": null,\n      \"deleteInProgress\": true,\n      \"emailAddress\": \"\",\n      \"emailaddress\": \"\",\n      \"failedLoginAttempts\": 0,\n      \"female\": true,\n      \"firstName\": \"\",\n      \"frontendUser\": true,\n      \"fullName\": \"\",\n      \"gravitar\": \"\",\n      \"hasConsoleAccess\": true,\n      \"id\": \"\",\n      \"languageId\": \"\",\n      \"lastLoginDate\": null,\n      \"lastLoginIP\": null,\n      \"lastName\": \"\",\n      \"male\": true,\n      \"middleName\": \"\",\n      \"modificationDate\": 0,\n      \"name\": \"\",\n      \"nickname\": null,\n      \"passwordExpirationDate\": null,\n      \"passwordExpired\": true,\n      \"passwordReset\": true,\n      \"timeZoneId\": \"\",\n      \"type\": \"\",\n      \"userId\": \"\"\n    }\n  ],\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": {\n    \"currentPage\": 0,\n    \"perPage\": 0,\n    \"totalEntries\": 0\n  },\n  \"permissions\": []\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get LoginAsData Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().entity;",
									"",
									"pm.test('Must not contains Admin', () => {",
									"    _.any(jsonData, (item) => {",
									"        pm.expect(item.firstName).to.not.be.eql('Admin')",
									"    })",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/loginAsData?per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"loginAsData"
							],
							"query": [
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "\n### GET /api/v1/users/loginAsData\n\nThis endpoint retrieves user data with the option to specify the number of entries per page.\n\n#### Request\n\n- Method: GET\n- URL: `{{serverURL}}/api/v1/users/loginAsData?per_page=40`\n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"active\": { \"type\": \"boolean\" },\n          \"actualCompanyId\": { \"type\": \"string\" },\n          \"additionalInfo\": { \"type\": \"object\" },\n          \"admin\": { \"type\": \"boolean\" },\n          \"backendUser\": { \"type\": \"boolean\" },\n          \"birthday\": { \"type\": \"null\" },\n          \"comments\": { \"type\": \"null\" },\n          \"companyId\": { \"type\": \"string\" },\n          \"createDate\": { \"type\": \"number\" },\n          \"deleteDate\": { \"type\": \"null\" },\n          \"deleteInProgress\": { \"type\": \"boolean\" },\n          \"emailAddress\": { \"type\": \"string\" },\n          \"emailaddress\": { \"type\": \"string\" },\n          \"failedLoginAttempts\": { \"type\": \"number\" },\n          \"female\": { \"type\": \"boolean\" },\n          \"firstName\": { \"type\": \"string\" },\n          \"frontendUser\": { \"type\": \"boolean\" },\n          \"fullName\": { \"type\": \"string\" },\n          \"gravitar\": { \"type\": \"string\" },\n          \"hasConsoleAccess\": { \"type\": \"boolean\" },\n          \"id\": { \"type\": \"string\" },\n          \"languageId\": { \"type\": \"string\" },\n          \"lastLoginDate\": { \"type\": \"number\" },\n          \"lastLoginIP\": { \"type\": \"string\" },\n          \"lastName\": { \"type\": \"string\" },\n          \"male\": { \"type\": \"boolean\" },\n          \"middleName\": { \"type\": \"null\" },\n          \"modificationDate\": { \"type\": \"number\" },\n          \"name\": { \"type\": \"string\" },\n          \"nickname\": { \"type\": \"null\" },\n          \"passwordExpirationDate\": { \"type\": \"null\" },\n          \"passwordExpired\": { \"type\": \"boolean\" },\n          \"passwordReset\": { \"type\": \"boolean\" },\n          \"requestPassword\": { \"type\": \"boolean\" },\n          \"timeZoneId\": { \"type\": \"string\" },\n          \"type\": { \"type\": \"string\" },\n          \"userId\": { \"type\": \"string\" }\n        }\n      }\n    },\n    \"errors\": { \"type\": \"array\" },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\" },\n    \"pagination\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"currentPage\": { \"type\": \"number\" },\n        \"perPage\": { \"type\": \"number\" },\n        \"totalEntries\": { \"type\": \"number\" }\n      }\n    },\n    \"permissions\": { \"type\": \"array\" }\n  }\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "Get Users Include Anon and Exclude Default User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().entity;",
									"",
									"pm.test(\"Contains anonymous\", function () {",
									"    containsAttrAndValue = eval(pm.collectionVariables.get(\"containsAttrAndValue\", containsAttrAndValue.toString()));",
									"    pm.expect(containsAttrAndValue(jsonData, \"userId\" ,\"anonymous\")).to.be.true;",
									"});",
									"",
									"pm.test(\"Does not contain default\", function () {",
									"    containsAttrAndValue = eval(pm.collectionVariables.get(\"containsAttrAndValue\", containsAttrAndValue.toString()));",
									"    pm.expect(containsAttrAndValue(jsonData, \"userId\" ,\"dotcms.org.default\")).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/filter?per_page=100&includeanonymous=true&includedefault=false",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"filter"
							],
							"query": [
								{
									"key": "per_page",
									"value": "100"
								},
								{
									"key": "includeanonymous",
									"value": "true"
								},
								{
									"key": "includedefault",
									"value": "false"
								}
							]
						},
						"description": "### GET /api/v1/users/filter\n\nThis endpoint retrieves a list of users based on specified filter criteria.\n\n#### Request\n\n- Method: GET\n- URL: `{{serverURL}}/api/v1/users/filter`\n- Query Parameters:\n    - per_page (integer, optional): Number of users per page.\n    - includeanonymous (boolean, optional): Flag to include anonymous users.\n    - includedefault (boolean, optional): Flag to include default users.\n\n#### Response\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"active\": { \"type\": \"boolean\" },\n          \"actualCompanyId\": { \"type\": \"string\" },\n          \"additionalInfo\": { \"type\": \"object\" },\n          \"admin\": { \"type\": \"boolean\" },\n          \"backendUser\": { \"type\": \"boolean\" },\n          \"birthday\": { \"type\": [\"string\", \"null\"] },\n          \"comments\": { \"type\": [\"string\", \"null\"] },\n          \"companyId\": { \"type\": \"string\" },\n          \"createDate\": { \"type\": \"number\" },\n          \"deleteDate\": { \"type\": [\"number\", \"null\"] },\n          \"deleteInProgress\": { \"type\": \"boolean\" },\n          \"emailAddress\": { \"type\": \"string\" },\n          \"failedLoginAttempts\": { \"type\": \"integer\" },\n          \"female\": { \"type\": \"boolean\" },\n          \"firstName\": { \"type\": \"string\" },\n          \"frontendUser\": { \"type\": \"boolean\" },\n          \"fullName\": { \"type\": \"string\" },\n          \"gravitar\": { \"type\": \"string\" },\n          \"hasConsoleAccess\": { \"type\": \"boolean\" },\n          \"id\": { \"type\": \"string\" },\n          \"languageId\": { \"type\": \"string\" },\n          \"lastLoginDate\": { \"type\": \"number\" },\n          \"lastLoginIP\": { \"type\": \"string\" },\n          \"lastName\": { \"type\": \"string\" },\n          \"male\": { \"type\": \"boolean\" },\n          \"middleName\": { \"type\": [\"string\", \"null\"] },\n          \"modificationDate\": { \"type\": \"number\" },\n          \"name\": { \"type\": \"string\" },\n          \"nickname\": { \"type\": [\"string\", \"null\"] },\n          \"passwordExpirationDate\": { \"type\": [\"string\", \"null\"] },\n          \"passwordExpired\": { \"type\": \"boolean\" },\n          \"passwordReset\": { \"type\": \"boolean\" },\n          \"timeZoneId\": { \"type\": \"string\" },\n          \"type\": { \"type\": \"string\" },\n          \"userId\": { \"type\": \"string\" }\n        },\n        \"required\": [\n          \"active\",\n          \"admin\",\n          \"backendUser\",\n          \"companyId\",\n          \"createDate\",\n          \"deleteInProgress\",\n          \"emailAddress\",\n          \"failedLoginAttempts\",\n          \"female\",\n          \"firstName\",\n          \"frontendUser\",\n          \"fullName\",\n          \"gravitar\",\n          \"hasConsoleAccess\",\n          \"id\",\n          \"languageId\",\n          \"lastLoginDate\",\n          \"lastLoginIP\",\n          \"lastName\",\n          \"male\",\n          \"modificationDate\",\n          \"name\",\n          \"passwordExpired\",\n          \"passwordReset\",\n          \"timeZoneId\",\n          \"type\",\n          \"userId\"\n        ]\n      }\n    },\n    \"errors\": { \"type\": \"array\" },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\" },\n    \"pagination\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"currentPage\": { \"type\": \"integer\" },\n        \"perPage\": { \"type\": \"integer\" },\n        \"totalEntries\": { \"type\": \"integer\" }\n      }\n    },\n    \"permissions\": { \"type\": \"array\" }\n  },\n  \"required\": [\"entity\", \"errors\", \"i18nMessagesMap\", \"messages\", \"pagination\", \"permissions\"]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get Users Exclude Anon and Default User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().entity;",
									"",
									"pm.test(\"Does not contain anonymous\", function () {",
									"    containsAttrAndValue = eval(pm.collectionVariables.get(\"containsAttrAndValue\", containsAttrAndValue.toString()));",
									"    pm.expect(containsAttrAndValue(jsonData, \"userId\" ,\"anonymous\")).to.be.false;",
									"});",
									"",
									"pm.test(\"Does not contain default\", function () {",
									"    containsAttrAndValue = eval(pm.collectionVariables.get(\"containsAttrAndValue\", containsAttrAndValue.toString()));",
									"    pm.expect(containsAttrAndValue(jsonData, \"userId\" ,\"dotcms.org.default\")).to.be.false;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/filter?per_page=100&includeanonymous=false&includedefault=false",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"filter"
							],
							"query": [
								{
									"key": "per_page",
									"value": "100"
								},
								{
									"key": "includeanonymous",
									"value": "false"
								},
								{
									"key": "includedefault",
									"value": "false"
								}
							]
						},
						"description": "### API Request Description\n\nThis endpoint makes an HTTP GET request to retrieve a list of users with filtering options. The request includes query parameters for pagination, and filtering options to exclude anonymous and default users.\n\n### Request Body\n\nThis request does not contain a request body.\n\n### Response Body\n\nThe response is in JSON format and represents an array of user entities. Each user entity contains various attributes such as active status, company ID, admin status, user details, login information, and permissions. Additionally, the response includes error messages, internationalization messages, pagination details, and permissions.\n\n### JSON Schema\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"active\": { \"type\": \"boolean\" },\n          \"actualCompanyId\": { \"type\": \"string\" },\n          \"additionalInfo\": { \"type\": \"object\" },\n          \"admin\": { \"type\": \"boolean\" },\n          \"backendUser\": { \"type\": \"boolean\" },\n          \"birthday\": { \"type\": [\"string\", \"null\"] },\n          \"comments\": { \"type\": [\"string\", \"null\"] },\n          \"companyId\": { \"type\": \"string\" },\n          \"createDate\": { \"type\": \"number\" },\n          \"deleteDate\": { \"type\": [\"number\", \"null\"] },\n          \"deleteInProgress\": { \"type\": \"boolean\" },\n          \"emailAddress\": { \"type\": \"string\" },\n          \"emailaddress\": { \"type\": \"string\" },\n          \"failedLoginAttempts\": { \"type\": \"number\" },\n          \"female\": { \"type\": \"boolean\" },\n          \"firstName\": { \"type\": \"string\" },\n          \"frontendUser\": { \"type\": \"boolean\" },\n          \"fullName\": { \"type\": \"string\" },\n          \"gravitar\": { \"type\": \"string\" },\n          \"hasConsoleAccess\": { \"type\": \"boolean\" },\n          \"id\": { \"type\": \"string\" },\n          \"languageId\": { \"type\": \"string\" },\n          \"lastLoginDate\": { \"type\": \"number\" },\n          \"lastLoginIP\": { \"type\": \"string\" },\n          \"lastName\": { \"type\": \"string\" },\n          \"male\": { \"type\": \"boolean\" },\n          \"middleName\": { \"type\": [\"string\", \"null\"] },\n          \"modificationDate\": { \"type\": \"number\" },\n          \"name\": { \"type\": \"string\" },\n          \"nickname\": { \"type\": [\"string\", \"null\"] },\n          \"passwordExpirationDate\": { \"type\": [\"number\", \"null\"] },\n          \"passwordExpired\": { \"type\": \"boolean\" },\n          \"passwordReset\": { \"type\": \"boolean\" },\n          \"timeZoneId\": { \"type\": \"string\" },\n          \"type\": { \"type\": \"string\" },\n          \"userId\": { \"type\": \"string\" }\n        },\n        \"required\": [\n          \"active\",\n          \"admin\",\n          \"backendUser\",\n          \"companyId\",\n          \"createDate\",\n          \"deleteInProgress\",\n          \"emailAddress\",\n          \"emailaddress\",\n          \"failedLoginAttempts\",\n          \"female\",\n          \"firstName\",\n          \"frontendUser\",\n          \"fullName\",\n          \"gravitar\",\n          \"hasConsoleAccess\",\n          \"id\",\n          \"languageId\",\n          \"lastLoginDate\",\n          \"lastLoginIP\",\n          \"lastName\",\n          \"male\",\n          \"modificationDate\",\n          \"name\",\n          \"passwordExpired\",\n          \"passwordReset\",\n          \"timeZoneId\",\n          \"type\",\n          \"userId\"\n        ]\n      }\n    },\n    \"errors\": { \"type\": \"array\" },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\" },\n    \"pagination\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"currentPage\": { \"type\": \"number\" },\n        \"perPage\": { \"type\": \"number\" },\n        \"totalEntries\": { \"type\": \"number\" }\n      },\n      \"required\": [\"currentPage\", \"perPage\", \"totalEntries\"]\n    },\n    \"permissions\": { \"type\": \"array\" }\n  },\n  \"required\": [\"entity\", \"errors\", \"i18nMessagesMap\", \"messages\", \"pagination\", \"permissions\"]\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Get Users Check Total Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json().entity;",
									"console.log(jsonData);",
									"console.log('Length = ' + jsonData.length);",
									"",
									"pm.test(\"Total User Count\", function () {",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/filter",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"filter"
							]
						},
						"description": "\nThe API returns a JSON response with the following schema:\n\n```json\n{\n    \"entity\": [\n        {\n            \"active\": \"boolean\",\n            \"actualCompanyId\": \"string\",\n            \"additionalInfo\": \"object\",\n            \"admin\": \"boolean\",\n            \"backendUser\": \"boolean\",\n            \"birthday\": \"null\",\n            \"comments\": \"null\",\n            \"companyId\": \"string\",\n            \"createDate\": \"number\",\n            \"deleteDate\": \"null\",\n            \"deleteInProgress\": \"boolean\",\n            \"emailAddress\": \"string\",\n            \"emailaddress\": \"string\",\n            \"failedLoginAttempts\": \"number\",\n            \"female\": \"boolean\",\n            \"firstName\": \"string\",\n            \"frontendUser\": \"boolean\",\n            \"fullName\": \"string\",\n            \"gravitar\": \"string\",\n            \"hasConsoleAccess\": \"boolean\",\n            \"id\": \"string\",\n            \"languageId\": \"string\",\n            \"lastLoginDate\": \"number\",\n            \"lastLoginIP\": \"string\",\n            \"lastName\": \"string\",\n            \"male\": \"boolean\",\n            \"middleName\": \"null\",\n            \"modificationDate\": \"number\",\n            \"name\": \"string\",\n            \"nickname\": \"null\",\n            \"passwordExpirationDate\": \"null\",\n            \"passwordExpired\": \"boolean\",\n            \"passwordReset\": \"boolean\",\n            \"timeZoneId\": \"string\",\n            \"type\": \"string\",\n            \"userId\": \"string\"\n        }\n    ],\n    \"errors\": [],\n    \"i18nMessagesMap\": {},\n    \"messages\": [],\n    \"pagination\": {\n        \"currentPage\": \"number\",\n        \"perPage\": \"number\",\n        \"totalEntries\": \"number\"\n    },\n    \"permissions\": []\n}\n```\n"
					},
					"response": []
				},
				{
					"name": "Get User Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(jsonData.email).to.eq(\"admin@dotcms.com\");",
									"    pm.expect(jsonData.loginAs).to.eq(true);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/current",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"current"
							]
						},
						"description": "### Retrieve Current User Information\n\nThis endpoint makes an HTTP GET request to `{{serverURL}}/api/v1/users/current` to retrieve the current user's information.\n\n#### Request\n\nNo request body is required for this request.\n\n#### Response\n\nThe response is in JSON format with the following schema:\n\n``` json\n{\n    \"admin\": boolean,\n    \"email\": string,\n    \"givenName\": string,\n    \"loginAs\": boolean,\n    \"roleId\": string,\n    \"surname\": string,\n    \"userId\": string\n}\n\n ```\n\n- `admin`: Indicates if the user is an admin (boolean).\n- `email`: User's email address (string).\n- `givenName`: User's given name (string).\n- `loginAs`: Indicates if the user is logged in (boolean).\n- `roleId`: User's role ID (string).\n- `surname`: User's surname (string).\n- `userId`: User's ID (string).\n    \n\nThe expected result is that the `loginAs` field should be `true`."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "CreateUserOnFrench",
			"item": [
				{
					"name": "CreateFrench",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Errors array should be empty\", function () {",
									"    var responseData = pm.response.json();",
									"    pm.expect(responseData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.collectionVariables.set(\"frenchLanguageId\", jsonData.entity.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"languageCode\":\"fr\",\n    \"countryCode\":\"fr\",\n    \"language\":\"French\",\n    \"country\":\"French\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v2/languages",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v2",
								"languages"
							]
						},
						"description": "### Add Language\n\nThis endpoint allows you to add a new language with its corresponding country using the HTTP POST method.\n\n#### Request Body\n\n- `languageCode` (string, required): The code for the language.\n- `countryCode` (string, required): The code for the country.\n- `language` (string, required): The name of the language.\n- `country` (string, required): The name of the country.\n    \n\n#### Response\n\nUpon a successful execution, the server will respond with a status code of 200 and a JSON object containing the following fields:\n\n- `entity`: An object containing the added language and country details, including their codes and IDs.\n- `errors`: An array of any errors encountered during the request.\n- `i18nMessagesMap`: An empty object for internationalization messages.\n- `messages`: An array of messages related to the request.\n- `pagination`: Null, as there is no pagination for this response.\n- `permissions`: An array of permissions related to the request."
					},
					"response": []
				},
				{
					"name": "CreateUserFrench",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User FE creation sucessfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    pm.expect(jsonData.entity.user[\"emailAddress\"]).to.eql(\"french@dotcms.com\");",
									"    pm.expect(jsonData.entity.user[\"firstName\"]).to.eql(\"FrenchUser\");",
									"    pm.expect(jsonData.entity.user[\"languageId\"]).to.eql(\"fr_FR\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"userid-french-12345678\",\n    \"active\":true,\n    \"firstName\":\"FrenchUser\",\n    \"middleName\":\"S\",\n    \"lastName\":\"French\",\n    \"nickName\":\"French\",\n    \"email\":\"french@dotcms.com\",\n    \"male\":true,\n    \"languageId\":\"fr_FR\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],\n    \"roles\":[\"DOTCMS_BACK_END_USER\", \"CMS Administrator\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/users",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "### Create User\n\nThis endpoint allows you to create a new user.\n\n#### Request Body\n\n- `userId` (string, optional): The unique identifier for the user.\n- `active` (boolean, required): Indicates if the user is active.\n- `firstName` (string, optional): The first name of the user.\n- `middleName` (string, optional): The middle name of the user.\n- `lastName` (string, optional): The last name of the user.\n- `nickName` (string, optional): The nickname of the user.\n- `email` (string, optional): The email address of the user.\n- `male` (boolean, required): Indicates the gender of the user.\n- `languageId` (string, optional): The language identifier for the user.\n- `password` (array, required): The password for the user.\n- `roles` (array, required): The roles assigned to the user.\n    \n\n#### Response Body (JSON Schema)\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"user\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"active\": { \"type\": \"boolean\" },\n            \"actualCompanyId\": { \"type\": \"string\" },\n            \"additionalInfo\": { \"type\": \"null\" },\n            \"admin\": { \"type\": \"boolean\" },\n            \"backendUser\": { \"type\": \"boolean\" },\n            \"birthday\": { \"type\": \"null\" },\n            \"comments\": { \"type\": \"null\" },\n            \"companyId\": { \"type\": \"string\" },\n            \"createDate\": { \"type\": \"number\" },\n            \"deleteDate\": { \"type\": \"null\" },\n            \"deleteInProgress\": { \"type\": \"boolean\" },\n            \"emailAddress\": { \"type\": \"string\" },\n            \"emailaddress\": { \"type\": \"string\" },\n            \"failedLoginAttempts\": { \"type\": \"number\" },\n            \"female\": { \"type\": \"boolean\" },\n            \"firstName\": { \"type\": \"string\" },\n            \"frontendUser\": { \"type\": \"boolean\" },\n            \"fullName\": { \"type\": \"string\" },\n            \"gravitar\": { \"type\": \"string\" },\n            \"hasConsoleAccess\": { \"type\": \"boolean\" },\n            \"id\": { \"type\": \"string\" },\n            \"languageId\": { \"type\": \"string\" },\n            \"lastLoginDate\": { \"type\": \"null\" },\n            \"lastLoginIP\": { \"type\": \"null\" },\n            \"lastName\": { \"type\": \"string\" },\n            \"male\": { \"type\": \"boolean\" },\n            \"middleName\": { \"type\": \"string\" },\n            \"modificationDate\": { \"type\": \"number\" },\n            \"name\": { \"type\": \"string\" },\n            \"nickname\": { \"type\": \"string\" },\n            \"passwordExpirationDate\": { \"type\": \"null\" },\n            \"passwordExpired\": { \"type\": \"boolean\" },\n            \"passwordReset\": { \"type\": \"boolean\" },\n            \"timeZoneId\": { \"type\": \"string\" },\n            \"type\": { \"type\": \"string\" },\n            \"userId\": { \"type\": \"string\" }\n          }\n        },\n        \"userID\": { \"type\": \"string\" }\n      }\n    },\n    \"errors\": { \"type\": \"array\" },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\" },\n    \"pagination\": { \"type\": \"null\" },\n    \"permissions\": { \"type\": \"array\" }\n  }\n}\n\n ```"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Success request 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "ValidateFiledsLimit",
			"item": [
				{
					"name": "First Name Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clear error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Length of First Name provided exceeds the maximum limit 100\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\":true,\n    \"firstName\":\"MaxtLengtOnName-aBC1dEF2gHI3jKL4mNO5pQR6sTU7vWX8yZA9bCD0eFGhIJkLMnOPqRsTtUVwXYzABCDEFGHIJKLMNOQRSTUVWXYZ123\",\n    \"lastName\":\"Spanish\",\n    \"email\":\"test1@dotcms.com\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "This call validates if you are able to are able to create a user with more than 100 chars in the user name filed  \n  \nPOST /api/v1/users\n\nThis endpoint is used to create a new user.\n\n#### Request\n\nThe request should be sent as a JSON object in the request body with the following parameters:\n\n- `active` (boolean, required): Indicates if the user is active.\n- `firstName` (string, optional): The first name of the user.\n- `lastName` (string, optional): The last name of the user.\n- `email` (string, optional): The email address of the user.\n- `password` (array, required): An array containing the password of the user.\n    \n\n#### Response\n\nUpon sending the request, the server will respond with a status code of 400 and a JSON object with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\"\n        }\n    }\n}\n\n ```\n\nThe `message` property in the response contains a description of the error encountered during the request."
					},
					"response": []
				},
				{
					"name": "Middle Name Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Clear error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Length of Middle Name provided exceeds the maximum limit 100\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\":true,\n    \"firstName\":\"test1\",\n    \"middleName\":\"MaxtLengtOnMiddleName-aBC1dEF2gHI3jKL4mNO5pQR6sTU7vWX8yZA9bCD0eFGhIJkLMnOPqRsTtUVwXYzABCDEFGHIJKLMNOQRSTUVWXYZ123\",\n    \"lastName\":\"test1\",\n    \"email\":\"test1@dotcms.com\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "This call validates if you are able to are able to create a user with more than 100 chars in the Middle name filed"
					},
					"response": []
				},
				{
					"name": "Last Name Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clear error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Length of Last Name provided exceeds the maximum limit 100\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\":true,\n    \"firstName\":\"test1\",\n    \"lastName\":\"MaxtLengtOnLastName-aBC1dEF2gHI3jKL4mNO5pQR6sTU7vWX8yZA9bCD0eFGhIJkLMnOPqRsTtUVwXYzABCDEFGHIJKLMNOQRSTUVWXYZ123\",\n    \"email\":\"test1@dotcms.com\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "This call validates if you are able to are able to create a user with more than 100 chars in the last name filed"
					},
					"response": []
				},
				{
					"name": "Nick Name Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clear error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Length of Nick Name provided exceeds the maximum limit 100\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\":true,\n    \"firstName\":\"test1\",\n    \"middleName\":\"test1\",\n    \"lastName\":\"test1\",\n    \"nickName\":\"MaxtLengtOnNickName-aBC1dEF2gHI3jKL4mNO5pQR6sTU7vWX8yZA9bCD0eFGhIJkLMnOPqRsTtUVwXYzABCDEFGHIJKLMNOQRSTUVWXYZ123\",\n    \"email\":\"test1@dotcms.com\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "This call validates if you are able to are able to create a user with more than 100 chars in the Nick name filed"
					},
					"response": []
				},
				{
					"name": "Birthday Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clear error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Length of Birthday provided exceeds the maximum limit 100\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\":true,\n    \"firstName\":\"test1\",\n    \"middleName\":\"test1\",\n    \"lastName\":\"test1\",\n    \"nickName\":\"test1\",\n    \"birthday\":\"MaxtLengtOnBirthday-aBC1dEF2gHI3jKL4mNO5pQR6sTU7vWX8yZA9bCD0eFGhIJkLMnOPqRsTtUVwXYzABCDEFGHIJKLMNOQRSTUVWXYZ123\",\n    \"email\":\"test1@dotcms.com\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Email Max Characters Limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Clear error message\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Length of Email Address provided exceeds the maximum limit 100\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\":true,\n    \"firstName\":\"Name1\",\n    \"lastName\":\"Last1\",\n    \"email\":\"MaxtLengtOnEmail-aBC1dEF2gHI3jKL4mNO5pQR6sTU7vWX8yZA9bCD0eFGhIJkLMnOPqRsTtUVwXYzABCDEFGHIJKLMNOQRSTUVWXYZ123@dotcms.com\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "This call validates if you are able to are able to create a user with more than 100 chars in the email filed"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "ActiveDeactive",
			"item": [
				{
					"name": "CreateTestUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User FE creation sucessfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    pm.expect(jsonData.entity.user[\"emailAddress\"]).to.eql(\"test-user@dotcms.com\");",
									"    pm.expect(jsonData.entity.user[\"firstName\"]).to.eql(\"TestUser\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"userID\", jsonData.entity.userID);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"userid-test-12345678\",\n    \"active\":true,\n    \"firstName\":\"TestUser\",\n    \"middleName\":\"S\",\n    \"lastName\":\"LastTestuser\",\n    \"nickName\":\"LastTestuser\",\n    \"email\":\"test-user@dotcms.com\",\n    \"male\":true,\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],\n    \"roles\":[\"DOTCMS_BACK_END_USER\", \"CMS Administrator\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/users",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "### Create User\n\nThis endpoint allows you to create a new user.\n\n#### Request Body\n\n- `userId` (string, optional): The unique identifier for the user.\n- `active` (boolean, required): Indicates if the user is active.\n- `firstName` (string, optional): The first name of the user.\n- `middleName` (string, optional): The middle name of the user.\n- `lastName` (string, optional): The last name of the user.\n- `nickName` (string, optional): The nickname of the user.\n- `email` (string, optional): The email address of the user.\n- `male` (boolean, required): Indicates the gender of the user.\n- `languageId` (string, optional): The language identifier for the user.\n- `password` (array, required): The password for the user.\n- `roles` (array, required): The roles assigned to the user.\n    \n\n#### Response Body (JSON Schema)\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"user\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"active\": { \"type\": \"boolean\" },\n            \"actualCompanyId\": { \"type\": \"string\" },\n            \"additionalInfo\": { \"type\": \"null\" },\n            \"admin\": { \"type\": \"boolean\" },\n            \"backendUser\": { \"type\": \"boolean\" },\n            \"birthday\": { \"type\": \"null\" },\n            \"comments\": { \"type\": \"null\" },\n            \"companyId\": { \"type\": \"string\" },\n            \"createDate\": { \"type\": \"number\" },\n            \"deleteDate\": { \"type\": \"null\" },\n            \"deleteInProgress\": { \"type\": \"boolean\" },\n            \"emailAddress\": { \"type\": \"string\" },\n            \"emailaddress\": { \"type\": \"string\" },\n            \"failedLoginAttempts\": { \"type\": \"number\" },\n            \"female\": { \"type\": \"boolean\" },\n            \"firstName\": { \"type\": \"string\" },\n            \"frontendUser\": { \"type\": \"boolean\" },\n            \"fullName\": { \"type\": \"string\" },\n            \"gravitar\": { \"type\": \"string\" },\n            \"hasConsoleAccess\": { \"type\": \"boolean\" },\n            \"id\": { \"type\": \"string\" },\n            \"languageId\": { \"type\": \"string\" },\n            \"lastLoginDate\": { \"type\": \"null\" },\n            \"lastLoginIP\": { \"type\": \"null\" },\n            \"lastName\": { \"type\": \"string\" },\n            \"male\": { \"type\": \"boolean\" },\n            \"middleName\": { \"type\": \"string\" },\n            \"modificationDate\": { \"type\": \"number\" },\n            \"name\": { \"type\": \"string\" },\n            \"nickname\": { \"type\": \"string\" },\n            \"passwordExpirationDate\": { \"type\": \"null\" },\n            \"passwordExpired\": { \"type\": \"boolean\" },\n            \"passwordReset\": { \"type\": \"boolean\" },\n            \"timeZoneId\": { \"type\": \"string\" },\n            \"type\": { \"type\": \"string\" },\n            \"userId\": { \"type\": \"string\" }\n          }\n        },\n        \"userID\": { \"type\": \"string\" }\n      }\n    },\n    \"errors\": { \"type\": \"array\" },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\" },\n    \"pagination\": { \"type\": \"null\" },\n    \"permissions\": { \"type\": \"array\" }\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Deactivate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let userID = pm.collectionVariables.get(\"userID\");",
									"",
									"pm.test(\"User FE creation sucessfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    pm.expect(jsonData.entity.userID).to.eql(userID);",
									"    pm.expect(jsonData.entity.user[\"active\"]).to.eql(false);",
									"    pm.expect(jsonData.entity.user[\"firstName\"]).to.eql(\"TestUser\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/deactivate/{{userID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"deactivate",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Activate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let userID = pm.collectionVariables.get(\"userID\");",
									"",
									"pm.test(\"User FE creation sucessfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    pm.expect(jsonData.entity.userID).to.eql(userID);",
									"    pm.expect(jsonData.entity.user[\"active\"]).to.eql(true);",
									"    pm.expect(jsonData.entity.user[\"firstName\"]).to.eql(\"TestUser\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/activate/{{userID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"activate",
								"{{userID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deleteuser",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/{{userID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteUser",
			"item": [
				{
					"name": "CreateTestUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User FE creation sucessfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"    pm.expect(jsonData.entity.user[\"emailAddress\"]).to.eql(\"test-user1@dotcms.com\");",
									"    pm.expect(jsonData.entity.user[\"firstName\"]).to.eql(\"TestUser\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"userID\", jsonData.entity.userID);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\":\"userid-test-56789023\",\n    \"active\":true,\n    \"firstName\":\"TestUser\",\n    \"middleName\":\"S\",\n    \"lastName\":\"LastTestuser\",\n    \"nickName\":\"LastTestuser\",\n    \"email\":\"test-user1@dotcms.com\",\n    \"male\":true,\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\"],\n    \"roles\":[\"DOTCMS_BACK_END_USER\", \"CMS Administrator\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/users",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						},
						"description": "### Create User\n\nThis endpoint allows you to create a new user.\n\n#### Request Body\n\n- `userId` (string, optional): The unique identifier for the user.\n- `active` (boolean, required): Indicates if the user is active.\n- `firstName` (string, optional): The first name of the user.\n- `middleName` (string, optional): The middle name of the user.\n- `lastName` (string, optional): The last name of the user.\n- `nickName` (string, optional): The nickname of the user.\n- `email` (string, optional): The email address of the user.\n- `male` (boolean, required): Indicates the gender of the user.\n- `languageId` (string, optional): The language identifier for the user.\n- `password` (array, required): The password for the user.\n- `roles` (array, required): The roles assigned to the user.\n    \n\n#### Response Body (JSON Schema)\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"user\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"active\": { \"type\": \"boolean\" },\n            \"actualCompanyId\": { \"type\": \"string\" },\n            \"additionalInfo\": { \"type\": \"null\" },\n            \"admin\": { \"type\": \"boolean\" },\n            \"backendUser\": { \"type\": \"boolean\" },\n            \"birthday\": { \"type\": \"null\" },\n            \"comments\": { \"type\": \"null\" },\n            \"companyId\": { \"type\": \"string\" },\n            \"createDate\": { \"type\": \"number\" },\n            \"deleteDate\": { \"type\": \"null\" },\n            \"deleteInProgress\": { \"type\": \"boolean\" },\n            \"emailAddress\": { \"type\": \"string\" },\n            \"emailaddress\": { \"type\": \"string\" },\n            \"failedLoginAttempts\": { \"type\": \"number\" },\n            \"female\": { \"type\": \"boolean\" },\n            \"firstName\": { \"type\": \"string\" },\n            \"frontendUser\": { \"type\": \"boolean\" },\n            \"fullName\": { \"type\": \"string\" },\n            \"gravitar\": { \"type\": \"string\" },\n            \"hasConsoleAccess\": { \"type\": \"boolean\" },\n            \"id\": { \"type\": \"string\" },\n            \"languageId\": { \"type\": \"string\" },\n            \"lastLoginDate\": { \"type\": \"null\" },\n            \"lastLoginIP\": { \"type\": \"null\" },\n            \"lastName\": { \"type\": \"string\" },\n            \"male\": { \"type\": \"boolean\" },\n            \"middleName\": { \"type\": \"string\" },\n            \"modificationDate\": { \"type\": \"number\" },\n            \"name\": { \"type\": \"string\" },\n            \"nickname\": { \"type\": \"string\" },\n            \"passwordExpirationDate\": { \"type\": \"null\" },\n            \"passwordExpired\": { \"type\": \"boolean\" },\n            \"passwordReset\": { \"type\": \"boolean\" },\n            \"timeZoneId\": { \"type\": \"string\" },\n            \"type\": { \"type\": \"string\" },\n            \"userId\": { \"type\": \"string\" }\n          }\n        },\n        \"userID\": { \"type\": \"string\" }\n      }\n    },\n    \"errors\": { \"type\": \"array\" },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\" },\n    \"pagination\": { \"type\": \"null\" },\n    \"permissions\": { \"type\": \"array\" }\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "CanNotDeleteTheirOwnUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/dotcms.org.1",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"dotcms.org.1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteNonExistingUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/xxxxxx",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"xxxxxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletingExistingUserButReplacementIsInvalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/{{userID}}?replacementUserId=XXXXXXX",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userID}}"
							],
							"query": [
								{
									"key": "replacementUserId",
									"value": "XXXXXXX"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSuccess",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/{{userID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreateUserReturnRoleId",
			"item": [
				{
					"name": "CreateUserWithRoleId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verifica que el status de la respuesta sea 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verifica que la respuesta sea un JSON válido",
									"pm.test(\"Response is a valid JSON\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"// Parsear el body de la respuesta",
									"let jsonData = pm.response.json();",
									"",
									"// Verifica que el objeto entity existe",
									"pm.test(\"Entity object is present\", function () {",
									"    pm.expect(jsonData).to.have.property(\"entity\");",
									"});",
									"",
									"// Verifica que el user object existe dentro de entity",
									"pm.test(\"User object is present\", function () {",
									"    pm.expect(jsonData.entity).to.have.property(\"user\");",
									"});",
									"",
									"// Verifica que el user tiene un email válido",
									"pm.test(\"User has a valid email\", function () {",
									"    let email = jsonData.entity.user.emailAddress || \"\";",
									"    pm.expect(email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"});",
									"",
									"// Verifica que el user está activo",
									"pm.test(\"User is active\", function () {",
									"    pm.expect(jsonData.entity.user.active).to.be.true;",
									"});",
									"",
									"// Verifica que el ID del usuario esté presente y tenga formato",
									"pm.test(\"User ID is present\", function () {",
									"    let userId = jsonData.entity.user.id;",
									"    pm.expect(userId).to.be.a(\"string\");",
									"    pm.expect(userId).to.match(/^userid-/);",
									"});",
									"",
									"// Verifica que el roleId tenga un UUID válido",
									"pm.test(\"Role ID is a valid UUID\", function () {",
									"    let roleId = jsonData.entity.roleId;",
									"    pm.expect(roleId).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i);",
									"});",
									"",
									"// Verifica que no hay errores",
									"pm.test(\"No errors present\", function () {",
									"    pm.expect(jsonData.errors).to.be.an(\"array\").that.is.empty;",
									"});",
									"",
									"// Verifica que la propiedad frontendUser sea true",
									"pm.test(\"User is a frontendUser\", function () {",
									"    pm.expect(jsonData.entity.user.frontendUser).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"saad\",\n    \"lastName\": \"sher\",\n    \"email\": \"saadsher2@dotcms.com\",\n    \"password\": \"victory123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/users",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdateUserWhenNullRolesAndPass",
			"item": [
				{
					"name": "CreateTestUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Postman Tests: User Creation/Assignment Success",
									"",
									"// 1. Check for a successful status code (e.g., 200 OK or 201 Created)",
									"pm.test(\"Status code is 200 OK or 201 Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// 2. Check if the response is valid JSON",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.have.json;",
									"});",
									"",
									"// Get the JSON data for further checks",
									"const responseData = pm.response.json();",
									"",
									"// 3. Verify core structure and top-level fields",
									"pm.test(\"Response has the 'entity' object\", function () {",
									"    pm.expect(responseData).to.have.property('entity');",
									"    pm.expect(responseData.entity).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Errors array is empty\", function () {",
									"    pm.expect(responseData).to.have.property('errors').that.is.an('array').and.is.empty;",
									"});",
									"",
									"// 4. Verify fields within the 'entity' object",
									"pm.test(\"'entity' contains roleId, userID, and user object\", function () {",
									"    pm.expect(responseData.entity).to.have.property('roleId').that.is.a('string');",
									"    pm.expect(responseData.entity).to.have.property('userID').that.is.a('string');",
									"    pm.expect(responseData.entity).to.have.property('user').that.is.an('object');",
									"});",
									"",
									"// 5. Verify key user attributes and types",
									"pm.test(\"User object has required fields and types\", function () {",
									"    const user = responseData.entity.user;",
									"    pm.expect(user).to.have.property('id').that.is.a('string');",
									"    pm.expect(user).to.have.property('firstName').that.is.a('string');",
									"    pm.expect(user).to.have.property('lastName').that.is.a('string');",
									"    pm.expect(user).to.have.property('emailAddress').that.is.a('string');",
									"    pm.expect(user).to.have.property('active').that.is.a('boolean');",
									"    pm.expect(user.active).to.be.true; // Assuming a newly created/assigned user is active",
									"});",
									"",
									"// 6. Capture the userID for subsequent requests (e.g., GET, PUT, DELETE)",
									"// This sets a collection or environment variable named 'new_user_id'",
									"pm.test(\"Set 'new_user_id' environment variable\", function () {",
									"    const userId = responseData.entity.userID;",
									"",
									"    // Use pm.environment.set() or pm.collectionVariables.set() as needed",
									"    pm.environment.set(\"new_user_id\", userId);",
									"",
									"    console.log(\"Captured new_user_id: \" + userId);",
									"    pm.expect(userId).to.be.a('string').and.to.have.length.above(0);",
									"});",
									"",
									"pm.environment.set(\"usertestid\", responseData.entity.userID)"
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \n    \"active\": true,\n    \"firstName\": \"TestUserUpdateName\",\n    \"lastName\": \"TestUserUpdateLastName\",\n    \"email\": \"allsitesv3@dotcms.com\",\n    \"password\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],\n    \"roles\": [\"DOTCMS_FRONT_END_USER\", \"Scripting Developer\"]\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/users",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateWithoutPasswordAndLessRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Postman Tests: User Creation/Assignment Success",
									"",
									"// 1. Check for a successful status code (e.g., 200 OK or 201 Created)",
									"pm.test(\"Status code is 200 OK or 201 Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// 2. Check if the response is valid JSON",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.have.json;",
									"});",
									"",
									"// Get the JSON data for further checks",
									"const responseData = pm.response.json();",
									"",
									"// 3. Verify core structure and top-level fields",
									"pm.test(\"Response has the 'entity' object\", function () {",
									"    pm.expect(responseData).to.have.property('entity');",
									"    pm.expect(responseData.entity).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Errors array is empty\", function () {",
									"    pm.expect(responseData).to.have.property('errors').that.is.an('array').and.is.empty;",
									"});",
									"",
									"// 4. Verify fields within the 'entity' object",
									"pm.test(\"'entity' contains roleId, userID, and user object\", function () {",
									"    pm.expect(responseData.entity).to.have.property('userID').that.is.a('string');",
									"    pm.expect(responseData.entity).to.have.property('user').that.is.an('object');",
									"});",
									"",
									"// 5. Verify key user attributes and types",
									"pm.test(\"User object has required fields and types\", function () {",
									"    const user = responseData.entity.user;",
									"    pm.expect(user).to.have.property('id').that.is.a('string');",
									"    pm.expect(user).to.have.property('firstName').that.is.a('string');",
									"    pm.expect(user).to.have.property('lastName').that.is.a('string');",
									"    pm.expect(user).to.have.property('emailAddress').that.is.a('string');",
									"    pm.expect(user).to.have.property('active').that.is.a('boolean');",
									"    pm.expect(user.active).to.be.true; // Assuming a newly created/assigned user is active",
									"});",
									"",
									"// 6. Capture the userID for subsequent requests (e.g., GET, PUT, DELETE)",
									"// This sets a collection or environment variable named 'new_user_id'",
									"pm.test(\"Set 'new_user_id' environment variable\", function () {",
									"    const userId = responseData.entity.userID;",
									"",
									"    // Use pm.environment.set() or pm.collectionVariables.set() as needed",
									"    pm.environment.set(\"new_user_id\", userId);",
									"",
									"    console.log(\"Captured new_user_id: \" + userId);",
									"    pm.expect(userId).to.be.a('string').and.to.have.length.above(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{usertestid}}\",\n    \"active\": true,\n    \"firstName\": \"TestUserUpdateName2\",\n    \"lastName\": \"TestUserUpdateLastName2\",\n    \"email\": \"allsitesv3@dotcms.com\",\n    \"roles\": [\"DOTCMS_BACK_END_USER\"]\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/users",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUserWithoutAnyRolesAndPasswordSent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Postman Tests: User Creation/Assignment Success",
									"",
									"// 1. Check for a successful status code (e.g., 200 OK or 201 Created)",
									"pm.test(\"Status code is 200 OK or 201 Created\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// 2. Check if the response is valid JSON",
									"pm.test(\"Response is valid JSON\", function () {",
									"    pm.response.to.have.json;",
									"});",
									"",
									"// Get the JSON data for further checks",
									"const responseData = pm.response.json();",
									"",
									"// 3. Verify core structure and top-level fields",
									"pm.test(\"Response has the 'entity' object\", function () {",
									"    pm.expect(responseData).to.have.property('entity');",
									"    pm.expect(responseData.entity).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Errors array is empty\", function () {",
									"    pm.expect(responseData).to.have.property('errors').that.is.an('array').and.is.empty;",
									"});",
									"",
									"// 4. Verify fields within the 'entity' object",
									"pm.test(\"'entity' contains roleId, userID, and user object\", function () {",
									"    pm.expect(responseData.entity).to.have.property('userID').that.is.a('string');",
									"    pm.expect(responseData.entity).to.have.property('user').that.is.an('object');",
									"});",
									"",
									"// 5. Verify key user attributes and types",
									"pm.test(\"User object has required fields and types\", function () {",
									"    const user = responseData.entity.user;",
									"    pm.expect(user).to.have.property('id').that.is.a('string');",
									"    pm.expect(user).to.have.property('firstName').that.is.a('string');",
									"    pm.expect(user).to.have.property('lastName').that.is.a('string');",
									"    pm.expect(user).to.have.property('emailAddress').that.is.a('string');",
									"    pm.expect(user).to.have.property('active').that.is.a('boolean');",
									"    pm.expect(user.active).to.be.true; // Assuming a newly created/assigned user is active",
									"});",
									"",
									"// 6. Capture the userID for subsequent requests (e.g., GET, PUT, DELETE)",
									"// This sets a collection or environment variable named 'new_user_id'",
									"pm.test(\"Set 'new_user_id' environment variable\", function () {",
									"    const userId = responseData.entity.userID;",
									"",
									"    // Use pm.environment.set() or pm.collectionVariables.set() as needed",
									"    pm.environment.set(\"new_user_id\", userId);",
									"",
									"    console.log(\"Captured new_user_id: \" + userId);",
									"    pm.expect(userId).to.be.a('string').and.to.have.length.above(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {},
								"requests": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{usertestid}}\",\n    \"active\": true,\n    \"firstName\": \"TestUserUpdateName3\",\n    \"lastName\": \"TestUserUpdateLastName3\",\n    \"email\": \"allsitesv3@dotcms.com\"\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/users",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Permissions Tests",
			"item": [
				{
					"name": "Test 1: Admin User Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===== TEST 1: ADMIN USER PERMISSIONS =====",
									"// Testing with admin user (dotcms.org.1) who has comprehensive permissions",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response time is acceptable', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"let response;",
									"pm.test('Response is valid JSON', () => {",
									"    response = pm.response.json();",
									"    pm.expect(response).to.be.an('object');",
									"});",
									"",
									"// Validate top-level structure",
									"pm.test('Response has correct top-level structure', () => {",
									"    pm.expect(response).to.have.property('entity');",
									"    pm.expect(response.entity).to.have.all.keys('userId', 'roleId', 'assets');",
									"});",
									"",
									"const entity = response.entity;",
									"",
									"// Validate user identification",
									"pm.test('User ID matches requested user', () => {",
									"    pm.expect(entity.userId).to.equal('dotcms.org.1');",
									"});",
									"",
									"pm.test('Role ID exists and is non-empty', () => {",
									"    pm.expect(entity.roleId).to.be.a('string');",
									"    pm.expect(entity.roleId).to.not.be.empty;",
									"    // Store for later comparison",
									"    pm.collectionVariables.set('adminRoleId', entity.roleId);",
									"});",
									"",
									"const assets = entity.assets;",
									"",
									"pm.test('Assets array exists and is not empty', () => {",
									"    pm.expect(assets).to.be.an('array');",
									"    pm.expect(assets.length).to.be.greaterThan(0);",
									"    console.log(`Found ${assets.length} assets with permissions`);",
									"});",
									"",
									"// Validate each asset structure",
									"pm.test('Each asset has required fields', () => {",
									"    assets.forEach((asset, index) => {",
									"        // Core fields",
									"        pm.expect(asset, `Asset ${index}`).to.have.property('id');",
									"        pm.expect(asset, `Asset ${index}`).to.have.property('type');",
									"        pm.expect(asset, `Asset ${index}`).to.have.property('name');",
									"        pm.expect(asset, `Asset ${index}`).to.have.property('permissions');",
									"        pm.expect(asset, `Asset ${index}`).to.have.property('canEditPermissions');",
									"        pm.expect(asset, `Asset ${index}`).to.have.property('inheritsPermissions');",
									"        ",
									"        // Type validation",
									"        pm.expect(asset.type).to.be.oneOf(['HOST', 'FOLDER']);",
									"        ",
									"        // Type-specific fields",
									"        if (asset.type === 'HOST') {",
									"            pm.expect(asset).to.have.property('path');",
									"            pm.expect(asset).to.have.property('hostId');",
									"            pm.expect(asset.hostId).to.equal(asset.id);",
									"        } else if (asset.type === 'FOLDER') {",
									"            pm.expect(asset).to.have.property('path');",
									"            pm.expect(asset).to.have.property('hostId');",
									"            pm.expect(asset.path).to.match(/^\\//, 'Folder path should start with /');",
									"        }",
									"    });",
									"});",
									"",
									"// Validate System Host presence",
									"pm.test('System Host is present in assets', () => {",
									"    const systemHost = assets.find(a => ",
									"        a.type === 'HOST' && ",
									"        (a.name === 'System Host' || a.id === 'SYSTEM_HOST' || a.name.toLowerCase().includes('system'))",
									"    );",
									"    pm.expect(systemHost, 'System Host not found').to.exist;",
									"    pm.expect(systemHost.type).to.equal('HOST');",
									"});",
									"",
									"// Validate permission structure and values",
									"pm.test('Permissions have valid structure and values', () => {",
									"    const validPermissionTypes = [",
									"        'INDIVIDUAL', 'PAGE', 'CONTAINER', 'FOLDER', ",
									"        'LINK', 'TEMPLATE', 'TEMPLATE_LAYOUT', ",
									"        'STRUCTURE', 'CONTENT', 'CATEGORY', 'RULE', 'HOST'",
									"    ];",
									"    ",
									"    const validPermissionValues = ['READ', 'WRITE', 'PUBLISH', 'EDIT_PERMISSIONS', 'CAN_ADD_CHILDREN'];",
									"    ",
									"    assets.forEach((asset, assetIndex) => {",
									"        const permissions = asset.permissions;",
									"        pm.expect(permissions, `Asset ${assetIndex} permissions`).to.be.an('object');",
									"        ",
									"        Object.entries(permissions).forEach(([permType, permValues]) => {",
									"            // Validate permission type",
									"            pm.expect(validPermissionTypes, `Invalid permission type: ${permType}`)",
									"                .to.include(permType);",
									"            ",
									"            // Validate permission values array",
									"            pm.expect(permValues, `Permission type ${permType}`).to.be.an('array');",
									"            ",
									"            // Each value should be valid",
									"            permValues.forEach(value => {",
									"                pm.expect(validPermissionValues, `Invalid permission value: ${value}`)",
									"                    .to.include(value);",
									"            });",
									"            ",
									"            // Check for duplicates",
									"            const uniqueValues = [...new Set(permValues)];",
									"            pm.expect(permValues.length, `Duplicates in ${permType}`)",
									"                .to.equal(uniqueValues.length);",
									"        });",
									"    });",
									"});",
									"",
									"// Admin-specific validations",
									"pm.test('Admin has edit permissions capability on some assets', () => {",
									"    const hasEditCapability = assets.some(a => a.canEditPermissions === true);",
									"    pm.expect(hasEditCapability, 'Admin should have edit permissions capability').to.be.true;",
									"});",
									"",
									"// Validate boolean fields",
									"pm.test('Boolean fields have correct types', () => {",
									"    assets.forEach((asset, index) => {",
									"        pm.expect(asset.canEditPermissions, `Asset ${index} canEditPermissions`)",
									"            .to.be.a('boolean');",
									"        pm.expect(asset.inheritsPermissions, `Asset ${index} inheritsPermissions`)",
									"            .to.be.a('boolean');",
									"    });",
									"});",
									"",
									"// Store data for cross-test validation",
									"pm.collectionVariables.set('adminPermissionsCount', assets.length);",
									"pm.collectionVariables.set('adminHasSystemHost', ",
									"    assets.some(a => a.type === 'HOST' && a.name === 'System Host'));",
									"",
									"// Log summary",
									"console.log('Test Summary:');",
									"console.log(`- Total assets: ${assets.length}`);",
									"console.log(`- Hosts: ${assets.filter(a => a.type === 'HOST').length}`);",
									"console.log(`- Folders: ${assets.filter(a => a.type === 'FOLDER').length}`);",
									"console.log(`- Assets with edit capability: ${assets.filter(a => a.canEditPermissions).length}`);",
									"console.log(`- Assets inheriting permissions: ${assets.filter(a => a.inheritsPermissions).length}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/dotcms.org.1/permissions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"dotcms.org.1",
								"permissions"
							]
						},
						"description": "Test admin user permissions - validates complete response structure and permission data"
					},
					"response": []
				},
				{
					"name": "Test 2: Email-based User Lookup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===== TEST 2: EMAIL-BASED LOOKUP =====",
									"// Verify endpoint accepts email addresses as userId parameter",
									"",
									"pm.test('Status code is 200 for email lookup', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"const entity = response.entity;",
									"",
									"pm.test('Response structure is consistent with ID lookup', () => {",
									"    pm.expect(entity).to.have.all.keys('userId', 'roleId', 'assets');",
									"    pm.expect(entity.assets).to.be.an('array');",
									"});",
									"",
									"pm.test('Returns data for admin user via email', () => {",
									"    // The userId should be the actual ID, not the email",
									"    pm.expect(entity.userId).to.equal('dotcms.org.1');",
									"    // Role ID should match what we stored from previous test",
									"    pm.expect(entity.roleId).to.equal(pm.collectionVariables.get('adminRoleId'));",
									"});",
									"",
									"pm.test('Asset count matches ID-based lookup', () => {",
									"    const previousCount = pm.collectionVariables.get('adminPermissionsCount');",
									"    pm.expect(entity.assets.length).to.equal(previousCount);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/admin@dotcms.com/permissions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"admin@dotcms.com",
								"permissions"
							]
						},
						"description": "Test that endpoint accepts email addresses for user lookup"
					},
					"response": []
				},
				{
					"name": "Test 3: Self-Access Permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===== TEST 3: SELF-ACCESS PERMISSIONS =====",
									"// User viewing their own permissions (using 'current' user endpoint logic)",
									"",
									"pm.test('Status code is 200 for self-access', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"const entity = response.entity;",
									"",
									"pm.test('Can retrieve own permissions', () => {",
									"    pm.expect(entity).to.have.property('userId');",
									"    pm.expect(entity).to.have.property('roleId');",
									"    pm.expect(entity).to.have.property('assets');",
									"});",
									"",
									"pm.test('Returns individual role for user', () => {",
									"    pm.expect(entity.roleId).to.be.a('string');",
									"    pm.expect(entity.roleId).to.not.be.empty;",
									"    // Individual roles often contain the userId in some form",
									"    console.log(`User ${entity.userId} has role ${entity.roleId}`);",
									"});",
									"",
									"// Verify System Host is always present",
									"pm.test('System Host present even for regular users', () => {",
									"    const systemHost = entity.assets.find(a => ",
									"        a.type === 'HOST' && a.name === 'System Host'",
									"    );",
									"    pm.expect(systemHost).to.exist;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/dotcms.org.1/permissions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"dotcms.org.1",
								"permissions"
							]
						},
						"description": "Test user accessing their own permissions"
					},
					"response": []
				},
				{
					"name": "Test 4: Permission Data Integrity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ===== TEST 4: DATA INTEGRITY VALIDATION =====",
									"",
									"pm.test('Status code is 200', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"const assets = response.entity.assets;",
									"",
									"// Validate no null or undefined values in critical fields",
									"pm.test('No null/undefined in critical fields', () => {",
									"    assets.forEach((asset, index) => {",
									"        pm.expect(asset.id, `Asset ${index} id`).to.not.be.null;",
									"        pm.expect(asset.id, `Asset ${index} id`).to.not.be.undefined;",
									"        pm.expect(asset.type, `Asset ${index} type`).to.not.be.null;",
									"        pm.expect(asset.name, `Asset ${index} name`).to.not.be.null;",
									"        pm.expect(asset.permissions, `Asset ${index} permissions`).to.not.be.null;",
									"    });",
									"});",
									"",
									"// Validate ID formats",
									"pm.test('Asset IDs have valid format', () => {",
									"    assets.forEach(asset => {",
									"        pm.expect(asset.id).to.be.a('string');",
									"        pm.expect(asset.id.length).to.be.greaterThan(0);",
									"        // IDs should not contain spaces or special characters",
									"        pm.expect(asset.id).to.not.match(/\\s/, 'ID should not contain spaces');",
									"    });",
									"});",
									"",
									"// Validate path formats",
									"pm.test('Paths are properly formatted', () => {",
									"    assets.forEach(asset => {",
									"        if (asset.type === 'FOLDER') {",
									"            // Folder paths should start with / and contain hostname",
									"            pm.expect(asset.path).to.match(/^\\/[^/]+/);",
									"            // Path should not end with / unless it's root",
									"            if (asset.path.length > 1) {",
									"                pm.expect(asset.path).to.not.match(/\\/$/);",
									"            }",
									"        } else if (asset.type === 'HOST') {",
									"            // Host path should be /hostname",
									"            pm.expect(asset.path).to.match(/^\\/[^/]+$/);",
									"        }",
									"    });",
									"});",
									"",
									"// Validate permission combinations",
									"pm.test('Permission combinations are logical', () => {",
									"    assets.forEach(asset => {",
									"        Object.values(asset.permissions).forEach(perms => {",
									"            if (perms.includes('EDIT_PERMISSIONS')) {",
									"                // If user can edit permissions, they should have WRITE",
									"                pm.expect(perms).to.include.oneOf(['WRITE', 'PUBLISH']);",
									"            }",
									"            if (perms.includes('PUBLISH')) {",
									"                // If user can publish, they should have WRITE",
									"                pm.expect(perms).to.include('WRITE');",
									"            }",
									"            if (perms.includes('WRITE')) {",
									"                // If user can write, they should have read",
									"                pm.expect(perms).to.include('read');",
									"            }",
									"        });",
									"    });",
									"});",
									"",
									"// Validate no duplicate assets",
									"pm.test('No duplicate asset IDs', () => {",
									"    const assetIds = assets.map(a => a.id);",
									"    const uniqueIds = [...new Set(assetIds)];",
									"    pm.expect(assetIds.length).to.equal(uniqueIds.length);",
									"});",
									"",
									"// Performance validation",
									"pm.test('Response time is acceptable', () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"    console.log(`Response time: ${pm.response.responseTime}ms`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/users/dotcms.org.1/permissions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"dotcms.org.1",
								"permissions"
							]
						},
						"description": "Comprehensive data integrity validation"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"",
					"if (!pm.environment.get('jwt')) {",
					"    const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"    const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"    if (!pm.environment.get('jwt')) {",
					"        const username = 'admin@dotcms.com';",
					"        const password = 'admin';",
					"        const basicAuth = btoa(`${username}:${password}`);",
					"",
					"        const requestOptions = {",
					"            url: apiUrl,",
					"            method: \"POST\",",
					"            header: {",
					"                \"accept\": \"*/*\",",
					"                \"content-type\": \"application/json\",",
					"                \"Authorization\": `Basic ${basicAuth}`",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    \"expirationSeconds\": 7200,",
					"                    \"userId\": \"dotcms.org.1\",",
					"                    \"network\": \"0.0.0.0/0\",",
					"                    \"claims\": {\"label\": \"postman-tests\"}",
					"                })",
					"            }",
					"        };",
					"",
					"        pm.sendRequest(requestOptions, function (err, response) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                const jwt = response.json().entity.jwt;",
					"                pm.environment.set('jwt', jwt);",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"",
					"",
					"",
					"",
					"/**",
					" * Traverses the provided JSON data looking for a specific attribute and value. If it exists, returns 'true'.",
					" */",
					"containsAttrAndValue = (json, keyname, value) => {",
					"",
					"    var isUserPresent = false;",
					"    json.every((userData) => {",
					"        console.log('DATA = ' + userData[keyname]);",
					"        if (userData[keyname] === value) {",
					"            isUserPresent = true;",
					"            return false;",
					"        }",
					"        return true;",
					"    });",
					"    return isUserPresent;",
					"",
					"};",
					"",
					"pm.collectionVariables.set(\"containsAttrAndValue\", containsAttrAndValue.toString());",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "containsAttrAndValue",
			"value": ""
		},
		{
			"key": "frenchLanguageId",
			"value": ""
		},
		{
			"key": "userID",
			"value": ""
		},
		{
			"key": "adminRoleId",
			"value": "",
			"type": "string"
		},
		{
			"key": "adminPermissionsCount",
			"value": "",
			"type": "number"
		},
		{
			"key": "adminHasSystemHost",
			"value": "",
			"type": "boolean"
		}
	]
}