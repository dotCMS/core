{
	"info": {
		"_postman_id": "09cde3f1-989e-41c4-8175-c3a754f1fa5f",
		"name": "DotFavoritePage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "781456"
	},
	"item": [
		{
			"name": "CreateNewLimitedRole",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"roleName\":\"limitedRole\",\n    \"roleKey\":\"limitedRole\",\n    \"canEditUsers\":true,\n    \"canEditPermissions\":true,\n    \"canEditLayouts\":true,\n    \"description\":\"Limited Role for Limited Users\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/roles",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetLayouts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response includes name\", function () {",
							"    pm.expect(pm.response.json().entity.length).to.gte(0)",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"firstLayoutId\", jsonData.entity[0].id);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/roles/layouts",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"roles",
						"layouts"
					]
				}
			},
			"response": []
		},
		{
			"name": "SetLayoutToBackedUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"roleId\":\"DOTCMS_BACK_END_USER\",\n    \"layoutIds\":[\"{{firstLayoutId}}\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/roles/layouts",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"roles",
						"layouts"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateLimitedUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"User entity contains required fields\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.entity.user).to.be.an('object');",
							"    pm.expect(responseData.entity.user).to.include.all.keys(",
							"        'active',",
							"        'admin',",
							"        'backendUser',",
							"        'failedLoginAttempts',",
							"        'frontendUser',",
							"        'hasConsoleAccess',",
							"        'id',",
							"        'passwordExpired',",
							"        'passwordReset'",
							"    );",
							"});",
							"",
							"",
							"pm.test(\"Email address is not empty and in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.entity.user.emailAddress).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    pm.expect(responseData.entity.user.emailAddress).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, \"Invalid email format\");",
							"});",
							"",
							"",
							"pm.test(\"User ID is not empty and in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.entity.user.userId).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstName\":\"LimitedTestName\",\n    \"lastName\":\"LimitedTestLastName\",\n    \"email\":\"mylimiteduser@dotcms.com\",\n    \"password\":\"dotcms123456\",\n    \"active\":true,\n    \"roles\":[\"DOTCMS_BACK_END_USER\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/users",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalidateSession",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/logout",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "FireDotFavoriteWithPermissionsWithLimitedUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 \", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "dotcms123456",
							"type": "string"
						},
						{
							"key": "username",
							"value": "mylimiteduser@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"contentlet\":{\n        \"contentType\":\"dotFavoritePage\",\n        \"title\":\"Test3-11\",\n        \"screenshot\":\"/dA/8ba493215e/fileAsset/veni-vidi-vici.png\",\n        \"url\":\"Test body\",\n        \"order\":1\n    },\n    \"individualPermissions\": {\n        \"READ\":[\"CMS Owner\"],\n        \"WRITE\":[\"CMS Owner\"],\n        \"PUBLISH\":[\"CMS Owner\"],\n        \"EDIT_PERMISSIONS\":[\"CMS Owner\"]\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"workflow",
						"actions",
						"default",
						"fire",
						"PUBLISH"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalidateSessionAgain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/logout",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "ReloginAsAnAdminAtTheEnd",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"userId\":\"admin@dotcms.com\",\n    \"password\":\"admin\",\n    \"backEndLogin\":true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/authentication",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"authentication"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"   const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"   const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"// If we are unable to get the JWT we need to generate a new one",
					"   if (!pm.environment.get('jwt')) {",
					"       const username = pm.environment.get(\"user\");",
					"       const password = pm.environment.get(\"password\");",
					"       const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"",
					"       const requestOptions = {",
					"           url: apiUrl,",
					"           method: \"POST\",",
					"           header: {",
					"               \"accept\": \"*/*\",",
					"               \"content-type\": \"application/json\",",
					"               \"Authorization\": `Basic ${basicAuth}`",
					"           },",
					"           body: {",
					"               mode: \"raw\",",
					"               raw: JSON.stringify({",
					"                   \"expirationSeconds\": 7200,",
					"                   \"userId\": \"dotcms.org.1\",",
					"                   \"network\": \"0.0.0.0/0\",",
					"                   \"claims\": {\"label\": \"postman-tests\"}",
					"               })",
					"           }",
					"       };",
					"",
					"",
					"       pm.sendRequest(requestOptions, function (err, response) {",
					"           if (err) {",
					"               console.log(err);",
					"           } else {",
					"               const jwt = response.json().entity.jwt;",
					"               pm.environment.set('jwt', jwt);",
					"               console.log(jwt);",
					"           }",
					"       });",
					"   }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "firstLayoutId",
			"value": ""
		}
	]
}