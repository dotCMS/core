{
	"info": {
		"_postman_id": "49b73ba5-71c9-4350-a159-69bac2d6a06b",
		"name": "Site Resource",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3028555"
	},
	"item": [
		{
			"name": "Site Variables",
			"item": [
				{
					"name": "In site - Empty variables",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking Site's name and storing 'sitevarId' for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"sitevariables.host.com.{{$timestamp}}\",\n    \"variables\":[]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								},
								"description": "### Add Site\n\nThis endpoint allows you to add a new site.\n\n#### Request Body\n\n- `siteName` (string, required): The name of the site.\n- `variables` (array, required): An array of variables associated with the site.\n    \n\n#### Response\n\nThe response will contain the details of the newly added site."
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking that the size of the site Site Variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This API endpoint makes an HTTP GET request to retrieve the details of a specific site variable identified by the siteVarSiteId parameter.\n\n### Request\n\nThe request does not require a request body. The siteVarSiteId is a path parameter that specifies the ID of the site variable being retrieved.\n\n- `siteVarSiteId` (path parameter) - The ID of the site variable to be retrieved.\n    \n\n### Response\n\nThe response will be in JSON format and will contain the details of the site variable, including its ID, name, type, and value.\n\nThe response format will include the following fields:\n\n- `id` - The unique identifier of the site variable.\n- `name` - The name of the site variable.\n- `type` - The type of the site variable.\n- `value` - The value of the site variable.\n    \n\n### Example\n\nRequest:\n\n```\nGET {{serverURL}}/api/v1/site/variable/123\n\n ```\n\nResponse:\n\n``` json\n{\n  \"id\": \"123\",\n  \"name\": \"example_variable\",\n  \"type\": \"string\",\n  \"value\": \"example_value\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking that the size of the site Site Variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve information about a specific site identified by the site ID. The response of this request is documented below as a JSON schema.\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteId\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"location\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the site was archived\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.archived).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}",
										"_archive"
									]
								},
								"description": "\n### Update Site Archive\nThis endpoint is used to archive a specific site by sending an HTTP PUT request to the server.\n\n#### Request Body\n- `is_archived` (boolean): A flag to indicate whether the site should be archived.\n\n#### Response\nThe response will be a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\nThe response will contain a `status` indicating the outcome of the request, and a `message` providing additional information about the operation.\n"
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\n### Delete Site\nThis endpoint is used to delete a specific site.\n\n#### Request\n- Method: DELETE\n- URL: `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`\n\n#### Response\nThe response for this request is a JSON object following the schema below:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\nThe response body contains a `message` property which provides information about the success or failure of the deletion operation.\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "In site - Without ID on variables",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking site variables and storing 'sitevarId' for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"sitevariables.host.com.{{$timestamp}}\",\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								},
								"description": "### API Request Description\n\nThis endpoint allows the user to create a new site by sending an HTTP POST request to the specified URL. The request should include the site name and variables in the payload.\n\n#### Request Body\n\n- `siteName` (string, required): The name of the site.\n- `variables` (array, required): An array of objects containing variable details.\n    - `name` (string, required): The name of the variable.\n    - `key` (string, required): The key of the variable.\n    - `value` (string, required): The value of the variable.\n\n### API Response\n\nThe response to the request is in JSON format and includes the following fields:\n\n- `entity` (object): Contains details about the created site, such as site name, variables, permissions, etc.\n    - `addThis`, `aliases`, `archived`, `default`, `description`, `embeddedDashboard`, `googleAnalytics`, `googleMap`, `identifier`, `inode`, `keywords`, `languageId`, `live`, `locked`, `modDate`, `modUser`, `proxyUrlForEditMode`, `runDashboard`, `siteName`, `siteThumbnail`, `systemHost`, `tagStorage`, `working` (various data types): Details about the site entity.\n    - `variables` (array): An array of objects containing variable details.\n        - `id`, `key`, `name`, `value` (various data types): Details about the variables.\n- `errors` (array): Any errors that occurred during the request.\n- `i18nMessagesMap` (object): Internationalization messages map.\n- `messages` (array): Any messages related to the request.\n- `pagination` (null): Pagination details, if applicable.\n- `permissions` (array): Details about the permissions for the created site.\n    \n\nThe response can be documented as a JSON schema for reference.\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        // entity properties here\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"i18nMessagesMap\": {\n      \"type\": \"object\",\n      \"additionalProperties\": {}\n    },\n    \"messages\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"pagination\": {\n      \"type\": \"null\"\n    },\n    \"permissions\": {\n      \"type\": \"array\",\n      \"items\": {}\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(3);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve the details of a specific site variable using the siteVarSiteId parameter.\n\n### Request\n\nNo request body is required for this endpoint.\n\n- `siteVarSiteId` (path parameter) - The ID of the site variable for which details are to be retrieved.\n    \n\n### Response\n\nThe response will be in JSON format with a status code of 200. It will contain an array of entities, each representing a site variable with the following properties:\n\n- `hostId` - The host ID of the site variable.\n- `id` - The unique ID of the site variable.\n- `key` - The key associated with the site variable.\n- `lastModDate` - The timestamp of the last modification date.\n- `lastModifierFullName` - The full name of the user who last modified the site variable.\n- `lastModifierId` - The ID of the user who last modified the site variable.\n- `name` - The name of the site variable.\n- `value` - The value of the site variable.\n    \n\nThe response also includes:\n\n- `errors` - An array of error messages, if any.\n- `i18nMessagesMap` - Internationalization messages map.\n- `messages` - Any additional messages.\n- `pagination` - Pagination information, if applicable.\n- `permissions` - Permissions associated with the site variable."
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Get Site Details\n\nThis endpoint retrieves details of a specific site identified by the `siteVarSiteId`.\n\n#### Request Body\n\nThis is a GET request and does not require a request body.\n\n#### Response Body\n\n- `entity` (object): Contains details of the site including its archived status, default status, description, language, etc.\n    - `addThis` (null): Placeholder for AddThis integration.\n    - `aliases` (null): Placeholder for site aliases.\n    - `archived` (boolean): Indicates if the site is archived.\n    - `default` (boolean): Indicates if the site is the default site.\n    - `description` (null): Description of the site.\n    - `embeddedDashboard` (null): Placeholder for embedded dashboard configuration.\n    - `googleAnalytics` (null): Placeholder for Google Analytics configuration.\n    - `googleMap` (null): Placeholder for Google Map configuration.\n    - `identifier` (string): Identifier of the site.\n    - `inode` (string): Inode of the site.\n    - `keywords` (null): Keywords associated with the site.\n    - `languageId` (integer): Language ID of the site.\n    - `live` (boolean): Indicates if the site is live.\n    - `locked` (boolean): Indicates if the site is locked.\n    - `modDate` (integer): Modification date of the site.\n    - `modUser` (string): User who last modified the site.\n    - `proxyUrlForEditMode` (null): Placeholder for proxy URL for edit mode.\n    - `runDashboard` (boolean): Indicates if the dashboard is runnable.\n    - `siteName` (string): Name of the site.\n    - `siteThumbnail` (string): Thumbnail of the site.\n    - `systemHost` (boolean): Indicates if the site is a system host.\n    - `tagStorage` (string): Tag storage of the site.\n    - `variables` (array): Array of site variables.\n        - `id` (string): ID of the variable.\n        - `key` (string): Key of the variable.\n        - `name` (string): Name of the variable.\n        - `value` (string): Value of the variable.\n    - `working` (boolean): Indicates if the site is working.\n- `errors` (array): Array of errors, if any.\n- `i18nMessagesMap` (object): Internationalization messages map.\n- `messages` (array): Array of messages.\n- `pagination` (null): Placeholder for pagination details.\n- `permissions` (array): Array of permissions."
							},
							"response": []
						},
						{
							"name": "Update Site adding variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n           \"name\":\"var4Name\",\n            \"key\":\"var4Key\",\n            \"value\":\"var4Value\" \n        },\n        {\n           \"name\":\"var5Name\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "### Update Site Details\n\nThis endpoint allows the client to update the details of a specific site by making an HTTP PUT request to the specified URL.\n\n#### Request Body\n\n- `siteName` (string, optional): The name of the site.\n- `forceExecution` (boolean, required): Indicates whether to force the execution.\n- `variables` (array, required): An array of objects containing site variables with the following properties:\n    - `name` (string): The name of the variable.\n    - `key` (string): The key of the variable.\n    - `value` (string): The value of the variable.\n\n#### Response\n\nThe response will be in the form of a JSON schema and will include the following properties:\n\n``` json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(5);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "# GET Site Variable\n\nThis endpoint retrieves the details of a specific site variable.\n\n## Request\n\n### Path Parameters\n\n- `siteVarSiteId` (string, required): The ID of the site variable.\n    \n\n### Response\n\n- `entity` (array): An array containing the details of the site variable.\n    - `hostId` (string): The ID of the host.\n    - `id` (string): The ID of the site variable.\n    - `key` (string): The key of the site variable.\n    - `lastModDate` (number): The timestamp of the last modification date.\n    - `lastModifierFullName` (string): The full name of the last modifier.\n    - `lastModifierId` (string): The ID of the last modifier.\n    - `name` (string): The name of the site variable.\n    - `value` (string): The value of the site variable.\n- `errors` (array): An array containing any errors.\n- `i18nMessagesMap` (object): An object containing internationalization messages.\n- `messages` (array): An array containing any messages.\n- `pagination` (null): The pagination information.\n- `permissions` (array): An array containing permissions.\n    \n\n## Example\n\n``` json\n{\n    \"entity\": [\n        {\n            \"hostId\": \"\",\n            \"id\": \"\",\n            \"key\": \"\",\n            \"lastModDate\": 0,\n            \"lastModifierFullName\": \"\",\n            \"lastModifierId\": \"\",\n            \"name\": \"\",\n            \"value\": \"\"\n        }\n    ],\n    \"errors\": [],\n    \"i18nMessagesMap\": {},\n    \"messages\": [],\n    \"pagination\": null,\n    \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### GET /api/v1/site/{{siteVarSiteId}}\n\nThis endpoint retrieves information about a specific site.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n- `siteVarSiteId` (path parameter) : The unique identifier of the site.\n    \n\n#### Response\n\nThe response is in JSON format and represents the schema of the retrieved site information.\n\n``` json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```\n\nThe response includes the following key information:\n\n- `entity` : Contains details about the site, such as its name, description, and status.\n- `errors` : An array of any errors encountered during the request.\n- `i18nMessagesMap` : Internationalization messages map.\n- `messages` : General messages related to the request.\n- `pagination` : Pagination information if applicable.\n- `permissions` : Details about the permissions associated with the site."
							},
							"response": []
						},
						{
							"name": "Update Site modifying variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name.updated\", value: \"var1Value.updated\" },",
											"        { key: \"var2Keyupdated\", name: \"var2Name\", value: \"var2Value.updated\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Keyupdated\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name.updated\", value: \"var5Value.updated\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n           \"name\":\"var1Name.updated\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value.updated\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Keyupdated\",\n            \"value\":\"var2Value.updated\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3ValueDuplicated1\" \n        },\n        {\n           \"name\":\"var4Name\",\n            \"key\":\"var4Keyupdated\",\n            \"value\":\"var4Value\" \n        },\n        {\n           \"name\":\"var5Name.updated\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value.updated\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3ValueDuplicated2\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "### Update Site Details\n\nThis endpoint allows the user to update the details of a specific site by making an HTTP PUT request to the `{{serverURL}}/api/v1/site?id={{siteVarSiteId}}` URL.\n\n#### Request Body\n\nThe request body should be in the raw format and include the following parameters:\n\n- `siteName`: (string) The name of the site.\n- `forceExecution`: (boolean) Indicates whether to force the execution.\n- `variables`: (array) An array of objects containing the following:\n    - `name`: (string) The name of the variable.\n    - `key`: (string) The key of the variable.\n    - `value`: (string) The value of the variable.\n\n#### Response\n\nUpon a successful execution, the endpoint returns a status code of 200 and a JSON response containing the updated entity details, including the site's attributes, variables, and other relevant information.\n\nExample Response:\n\n``` json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(5);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### GET /api/v1/site/variable/{{siteVarSiteId}}\n\nThis endpoint retrieves the variable details for a specific site.\n\n#### Request\n\nNo request body parameters are required for this endpoint.\n\n- `siteVarSiteId` (path parameter) : The ID of the site for which the variable details are to be retrieved.\n    \n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"entity\": [\n    {\n      \"hostId\": \"string\",\n      \"id\": \"string\",\n      \"key\": \"string\",\n      \"lastModDate\": 0,\n      \"lastModifierFullName\": \"string\",\n      \"lastModifierId\": \"string\",\n      \"name\": \"string\",\n      \"value\": \"string\"\n    }\n  ],\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```\n\n- `entity` (array): An array of objects containing the variable details.\n    - `hostId` (string): The host ID of the variable.\n    - `id` (string): The ID of the variable.\n    - `key` (string): The key of the variable.\n    - `lastModDate` (number): The last modification date of the variable.\n    - `lastModifierFullName` (string): The full name of the last modifier.\n    - `lastModifierId` (string): The ID of the last modifier.\n    - `name` (string): The name of the variable.\n    - `value` (string): The value of the variable.\n- `errors` (array): An array of error messages, if any.\n- `i18nMessagesMap` (object): An object containing internationalization messages.\n- `messages` (array): An array of messages, if any.\n- `pagination` (null): Pagination information, if applicable.\n- `permissions` (array): An array of permissions, if any."
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name.updated\", value: \"var1Value.updated\" },",
											"        { key: \"var2Keyupdated\", name: \"var2Name\", value: \"var2Value.updated\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Keyupdated\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name.updated\", value: \"var5Value.updated\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This endpoint sends an HTTP GET request to retrieve information about a specific site identified by the site ID. The response of this request is documented below as a JSON schema.\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteId\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier of the site\"\n    },\n    \"siteName\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the site\"\n    },\n    \"location\": {\n      \"type\": \"string\",\n      \"description\": \"The location of the site\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"The date and time when the site was created\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"The date and time when the site was last updated\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Site removing variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value.updated\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "### PUT /api/v1/site\n\nThis endpoint is used to update a site with the specified ID.\n\n#### Request Body\n\n- `siteName` (string, optional): The name of the site.\n- `forceExecution` (boolean, required): Indicates whether to force the execution.\n- `variables` (array, required): An array of variables with the following properties:\n    - `name` (string): The name of the variable.\n    - `key` (string): The key of the variable.\n    - `value` (string): The value of the variable.\n\n#### Response\n\nThe response is in JSON format and has the following schema:\n\n``` json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```\n\n- `entity` (object): Contains the updated site entity with various properties.\n- `errors` (array): An array of errors, if any.\n- `i18nMessagesMap` (object): Internationalization messages map.\n- `messages` (array): An array of messages.\n- `pagination` (null): Pagination information, if applicable.\n- `permissions` (array): An array of permissions."
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(1);",
											"    pm.expect(jsonData.entity[0].key).to.equal(\"var3Key\");",
											"    pm.expect(jsonData.entity[0].value).to.equal(\"var3Value.updated\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "The endpoint retrieves the variable details for a specific site using the site ID.\n\nThe response is a JSON object with the following structure:\n\n``` json\n{\n  \"entity\": [\n    {\n      \"hostId\": \"\",\n      \"id\": \"\",\n      \"key\": \"\",\n      \"lastModDate\": 0,\n      \"lastModifierFullName\": \"\",\n      \"lastModifierId\": \"\",\n      \"name\": \"\",\n      \"value\": \"\"\n    }\n  ],\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```\n\nThis JSON schema represents the structure of the response object returned by the API endpoint."
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value.updated\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Retrieve Site Details\n\nThis endpoint retrieves details of a specific site based on the provided site ID.\n\n#### Request\n\n`GET /api/v1/site/{{siteVarSiteId}}`\n\n#### Response\n\n- Status: 200\n- Content-Type: application/json\n    \n\n``` json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the site was archived\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.archived).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}",
										"_archive"
									]
								},
								"description": "The endpoint makes an HTTP PUT request to archive a specific site. The response returned is a JSON object with the following schema:\n\n``` json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    // Check that the 'errors' array is defined and its length is 0",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\n### Delete Site\nThis endpoint is used to delete a specific site.\n\n#### Request\n- Method: DELETE\n- URL: `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`\n\n#### Response\nThe response will be a JSON object with the following schema:\n```json\n{\n    \"entity\": boolean,\n    \"errors\": array,\n    \"i18nMessagesMap\": object,\n    \"messages\": array,\n    \"pagination\": null,\n    \"permissions\": array\n}\n```\n- `entity`: Indicates the success of the operation.\n- `errors`: An array of error messages, if any.\n- `i18nMessagesMap`: An object containing internationalized messages.\n- `messages`: An array of messages.\n- `pagination`: This will be null in the response.\n- `permissions`: An array of permissions.\n\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "In site - Null variables",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking site variables and storing 'sitevarId' for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"sitevariables.host.com.{{$timestamp}}\",\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								},
								"description": "\n### POST /api/v1/site\n\nThis endpoint is used to create a new site.\n\n#### Request Body\n- The request body should be in JSON format.\n- It should contain the following parameters:\n  - `siteName` (string, required): The name of the site.\n  - `variables` (array, required): An array of objects containing the following parameters:\n    - `name` (string, required): The name of the variable.\n    - `key` (string, required): The key of the variable.\n    - `value` (string, required): The value of the variable.\n\n#### Response\n- The response will be in JSON format.\n- It will contain the details of the newly created site.\n\n#### Headers\n- The request should include the appropriate headers as required by the server.\n\n#### Constraints and Validations\n- All parameters in the request body are required.\n- The `variables` array must contain at least one object.\n\n"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(3);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "# Get Site Variable\n\nThis endpoint retrieves the details of a specific site variable.\n\n## Request\n\n### Request URL\n\n- `GET` {{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}\n    \n\n### Headers\n\n- `Authorization`: Bearer token\n    \n\n### Parameters\n\n- `siteVarSiteId` (path): The ID of the site variable\n    \n\n## Response\n\nUpon a successful request, the server will respond with a JSON object containing the details of the site variable, including its ID, name, value, and any additional metadata.\n\n### Response Body\n\n- `id` (string): The unique identifier of the site variable\n- `name` (string): The name of the site variable\n- `value` (string): The value of the site variable\n- `metadata` (object): Additional metadata associated with the site variable\n    \n\n### Example\n\n``` json\n{\n  \"id\": \"123abc\",\n  \"name\": \"example_variable\",\n  \"value\": \"example_value\",\n  \"metadata\": {\n    \"description\": \"Example site variable\",\n    \"created_at\": \"2022-01-01T12:00:00Z\",\n    \"updated_at\": \"2022-01-02T08:00:00Z\"\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This endpoint retrieves the details of a specific site variable.\n\n### Request\n\n#### Request URL\n\n`GET` `http://{{serverURL}}/api/v1/{{sitevariable`\n\n#### Headers\n\n- Authorization: Bearer token\n    \n\n#### Parameters\n\n- siteVarSiteId (path): The ID of the site variable\n    \n\n### Response\n\nUpon a successful request, the server will respond with a JSON object containing the details of the site variable, including its ID, name, value, and any additional metadata.\n\n#### Response Body\n\n- id (string): The unique identifier of the site variable\n- name (string): The name of the site variable\n- value (string): The value of the site variable\n- metadata (object): Additional metadata associated with the site variable\n    \n\n#### Example\n\n``` json\n{  \n  \"id\": \"123abc\",  \n  \"name\": \"example_variable\",  \n  \"value\": \"example_value\",  \n  \"metadata\": {    \n    \"description\": \"Example site variable\",    \n    \"created_at\": \"2022-01-01T12:00:00Z\",    \n    \"updated_at\": \"2022-01-02T08:00:00Z\"  \n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Site adding variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n           \"name\":\"var4Name\",\n            \"key\":\"var4Key\",\n            \"value\":\"var4Value\" \n        },\n        {\n           \"name\":\"var5Name\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "This endpoint allows updating a specific site using the site ID as a query parameter. The request should be sent as an HTTP PUT to the specified URL. The request payload should be in raw JSON format and include the siteName, forceExecution, and an array of variables with name, key, and value fields.\n\n### Response\n\nThe response for this request is a JSON object representing the updated site. Please refer to the JSON schema below for the structure of the response:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteId\": {\n      \"type\": \"string\"\n    },\n    \"siteName\": {\n      \"type\": \"string\"\n    },\n    \"variables\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"key\": {\n            \"type\": \"string\"\n          },\n          \"value\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(5);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Retrieve Site Variable\n\nThis endpoint makes an HTTP GET request to retrieve the site variable for a specific site.\n\n#### Response\n\nThe response of this request is a JSON object representing the site variable. To document the response as a JSON schema, you can use the following format:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteVarId\": {\n      \"type\": \"string\"\n    },\n    \"siteVarName\": {\n      \"type\": \"string\"\n    },\n    \"siteVarValue\": {\n      \"type\": \"string\"\n    },\n    \"siteVarType\": {\n      \"type\": \"string\"\n    }\n    // Add more properties as per the actual response\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\n# Get Site Details\n\nThis endpoint retrieves the details of a specific site based on the provided site ID.\n\n## Request\n\n### Request URL\n- `GET /api/v1/site/{{siteVarSiteId}}`\n\n### Request Parameters\n- `siteVarSiteId` (path) - The ID of the site for which details are to be retrieved.\n\n### Headers\n- `Authorization` - The authentication token for the request.\n\n## Response\n\n### 200 OK\nA successful response will include the following details:\n- `siteId` (string) - The unique identifier of the site.\n- `siteName` (string) - The name of the site.\n- `siteLocation` (string) - The location of the site.\n- `siteType` (string) - The type of the site.\n\n#### Sample Response\n```json\n{\n    \"siteId\": \"123\",\n    \"siteName\": \"Sample Site\",\n    \"siteLocation\": \"Sample Location\",\n    \"siteType\": \"Sample Type\"\n}\n```\n\n### 401 Unauthorized\nIf the request is unauthorized, an error response will be returned.\n\n#### Sample Response\n```json\n{\n    \"error\": \"Unauthorized\",\n    \"message\": \"Invalid credentials\"\n}\n```\n\n## Example\n### Sample Request\n```http\nGET /api/v1/site/12345\nAuthorization: Bearer your_auth_token\n```\n\n### Sample Response\n```json\n{\n    \"siteId\": \"12345\",\n    \"siteName\": \"Example Site\",\n    \"siteLocation\": \"Example Location\",\n    \"siteType\": \"Example Type\"\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Update Site NOT sending variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "\n### Update Site Details\n\nThis endpoint is used to update the details of a specific site.\n\n#### Request Body Parameters\n- `siteName` (string, optional): The name of the site.\n- `forceExecution` (boolean, required): Indicates whether the update should be forcefully executed.\n\n#### Request Headers\n- `Content-Type`: application/json\n\n#### Request Parameters\n- `id` (query parameter, required): The ID of the site to be updated.\n\n#### Response\nThe response will contain the updated details of the site.\n\n#### Response JSON Schema\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteId\": {\n      \"type\": \"string\"\n    },\n    \"siteName\": {\n      \"type\": \"string\"\n    },\n    \"location\": {\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(5);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "# Site Variable Details\n\nThis endpoint retrieves the details of a specific site variable.\n\n## Response\n\nThe response for this request is a JSON object with the following properties:\n\n- `id` (string): The unique identifier of the site variable.\n- `name` (string): The name of the site variable.\n- `value` (string): The value of the site variable.\n    \n\nExample:\n\n``` json\n{\n    \"id\": \"123456\",\n    \"name\": \"example_variable\",\n    \"value\": \"example_value\"\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This API endpoint makes an HTTP GET request to retrieve information about a specific site. The request should include the site ID as a path parameter in the URL. The response will contain the details of the site.\n\n### Request\n\n#### Request URL\n\n```\n{{serverURL}}/api/v1/site/{{siteVarSiteId}}\n\n ```\n\n#### Request Headers\n\n- No specific headers provided\n    \n\n#### Authentication\n\n- Include any required authentication details\n    \n\n### Response\n\nThe response will include the details of the site, such as site name, location, contact information, and any other relevant site-specific data."
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the site was archived\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.archived).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}",
										"_archive"
									]
								},
								"description": "### Archive Site\n\nThis endpoint is used to archive a specific site by sending an HTTP PUT request to the server URL.\n\n#### Request Body\n\n- `siteVarSiteId` (string, required): The ID of the site to be archived.\n    \n\n#### Response\n\nThe response will include the status of the archive operation."
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\n  \n### Delete Site\nThis endpoint is used to delete a specific site.\n\n#### Request\n- Method: DELETE\n- URL: `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`\n- Path Parameters\n  - `siteVarSiteId`: The ID of the site to be deleted.\n\n#### Response\nThe response for this request is a JSON schema with the following properties:\n- `message`: A string indicating the result of the delete operation.\n\n"
							},
							"response": []
						}
					],
					"description": "These tests validate that if we are not sending at all the site varibles, no site variables should be updated."
				},
				{
					"name": "In site - Validate Variables",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking site variables and storing 'sitevarId' for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"sitevariables.host.com.{{$timestamp}}\",\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								},
								"description": "### Create Site\n\nThis endpoint is used to create a new site.\n\n#### Request Body\n\n- `siteName` (string, required): The name of the site.\n- `variables` (array, required): An array of variables for the site, each containing:\n    - `name` (string, required): The name of the variable.\n    - `key` (string, required): The key of the variable.\n    - `value` (string, required): The value of the variable.\n\n#### Response\n\nThe response of this request follows the JSON schema below:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(3);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Get Site Variable\n\nThis endpoint retrieves the details of a specific site variable based on the provided site ID.\n\n#### Request\n\n- Method: GET\n- URL: `{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}`\n    \n\n#### Response\n\nThe response for this request can be documented as a JSON schema. Below is an example of the JSON schema for the response:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteVarId\": {\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "# Retrieve Site Information\n\nThis endpoint retrieves information about a specific site.\n\n## Request\n\n- Method: GET\n- URL: `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`\n    \n\n## Response\n\nThe response for this request can be described using the following JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteId\": {\n      \"type\": \"string\"\n    },\n    \"siteName\": {\n      \"type\": \"string\"\n    },\n    \"location\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"latitude\": {\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"type\": \"number\"\n        }\n      }\n    },\n    \"contact\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"email\": {\n          \"type\": \"string\"\n        },\n        \"phone\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Site - Variables with no key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(pm.collectionVariables.get(\"skipTest\"));",
											"",
											"pm.test(\"Status code should be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contains('Site Variable key is required');",
											"});",
											"",
											"",
											"pm.collectionVariables.set(\"skipTest\", \"false\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n           \"name\":\"var4Name\",\n            \"value\":\"var4Value\" \n        },\n        {\n           \"name\":\"var5Name\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "\nThis endpoint makes an HTTP PUT request to update a specific site by its ID. The request should include the site ID as a query parameter. The request body should be in raw format and include the site name, a boolean flag for force execution, and an array of variables with their name, key, and value.\n\n### Request\n- Method: PUT\n- URL: {{serverURL}}/api/v1/site?id={{siteVarSiteId}}\n- Headers: \n  - Content-Type: application/json\n  - Other headers as required\n\n#### Request Body\nThe request body should be in raw format (application/json) and include the following parameters:\n- `siteName` (string): The name of the site.\n- `forceExecution` (boolean): A flag to indicate whether to force execution.\n- `variables` (array): An array of objects containing the following parameters for each variable:\n  - `name` (string): The name of the variable.\n  - `key` (string): The key of the variable.\n  - `value` (string): The value of the variable.\n\n### Response\nThe response to the request will depend on the specific implementation and the success or failure of the update operation. The response will include the appropriate status code and any relevant data or error messages.\n\n"
							},
							"response": []
						},
						{
							"name": "Update Site - Variables with empty key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contains('Site Variable key is required');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n           \"name\":\"var4Name\",\n           \"key\":\"\",\n            \"value\":\"var4Value\" \n        },\n        {\n           \"name\":\"var5Name\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "\n### Update Site\nThis endpoint is used to update a specific site using its ID.\n\n#### Request\n- Method: PUT\n- URL: `{{serverURL}}/api/v1/site?id={{siteVarSiteId}}`\n- Body:\n  - `siteName` (string, optional): The name of the site.\n  - `forceExecution` (boolean, required): A flag to force the execution.\n  - `variables` (array, required): An array of objects containing the following parameters:\n    - `name` (string): The name of the variable.\n    - `key` (string): The key of the variable.\n    - `value` (string): The value of the variable.\n\n#### Response\nThe response for this request is a JSON object conforming to the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Update Site - Variables with invalid key format",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contains('Site Variable key should only contains characters');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n           \"name\":\"var4Name\",\n           \"key\":\"var4Key invalid\",\n            \"value\":\"var4Value\" \n        },\n        {\n           \"name\":\"var5Name\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "\n## Update Site Details\n\nThis endpoint allows the client to update the details of a specific site.\n\n### Request\n\n- Method: PUT\n- URL: `{{serverURL}}/api/v1/site?id={{siteVarSiteId}}`\n\n#### Request Body\n- Type: JSON\n  - `siteName` (string, optional): The name of the site.\n  - `forceExecution` (boolean, required): A flag to indicate whether to force the execution.\n  - `variables` (array, required): An array of objects containing the following fields:\n    - `name` (string, optional): The name of the variable.\n    - `key` (string, optional): The key of the variable.\n    - `value` (string, optional): The value of the variable.\n\n### Response\n\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(3);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\n## Get Site Variable\nThis endpoint retrieves the details of a specific site variable.\n\n### Request\n- Method: GET\n- URL: `{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}`\n- Headers:\n  - Content-Type: application/json\n  - Authorization: Bearer <token>\n\n### Response\n- Content-Type: application/json\n- 200 OK: The request was successful. The response will contain the details of the site variable, including its ID, name, value, and any additional metadata.\n\n"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\nThis HTTP GET request retrieves information about a specific site using the site ID. The request does not include a request body, but it may contain headers and parameters.\n\n### Request\n- Method: GET\n- Endpoint: {{serverURL}}/api/v1/site/{{siteVarSiteId}}\n- Headers: The request may include headers.\n- Parameters: The siteVarSiteId parameter is required in the URL path to specify the site ID.\n\n### Response\nThe response will contain the details of the site, including its ID, name, location, and other relevant information.\n\n#### Example\nRequest:\n```\nGET {{serverURL}}/api/v1/site/12345\n```\n\nResponse:\n```json\n{\n  \"siteId\": \"12345\",\n  \"name\": \"Site Name\",\n  \"location\": \"Site Location\",\n  ...\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the site was archived\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.archived).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}",
										"_archive"
									]
								},
								"description": "\n### Archive Site\nThis endpoint allows the user to archive a specific site by sending an HTTP PUT request to the specified URL.\n\n#### Request Body\n- `siteVarSiteId` (string, required): The ID of the site to be archived.\n\n#### Response\nThe response will indicate the success or failure of the archive operation.\n"
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Delete Site\n\nThis endpoint is used to delete a specific site.\n\n#### Request\n\n- Method: DELETE\n- URL: `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`\n    \n\n#### Response\n\nThe response for this request is a JSON schema representing the deleted site."
							},
							"response": []
						}
					],
					"description": "These tests validate that if we are not sending at all the site varibles, no site variables should be updated.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "In site - With ID on variables",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking site variables and storing 'sitevarId' for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"sitevariables.host.com.{{$timestamp}}\",\n    \"variables\":[\n        {\n           \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n           \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n           \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        }\n    ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								},
								"description": "\nThe `POST` request to `/api/v1/site` endpoint is used to create a new site. The request should have a JSON payload with the `siteName` and an array of `variables` containing `name`, `key`, and `value` for each variable.\n\n### Request Body\n- `siteName` (string): The name of the site.\n- `variables` (array): An array of objects containing the `name`, `key`, and `value` for each variable.\n\nThe response to this request is a JSON object with the following schema:\n\n```json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n```\n\nThe `entity` object contains information about the created site, including its properties like `archived`, `default`, `live`, `locked`, `runDashboard`, `systemHost`, and `working`. The `variables` array within `entity` contains the details of the variables added to the site, including their `id`, `key`, `name`, and `value`.\n\nThe `errors`, `i18nMessagesMap`, `messages`, `pagination`, and `permissions` fields provide additional information and error handling for the request.\n\n"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(3);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This endpoint retrieves the variable details for a specific site using the site ID in the URL.\n\n### Request\n\n- Method: GET\n- URL: {{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}\n    \n\n### Response\n\nThe response will be in JSON format with the following structure:\n\n``` json\n{\n    \"entity\": [\n        {\n            \"hostId\": \"\",\n            \"id\": \"\",\n            \"key\": \"\",\n            \"lastModDate\": 0,\n            \"lastModifierFullName\": \"\",\n            \"lastModifierId\": \"\",\n            \"name\": \"\",\n            \"value\": \"\"\n        }\n    ],\n    \"errors\": [],\n    \"i18nMessagesMap\": {},\n    \"messages\": [],\n    \"pagination\": null,\n    \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(3);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											"",
											"pm.test(\"Sstoring site variables ids for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.environment.set(`variableId${index + 1}`, variable.id);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Get Site Details\n\nThis endpoint retrieves the details of a specific site by making an HTTP GET request to `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response Body\n\nThe response will be in JSON format with the following structure:\n\n- `entity`: Contains information about the site, including its archived status, description, language, permissions, and more.\n    - `addThis`: (null)\n    - `aliases`: (null)\n    - `archived`: true\n    - `default`: true\n    - `description`: (null)\n    - `embeddedDashboard`: (null)\n    - `googleAnalytics`: (null)\n    - `googleMap`: (null)\n    - `identifier`: \"\"\n    - `inode`: \"\"\n    - `keywords`: (null)\n    - `languageId`: 0\n    - `live`: true\n    - `locked`: true\n    - `modDate`: 0\n    - `modUser`: \"\"\n    - `proxyUrlForEditMode`: (null)\n    - `runDashboard`: true\n    - `siteName`: \"\"\n    - `siteThumbnail`: \"\"\n    - `systemHost`: true\n    - `tagStorage`: \"\"\n    - `variables`: An array of objects containing site variables with keys `id`, `key`, `name`, and `value`.\n    - `working`: true\n- `errors`: An array of error messages, if any.\n- `i18nMessagesMap`: An empty object.\n- `messages`: An empty array.\n- `pagination`: (null)\n- `permissions`: An empty array.\n    \n\nThe status code for a successful response is 200."
							},
							"response": []
						},
						{
							"name": "Update Site adding variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n            \"id\": \"{{variableId1}}\",\n            \"name\":\"var1Name\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value\" \n        },\n        {\n            \"id\": \"{{variableId2}}\",\n            \"name\":\"var2Name\",\n            \"key\":\"var2Key\",\n            \"value\":\"var2Value\" \n        },\n        {\n            \"id\": \"{{variableId3}}\",\n            \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n           \"name\":\"var4Name\",\n            \"key\":\"var4Key\",\n            \"value\":\"var4Value\" \n        },\n        {\n           \"name\":\"var5Name\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "This endpoint allows you to update a site by sending an HTTP PUT request to the specified URL. The request should include the site ID as a query parameter. The request body should be in raw format and include the site name, a boolean flag for force execution, and an array of variables with their IDs, names, keys, and values.\n\n### Request Body\n\n- `siteName` (string): The name of the site.\n- `forceExecution` (boolean): A flag to indicate whether to force execution.\n- `variables` (array): An array of objects containing variable details including ID, name, key, and value.\n    \n\n### Response\n\nThe response will contain the updated site details if the request is successful."
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(5);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Get Site Variable\n\n---\n\nThis endpoint retrieves the details of a specific site variable.\n\n#### Request\n\n- Method: GET\n- URL: `{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}`\n    \n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"entity\": [\n    {\n      \"hostId\": \"\",\n      \"id\": \"\",\n      \"key\": \"\",\n      \"lastModDate\": 0,\n      \"lastModifierFullName\": \"\",\n      \"lastModifierId\": \"\",\n      \"name\": \"\",\n      \"value\": \"\"\n    }\n  ],\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```\n\n- `entity` (array): Contains the details of the site variable, including `hostId`, `id`, `key`, `lastModDate`, `lastModifierFullName`, `lastModifierId`, `name`, and `value`.\n- `errors` (array): Any errors encountered during the request.\n- `i18nMessagesMap` (object): Internationalization messages map.\n- `messages` (array): Any additional messages.\n- `pagination` (null): Pagination details if applicable.\n- `permissions` (array): Permissions related to the site variable."
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name\", value: \"var1Value\" },",
											"        { key: \"var2Key\", name: \"var2Name\", value: \"var2Value\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Key\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name\", value: \"var5Value\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											"",
											"pm.test(\"Sstoring site variables ids for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.environment.set(`variableId${index + 1}`, variable.id);",
											"    });",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This endpoint retrieves information about a specific site identified by the site ID. The response of this request can be documented as a JSON schema."
							},
							"response": []
						},
						{
							"name": "Update Site modifying variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name.updated\", value: \"var1Value.updated\" },",
											"        { key: \"var2Keyupdated\", name: \"var2Name\", value: \"var2Value.updated\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Keyupdated\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name.updated\", value: \"var5Value.updated\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n            \"id\": \"{{variableId1}}\",\n            \"name\":\"var1Name.updated\",\n            \"key\":\"var1Key\",\n            \"value\":\"var1Value.updated\" \n        },\n        {\n            \"id\": \"{{variableId2}}\",\n            \"name\":\"var2Name\",\n            \"key\":\"var2Keyupdated\",\n            \"value\":\"var2Value.updated\" \n        },\n        {\n            \"id\": \"{{variableId3}}\",\n            \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value\" \n        },\n        {\n            \"id\": \"{{variableId3}}\",\n            \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3ValueDuplicated1\" \n        },\n        {\n            \"id\": \"{{variableId4}}\",\n            \"name\":\"var4Name\",\n            \"key\":\"var4Keyupdated\",\n            \"value\":\"var4Value\" \n        },\n        {\n            \"id\": \"{{variableId5}}\",\n            \"name\":\"var5Name.updated\",\n            \"key\":\"var5Key\",\n            \"value\":\"var5Value.updated\" \n        },\n        {\n            \"id\": \"{{variableId3}}\",\n            \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3ValueDuplicated2\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "### Update Site Details\n\nThis endpoint allows you to update the details of a specific site.\n\n#### Request Body\n\n- `siteName` (string, optional): The name of the site.\n- `forceExecution` (boolean, required): Indicates whether to force the execution.\n- `variables` (array, required): An array of objects containing the details of variables.\n    - `id` (string, optional): The ID of the variable.\n    - `name` (string, optional): The name of the variable.\n    - `key` (string, optional): The key of the variable.\n    - `value` (string, optional): The value of the variable.\n\n#### Response Body\n\nThe response is in JSON format and follows the schema below:\n\n``` json\n{\n  \"entity\": {\n    \"addThis\": null,\n    \"aliases\": null,\n    \"archived\": true,\n    \"default\": true,\n    \"description\": null,\n    \"embeddedDashboard\": null,\n    \"googleAnalytics\": null,\n    \"googleMap\": null,\n    \"identifier\": \"\",\n    \"inode\": \"\",\n    \"keywords\": null,\n    \"languageId\": 0,\n    \"live\": true,\n    \"locked\": true,\n    \"modDate\": 0,\n    \"modUser\": \"\",\n    \"proxyUrlForEditMode\": null,\n    \"runDashboard\": true,\n    \"siteName\": \"\",\n    \"siteThumbnail\": \"\",\n    \"systemHost\": true,\n    \"tagStorage\": \"\",\n    \"variables\": [\n      {\n        \"id\": \"\",\n        \"key\": \"\",\n        \"name\": \"\",\n        \"value\": \"\"\n      }\n    ],\n    \"working\": true\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(5);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "The endpoint makes an HTTP GET request to retrieve site variable information based on the provided site ID.\n\nThe response of the request can be documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"hostId\": {\n            \"type\": \"string\"\n          },\n          \"id\": {\n            \"type\": \"string\"\n          },\n          \"key\": {\n            \"type\": \"string\"\n          },\n          \"lastModDate\": {\n            \"type\": \"number\"\n          },\n          \"lastModifierFullName\": {\n            \"type\": \"string\"\n          },\n          \"lastModifierId\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"value\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\"\n    },\n    \"i18nMessagesMap\": {\n      \"type\": \"object\"\n    },\n    \"messages\": {\n      \"type\": \"array\"\n    },\n    \"pagination\": {\n      \"type\": \"null\"\n    },\n    \"permissions\": {\n      \"type\": \"array\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(5);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var1Key\", name: \"var1Name.updated\", value: \"var1Value.updated\" },",
											"        { key: \"var2Keyupdated\", name: \"var2Name\", value: \"var2Value.updated\" },",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value\" },",
											"        { key: \"var4Keyupdated\", name: \"var4Name\", value: \"var4Value\" },",
											"        { key: \"var5Key\", name: \"var5Name.updated\", value: \"var5Value.updated\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											"",
											"pm.test(\"Sstoring site variables ids for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.environment.set(`variableId${index + 1}`, variable.id);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Get Site Details\n\nThis endpoint retrieves the details of a specific site.\n\n#### Request\n\n- Method: GET\n    \n- URL: `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`\n    \n\n#### Response\n\nThe response will be in JSON format and will contain the following fields:\n\n- `entity`: Contains information about the site, such as archived status, default status, description, language ID, live status, locked status, modification date, proxy URL for edit mode, site name, site thumbnail, system host status, tag storage, and working status.\n    \n- `errors`: An array of any errors encountered during the request.\n    \n- `i18nMessagesMap`: Internationalization messages map.\n    \n- `messages`: Any additional messages related to the request.\n    \n- `pagination`: Pagination information, if applicable.\n    \n- `permissions`: Permissions related to the site.\n    \n\nAn example of the response body:\n\n``` json\n{\n    \"entity\": {\n        \"addThis\": null,\n        \"aliases\": null,\n        \"archived\": true,\n        \"default\": true,\n        \"description\": null,\n        ...\n    },\n    \"errors\": [],\n    \"i18nMessagesMap\": {},\n    \"messages\": [],\n    \"pagination\": null,\n    \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Site removing variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Checking site variables\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('updated.sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(1);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"updated.sitevariables.host.com.{{$timestamp}}\",\n    \"forceExecution\": true,\n    \"variables\":[\n        {\n            \"id\": \"{{variableId3}}\",\n            \"name\":\"var3Name\",\n            \"key\":\"var3Key\",\n            \"value\":\"var3Value.updated\" \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site?id={{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									],
									"query": [
										{
											"key": "id",
											"value": "{{siteVarSiteId}}"
										}
									]
								},
								"description": "\nThis endpoint allows you to update a specific site by making an HTTP PUT request to the specified URL. The request should include the site ID as a query parameter. The request body should be in raw JSON format and include the site name, a boolean flag for force execution, and an array of variables with their respective IDs, names, keys, and values.\n\n### Response\nThe response for this request is documented as a JSON schema:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n    // Add more properties as per the actual response\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(1);",
											"    pm.expect(jsonData.entity[0].key).to.equal(\"var3Key\");",
											"    pm.expect(jsonData.entity[0].value).to.equal(\"var3Value.updated\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Retrieve Site Variable Data\n\nThis endpoint makes an HTTP GET request to retrieve the variable data for a specific site.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response Body\n\nThe response of this request is a JSON schema."
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the size of the site variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(1);",
											"});",
											"",
											"pm.test(\"Validate each variable's properties are correct\", function() {",
											"    var jsonData = pm.response.json();",
											"    var expectedVariables = [",
											"        { key: \"var3Key\", name: \"var3Name\", value: \"var3Value.updated\" }",
											"    ];",
											"",
											"    jsonData.entity.variables.forEach(function(variable, index) {",
											"        pm.expect(variable.key).to.equal(expectedVariables[index].key, \"Key does not match for variable \" + (index + 1));",
											"        pm.expect(variable.name).to.equal(expectedVariables[index].name, \"Name does not match for variable \" + (index + 1));",
											"        pm.expect(variable.value).to.equal(expectedVariables[index].value, \"Value does not match for variable \" + (index + 1));",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\nThis endpoint makes an HTTP GET request to retrieve information about a specific site identified by the site ID.\n\n### Request Body\nThis request does not require a request body.\n\n### Response Body\nThe response of this request is documented as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the site was archived\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.archived).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}",
										"_archive"
									]
								},
								"description": "### Archive Site\n\nThis endpoint is used to archive a specific site.\n\n**Request Body**\n\n- `siteVarSiteId` (string, required): The ID of the site to be archived.\n    \n\n**Response**  \nThe response of this request can be documented as a JSON schema. However, since the response does not contain a message body, the JSON schema for the response will be empty.\n\n``` json\n{}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    // Check that the 'errors' array is defined and its length is 0",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "\n# Delete Site\nThis endpoint is used to delete a specific site by providing the site ID.\n\n## Request\n- Method: DELETE\n- URL: `{{serverURL}}/api/v1/site/{{siteVarSiteId}}`\n\n### Headers\nNo specific headers are required for this request.\n\n### Body\nThis request does not require a request body.\n\n## Response\n### 200 OK\nA successful response returns a status code of 200 with no response body.\n\n### 404 Not Found\nIf the site with the provided ID does not exist, the endpoint returns a status code of 404.\n\n### 401 Unauthorized\nIf the user is not authorized to delete the site, the endpoint returns a status code of 401.\n\n### 403 Forbidden\nIf the user does not have permission to delete the site, the endpoint returns a status code of 403.\n\n### 500 Internal Server Error\nIf an unexpected error occurs on the server, the endpoint returns a status code of 500.\n\n"
							},
							"response": []
						}
					]
				},
				{
					"name": "In site - No variables",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking Site's name and storing 'sitevarId' for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"siteVarSiteId\", jsonData.entity.identifier);",
											"    pm.expect(jsonData.entity.siteName).to.contains('sitevariables.host.com');",
											"    pm.expect(jsonData.entity.variables.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"sitevariables.host.com.{{$timestamp}}\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								},
								"description": "# Create New Site\n\nThis endpoint allows you to create a new site.\n\n## Request\n\n- Method: POST\n- URL: `{{serverURL}}/api/v1/site`\n- Headers:\n    - Content-Type: application/json\n- Body:\n    - siteName (string, required): The name of the site to be created.\n\nExample:\n\n``` json\n{\n  \"siteName\": \"example\"\n}\n\n ```\n\n## Response\n\nThe response for this request is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteId\": {\n      \"type\": \"string\"\n    },\n    \"siteName\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "GetSiteVariables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking that the size of the site Site Variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/variable/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"variable",
										"{{siteVarSiteId}}"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve the variable for a specific site using the site ID.\n\n### Request\n\nNo request body is required for this request.\n\n- `siteVarSiteId` (path parameter) - The ID of the site for which the variable is being retrieved.\n    \n\n### Response\n\nThe response will be in JSON format with the following structure:\n\n``` json\n{\n    \"entity\": [],\n    \"errors\": [],\n    \"i18nMessagesMap\": {},\n    \"messages\": [],\n    \"pagination\": null,\n    \"permissions\": []\n}\n\n ```\n\n- `entity` (array) - The variable entity.\n- `errors` (array) - Any errors encountered during the request.\n- `i18nMessagesMap` (object) - Internationalization messages map.\n- `messages` (array) - Any messages related to the request.\n- `pagination` (null) - Pagination information, if applicable.\n- `permissions` (array) - Permissions related to the variable."
							},
							"response": []
						},
						{
							"name": "Get Site By Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking that the size of the site Site Variables is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.variables.length).to.equal(0);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "The endpoint retrieves site information based on the provided site ID. The response is in JSON format and includes the following fields:\n\n- entity: Contains details about the site such as archived status, description, language ID, and other attributes.\n- errors: An array of any errors encountered during the request.\n- i18nMessagesMap: An object mapping internationalization messages.\n- messages: An array of messages related to the request.\n- pagination: Information about pagination, if applicable.\n- permissions: An array of permissions related to the site.\n    \n\nHere is a JSON schema representing the structure of the response:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"addThis\": { \"type\": [\"null\", \"string\"] },\n        \"aliases\": { \"type\": [\"null\", \"string\"] },\n        \"archived\": { \"type\": \"boolean\" },\n        \"default\": { \"type\": \"boolean\" },\n        \"description\": { \"type\": [\"null\", \"string\"] },\n        \"embeddedDashboard\": { \"type\": [\"null\", \"string\"] },\n        \"googleAnalytics\": { \"type\": [\"null\", \"string\"] },\n        \"googleMap\": { \"type\": [\"null\", \"string\"] },\n        \"identifier\": { \"type\": \"string\" },\n        \"inode\": { \"type\": \"string\" },\n        \"keywords\": { \"type\": [\"null\", \"string\"] },\n        \"languageId\": { \"type\": \"integer\" },\n        \"live\": { \"type\": \"boolean\" },\n        \"locked\": { \"type\": \"boolean\" },\n        \"modDate\": { \"type\": \"integer\" },\n        \"modUser\": { \"type\": \"string\" },\n        \"proxyUrlForEditMode\": { \"type\": [\"null\", \"string\"] },\n        \"runDashboard\": { \"type\": \"boolean\" },\n        \"siteName\": { \"type\": \"string\" },\n        \"siteThumbnail\": { \"type\": \"string\" },\n        \"systemHost\": { \"type\": \"boolean\" },\n        \"tagStorage\": { \"type\": \"string\" },\n        \"variables\": { \"type\": \"array\" },\n        \"working\": { \"type\": \"boolean\" }\n      },\n      \"required\": [\"archived\", \"default\", \"identifier\", \"inode\", \"languageId\", \"live\", \"locked\", \"modDate\", \"modUser\", \"runDashboard\", \"siteName\", \"siteThumbnail\", \"systemHost\", \"tagStorage\", \"variables\", \"working\"]\n    },\n    \"errors\": { \"type\": \"array\" },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\" },\n    \"pagination\": { \"type\": [\"null\", \"object\"] },\n    \"permissions\": { \"type\": \"array\" }\n  },\n  \"required\": [\"entity\", \"errors\", \"i18nMessagesMap\", \"messages\", \"permissions\"]\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking the site was archived\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.archived).to.be.equal(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}",
										"_archive"
									]
								},
								"description": "### PUT /api/v1/site/{{siteVarSiteId}}/_archive\n\nThis endpoint is used to archive a specific site.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response Body\n\nThe response is a JSON object with the following schema:\n\n- `entity` (object):\n    - `addThis` (null): The addThis property.\n    - `aliases` (null): The aliases property.\n    - `archived` (boolean): Indicates if the site is archived.\n    - `default` (boolean): Indicates if the site is the default.\n    - `description` (null): The description of the site.\n    - `embeddedDashboard` (null): The embedded dashboard property.\n    - `googleAnalytics` (null): The Google Analytics property.\n    - `googleMap` (null): The Google Map property.\n    - `identifier` (string): The identifier of the site.\n    - `inode` (string): The inode of the site.\n    - `keywords` (null): The keywords associated with the site.\n    - `languageId` (number): The language ID of the site.\n    - `live` (boolean): Indicates if the site is live.\n    - `locked` (boolean): Indicates if the site is locked.\n    - `modDate` (number): The modification date of the site.\n    - `modUser` (string): The user who modified the site.\n    - `proxyUrlForEditMode` (null): The proxy URL for edit mode.\n    - `runDashboard` (boolean): Indicates if the dashboard should run.\n    - `siteName` (string): The name of the site.\n    - `siteThumbnail` (string): The thumbnail of the site.\n    - `systemHost` (boolean): Indicates if the site is a system host.\n    - `tagStorage` (string): The tag storage property.\n    - `variables` (array): The variables associated with the site.\n    - `working` (boolean): Indicates if the site is working.\n- `errors` (array): An array of errors, if any.\n- `i18nMessagesMap` (object): The internationalization messages map.\n- `messages` (array): An array of messages.\n- `pagination` (null): The pagination information.\n- `permissions` (array): An array of permissions.\n    \n\nThe response status for a successful execution is 200."
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    // Check that the 'errors' array is defined and its length is 0",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{siteVarSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{siteVarSiteId}}"
									]
								},
								"description": "### Delete Site\n\nThis endpoint is used to delete a specific site by providing the site ID in the URL.\n\n#### Request Body\n\nThis request does not require a request body.\n\n#### Response Body\n\n- `entity` (boolean): Indicates the success of the operation.\n- `errors` (array): An array of error messages, if any.\n- `i18nMessagesMap` (object): Map of internationalized messages.\n- `messages` (array): An array of messages related to the operation.\n- `pagination` (null): Pagination information, if applicable.\n- `permissions` (array): An array of permissions related to the operation.\n    \n\n#### Response\n\n- Status: 200\n- Content-Type: application/json"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create Test Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checking Site's name and storing 'sitevarId' for subsequent tests\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.siteName).to.eql('sitevariables.host.com');",
									"    pm.collectionVariables.set(\"sitevarId\", jsonData.entity.identifier);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"siteName\":\"sitevariables.host.com\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/site",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site"
							]
						},
						"description": "\n### Add Site\nThis endpoint allows you to add a new site.\n\n#### Request Body\n- `siteName` (string, required): The name of the site to be added.\n\n#### Response\nThe response will include the details of the newly added site.\n\n#### Response Body (JSON Schema)\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"siteId\": {\n      \"type\": \"string\"\n    },\n    \"siteName\": {\n      \"type\": \"string\"\n    },\n    \"location\": {\n      \"type\": \"string\"\n    }\n  }\n}\n```\n\n#### Headers\n- Content-Type: application/json\n\n#### Parameters\nNone\n"
					},
					"response": []
				},
				{
					"name": "Add Site Variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checking that the 'onevar' variable has the expected value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.key).to.eql('onevar');",
									"    pm.collectionVariables.set(\"sitevariableId\", jsonData.entity.id);",
									"});",
									"",
									"",
									"pm.test(\"Entity object has all the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.entity).to.be.an('object');",
									"",
									"    const requiredFields = ['hostId', 'id', 'key', 'lastModDate', 'lastModifierId', 'name', 'value'];",
									"    requiredFields.forEach(field => {",
									"        pm.expect(responseData.entity).to.have.property(field);",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"siteId\":\"{{sitevarId}}\",\n    \"name\":\"onevar\",\n    \"key\":\"onevar\",\n    \"value\":\"onevar-value\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/site/variable",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site",
								"variable"
							]
						},
						"description": "### Update Site Variable\n\nThis endpoint allows the user to update a variable for a specific site.\n\n#### Request\n\n- Method: PUT\n- URL: `{{serverURL}}/api/v1/site/variable`\n- Body (raw, JSON):\n    \n    ``` json\n      {\n          \"siteId\": \"\",\n          \"name\": \"\",\n          \"key\": \"\",\n          \"value\": \"\"\n      }\n    \n     ```\n    \n\n#### Response\n\nThe response of this request is a JSON schema."
					},
					"response": []
				},
				{
					"name": "GetSiteVariables",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checking that the value of the specified Site Variable is correct\", function () {",
									"    var text = pm.response.text();",
									"    pm.expect(text).contains(\"onevar-value\")",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/site/variable/{{sitevarId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site",
								"variable",
								"{{sitevarId}}"
							]
						},
						"description": "# Retrieve Site Variable\n\nThis endpoint retrieves the details of a specific site variable.\n\n## Request\n\n- Method: GET\n- URL: `{{serverURL}}/api/v1/site/variable/{{sitevarId}}`\n    \n\n## Response\n\nThe response for this request is a JSON object conforming to the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"description\": \"The unique identifier of the site variable\"\n    },\n    \"name\": {\n      \"type\": \"string\",\n      \"description\": \"The name of the site variable\"\n    },\n    \"value\": {\n      \"type\": \"string\",\n      \"description\": \"The value of the site variable\"\n    },\n    \"createdAt\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"The date and time when the site variable was created\"\n    },\n    \"updatedAt\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\",\n      \"description\": \"The date and time when the site variable was last updated\"\n    }\n  }\n}\n\n ```"
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"",
							"var skipTest = pm.collectionVariables.set(\"skipTest\", false);",
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Stopped and live sites",
			"item": [
				{
					"name": "Create new stopped site",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Checking that the stopped Site's name is the expected one\", function () {",
									"    pm.expect(jsonData.entity.siteName).to.contains('postManTestStopped');",
									"    pm.expect(jsonData.entity.aliases).to.contains('postManTestStopped');",
									"});",
									"",
									"pm.test(\"Storing the Site's ID for subsequent tests\", function () {",
									"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"siteName\":\"postManTestStopped{{$randomPhoneNumber}}\",\n    \"aliases\":\"postManTestStopped{{$randomPhoneNumber}}\",\n    \"tagStorage\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n    \"siteThumbnail\":\"{{temporalFileId}}\",\n    \"runDashboard\":true,\n    \"keywords\":\"key1, key2, key3\",\n    \"description\":\"This is a postman host test\",\n    \"googleMap\":\"google-key\",\n    \"googleAnalytics\":\"google-analytics-key\",\n    \"addThis\":\"add-this-key\",\n    \"proxyUrlForEditMode\":\"proxy.postman.host.com\",\n    \"embeddedDashboard\":\"postman.host.com/dashboard\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/site",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new live site",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that the live Site's name is the expected one\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.siteName).to.contains('postManTestLive');",
									"    pm.expect(jsonData.entity.aliases).to.contains('postManTestLive');",
									"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"siteName\":\"postManTestLive{{$randomPhoneNumber}}\",\n    \"aliases\":\"postManTestLive{{$randomPhoneNumber}}\",\n    \"tagStorage\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n    \"siteThumbnail\":\"{{temporalFileId}}\",\n    \"runDashboard\":true,\n    \"keywords\":\"key1, key2, key3\",\n    \"description\":\"This is a postman host test\",\n    \"googleMap\":\"google-key\",\n    \"googleAnalytics\":\"google-analytics-key\",\n    \"addThis\":\"add-this-key\",\n    \"proxyUrlForEditMode\":\"proxy.postman.host.com\",\n    \"embeddedDashboard\":\"postman.host.com/dashboard\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/site",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish new live Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that the previous stopped Site can be published\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.siteName).to.contains('postManTestLive');",
									"    pm.expect(jsonData.entity.aliases).to.contains('postManTestLive');",
									"    pm.expect(jsonData.entity.live).to.eql(true);",
									"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/site/{{siteId}}/_publish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site",
								"{{siteId}}",
								"_publish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get live and stopped sites",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify that the array has more than two items",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Fields check\", function () {",
									"    pm.expect(jsonData.entity).to.have.lengthOf.at.least(3);",
									"});",
									"",
									"pm.test(\"Check if JSON contains value 'postManTestLive'\", function () {",
									"    var jsonData = pm.response.json();",
									"    var entity = jsonData.entity;",
									"    var stopped = \"postManTestStopped\";",
									"    var live = \"postManTestLive\";",
									"  ",
									"    var foundStopped = false;",
									"    var foundLive = false;",
									"",
									"    // Loop through each entity",
									"    for (var i = 0; i < entity.length; i++) {",
									"        var title = entity[i].title;",
									"",
									"        // Check if the aliases array contains the value of the stopped alias",
									"        if (title.includes(stopped)) {",
									"            foundStopped = true;",
									"        }",
									"",
									"        // Check if the aliases array contains the value of the live alias",
									"        if (title.includes(live)) {",
									"            foundLive = true;",
									"        }",
									"",
									"    }",
									"",
									"",
									"    // Assert that the stopped alias was found in the JSON",
									"    pm.expect(foundStopped).to.be.true;",
									"",
									"    // Assert that the live alias was found in the JSON",
									"    pm.expect(foundLive).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/site?filter=*&per_page=15&archive=false",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site"
							],
							"query": [
								{
									"key": "filter",
									"value": "*"
								},
								{
									"key": "per_page",
									"value": "15"
								},
								{
									"key": "archive",
									"value": "false"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{jwt}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create new Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Host check\", function () {",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host.com');",
							"});",
							"",
							"pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"postman.host.com\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Host check\", function () {",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.hostalias1.com postman.hostalias2.com postman.hostalias3.com');",
							"});",
							"",
							"pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"postman.host.com\",\n    \"aliases\":\"postman.hostalias1.com postman.hostalias2.com postman.hostalias3.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site?id={{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					],
					"query": [
						{
							"key": "id",
							"value": "{{siteId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site Change siteName no send forceExecution BadRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"postmanChange111.host.com\",\n    \"aliases\":\"postman.hostalias1.com postman.hostalias2.com postman.hostalias3.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site?id={{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					],
					"query": [
						{
							"key": "id",
							"value": "{{siteId}}"
						}
					]
				},
				"description": "Tries to update the siteName but the property `forceExecution` is not sent, so should return BadRequest."
			},
			"response": []
		},
		{
			"name": "Update Site Change siteName send forceExecution",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Host check\", function () {",
							"    pm.expect(jsonData.entity.siteName).to.eql('postmanChange.host.com');",
							"});",
							"",
							"pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"postmanChange.host.com\",\n    \"aliases\":\"postman.hostalias1.com postman.hostalias2.com postman.hostalias3.com\",\n    \"forceExecution\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site?id={{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					],
					"query": [
						{
							"key": "id",
							"value": "{{siteId}}"
						}
					]
				},
				"description": "Tries to update the siteName but the property `forceExecution` is not sent, so should return BadRequest."
			},
			"response": []
		},
		{
			"name": "Update Site - no id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"postman.host.com\",\n    \"aliases\":\"postman.hostalias1.com postman.hostalias2.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Site - host do not exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"postman.host.com\",\n    \"aliases\":\"postman.hostalias1.com postman.hostalias2.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site?id=xxxx",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					],
					"query": [
						{
							"key": "id",
							"value": "xxxx"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Temporary File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {  ",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check that the temporary file name is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.tempFiles[0].fileName).to.eql('250px-Bocas2.jpg');",
							"    pm.collectionVariables.set(\"temporalFileId\", jsonData.tempFiles[0].id);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "{{serverURL}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"fileName\":\"250px-Bocas2.jpg\",\n\t\"remoteUrl\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b8/Bocas2.jpg/250px-Bocas2.jpg\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/temp/byUrl",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"temp",
						"byUrl"
					]
				},
				"description": "Creates a temporal file to be uploaded later"
			},
			"response": []
		},
		{
			"name": "Create new Site Complete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking properties from the recently created Site\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							"",
							"",
							"const siteThumbnail = pm.response.json().entity.siteThumbnail;",
							"const isImage = /\\.(jpg|jpeg|png|gif|bmp)$/i.test(siteThumbnail);",
							"",
							"pm.test('Site Thumbnail is an image', () => {",
							"    pm.expect(isImage).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"postman.host1.com\",\n    \"aliases\":\"postman.host2.com postman.host3.com\",\n    \"tagStorage\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n    \"siteThumbnail\":\"{{temporalFileId}}\",\n    \"runDashboard\":true,\n    \"keywords\":\"key1, key2, key3\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking that the properties from the published Site are correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"    pm.expect(jsonData.entity.live).to.eql(true);",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}/_publish",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}",
						"_publish"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Default Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}/_makedefault",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}",
						"_makedefault"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Site By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking that the retrieved Site matches the expected properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"    pm.expect(jsonData.entity.live).to.eql(true);",
							"    pm.expect(jsonData.entity.default).to.eql(true);",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Site by Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", () => {",
							"  pm.expect(pm.response.code).to.eql(200);",
							"});",
							"",
							"pm.test(\"To Check if Value is Null\", function () {",
							"",
							"    pm.expect(jsonData.entity.siteName).eq(\"default\");",
							"});",
							"",
							"pm.collectionVariables.set(\"hostInode\", jsonData.entity.inode);",
							"pm.collectionVariables.set(\"siteIdentifier\", jsonData.entity.identifier);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"default\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site/_byname",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"_byname"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Default - Default Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteIdentifier}}/_makedefault",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteIdentifier}}",
						"_makedefault"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Site By Id After switched the Default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking that the retrieved Site is NOT the default Site anymore\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"    pm.expect(jsonData.entity.live).to.eql(true);",
							"    pm.expect(jsonData.entity.default).to.eql(false);",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnPublish Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking that the specified Site is NOT published anymore\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"    pm.expect(jsonData.entity.live).to.eql(false);",
							"    pm.expect(jsonData.entity.default).to.eql(false);",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}/_unpublish",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}",
						"_unpublish"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Sites Unarchived",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.collectionVariables.set(\"amountSitesPreArchive\", jsonData.entity.length);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site?per_page=10&archive=false&page=1",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					],
					"query": [
						{
							"key": "per_page",
							"value": "10"
						},
						{
							"key": "archive",
							"value": "false"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking that the specified Site is archived now\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"    pm.expect(jsonData.entity.archived).to.eql(true);",
							"    pm.expect(jsonData.entity.live).to.eql(false);",
							"    pm.expect(jsonData.entity.default).to.eql(false);",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}/_archive",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}",
						"_archive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Site By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Check archived\", function () {",
							"    pm.expect(jsonData.entity.archived).to.eql(true);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Sites Unarchived After Archiving Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"Compare amount after archiving\", function () {",
							"     pm.expect(jsonData.entity.length).to.be.lte(pm.collectionVariables.get(\"amountSitesPreArchive\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site?per_page=10&archive=false&page=1",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					],
					"query": [
						{
							"key": "per_page",
							"value": "10"
						},
						{
							"key": "archive",
							"value": "false"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				},
				"description": "Ger all the sites but no the archived ones"
			},
			"response": []
		},
		{
			"name": "Get All Sites",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site?per_page=10&archive=true&page=1",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					],
					"query": [
						{
							"key": "per_page",
							"value": "10"
						},
						{
							"key": "archive",
							"value": "true"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				},
				"description": "Get all the sites even the archived ones"
			},
			"response": []
		},
		{
			"name": "UnArchive Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking that the specified Site is un-archived now\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"    pm.expect(jsonData.entity.archived).to.eql(false);",
							"    pm.expect(jsonData.entity.live).to.eql(false);",
							"    pm.expect(jsonData.entity.default).to.eql(false);",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}/_unarchive",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}",
						"_unarchive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get thumbnails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"body check\", function () {",
							"    pm.expect(jsonData.entity.length).to.gte(1);",
							"});",
							"",
							"pm.test(\"To Check if Value is Null\", function () {",
							"",
							"    pm.expect(jsonData.entity[0].hasThumbnail).not.eq(undefined);",
							"    pm.expect(jsonData.entity[0].hostInode).not.eq(undefined);",
							"    pm.expect(jsonData.entity[0].hostId).not.eq(undefined);",
							"    pm.expect(jsonData.entity[0].hostName).not.eq(undefined);",
							"    pm.expect(jsonData.entity[0].tagStorage).not.eq(undefined);",
							"});",
							"",
							"pm.collectionVariables.set(\"temporaryInode\", jsonData.entity[0].hostInode);",
							"pm.collectionVariables.set(\"temmporayIdentifier\", jsonData.entity[0].hostInode);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/thumbnails",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"thumbnails"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Site No-Archived",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive Site Again",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking that the specified Site is archived again\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.host1.com');",
							"    pm.expect(jsonData.entity.aliases).to.eql('postman.host2.com postman.host3.com');",
							"    pm.expect(jsonData.entity.runDashboard).to.eql(true);",
							"    pm.expect(jsonData.entity.tagStorage).to.eql('8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
							"    pm.expect(jsonData.entity.siteThumbnail).to.include('250px-Bocas2.jpg');",
							"    pm.expect(jsonData.entity.live).to.eql(false);",
							"    pm.expect(jsonData.entity.default).to.eql(false);",
							"    pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}/_archive",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}",
						"_archive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"HTTP Status code must be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Copy Site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"File name check\", function () {",
							"    pm.expect(jsonData.entity.siteName).to.eql('postman.copy.host.com');",
							"});",
							"",
							"pm.collectionVariables.set(\"siteId\", jsonData.entity.identifier);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"copyFromSiteId\":\"{{siteIdentifier}}\",\n    \"copyAll\":true,\n    \"copyTemplatesContainers\":true,\n    \"copyContentOnPages\":true,\n    \"copyFolders\":true,\n    \"copyContentOnSite\":true,\n    \"copyLinks\":true,\n    \"copySiteVariables\":true,\n    \"site\": {\n        \"siteName\":\"postman.copy.host.com\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site/_copy",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"_copy"
					]
				}
			},
			"response": []
		},
		{
			"name": "Setup progress status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// not so much to test here",
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteId}}/setup_progress",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteId}}",
						"setup_progress"
					]
				}
			},
			"response": []
		},
		{
			"name": "Publish Site Wrong Site Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/xxx/_publish",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"xxx",
						"_publish"
					]
				}
			},
			"response": []
		},
		{
			"name": "UnPublish Site Wrong Site Id Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/xxx/_unpublish",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"xxx",
						"_unpublish"
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive Site Default Site is not Possible",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteIdentifier}}/_archive",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteIdentifier}}",
						"_archive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Delete Default Site  - Fail expected",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/{{siteIdentifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"{{siteIdentifier}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Archive Site wrong site Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/xxx/_archive",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"xxx",
						"_archive"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Site wrong site Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/xxx",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"xxx"
					]
				}
			},
			"response": []
		},
		{
			"name": "Make Default Site wrong site Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/xxx/_makedefault",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"xxx",
						"_makedefault"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Site By Id Site site",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/xxx",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"xxx"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Site By Name Wrong host name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"siteName\":\"xxxx.com\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site/_byname",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"_byname"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new Site - No Hostname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Copy Site - wrong host",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"copyFromSiteId\":\"xxxxx\",\n    \"copyAll\":true,\n    \"copyTemplatesContainers\":true,\n    \"copyContentOnPages\":true,\n    \"copyFolders\":true,\n    \"copyContentOnSite\":true,\n    \"copyLinks\":true,\n    \"copySiteVariables\":true,\n    \"site\": {\n        \"siteName\":\"postman.copy.host.com\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/site/_copy",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"_copy"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (!pm.environment.get('jwt')) {",
					"    const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"    const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"    if (!pm.environment.get('jwt')) {",
					"        const username = 'admin@dotcms.com';",
					"        const password = 'admin';",
					"        const basicAuth = btoa(`${username}:${password}`);",
					"",
					"        const requestOptions = {",
					"            url: apiUrl,",
					"            method: \"POST\",",
					"            header: {",
					"                \"accept\": \"*/*\",",
					"                \"content-type\": \"application/json\",",
					"                \"Authorization\": `Basic ${basicAuth}`",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    \"expirationSeconds\": 7200,",
					"                    \"userId\": \"dotcms.org.1\",",
					"                    \"network\": \"0.0.0.0/0\",",
					"                    \"claims\": {\"label\": \"postman-tests\"}",
					"                })",
					"            }",
					"        };",
					"",
					"        pm.sendRequest(requestOptions, function (err, response) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                const jwt = response.json().entity.jwt;",
					"                pm.environment.set('jwt', jwt);",
					"            }",
					"        });",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "sitevarId",
			"value": ""
		},
		{
			"key": "sitevariableId",
			"value": ""
		},
		{
			"key": "siteId",
			"value": ""
		},
		{
			"key": "temporalFileId",
			"value": ""
		},
		{
			"key": "amountSitesPreArchive",
			"value": ""
		},
		{
			"key": "siteVarSiteId",
			"value": ""
		},
		{
			"key": "skipTest",
			"value": ""
		},
		{
			"key": true,
			"value": ""
		},
		{
			"value": ""
		}
	]
}