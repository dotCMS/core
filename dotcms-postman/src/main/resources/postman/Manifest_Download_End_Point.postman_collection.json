{
	"info": {
		"_postman_id": "eb667233-52d2-4b39-9678-b5acc6690216",
		"name": "Manifest Download End Point",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "781456"
	},
	"item": [
		{
			"name": "Download Manifest Successfully",
			"item": [
				{
					"name": "create content type and content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "text"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"contentType": "application/tar+gzip ",
									"type": "file",
									"src": "resources/Push_publish/content_type_and_content_demo.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle/sync",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"sync"
							]
						},
						"description": "Imports a Bundle that includes:\n*  A piece of content of type \"Rich text\" with \"test Content\" as title and body"
					},
					"response": []
				},
				{
					"name": "Add bundle",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"bundleName = 'bundleName-' + new Date().getMilliseconds();",
									"pm.collectionVariables.set(\"bundleName\", bundleName);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"bundleId\", jsonData[\"bundleId\"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{serverURL}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{serverURL}}/DotAjaxDirector/com.dotcms.publisher.ajax.RemotePublishAjaxAction/cmd/addToBundle?assetIdentifier=ea533f67-4883-42bb-9701-83293e7313e5&bundleName={{bundleName}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"DotAjaxDirector",
								"com.dotcms.publisher.ajax.RemotePublishAjaxAction",
								"cmd",
								"addToBundle"
							],
							"query": [
								{
									"key": "assetIdentifier",
									"value": "ea533f67-4883-42bb-9701-83293e7313e5"
								},
								{
									"key": "bundleName",
									"value": "{{bundleName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "generate bundle",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bundleId\": \"{{bundleId}}\",\n    \"filterKey\": \"Intelligent.yml\",\n    \"operation\": \"0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle/_generate",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"_generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle download sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/bundle/{{bundleId}}/manifest",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"{{bundleId}}",
								"manifest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Try to download Manifest with invalid user",
			"item": [
				{
					"name": "create content type and content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream",
								"type": "text"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"contentType": "application/tar+gzip ",
									"type": "file",
									"src": "resources/Push_publish/content_type_and_content_demo.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle/sync",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"sync"
							]
						},
						"description": "Imports a Bundle that includes:\n*  A piece of content of type \"Rich text\" with \"test Content\" as title and body"
					},
					"response": []
				},
				{
					"name": "Add bundle",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"bundleName = 'bundleName-' + new Date().getMilliseconds();",
									"pm.collectionVariables.set(\"bundleName\", bundleName);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"bundleId\", jsonData[\"bundleId\"]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Origin",
								"value": "{{serverURL}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{serverURL}}/DotAjaxDirector/com.dotcms.publisher.ajax.RemotePublishAjaxAction/cmd/addToBundle?assetIdentifier=ea533f67-4883-42bb-9701-83293e7313e5&bundleName={{bundleName}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"DotAjaxDirector",
								"com.dotcms.publisher.ajax.RemotePublishAjaxAction",
								"cmd",
								"addToBundle"
							],
							"query": [
								{
									"key": "assetIdentifier",
									"value": "ea533f67-4883-42bb-9701-83293e7313e5"
								},
								{
									"key": "bundleName",
									"value": "{{bundleName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "generate bundle",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Generated Bundle sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"bundleId\": \"{{bundleId}}\",\n    \"filterKey\": \"Intelligent.yml\",\n    \"operation\": \"0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle/_generate",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"_generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Download manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/bundle/{{bundleId}}/manifest",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"{{bundleId}}",
								"manifest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Not found bundle",
			"item": [
				{
					"name": "Download manifest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/not_bundle/manifest",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"not_bundle",
								"manifest"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"   const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"   const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"// If we are unable to get the JWT we need to generate a new one",
					"   if (!pm.environment.get('jwt')) {",
					"       const username = pm.environment.get(\"user\");",
					"       const password = pm.environment.get(\"password\");",
					"       const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"",
					"       const requestOptions = {",
					"           url: apiUrl,",
					"           method: \"POST\",",
					"           header: {",
					"               \"accept\": \"*/*\",",
					"               \"content-type\": \"application/json\",",
					"               \"Authorization\": `Basic ${basicAuth}`",
					"           },",
					"           body: {",
					"               mode: \"raw\",",
					"               raw: JSON.stringify({",
					"                   \"expirationSeconds\": 7200,",
					"                   \"userId\": \"dotcms.org.1\",",
					"                   \"network\": \"0.0.0.0/0\",",
					"                   \"claims\": {\"label\": \"postman-tests\"}",
					"               })",
					"           }",
					"       };",
					"",
					"",
					"       pm.sendRequest(requestOptions, function (err, response) {",
					"           if (err) {",
					"               console.log(err);",
					"           } else {",
					"               const jwt = response.json().entity.jwt;",
					"               pm.environment.set('jwt', jwt);",
					"               console.log(jwt);",
					"           }",
					"       });",
					"   }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "environmentName",
			"value": "environment-233"
		},
		{
			"key": "environmentId",
			"value": "59a384c7-94e7-4673-97c7-2bf8986befaf"
		},
		{
			"key": "endpointName",
			"value": "endpoint-603"
		},
		{
			"key": "bundleName",
			"value": "bundleName-76"
		},
		{
			"key": "bundleId",
			"value": "01FEF2DV5W3DJ7VJ4PPKWV3QD4"
		}
	]
}