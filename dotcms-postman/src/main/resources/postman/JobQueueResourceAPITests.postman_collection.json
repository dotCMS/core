{
	"info": {
		"_postman_id": "30a2c62f-b9b7-4828-b4bd-17b4b78be6b5",
		"name": "JobQueueResource API Tests",
		"description": "Postman collection for testing the JobQueueResource API endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10041132",
		"_collection_link": "https://speeding-firefly-555540.postman.co/workspace/personal~36ad74c2-845c-4f84-8c91-495003fd59cb/collection/10041132-30a2c62f-b9b7-4828-b4bd-17b4b78be6b5?action=share&source=collection_link&creator=10041132"
	},
	"item": [
		{
			"name": "List Jobs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if jobs are returned",
							"var jsonData = pm.response.json();",
							"pm.test(\"Response has jobs list\", function () {",
							"    pm.expect(jsonData.entity).to.have.property('jobs');",
							"    pm.expect(jsonData.entity.jobs).to.be.an('array');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs?page={{page}}&pageSize={{pageSize}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}",
							"description": "Page number"
						},
						{
							"key": "pageSize",
							"value": "{{pageSize}}",
							"description": "Number of items per page"
						}
					]
				},
				"description": "Lists all jobs with pagination."
			},
			"response": []
		},
		{
			"name": "Get Queues",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if queues are returned",
							"var jsonData = pm.response.json();",
							"pm.test(\"Response has queues array\", function () {",
							"    pm.expect(jsonData.entity).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Response has a demo queue in it\", function () {",
							"    pm.expect(jsonData.entity).to.include.members(['demo', 'fail']);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/queues",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"queues"
					]
				},
				"description": "Retrieves a list of available queue names."
			},
			"response": []
		},
		{
			"name": "Create Job No Params Expect Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": []
						},
						{
							"key": "params",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/{{queueName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{queueName}}"
					]
				},
				"description": "Creates a new job in the specified queue."
			},
			"response": []
		},
		{
			"name": "Create Job Expect Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.expect(jsonData.entity).to.be.a('String');",
							"// Save jobId to environment variable",
							"pm.environment.set(\"jobId\", jsonData.entity);",
							"let jId =  pm.environment.get(\"jobId\");",
							"console.log(jId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "resources/JobQueue/odyssey.txt"
						},
						{
							"key": "params",
							"value": "{\n   \"nLines\":\"1\"\n}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/{{queueName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{queueName}}"
					]
				},
				"description": "Creates a new job in the specified queue."
			},
			"response": []
		},
		{
			"name": "Get Job Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"// Store the response in a variable",
							"let response = pm.response.json();",
							"",
							"// Validate that the response status is 200 OK",
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the 'entity' object exists",
							"pm.test(\"'entity' object exists\", function () {",
							"    pm.expect(response).to.have.property(\"entity\");",
							"});",
							"",
							"// Validate specific fields within `entity`",
							"let entity = response.entity;",
							"",
							"// Check if 'completedAt' is either null or a valid date string",
							"pm.test(\"'completedAt' is null or a valid date\", function () {",
							"    pm.expect(entity.completedAt).to.satisfy(function(val) {",
							"        return val === null || new Date(val).toString() !== \"Invalid Date\";",
							"    });",
							"});",
							"",
							"// Check if 'createdAt' is a valid date string",
							"pm.test(\"'createdAt' is a valid date string\", function () {",
							"    pm.expect(entity.createdAt).to.be.a(\"string\");",
							"    pm.expect(new Date(entity.createdAt)).to.not.equal(\"Invalid Date\");",
							"});",
							"",
							"// Check if 'executionNode' is a UUID",
							"pm.test(\"'executionNode' is a valid UUID\", function () {",
							"    pm.expect(entity.executionNode).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);",
							"});",
							"",
							"// Check if 'id' is a UUID",
							"pm.test(\"'id' is a valid UUID\", function () {",
							"    pm.expect(entity.id).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);",
							"});",
							"",
							"// Validate the inner `parameters` object",
							"let parameters = entity.parameters;",
							"",
							"pm.test(\"'parameters' contains expected keys with valid values\", function () {",
							"    pm.expect(parameters).to.have.property(\"nLines\").that.is.a(\"string\");",
							"    pm.expect(parameters).to.have.property(\"requestFingerPrint\").that.is.a(\"string\");",
							"    pm.expect(parameters.requestFingerPrint).to.have.lengthOf(44); // Base64 strings are often 44 characters for SHA-256",
							"    pm.expect(parameters).to.have.property(\"tempFileId\").that.is.a(\"string\");",
							"});",
							"",
							"// Check if 'progress' is a number between 0 and 1 (e.g., a percentage)",
							"pm.test(\"'progress' is a number between 0 and 1\", function () {",
							"    pm.expect(entity.progress).to.be.a(\"number\").within(0, 1);",
							"});",
							"",
							"// Check if 'queueName' is a non-empty string",
							"pm.test(\"'queueName' is a non-empty string\", function () {",
							"    pm.expect(entity.queueName).to.be.a(\"string\").that.is.not.empty;",
							"});",
							"",
							"// Check if 'result' is either null or a valid JSON object",
							"pm.test(\"'result' is null or an object\", function () {",
							"    pm.expect(entity.result === null || typeof entity.result === \"object\").to.be.true;",
							"});",
							"",
							"// Check if 'retryCount' is a non-negative integer",
							"pm.test(\"'retryCount' is a non-negative integer\", function () {",
							"    pm.expect(entity.retryCount).to.be.a(\"number\").that.is.at.least(0);",
							"});",
							"",
							"// Check if 'startedAt' is either null or a valid date",
							"pm.test(\"'startedAt' is null or a valid date\", function () {",
							"    pm.expect(entity.startedAt).to.satisfy(function(val) {",
							"        return val === null || new Date(val).toString() !== \"Invalid Date\";",
							"    });",
							"});",
							"",
							"// Check if 'state' is a non-empty string",
							"pm.test(\"'state' is a non-empty string\", function () {",
							"    pm.expect(entity.state).to.be.a(\"string\").that.is.not.empty;",
							"});",
							"",
							"//Check status is valid ",
							"pm.test(\"Job is RUNNING or PENDING\", function () {   ",
							"    pm.expect(entity.state).to.be.oneOf([\"RUNNING\", \"PENDING\"]);     ",
							"});",
							"",
							"// Check if 'updatedAt' is a valid date string",
							"pm.test(\"'updatedAt' is a valid date string\", function () {",
							"    pm.expect(entity.updatedAt).to.be.a(\"string\");",
							"    pm.expect(new Date(entity.updatedAt)).to.not.equal(\"Invalid Date\");",
							"});",
							"",
							"// Validate other top-level objects in the response",
							"pm.test(\"'errors' is an empty array\", function () {",
							"    pm.expect(response.errors).to.be.an(\"array\").that.is.empty;",
							"});",
							"",
							"pm.test(\"'i18nMessagesMap' is an empty object\", function () {",
							"    pm.expect(response.i18nMessagesMap).to.be.an(\"object\").that.is.empty;",
							"});",
							"",
							"pm.test(\"'messages' is an empty array\", function () {",
							"    pm.expect(response.messages).to.be.an(\"array\").that.is.empty;",
							"});",
							"",
							"pm.test(\"'pagination' is null\", function () {",
							"    pm.expect(response.pagination).to.be.null;",
							"});",
							"",
							"pm.test(\"'permissions' is an empty array\", function () {",
							"    pm.expect(response.permissions).to.be.an(\"array\").that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/{{jobId}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{jobId}}",
						"status"
					]
				},
				"description": "Retrieves the status of a specific job."
			},
			"response": []
		},
		{
			"name": "Cancel Job",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if cancellation message is returned",
							"var jsonData = pm.response.json();",
							"pm.test(\"Job cancelled successfully\", function () {",
							"    pm.expect(jsonData.entity).to.equal('Job cancelled successfully');",
							"});",
							"",
							"var jobId = pm.environment.get(\"jobId\");",
							"console.log(\" At the time this request was sent  \" + jobId);",
							"pm.environment.set(\"cancelledJobId\",jobId);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/{{jobId}}/cancel",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{jobId}}",
						"cancel"
					]
				},
				"description": "Cancels a specific job."
			},
			"response": []
		},
		{
			"name": "Create Second Job Expect Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.expect(jsonData.entity).to.be.a('String');",
							"// Save jobId to environment variable",
							"pm.environment.set(\"jobId\", jsonData.entity);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "resources/JobQueue/odyssey.txt"
						},
						{
							"key": "params",
							"value": "{\n   \"nLines\":\"1\"\n}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/{{queueName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{queueName}}"
					]
				},
				"description": "Creates a new job in the specified queue."
			},
			"response": []
		},
		{
			"name": "Active Jobs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"// Store the response in a variable",
							"let response = pm.response.json();",
							"",
							"// Validate that the response status is 200 OK",
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the 'entity' object exists",
							"pm.test(\"'entity' object exists\", function () {",
							"    pm.expect(response).to.have.property(\"entity\");",
							"});",
							"",
							"// Validate the fields within `entity`",
							"let entity = response.entity;",
							"",
							"// Check that 'jobs' is an array and validate its length",
							"pm.test(\"'jobs' is an array with the correct length\", function () {",
							"    pm.expect(entity).to.have.property(\"jobs\").that.is.an(\"array\").with.lengthOf(entity.total);",
							"});",
							"",
							"// Iterate over each job in the 'jobs' array",
							"entity.jobs.forEach((job, index) => {",
							"    pm.test(`Job ${index + 1}: 'completedAt' is null or a valid date`, function () {",
							"        pm.expect(job.completedAt).to.satisfy(function(val) {",
							"            return val === null || new Date(val).toString() !== \"Invalid Date\";",
							"        });",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'createdAt' is a valid date string`, function () {",
							"        pm.expect(job.createdAt).to.be.a(\"string\");",
							"        pm.expect(new Date(job.createdAt)).to.not.equal(\"Invalid Date\");",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'executionNode' is a valid UUID`, function () {",
							"        pm.expect(job.executionNode).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'id' is a valid UUID`, function () {",
							"        pm.expect(job.id).to.match(/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/);",
							"    });",
							"",
							"    // Validate the `parameters` object",
							"    let parameters = job.parameters;",
							"",
							"    pm.test(`Job ${index + 1}: 'parameters' contains expected keys with valid values`, function () {",
							"        pm.expect(parameters).to.have.property(\"nLines\").that.is.a(\"string\");",
							"        pm.expect(parameters).to.have.property(\"requestFingerPrint\").that.is.a(\"string\");",
							"        pm.expect(parameters.requestFingerPrint).to.have.lengthOf(44); // Typical length for SHA-256 in Base64",
							"        pm.expect(parameters).to.have.property(\"tempFileId\").that.is.a(\"string\");",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'progress' is a number between 0 and 1`, function () {",
							"        pm.expect(job.progress).to.be.a(\"number\").within(0, 1);",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'queueName' is a non-empty string`, function () {",
							"        pm.expect(job.queueName).to.be.a(\"string\").that.is.not.empty;",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'result' is null or an object`, function () {",
							"        pm.expect(job.result === null || typeof job.result === \"object\").to.be.true;",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'retryCount' is a non-negative integer`, function () {",
							"        pm.expect(job.retryCount).to.be.a(\"number\").that.is.at.least(0);",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'startedAt' is null or a valid date`, function () {",
							"        pm.expect(job.startedAt).to.satisfy(function(val) {",
							"            return val === null || new Date(val).toString() !== \"Invalid Date\";",
							"        });",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'state' is a non-empty string`, function () {",
							"        pm.expect(job.state).to.be.a(\"string\").that.is.not.empty;",
							"    });",
							"",
							"    pm.test(`Job ${index + 1}: 'updatedAt' is a valid date string`, function () {",
							"        pm.expect(job.updatedAt).to.be.a(\"string\");",
							"        pm.expect(new Date(job.updatedAt)).to.not.equal(\"Invalid Date\");",
							"    });",
							"});",
							"",
							"//Look for the last created job ",
							"let jobsArray = entity.jobs;",
							"",
							"var jobId = pm.environment.get(\"jobId\");",
							"pm.test(\"jobId is present in the response\", function () {",
							"    var jobFound = jobsArray.some(function(job) {",
							"        return job.id === jobId;",
							"    });",
							"    pm.expect(jobFound).to.be.true;",
							"});",
							"",
							"// Validate pagination fields within `entity`",
							"pm.test(\"'page' is a positive integer\", function () {",
							"    pm.expect(entity.page).to.be.a(\"number\").that.is.at.least(1);",
							"});",
							"",
							"pm.test(\"'pageSize' is a positive integer\", function () {",
							"    pm.expect(entity.pageSize).to.be.a(\"number\").that.is.at.least(1);",
							"});",
							"",
							"pm.test(\"'total' matches the length of 'jobs' array\", function () {",
							"    pm.expect(entity.total).to.equal(entity.jobs.length);",
							"});",
							"",
							"// Validate other top-level objects in the response",
							"pm.test(\"'errors' is an empty array\", function () {",
							"    pm.expect(response.errors).to.be.an(\"array\").that.is.empty;",
							"});",
							"",
							"pm.test(\"'i18nMessagesMap' is an empty object\", function () {",
							"    pm.expect(response.i18nMessagesMap).to.be.an(\"object\").that.is.empty;",
							"});",
							"",
							"pm.test(\"'messages' is an empty array\", function () {",
							"    pm.expect(response.messages).to.be.an(\"array\").that.is.empty;",
							"});",
							"",
							"pm.test(\"'pagination' is null\", function () {",
							"    pm.expect(response.pagination).to.be.null;",
							"});",
							"",
							"pm.test(\"'permissions' is an empty array\", function () {",
							"    pm.expect(response.permissions).to.be.an(\"array\").that.is.empty;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/{{queueName}}/active?page={{page}}&pageSize={{pageSize}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{queueName}}",
						"active"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}",
							"description": "Page number"
						},
						{
							"key": "pageSize",
							"value": "{{pageSize}}",
							"description": "Number of items per page"
						}
					]
				},
				"description": "Lists active jobs for a specific queue with pagination."
			},
			"response": []
		},
		{
			"name": "Create Failing Job",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.expect(jsonData.entity).to.be.a('String');",
							"// Save jobId to environment variable",
							"pm.environment.set(\"failingJobId\", jsonData.entity);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": [],
							"disabled": true
						},
						{
							"key": "params",
							"value": "{\n\n}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/fail",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"fail"
					]
				},
				"description": "Creates a new job in the specified queue (Create Failing Job)"
			},
			"response": []
		},
		{
			"name": "Monitor Non Existing Job",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains job-not-found event and 404 data\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText).to.include(\"event: job-not-found\");",
							"    pm.expect(responseText).to.include(\"data: 404\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "text/event-stream"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/nonExistingJob/monitor",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"nonExistingJob",
						"monitor"
					]
				},
				"description": "Monitors a specific job using Server-Sent Events (SSE)."
			},
			"response": []
		},
		{
			"name": "Get Job Status Expect Cancel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Configuration",
							"const maxRetries = 5; // Number of times to retry",
							"const retryDelay = 2000; // Delay between retries in milliseconds",
							"",
							"// Get server URL from environment variable",
							"const serverURL = pm.environment.get('serverURL') || pm.environment.get('baseURL'); // fallback to baseURL if serverURL is not defined",
							"",
							"// Assuming 'jobId' is set as an environment variable",
							"const jobId = pm.environment.get('cancelledJobId');",
							"const checkUrl = `${serverURL}/api/v1/jobs/${jobId}/status`;",
							"const cancelUrl = `${serverURL}/api/v1/jobs/${jobId}/cancel`;",
							"",
							"// Function to check the job state",
							"function checkJobState(retriesLeft) {",
							"",
							"    console.log(\"checkURL url :: \"+checkUrl); ",
							"    console.log(\"cancelUrl url :: \"+cancelUrl); ",
							"",
							"  pm.sendRequest({",
							"    url:checkUrl,",
							"    method:'GET'",
							"  }, ",
							"    function (err, response) {",
							"        if (err) {",
							"            console.error(\"Error retrieving job status:\", err);",
							"            return;",
							"        }",
							"        ",
							"        let jsonData = response.json();",
							"        const jobState = jsonData.entity.state;",
							"        ",
							"        // Test for \"CANCELED\" state",
							"        if (jobState === \"CANCELED\") {",
							"            pm.test(\"Job has been CANCELED\", function () {",
							"                pm.expect(jobState).to.eql(\"CANCELED\");",
							"            });",
							"            console.log(\"Job has been successfully canceled.\");",
							"        } else if (retriesLeft > 0) {",
							"            console.log(\" retriesLeft :: \"+retriesLeft);",
							"            // Send a cancel POST request and retry",
							"            pm.sendRequest({",
							"                url: cancelUrl,",
							"                method: 'POST'",
							"            }, function (cancelErr, cancelResponse) {",
							"                if (cancelErr) {",
							"                    console.error(\"Error sending cancel request:\", cancelErr);",
							"                } else {",
							"                    console.log(`Cancel request sent. Status: ${cancelResponse.status}`);",
							"                }",
							"                ",
							"                // Wait for a delay and then check the status again",
							"                setTimeout(function () {",
							"                    checkJobState(retriesLeft - 1);",
							"                }, retryDelay);",
							"            });",
							"        } else {",
							"            // If maximum retries are reached and job is still not canceled",
							"            pm.test(\"Job has not been CANCELED after maximum retries\", function () {",
							"                pm.expect(jobState).to.eql(\"CANCELED\");",
							"            });",
							"            console.warn(\"Job status is still not 'CANCELED' after maximum retries.\");",
							"        }",
							"    });",
							"}",
							"",
							"// Initial job state check",
							"checkJobState(maxRetries);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function delay(milliseconds) {",
							"    var start = new Date().getTime();",
							"    var end = start;",
							"    while (end - start < milliseconds) {",
							"        end = new Date().getTime();        ",
							"    }",
							"}",
							"",
							"//delay(10000); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/{{cancelledJobId}}/status",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"{{cancelledJobId}}",
						"status"
					]
				},
				"description": "Retrieves the status of a specific job. We expect to get one in status Canceled."
			},
			"response": []
		},
		{
			"name": "Failed Jobs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if failed jobs are returned",
							"var jsonData = pm.response.json();",
							"pm.test(\"Response has failed jobs list\", function () {",
							"    pm.expect(jsonData.entity).to.have.property('jobs');",
							"    pm.expect(jsonData.entity.jobs).to.be.an('array');",
							"    pm.expect(jsonData.entity.jobs[0]).to.be.an('object');    ",
							"});",
							"",
							"var failingJobId = pm.environment.get(\"failingJobId\");  ",
							"pm.test(\"Response has failed matching objects\", function () {    ",
							"    var jobs = jsonData.entity.jobs;",
							"    var failingJobId = pm.environment.get(\"failingJobId\");",
							"    ",
							"    // Filter ",
							"    var matchingJobs = jobs.filter(function(job) {",
							"        return job.id === failingJobId;",
							"    });",
							"    ",
							"    // Verify",
							"    pm.expect(matchingJobs.length).to.be.above(0);",
							"    ",
							"    // Assert",
							"    matchingJobs.forEach(function(job) {",
							"        pm.expect(job.id).to.equal(failingJobId);",
							"        pm.expect(job.queueName).to.equal('fail');",
							"        pm.expect(job.result).to.have.property('errorDetail');",
							"        pm.expect(job.result.errorDetail).to.have.property('exceptionClass');",
							"        pm.expect(job.result.errorDetail).to.have.property('message');",
							"        pm.expect(job.result.errorDetail).to.have.property('stackTrace');",
							"        pm.expect(job.result.errorDetail).to.have.property('timestamp');",
							"    });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs/failed?page={{page}}&pageSize={{pageSize}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs",
						"failed"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}",
							"description": "Page number"
						},
						{
							"key": "pageSize",
							"value": "{{pageSize}}",
							"description": "Number of items per page"
						}
					]
				},
				"description": "Lists failed jobs."
			},
			"response": []
		},
		{
			"name": "List Jobs Expect Fail and Cancelled",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Store the response in a variable",
							"let response = pm.response.json();",
							"",
							"// Validate that the response status is 200 OK",
							"pm.test(\"Response status is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check if the 'entity' object and 'jobs' array exist",
							"pm.test(\"'entity' object exists and contains 'jobs' array\", function () {",
							"    pm.expect(response).to.have.property(\"entity\");",
							"    pm.expect(response.entity).to.have.property(\"jobs\").that.is.an(\"array\");",
							"});",
							"",
							"// Flags to track if specific states are present",
							"let hasCanceled = false;",
							"let hasFailed = false;",
							"",
							"// Loop through each job in the 'jobs' array to validate the conditions",
							"response.entity.jobs.forEach((job, index) => {",
							"    // Check that 'progress' is less than 1",
							"    pm.test(`Job ${index + 1}: 'progress' is less than 1`, function () {",
							"        pm.expect(job.progress).to.be.a(\"number\").that.is.below(1);",
							"    });",
							"",
							"    // Check that 'queueName' is either \"demo\" or \"fail\"",
							"    pm.test(`Job ${index + 1}: 'queueName' is \"demo\" or \"fail\"`, function () {",
							"        pm.expect(job.queueName).to.be.oneOf([\"demo\", \"fail\"]);",
							"    });",
							"",
							"    // Check if any job has the state \"CANCELED\"",
							"    if (job.state === \"CANCELED\") {",
							"        hasCanceled = true;",
							"    }",
							"",
							"    // If job state is \"FAILED\", validate 'result' and 'errorDetail'",
							"    if (job.state === \"FAILED\") {",
							"        hasFailed = true;",
							"        ",
							"        pm.test(`Job ${index + 1}: 'result' exists and has 'errorDetail' when state is \"FAILED\"`, function () {",
							"            pm.expect(job).to.have.property(\"result\").that.is.an(\"object\");",
							"            pm.expect(job.result).to.have.property(\"errorDetail\").that.is.an(\"object\");",
							"            ",
							"            // Validate that 'errorDetail' has the expected fields",
							"            let errorDetail = job.result.errorDetail;",
							"            pm.expect(errorDetail).to.have.property(\"exceptionClass\").that.is.a(\"string\");",
							"            pm.expect(errorDetail).to.have.property(\"message\").that.is.a(\"string\");",
							"            pm.expect(errorDetail).to.have.property(\"processingStage\").that.is.a(\"string\");",
							"            pm.expect(errorDetail).to.have.property(\"stackTrace\").that.is.a(\"string\");",
							"            pm.expect(errorDetail).to.have.property(\"timestamp\").that.is.a(\"string\");",
							"            pm.expect(new Date(errorDetail.timestamp)).to.not.equal(\"Invalid Date\");",
							"        });",
							"    }",
							"});",
							"",
							"// Check that there is at least one job with state \"CANCELED\"",
							"pm.test(\"At least one job has the state 'CANCELED'\", function () {",
							"    pm.expect(hasCanceled).to.be.true;",
							"});",
							"",
							"// Check that there is at least one job with state \"FAILED\"",
							"pm.test(\"At least one job has the state 'FAILED'\", function () {",
							"    pm.expect(hasFailed).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/jobs?page={{page}}&pageSize={{pageSize}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"jobs"
					],
					"query": [
						{
							"key": "page",
							"value": "{{page}}",
							"description": "Page number"
						},
						{
							"key": "pageSize",
							"value": "{{pageSize}}",
							"description": "Number of items per page"
						}
					]
				},
				"description": "List Jobs Expect Fail and Cancelled."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"   if(!pm.collectionVariables.get(\"jwt\")){",
					"",
					"    console.log(\"generating....\")",
					"    const serverURL = pm.environment.get('serverURL') || pm.environment.get('baseURL'); // Get the server URL from the environment variable",
					"    const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"        const username = pm.environment.get(\"user\");",
					"        const password = pm.environment.get(\"password\");",
					"        const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"        const requestOptions = {",
					"            url: apiUrl,",
					"            method: \"POST\",",
					"            header: {",
					"                \"accept\": \"*/*\",",
					"                \"content-type\": \"application/json\",",
					"                \"Authorization\": `Basic ${basicAuth}`",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    \"expirationSeconds\": 7200,",
					"                    \"userId\": \"dotcms.org.1\",",
					"                    \"network\": \"0.0.0.0/0\",",
					"                    \"claims\": {\"label\": \"postman-tests\"}",
					"                })",
					"            }",
					"        };",
					"",
					"        pm.sendRequest(requestOptions, function (err, response) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                const jwt = response.json().entity.jwt;",
					"                pm.collectionVariables.set('jwt', jwt);",
					"                console.log(\"Successfully got a jwt :\" + jwt);",
					"            }",
					"        });    ",
					"   }        "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "queueName",
			"value": "demo",
			"type": "string"
		},
		{
			"key": "jobId",
			"value": "-1",
			"type": "string"
		},
		{
			"key": "page",
			"value": "1",
			"type": "string"
		},
		{
			"key": "pageSize",
			"value": "20",
			"type": "string"
		},
		{
			"key": "user",
			"value": "admin@dotCMS.com",
			"type": "string"
		},
		{
			"key": "password",
			"value": "admin",
			"type": "string"
		}
	]
}