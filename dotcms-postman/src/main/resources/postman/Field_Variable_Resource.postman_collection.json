{
	"info": {
		"_postman_id": "0fcc8781-f629-4097-aee5-03b395e820f5",
		"name": "Field Variable Resource",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5403727"
	},
	"item": [
		{
			"name": "Testing Unique Fields",
			"item": [
				{
					"name": "Setting the 'uniquePerSite' Variable",
					"item": [
						{
							"name": "Create test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setting collection variables\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"testSiteId\", jsonData.entity.identifier);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testSiteName\", \"www.mytestuniquesite.com\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"{{testSiteName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{testSiteId}}/_publish",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{testSiteId}}",
										"_publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Content Type with field variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content Type must have 4 fields, including row and column\", function() {",
											"    var jsonData = pm.response.json();",
											"    var contentType = jsonData.entity[0];",
											"    pm.expect(contentType.fields.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Setting collection variables\", function() {",
											"    var jsonData = pm.response.json();",
											"    var contentType = jsonData.entity[0];",
											"    pm.collectionVariables.set(\"contentTypeId\", contentType.id);",
											"    pm.collectionVariables.set(\"contentTypeVarName\", contentType.variable);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testContentTypeName\", \"CT with Unique Per Site\");",
											"pm.collectionVariables.set(\"uniquePerSiteFieldVar\", \"uniquePerSite\");",
											"pm.collectionVariables.set(\"uniquePerSiteValue\", \"true\");",
											"pm.collectionVariables.set(\"uniqueValue\", \"unique value per Site\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"multilingualable\": false,\n    \"name\": \"{{testContentTypeName}}\",\n    \"system\": false,\n    \"versionable\": true,\n    \"systemActionMappings\": {\n        \"NEW\": \"\"\n    },\n    \"workflow\": [\n        \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n    ],\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableHostFolderField\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Host-Folder\",\n            \"fieldTypeLabel\": \"Site or Folder\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": false,\n            \"name\": \"Site\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"site\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [\n                {\n                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                    \"key\": \"{{uniquePerSiteFieldVar}}\",\n                    \"value\": \"{{uniquePerSiteValue}}\"\n                }\n            ],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Title\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 3,\n            \"unique\": true,\n            \"variable\": \"title\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"SYSTEM_HOST\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"indexed\": false,\n                \"listed\": false,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableHostFolderField\",\n                            \"dataType\": \"SYSTEM\",\n                            \"fieldType\": \"Host-Folder\",\n                            \"fieldTypeLabel\": \"Site or Folder\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"forceIncludeInApi\": false,\n                            \"id\": \"0b9bb97201f4271fac0c0ca9f635a2e7\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"name\": \"Site\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"site\"\n                        },\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [\n                                {\n                                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                                    \"key\": \"{{uniquePerSiteFieldVar}}\",\n                                    \"value\": \"{{uniquePerSiteValue}}\"\n                                }\n                            ],\n                            \"fixed\": false,\n                            \"forceIncludeInApi\": false,\n                            \"id\": \"ba34f109c9e86793384387e2619267ea\",\n                            \"indexed\": true,\n                            \"listed\": true,\n                            \"name\": \"Title\",\n                            \"readOnly\": false,\n                            \"required\": true,\n                            \"searchable\": true,\n                            \"sortOrder\": 3,\n                            \"unique\": true,\n                            \"variable\": \"title\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that WYSIWYG field is created with provided field variables."
							},
							"response": []
						},
						{
							"name": "Create test Content in default Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Contentlet was created successfully in default Site\", function () {",
											"    var jsonData = pm.response.json().entity;",
											"    pm.expect(jsonData.summary.failCount).to.eql(0, \"An error occurred when creating the test Contentlet\");",
											"    pm.expect(jsonData.summary.successCount).to.eql(1, \"One piece of content should have been created\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"{{contentTypeVarName}}\",\n            \"site\": \"default\",\n            \"title\": \"{{uniqueValue}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									],
									"query": [
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								},
								"description": "Creates a test Contentlet of the previously generated Content Type."
							},
							"response": []
						},
						{
							"name": "Create test Content in test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Contentlet was created successfully in test Site\", function () {",
											"    var jsonData = pm.response.json().entity;",
											"    pm.expect(jsonData.summary.failCount).to.eql(0, \"An error occurred when creating the test Contentlet\");",
											"    pm.expect(jsonData.summary.successCount).to.eql(1, \"One piece of content should have been created\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"{{contentTypeVarName}}\",\n            \"site\": \"{{testSiteName}}\",\n            \"title\": \"{{uniqueValue}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									],
									"query": [
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								},
								"description": "Creates a test Contentlet of the previously generated Content Type."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"HTTP Status code must be successul\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "NOT Setting the 'uniquePerSite' Variable",
					"item": [
						{
							"name": "Create test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Setting collection variables\", function() {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"testSiteId\", jsonData.entity.identifier);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testSiteName\", \"www.mytestsite.com\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"{{testSiteName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Publish test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{testSiteId}}/_publish",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{testSiteId}}",
										"_publish"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Content Type with field variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content Type must have 4 fields, including row and column\", function() {",
											"    var jsonData = pm.response.json();",
											"    var contentType = jsonData.entity[0];",
											"    pm.expect(contentType.fields.length).to.eql(4);",
											"});",
											"",
											"pm.test(\"Setting collection variables\", function() {",
											"    var jsonData = pm.response.json();",
											"    var contentType = jsonData.entity[0];",
											"    pm.collectionVariables.set(\"contentTypeId\", contentType.id);",
											"    pm.collectionVariables.set(\"contentTypeVarName\", contentType.variable);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"testContentTypeName\", \"CT with NOT Unique Per Site\");",
											"pm.collectionVariables.set(\"uniquePerSiteFieldVar\", \"uniquePerSite\");",
											"pm.collectionVariables.set(\"uniquePerSiteValue\", \"false\");",
											"pm.collectionVariables.set(\"uniqueValue\", \"unique value global\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"multilingualable\": false,\n    \"name\": \"{{testContentTypeName}}\",\n    \"system\": false,\n    \"versionable\": true,\n    \"systemActionMappings\": {\n        \"NEW\": \"\"\n    },\n    \"workflow\": [\n        \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n    ],\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableHostFolderField\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Host-Folder\",\n            \"fieldTypeLabel\": \"Site or Folder\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": false,\n            \"name\": \"Site\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"site\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [\n                {\n                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                    \"key\": \"{{uniquePerSiteFieldVar}}\",\n                    \"value\": \"{{uniquePerSiteValue}}\"\n                }\n            ],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Title\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 3,\n            \"unique\": true,\n            \"variable\": \"title\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"SYSTEM_HOST\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"indexed\": false,\n                \"listed\": false,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableHostFolderField\",\n                            \"dataType\": \"SYSTEM\",\n                            \"fieldType\": \"Host-Folder\",\n                            \"fieldTypeLabel\": \"Site or Folder\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"forceIncludeInApi\": false,\n                            \"id\": \"0b9bb97201f4271fac0c0ca9f635a2e7\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"name\": \"Site\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"site\"\n                        },\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [\n                                {\n                                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                                    \"key\": \"{{uniquePerSiteFieldVar}}\",\n                                    \"value\": \"{{uniquePerSiteValue}}\"\n                                }\n                            ],\n                            \"fixed\": false,\n                            \"forceIncludeInApi\": false,\n                            \"id\": \"ba34f109c9e86793384387e2619267ea\",\n                            \"indexed\": true,\n                            \"listed\": true,\n                            \"name\": \"Title\",\n                            \"readOnly\": false,\n                            \"required\": true,\n                            \"searchable\": true,\n                            \"sortOrder\": 3,\n                            \"unique\": true,\n                            \"variable\": \"title\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that WYSIWYG field is created with provided field variables."
							},
							"response": []
						},
						{
							"name": "Create test Content in default Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Contentlet was created successfully in default Site\", function () {",
											"    var jsonData = pm.response.json().entity;",
											"    pm.expect(jsonData.summary.failCount).to.eql(0, \"An error occurred when creating the test Contentlet\");",
											"    pm.expect(jsonData.summary.successCount).to.eql(1, \"One piece of content should have been created\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"{{contentTypeVarName}}\",\n            \"site\": \"default\",\n            \"title\": \"{{uniqueValue}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									],
									"query": [
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								},
								"description": "Creates a test Contentlet of the previously generated Content Type."
							},
							"response": []
						},
						{
							"name": "Create test Content in test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Contentlet must have failed in test Site\", function () {",
											"    var entity = pm.response.json().entity;",
											"    pm.expect(entity.summary.failCount).to.eql(1, \"The fail count must be 1\");",
											"    pm.expect(entity.summary.successCount).to.eql(0, \"No content should have been created\");",
											"",
											"    const key = Object.keys(entity.results[0]);",
											"    pm.expect(entity.results[0][key].errorMessage).to.contain(\"has invalid/missing field(s). - Fields: [UNIQUE]: Title (title)\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"{{contentTypeVarName}}\",\n            \"site\": \"{{testSiteName}}\",\n            \"title\": \"{{uniqueValue}}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									],
									"query": [
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								},
								"description": "Creates a test Contentlet of the previously generated Content Type."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"HTTP Status code must be successul\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (!pm.environment.get('jwt')) {",
					"    console.log(\"generating....\")",
					"    const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"    const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"    if (!pm.environment.get('jwt')) {",
					"        const username = pm.environment.get(\"user\");",
					"        const password = pm.environment.get(\"password\");",
					"        const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"        const requestOptions = {",
					"            url: apiUrl,",
					"            method: \"POST\",",
					"            header: {",
					"                \"accept\": \"*/*\",",
					"                \"content-type\": \"application/json\",",
					"                \"Authorization\": `Basic ${basicAuth}`",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    \"expirationSeconds\": 7200,",
					"                    \"userId\": \"dotcms.org.1\",",
					"                    \"network\": \"0.0.0.0/0\",",
					"                    \"claims\": {\"label\": \"postman-tests\"}",
					"                })",
					"            }",
					"        };",
					"",
					"        pm.sendRequest(requestOptions, function (err, response) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                const jwt = response.json().entity.jwt;",
					"                pm.environment.set('jwt', jwt);",
					"                console.log(jwt);",
					"            }",
					"        });",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}