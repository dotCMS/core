{
	"info": {
		"_postman_id": "432048a5-eb89-43a5-9828-e4d69ff200dc",
		"name": "ContentResourceV1",
		"description": "This folder contains a comprehensive set of API requests related to the `ContentResourceV1` API endpoints. These requests cover various operations such as creating, retrieving and updating content. The folder is organized to help developers and testers efficiently validate and interact with the content resource endpoints in the system.\n\n#### Objectives:\n\n1. **Create Content**:\n    \n    - Test the creation of new content items with valid and invalid data.\n        \n    - Ensure that the response includes all necessary details for the created content.\n        \n2. **Retrieve Content**:\n    \n    - Validate the retrieval of content items by ID.\n        \n    - Ensure the response contains accurate and complete content details.\n        \n3. **Update Content**:\n    \n    - Test updating existing content items with valid and invalid data.\n        \n    - Verify that the response reflects the updated content accurately.\n        \n    - Ensure that only authorized users can update content.\n        \n4. **Error Handling**:\n    \n    - Verify that the API returns appropriate error messages for invalid requests.\n        \n    - Ensure the correct HTTP status codes are used for different error scenarios.\n        \n5. **Security**:\n    \n    - Validate that only authorized users can perform operations on the content.\n        \n    - Ensure that all security protocols are enforced during API interactions.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5403727"
	},
	"item": [
		{
			"name": "Checking JSON Attributes",
			"item": [
				{
					"name": "Checking Content Audit Attributes",
					"item": [
						{
							"name": "Creating Test Generic Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test content created successfully\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"    var contentId = Object.keys(jsonData.entity.results[0]);",
											"    pm.collectionVariables.set(\"testContentId\", jsonData.entity.results[0][contentId].identifier);",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"webPageContent\",\n            \"title\": \"Test Generic Content\",\n            \"contentHost\": \"default\",\n            \"body\": \"This is my Test Generic Content\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "\nThe API endpoint triggers the publication of specified content items. Upon successful execution, the response is returned in the form of a JSON schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"results\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"errorMessage\": {\n                  \"type\": \"string\"\n                },\n                \"identifier\": {\n                  \"type\": [\"string\", \"null\"]\n                },\n                \"inode\": {\n                  \"type\": [\"string\", \"null\"]\n                }\n              }\n            }\n          }\n        },\n        \"summary\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"affected\": {\n              \"type\": \"integer\"\n            },\n            \"failCount\": {\n              \"type\": \"integer\"\n            },\n            \"successCount\": {\n              \"type\": \"integer\"\n            },\n            \"time\": {\n              \"type\": \"integer\"\n            }\n          }\n        }\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"i18nMessagesMap\": {\n      \"type\": \"object\"\n    },\n    \"messages\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"permissions\": {\n      \"type\": \"array\",\n      \"items\": {}\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Retrieving Test Generic Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Checking that audit properties are present\", function () {",
											"    var entity = pm.response.json().entity;",
											"    ",
											"    pm.expect(entity.creationDate).to.not.equal(undefined, \"The 'creationDate' attribute must be present\");",
											"    pm.expect(entity.owner).to.not.equal(undefined, \"The 'owner' attribute must be present\");",
											"    pm.expect(entity.ownerName).to.not.equal(undefined, \"The 'ownerName' attribute must be present\");",
											"    pm.expect(entity.modDate).to.not.equal(undefined, \"The 'modDate' attribute must be present\");",
											"    pm.expect(entity.modUser).to.not.equal(undefined, \"The 'modUser' attribute must be present\");",
											"    pm.expect(entity.modUserName).to.not.equal(undefined, \"The 'modUserName' attribute must be present\");",
											"    pm.expect(entity.publishDate).to.not.equal(undefined, \"The 'publishDate' attribute must be present\");",
											"    pm.expect(entity.publishUser).to.not.equal(undefined, \"The 'publishUser' attribute must be present\");",
											"    pm.expect(entity.publishUserName).to.not.equal(undefined, \"The 'publishUserName' attribute must be present\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/{{testContentId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"{{testContentId}}"
									]
								},
								"description": "\nThis HTTP GET request is used to retrieve content details by providing the content ID in the endpoint URL. The server URL should be prefixed before the endpoint, and the specific content ID should be provided in place of {{testContentId}}.\n\n### Request\nThe request does not contain a request body, but it requires the following headers:\n- Authorization: Bearer <token>\n  - Type: string\n  - Description: A valid access token to authenticate the request.\n\n### Response\nUpon a successful request, the server will respond with a JSON object containing the details of the requested content, including its ID, title, description, and any other relevant information.\n\nExample Response:\n```json\n{\n  \"contentId\": \"12345\",\n  \"title\": \"Sample Content\",\n  \"description\": \"This is a sample content description.\"\n  // Other relevant information\n}\n```\n"
							},
							"response": []
						}
					],
					"description": "This folder contains two essential API requests for testing the creation and retrieval of generic content. These requests are designed to validate the core functionalities of the `ContentResourceV1` endpoint.\n\n#### Requests Included:\n\n1. **Creating Test Generic Content**:\n    \n    - **Purpose**: Test the creation of a generic content item.\n        \n    - **Details**: This request ensures that a new content item can be successfully created with the provided data. It verifies that the content creation process works as expected and that the response contains all necessary details of the newly created content.\n        \n2. **Retrieving Test Generic Content**:\n    \n    - **Purpose**: Test the retrieval of a generic content item.\n        \n    - **Details**: This request validates that a content item can be successfully retrieved using its ID. It checks that the response includes accurate and complete details of the requested content.\n        \n\n#### Objectives:\n\n- **Content Creation Validation**: Ensure that generic content can be created successfully and that the API response includes all expected fields and values.\n    \n- **Content Retrieval Validation**: Verify that the created content can be retrieved accurately by ID and that the response contains all necessary details.\n    \n- **Basic Functionality Check**: Confirm that the basic operations of creating and retrieving content work as intended.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Validations",
					"item": [
						{
							"name": "Creating Test Generic Content without parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Error message contains 'Content Type does not exist'\", function () {",
											"    var jsonData = pm.response.json();",
											"    jsonData.entity.results.forEach((result) => {",
											"        pm.expect(result['{}'].errorMessage).to.include(\"Content Type does not exist\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n           \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "\nThe API endpoint triggers the publication of specified content items. Upon successful execution, the response is returned in the form of a JSON schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"results\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"errorMessage\": {\n                  \"type\": \"string\"\n                },\n                \"identifier\": {\n                  \"type\": [\"string\", \"null\"]\n                },\n                \"inode\": {\n                  \"type\": [\"string\", \"null\"]\n                }\n              }\n            }\n          }\n        },\n        \"summary\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"affected\": {\n              \"type\": \"integer\"\n            },\n            \"failCount\": {\n              \"type\": \"integer\"\n            },\n            \"successCount\": {\n              \"type\": \"integer\"\n            },\n            \"time\": {\n              \"type\": \"integer\"\n            }\n          }\n        }\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"i18nMessagesMap\": {\n      \"type\": \"object\"\n    },\n    \"messages\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"permissions\": {\n      \"type\": \"array\",\n      \"items\": {}\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Creating Test Generic Content - No title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate errorMessage contains 'has invalid/missing field(s)'\", function () {",
											"  var jsonData = pm.response.json();",
											"  jsonData.entity.results.forEach((result) => {",
											"    var error = result[Object.keys(result)[0]].errorMessage;",
											"    pm.expect(error).to.include('has invalid/missing field(s)');",
											"  });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"webPageContent\",\n        \n            \"contentHost\": \"default\",\n            \"body\": \"This is my Test Generic Content\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "\nThe API endpoint triggers the publication of specified content items. Upon successful execution, the response is returned in the form of a JSON schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"results\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"errorMessage\": {\n                  \"type\": \"string\"\n                },\n                \"identifier\": {\n                  \"type\": [\"string\", \"null\"]\n                },\n                \"inode\": {\n                  \"type\": [\"string\", \"null\"]\n                }\n              }\n            }\n          }\n        },\n        \"summary\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"affected\": {\n              \"type\": \"integer\"\n            },\n            \"failCount\": {\n              \"type\": \"integer\"\n            },\n            \"successCount\": {\n              \"type\": \"integer\"\n            },\n            \"time\": {\n              \"type\": \"integer\"\n            }\n          }\n        }\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"i18nMessagesMap\": {\n      \"type\": \"object\"\n    },\n    \"messages\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"permissions\": {\n      \"type\": \"array\",\n      \"items\": {}\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Creating Test Generic Content - No body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate errorMessage contains 'has invalid/missing field(s)'\", function () {",
											"  var jsonData = pm.response.json();",
											"  jsonData.entity.results.forEach((result) => {",
											"    var error = result[Object.keys(result)[0]].errorMessage;",
											"    pm.expect(error).to.include('has invalid/missing field(s)');",
											"  });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"webPageContent\",\n            \"title\": \"Test Generic Content\",\n            \"contentHost\": \"default\"   \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "\nThe API endpoint triggers the publication of specified content items. Upon successful execution, the response is returned in the form of a JSON schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"results\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"errorMessage\": {\n                  \"type\": \"string\"\n                },\n                \"identifier\": {\n                  \"type\": [\"string\", \"null\"]\n                },\n                \"inode\": {\n                  \"type\": [\"string\", \"null\"]\n                }\n              }\n            }\n          }\n        },\n        \"summary\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"affected\": {\n              \"type\": \"integer\"\n            },\n            \"failCount\": {\n              \"type\": \"integer\"\n            },\n            \"successCount\": {\n              \"type\": \"integer\"\n            },\n            \"time\": {\n              \"type\": \"integer\"\n            }\n          }\n        }\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"i18nMessagesMap\": {\n      \"type\": \"object\"\n    },\n    \"messages\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"permissions\": {\n      \"type\": \"array\",\n      \"items\": {}\n    }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Retrieving Test Generic Content - Wrong ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response message\", function () {",
											"    pm.expect(pm.response.json().message).to.include('The contentlet wrongID and language 1 does not exist');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/:wrongId",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										":wrongId"
									],
									"variable": [
										{
											"key": "wrongId",
											"value": "wrongID"
										}
									]
								},
								"description": "\nThis HTTP GET request is used to retrieve content details by providing the content ID in the endpoint URL. The server URL should be prefixed before the endpoint, and the specific content ID should be provided in place of {{testContentId}}.\n\n### Request\nThe request does not contain a request body, but it requires the following headers:\n- Authorization: Bearer <token>\n  - Type: string\n  - Description: A valid access token to authenticate the request.\n\n### Response\nUpon a successful request, the server will respond with a JSON object containing the details of the requested content, including its ID, title, description, and any other relevant information.\n\nExample Response:\n```json\n{\n  \"contentId\": \"12345\",\n  \"title\": \"Sample Content\",\n  \"description\": \"This is a sample content description.\"\n  // Other relevant information\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Creating Test Generic Content - No auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response text contains the expected error message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"CONTENT_APIS_ALLOW_ANONYMOUS permission exceeded - system set to READ but WRITE was required\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"serverURL\") + \"/api/v1/logout\",",
											"    method: 'GET'",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.log('Logout failed:', err);",
											"    } else {",
											"        console.log('Logout successful, cookies should be cleared.');",
											"    }",
											"    test = false; ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"webPageContent\",\n            \"title\": \"Test Generic Content\",\n            \"contentHost\": \"default\"   \n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "\nThe API endpoint triggers the publication of specified content items. Upon successful execution, the response is returned in the form of a JSON schema.\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"results\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"errorMessage\": {\n                  \"type\": \"string\"\n                },\n                \"identifier\": {\n                  \"type\": [\"string\", \"null\"]\n                },\n                \"inode\": {\n                  \"type\": [\"string\", \"null\"]\n                }\n              }\n            }\n          }\n        },\n        \"summary\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"affected\": {\n              \"type\": \"integer\"\n            },\n            \"failCount\": {\n              \"type\": \"integer\"\n            },\n            \"successCount\": {\n              \"type\": \"integer\"\n            },\n            \"time\": {\n              \"type\": \"integer\"\n            }\n          }\n        }\n      }\n    },\n    \"errors\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"i18nMessagesMap\": {\n      \"type\": \"object\"\n    },\n    \"messages\": {\n      \"type\": \"array\",\n      \"items\": {}\n    },\n    \"permissions\": {\n      \"type\": \"array\",\n      \"items\": {}\n    }\n  }\n}\n```\n"
							},
							"response": []
						}
					],
					"description": "This folder contains a set of validation requests designed to test the robustness and error handling of the API when creating a generic content type. These tests cover various negative scenarios to ensure the API responds correctly to invalid inputs and unauthorized access attempts.\n\n#### Requests Included:\n\n1. **Creating Test Generic Content without Parameters**:\n    \n    - **Purpose**: Test the API's response when attempting to create content without providing any parameters.\n        \n    - **Details**: This request checks if the API correctly handles missing parameters and returns appropriate error messages.\n        \n2. **Creating Test Generic Content - No Title**:\n    \n    - **Purpose**: Validate the API's response when the title parameter is missing.\n        \n    - **Details**: This request ensures the API returns a proper error message indicating that the title is a required field.\n        \n3. **Creating Test Generic Content - No Body**:\n    \n    - **Purpose**: Validate the API's response when the body parameter is missing.\n        \n    - **Details**: This request checks if the API correctly handles the absence of the body field and returns an appropriate error message.\n        \n4. **Creating Test Generic Content - No Auth**:\n    \n    - **Purpose**: Test the API's response when the request is made without proper authentication.\n        \n    - **Details**: This request ensures that the API enforces authentication and returns an error when the request is not authorized.\n        \n5. **Retrieving Test Generic Content - Wrong ID**:\n    \n    - **Purpose**: Validate the API's response when attempting to retrieve content using an invalid ID.\n        \n    - **Details**: This request checks if the API returns an appropriate error message indicating that the content with the specified ID does not exist.\n        \n\n#### Objectives:\n\n- **Error Handling**: Ensure the API returns appropriate and informative error messages for various invalid input scenarios.\n    \n- **Validation of Required Fields**: Confirm that the API correctly enforces required fields and handles their absence appropriately.\n    \n- **Security**: Verify that the API enforces authentication and responds correctly to unauthorized access attempts.\n    \n- **Data Integrity**: Check that the API properly handles attempts to retrieve non-existent content and maintains data integrity.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code should be 200, 401 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 401, 404]);",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "This folder includes positive and negative testing for contents.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create Content",
			"item": [
				{
					"name": "Create New Contents",
					"item": [
						{
							"name": "SuccessRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Valid response\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"SucessRequest\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"contentletIdentifier\", jsonData.entity.identifier);",
											"pm.collectionVariables.set(\"contentletInode\", jsonData.entity.inode);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"SucessRequest{{$timestamp}}\",\n  \"value\": \"SucessRequest{{$timestamp}}\"\n}\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "\n### Update Workflow Action\n\nThis endpoint allows you to fire any action using the actionId.\n\n#### Request Body\nThe request should include a JSON payload with the following structure:\n```json\n{\n  \"contentlet\": {\n    \"stInode\": \"\",\n    \"languageId\": 0,\n    \"key\": \"\",\n    \"value\": \"\"\n  }\n}\n```\n\nOptional: If you pass ?inode={inode}, you don't need a body here.\n\n#### Response\nThe response is a JSON object with the following schema:\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"AUTO_ASSIGN_WORKFLOW\": { \"type\": \"boolean\" },\n        \"__IS_NEW_CONTENT__\": { \"type\": \"boolean\" },\n        \"archived\": { \"type\": \"boolean\" },\n        \"baseType\": { \"type\": \"string\" },\n        \"contentType\": { \"type\": \"string\" },\n        \"creationDate\": { \"type\": \"number\" },\n        \"folder\": { \"type\": \"string\" },\n        \"hasLiveVersion\": { \"type\": \"boolean\" },\n        \"hasTitleImage\": { \"type\": \"boolean\" },\n        \"host\": { \"type\": \"string\" },\n        \"hostName\": { \"type\": \"string\" },\n        \"identifier\": { \"type\": \"string\" },\n        \"inode\": { \"type\": \"string\" },\n        \"key\": { \"type\": \"string\" },\n        \"languageId\": { \"type\": \"number\" },\n        \"live\": { \"type\": \"boolean\" },\n        \"locked\": { \"type\": \"boolean\" },\n        \"modDate\": { \"type\": \"number\" },\n        \"modUser\": { \"type\": \"string\" },\n        \"modUserName\": { \"type\": \"string\" },\n        \"owner\": { \"type\": \"string\" },\n        \"ownerName\": { \"type\": \"string\" },\n        \"publishDate\": { \"type\": \"number\" },\n        \"publishUser\": { \"type\": \"string\" },\n        \"publishUserName\": { \"type\": \"string\" },\n        \"sortOrder\": { \"type\": \"number\" },\n        \"stInode\": { \"type\": \"string\" },\n        \"title\": { \"type\": \"string\" },\n        \"titleImage\": { \"type\": \"string\" },\n        \"url\": { \"type\": \"string\" },\n        \"value\": { \"type\": \"string\" },\n        \"working\": { \"type\": \"boolean\" }\n      }\n    },\n    \"errors\": { \"type\": \"array\", \"items\": {} },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\", \"items\": {} },\n    \"pagination\": { \"type\": \"null\" },\n    \"permissions\": { \"type\": \"array\", \"items\": {} }\n  }\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "Content exists by identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var identifier = pm.collectionVariables.get(\"contentletIdentifier\");",
											"pm.test(\"Id check\", function () {",
											"    pm.expect(jsonData.entity.identifier).to.eql(identifier);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/{{contentletIdentifier}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"{{contentletIdentifier}}"
									]
								},
								"description": "## API Request Description\n\nThis endpoint makes an HTTP GET request to retrieve content identified by the `contentletIdentifier`.\n\n## Request Body\n\nThis request does not require a request body.\n\n## Response Body\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"entity\": {\n    \"archived\": \"boolean\",\n    \"baseType\": \"string\",\n    \"contentType\": \"string\",\n    \"creationDate\": \"number\",\n    \"folder\": \"string\",\n    \"hasLiveVersion\": \"boolean\",\n    \"hasTitleImage\": \"boolean\",\n    \"host\": \"string\",\n    \"hostName\": \"string\",\n    \"identifier\": \"string\",\n    \"inode\": \"string\",\n    \"key\": \"string\",\n    \"languageId\": \"number\",\n    \"live\": \"boolean\",\n    \"locked\": \"boolean\",\n    \"modDate\": \"number\",\n    \"modUser\": \"string\",\n    \"modUserName\": \"string\",\n    \"owner\": \"string\",\n    \"ownerName\": \"string\",\n    \"publishDate\": \"number\",\n    \"publishUser\": \"string\",\n    \"publishUserName\": \"string\",\n    \"sortOrder\": \"number\",\n    \"stInode\": \"string\",\n    \"title\": \"string\",\n    \"titleImage\": \"string\",\n    \"url\": \"string\",\n    \"value\": \"string\",\n    \"working\": \"boolean\"\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Content exists by identifier (Default Content to Default Language)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    var jsonData = pm.response.json();",
											"    var identifier = pm.collectionVariables.get(\"contentletIdentifier\");",
											"    pm.test(\"Id check\", function () {",
											"        pm.expect(jsonData.entity.identifier).to.eql(identifier);",
											"    });",
											"} finally {",
											"    ",
											"    const apiHost = pm.environment.get('serverURL');",
											"    const jwt = pm.environment.get('jwt');",
											"    const originalValue = pm.collectionVariables.get('DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE_ORIGINAL_VALUE');            ",
											"",
											"    function setPropertyValue(newValue,callback){",
											"",
											"        const setPropertyValueRequest = {",
											"            url: `${apiHost}/api/v1/system-table`,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"                'Authorization':`Bearer ${jwt}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({ key: 'DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE', value: newValue })",
											"            }",
											"        };",
											"",
											"        console.log(`Setting a new property value ${newValue} for DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE `);",
											"        pm.sendRequest(setPropertyValueRequest, function (err, res) {",
											"            if (err) {",
											"                    console.log('Error sending Request:', err);",
											"                    if(callback){",
											"                    callback(err, null); ",
											"                    }                 ",
											"            } else {             ",
											"                const entityValue = res.json().entity;",
											"                console.log('Value saved succesfully ', entityValue);            ",
											"                if(callback){",
											"                    callback(null, entityValue); ",
											"                }                   ",
											"            }",
											"        });",
											"",
											"    }",
											"",
											"    function getPropertyValue(callback){",
											"",
											"    const getPropertyValueRequest = {",
											"            url: `${apiHost}/api/v1/system-table/DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE`,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"                'Authorization':`Bearer ${jwt}`",
											"            }",
											"    };",
											"",
											"    pm.sendRequest(getPropertyValueRequest, function (err, res) {",
											"            if (err) {",
											"                console.log('Error sending Request:', err);",
											"                if(callback){",
											"                callback(err, null); ",
											"                }             ",
											"            } else {             ",
											"                const entityValue = res.json().entity;",
											"                ",
											"                console.log('Response:', entityValue);",
											"                if(callback){",
											"                callback(null, entityValue); ",
											"                }            ",
											"            }",
											"    });",
											"",
											"    }",
											"",
											"    console.log('Restoring value to its original value');",
											"    setPropertyValue(originalValue, function (setErr, setResp){",
											"        if(setErr){",
											"            console.log('We got an error setting property :', setErr);",
											"            return;",
											"        }",
											"        if(setResp){",
											"            console.log('Response:', setResp);",
											"        }  ",
											"    });",
											"",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiHost = pm.environment.get('serverURL');",
											"const jwt = pm.environment.get('jwt');",
											"",
											"function setPropertyValue(newValue,callback){",
											"",
											"    const setPropertyValueRequest = {",
											"        url: `${apiHost}/api/v1/system-table`,",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization':`Bearer ${jwt}`",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({ key: 'DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE', value: newValue })",
											"        }",
											"    };",
											"",
											"    console.log(`Setting a new property value ${newValue} for DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE `);",
											"    pm.sendRequest(setPropertyValueRequest, function (err, res) {",
											"        if (err) {",
											"                console.log('Error sending Request:', err);",
											"                if(callback){",
											"                   callback(err, null); ",
											"                }                 ",
											"        } else {             ",
											"            const entityValue = res.json().entity;",
											"            console.log('Value saved succesfully ', entityValue);            ",
											"            if(callback){",
											"                callback(null, entityValue); ",
											"            }                   ",
											"        }",
											"    });",
											"",
											"}",
											"",
											"function getPropertyValue(callback){",
											"",
											"  const getPropertyValueRequest = {",
											"        url: `${apiHost}/api/v1/system-table/DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE`,",
											"        method: 'GET',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization':`Bearer ${jwt}`",
											"        }",
											"  };",
											"",
											"  pm.sendRequest(getPropertyValueRequest, function (err, res) {",
											"        if (err) {",
											"            console.log('Error sending Request:', err);",
											"            if(callback){",
											"               callback(err, null); ",
											"            }             ",
											"        } else { ",
											"            if(404 == res.code){",
											"                console.log('DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE not found will set it to true');",
											"                if(callback){",
											"                   callback(null, true); ",
											"                }",
											"            } else {",
											"                const entityValue = res.json().entity;",
											"                pm.collectionVariables.set('DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE_ORIGINAL_VALUE',entityValue);            ",
											"                console.log('Response:', entityValue);",
											"                if(callback){",
											"                  callback(null, entityValue); ",
											"                }       ",
											"            }     ",
											"        }",
											"   });",
											"",
											"}",
											"",
											"// Now call functions",
											"getPropertyValue(function (getErr, getValue){",
											"    if(getErr){",
											"        console.log('We got an error getting property :', getErr);",
											"        return; ",
											"    } ",
											"     if(getValue){",
											"        setPropertyValue(getValue, function (setErr, setResp){",
											"           if(setErr){",
											"              console.log('We got an error setting property :', setErr);",
											"              return;",
											"           }",
											"           if(setResp){",
											"              console.log('Response:', setResp);",
											"           }  ",
											"        });",
											"     } else {",
											"        console.error(\"There was an error getting the property value : \"+err);",
											"     }        ",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/{{contentletIdentifier}}?language=2",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"{{contentletIdentifier}}"
									],
									"query": [
										{
											"key": "language",
											"value": "2"
										}
									]
								},
								"description": "## API Request Description\n\nThis endpoint makes an HTTP GET request to retrieve content identified by the `contentletIdentifier`.\n\n## Request Body\n\nThis request does not require a request body.\n\n## Response Body\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"entity\": {\n    \"archived\": \"boolean\",\n    \"baseType\": \"string\",\n    \"contentType\": \"string\",\n    \"creationDate\": \"number\",\n    \"folder\": \"string\",\n    \"hasLiveVersion\": \"boolean\",\n    \"hasTitleImage\": \"boolean\",\n    \"host\": \"string\",\n    \"hostName\": \"string\",\n    \"identifier\": \"string\",\n    \"inode\": \"string\",\n    \"key\": \"string\",\n    \"languageId\": \"number\",\n    \"live\": \"boolean\",\n    \"locked\": \"boolean\",\n    \"modDate\": \"number\",\n    \"modUser\": \"string\",\n    \"modUserName\": \"string\",\n    \"owner\": \"string\",\n    \"ownerName\": \"string\",\n    \"publishDate\": \"number\",\n    \"publishUser\": \"string\",\n    \"publishUserName\": \"string\",\n    \"sortOrder\": \"number\",\n    \"stInode\": \"string\",\n    \"title\": \"string\",\n    \"titleImage\": \"string\",\n    \"url\": \"string\",\n    \"value\": \"string\",\n    \"working\": \"boolean\"\n  },\n  \"errors\": [],\n  \"i18nMessagesMap\": {},\n  \"messages\": [],\n  \"pagination\": null,\n  \"permissions\": []\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Content exists by inode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var inode = pm.collectionVariables.get(\"contentletInode\");",
											"pm.test(\"Id check\", function () {",
											"    pm.expect(jsonData.entity.inode).to.eql(inode);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/{{contentletInode}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"{{contentletInode}}"
									]
								},
								"description": "### Get Contentlet by Inode\n\nThis endpoint retrieves the contentlet with the specified inode.\n\n#### Response\n\nThe response will be a JSON object with the following properties:\n\n- `entity` (object):\n    - `archived` (boolean): Indicates if the contentlet is archived.\n        \n    - `baseType` (string): The base type of the contentlet.\n        \n    - `contentType` (string): The type of content.\n        \n    - `creationDate` (number): The creation date of the contentlet.\n        \n    - `folder` (string): The folder where the contentlet is located.\n        \n    - `hasLiveVersion` (boolean): Indicates if the contentlet has a live version.\n        \n    - `hasTitleImage` (boolean): Indicates if the contentlet has a title image.\n        \n    - `host` (string): The host of the contentlet.\n        \n    - `hostName` (string): The name of the host.\n        \n    - `identifier` (string): The identifier of the contentlet.\n        \n    - `inode` (string): The inode of the contentlet.\n        \n    - `key` (string): The key of the contentlet.\n        \n    - `languageId` (number): The language ID of the contentlet.\n        \n    - `live` (boolean): Indicates if the contentlet is live.\n        \n    - `locked` (boolean): Indicates if the contentlet is locked.\n        \n    - `modDate` (number): The modification date of the contentlet.\n        \n    - `modUser` (string): The user who modified the contentlet.\n        \n    - `modUserName` (string): The name of the user who modified the contentlet.\n        \n    - `owner` (string): The owner of the contentlet.\n        \n    - `ownerName` (string): The name of the owner.\n        \n    - `publishDate` (number): The publish date of the contentlet.\n        \n    - `publishUser` (string): The user who published the contentlet.\n        \n    - `publishUserName` (string): The name of the user who published the contentlet.\n        \n    - `sortOrder` (number): The sort order of the contentlet.\n        \n    - `stInode` (string): The inode of the contentlet.\n        \n    - `title` (string): The title of the contentlet.\n        \n    - `titleImage` (string): The title image of the contentlet.\n        \n    - `url` (string): The URL of the contentlet.\n        \n    - `value` (string): The value of the contentlet.\n        \n    - `working` (boolean): Indicates if the contentlet is in working state.\n        \n- `errors` (array): An array of errors, if any.\n    \n- `i18nMessagesMap` (object): Internationalization messages map.\n    \n- `messages` (array): An array of messages.\n    \n- `pagination` (null): Pagination information, if applicable.\n    \n- `permissions` (array): An array of permissions."
							},
							"response": []
						},
						{
							"name": "Content exists by inode (Default Content to Default Language)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"try{",
											"    var jsonData = pm.response.json();",
											"    var identifier = pm.collectionVariables.get(\"contentletIdentifier\");",
											"    pm.test(\"Id check\", function () {",
											"        pm.expect(jsonData.entity.identifier).to.eql(identifier);",
											"    });",
											"} finally {",
											"    ",
											"    const apiHost = pm.environment.get('serverURL');",
											"    const jwt = pm.environment.get('jwt');",
											"    const originalValue = pm.collectionVariables.get('DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE_ORIGINAL_VALUE');            ",
											"",
											"    function setPropertyValue(newValue,callback){",
											"",
											"        const setPropertyValueRequest = {",
											"            url: `${apiHost}/api/v1/system-table`,",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"                'Authorization':`Bearer ${jwt}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({ key: 'DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE', value: newValue })",
											"            }",
											"        };",
											"",
											"        console.log(`Setting a new property value ${newValue} for DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE `);",
											"        pm.sendRequest(setPropertyValueRequest, function (err, res) {",
											"            if (err) {",
											"                    console.log('Error sending Request:', err);",
											"                    if(callback){",
											"                    callback(err, null); ",
											"                    }                 ",
											"            } else {             ",
											"                const entityValue = res.json().entity;",
											"                console.log('Value saved succesfully ', entityValue);            ",
											"                if(callback){",
											"                    callback(null, entityValue); ",
											"                }                   ",
											"            }",
											"        });",
											"",
											"    }",
											"",
											"    function getPropertyValue(callback){",
											"",
											"    const getPropertyValueRequest = {",
											"            url: `${apiHost}/api/v1/system-table/DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE`,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json',",
											"                'Authorization':`Bearer ${jwt}`",
											"            }",
											"    };",
											"",
											"    pm.sendRequest(getPropertyValueRequest, function (err, res) {",
											"            if (err) {",
											"                console.log('Error sending Request:', err);",
											"                if(callback){",
											"                callback(err, null); ",
											"                }             ",
											"            } else {             ",
											"                const entityValue = res.json().entity;",
											"                ",
											"                console.log('Response:', entityValue);",
											"                if(callback){",
											"                callback(null, entityValue); ",
											"                }            ",
											"            }",
											"    });",
											"",
											"    }",
											"",
											"    console.log('Restoring value to its original value');",
											"    setPropertyValue(originalValue, function (setErr, setResp){",
											"        if(setErr){",
											"            console.log('We got an error setting property :', setErr);",
											"            return;",
											"        }",
											"        if(setResp){",
											"            console.log('Response:', setResp);",
											"        }  ",
											"    });",
											"",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiHost = pm.environment.get('serverURL');",
											"const jwt = pm.environment.get('jwt');",
											"",
											"function setPropertyValue(newValue,callback){",
											"",
											"    const setPropertyValueRequest = {",
											"        url: `${apiHost}/api/v1/system-table`,",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization':`Bearer ${jwt}`",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({ key: 'DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE', value: newValue })",
											"        }",
											"    };",
											"",
											"    console.log(`Setting a new property value ${newValue} for DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE `);",
											"    pm.sendRequest(setPropertyValueRequest, function (err, res) {",
											"        if (err) {",
											"                console.log('Error sending Request:', err);",
											"                if(callback){",
											"                   callback(err, null); ",
											"                }                 ",
											"        } else {             ",
											"            const entityValue = res.json().entity;",
											"            console.log('Value saved succesfully ', entityValue);            ",
											"            if(callback){",
											"                callback(null, entityValue); ",
											"            }                   ",
											"        }",
											"    });",
											"",
											"}",
											"",
											"function getPropertyValue(callback){",
											"",
											"  const getPropertyValueRequest = {",
											"        url: `${apiHost}/api/v1/system-table/DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE`,",
											"        method: 'GET',",
											"        header: {",
											"            'Content-Type': 'application/json',",
											"            'Authorization':`Bearer ${jwt}`",
											"        }",
											"  };",
											"",
											"  pm.sendRequest(getPropertyValueRequest, function (err, res) {",
											"        if (err) {",
											"            console.log('Error sending Request:', err);",
											"            if(callback){",
											"               callback(err, null); ",
											"            }             ",
											"        } else { ",
											"            if(404 == res.code){",
											"                console.log('DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE not found will set it to true');",
											"                if(callback){",
											"                   callback(null, true); ",
											"                }",
											"            } else {",
											"                const entityValue = res.json().entity;",
											"                pm.collectionVariables.set('DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE_ORIGINAL_VALUE',entityValue);            ",
											"                console.log('Response:', entityValue);",
											"                if(callback){",
											"                  callback(null, entityValue); ",
											"                }       ",
											"            }     ",
											"        }",
											"   });",
											"",
											"}",
											"",
											"// Now call functions",
											"getPropertyValue(function (getErr, getValue){",
											"    if(getErr){",
											"        console.log('We got an error getting property :', getErr);",
											"        return; ",
											"    } ",
											"     if(getValue){",
											"        setPropertyValue(getValue, function (setErr, setResp){",
											"           if(setErr){",
											"              console.log('We got an error setting property :', setErr);",
											"              return;",
											"           }",
											"           if(setResp){",
											"              console.log('Response:', setResp);",
											"           }  ",
											"        });",
											"     } else {",
											"        console.error(\"There was an error getting the property value : \"+err);",
											"     }        ",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/{{contentletInode}}?language=2",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"{{contentletInode}}"
									],
									"query": [
										{
											"key": "language",
											"value": "2"
										}
									]
								},
								"description": "### Get Contentlet by Inode\n\nThis endpoint retrieves the contentlet with the specified inode.\n\n#### Response\n\nThe response will be a JSON object with the following properties:\n\n- `entity` (object):\n    - `archived` (boolean): Indicates if the contentlet is archived.\n        \n    - `baseType` (string): The base type of the contentlet.\n        \n    - `contentType` (string): The type of content.\n        \n    - `creationDate` (number): The creation date of the contentlet.\n        \n    - `folder` (string): The folder where the contentlet is located.\n        \n    - `hasLiveVersion` (boolean): Indicates if the contentlet has a live version.\n        \n    - `hasTitleImage` (boolean): Indicates if the contentlet has a title image.\n        \n    - `host` (string): The host of the contentlet.\n        \n    - `hostName` (string): The name of the host.\n        \n    - `identifier` (string): The identifier of the contentlet.\n        \n    - `inode` (string): The inode of the contentlet.\n        \n    - `key` (string): The key of the contentlet.\n        \n    - `languageId` (number): The language ID of the contentlet.\n        \n    - `live` (boolean): Indicates if the contentlet is live.\n        \n    - `locked` (boolean): Indicates if the contentlet is locked.\n        \n    - `modDate` (number): The modification date of the contentlet.\n        \n    - `modUser` (string): The user who modified the contentlet.\n        \n    - `modUserName` (string): The name of the user who modified the contentlet.\n        \n    - `owner` (string): The owner of the contentlet.\n        \n    - `ownerName` (string): The name of the owner.\n        \n    - `publishDate` (number): The publish date of the contentlet.\n        \n    - `publishUser` (string): The user who published the contentlet.\n        \n    - `publishUserName` (string): The name of the user who published the contentlet.\n        \n    - `sortOrder` (number): The sort order of the contentlet.\n        \n    - `stInode` (string): The inode of the contentlet.\n        \n    - `title` (string): The title of the contentlet.\n        \n    - `titleImage` (string): The title image of the contentlet.\n        \n    - `url` (string): The URL of the contentlet.\n        \n    - `value` (string): The value of the contentlet.\n        \n    - `working` (boolean): Indicates if the contentlet is in working state.\n        \n- `errors` (array): An array of errors, if any.\n    \n- `i18nMessagesMap` (object): Internationalization messages map.\n    \n- `messages` (array): An array of messages.\n    \n- `pagination` (null): Pagination information, if applicable.\n    \n- `permissions` (array): An array of permissions."
							},
							"response": []
						},
						{
							"name": "Content can lock",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var contentletIdentifier = pm.collectionVariables.get(\"contentletIdentifier\");",
											"pm.test(\"Id check\", function () {",
											"    pm.expect(jsonData.entity.id).to.eql(contentletIdentifier);",
											"});",
											"",
											"pm.test(\"Can lock\", function () {",
											"    pm.expect(jsonData.entity.canLock).to.eql(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/_canlock/{{contentletIdentifier}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"_canlock",
										"{{contentletIdentifier}}"
									]
								},
								"description": "This endpoint makes an HTTP GET request to retrieve the content lock information for a specific contentlet identified by the `contentletIdentifier`. The response of this request can be documented as a JSON schema."
							},
							"response": []
						},
						{
							"name": "UpdateContent_SuccessRequest",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"var identifier = pm.collectionVariables.get(\"contentletIdentifier\");",
											"pm.test(\"Id check\", function () {",
											"    pm.expect(jsonData.entity.identifier).to.eql(identifier);",
											"});",
											"",
											"pm.test(\"Validate key&value\", function () {",
											"    pm.expect(jsonData.entity.key).to.eql(\"UpdatedKey\");",
											"    pm.expect(jsonData.entity.value).to.eql(\"Updatedvalue\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"identifier\" : \"{{contentletIdentifier}}\",\n  \"languageId\" : 1,\n  \"key\": \"UpdatedKey\",\n  \"value\": \"Updatedvalue\"\n}\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "### Update Workflow Action\n\nThis endpoint allows you to fire any action using the actionId.\n\n#### Request Body\n\nThe request should include a JSON payload with the following structure:\n\n``` json\n{\n  \"contentlet\": {\n    \"stInode\": \"\",\n    \"languageId\": 0,\n    \"key\": \"\",\n    \"value\": \"\"\n  }\n}\n\n ```\n\nOptional: If you pass ?inode={inode}, you don't need a body here.\n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"AUTO_ASSIGN_WORKFLOW\": { \"type\": \"boolean\" },\n        \"__IS_NEW_CONTENT__\": { \"type\": \"boolean\" },\n        \"archived\": { \"type\": \"boolean\" },\n        \"baseType\": { \"type\": \"string\" },\n        \"contentType\": { \"type\": \"string\" },\n        \"creationDate\": { \"type\": \"number\" },\n        \"folder\": { \"type\": \"string\" },\n        \"hasLiveVersion\": { \"type\": \"boolean\" },\n        \"hasTitleImage\": { \"type\": \"boolean\" },\n        \"host\": { \"type\": \"string\" },\n        \"hostName\": { \"type\": \"string\" },\n        \"identifier\": { \"type\": \"string\" },\n        \"inode\": { \"type\": \"string\" },\n        \"key\": { \"type\": \"string\" },\n        \"languageId\": { \"type\": \"number\" },\n        \"live\": { \"type\": \"boolean\" },\n        \"locked\": { \"type\": \"boolean\" },\n        \"modDate\": { \"type\": \"number\" },\n        \"modUser\": { \"type\": \"string\" },\n        \"modUserName\": { \"type\": \"string\" },\n        \"owner\": { \"type\": \"string\" },\n        \"ownerName\": { \"type\": \"string\" },\n        \"publishDate\": { \"type\": \"number\" },\n        \"publishUser\": { \"type\": \"string\" },\n        \"publishUserName\": { \"type\": \"string\" },\n        \"sortOrder\": { \"type\": \"number\" },\n        \"stInode\": { \"type\": \"string\" },\n        \"title\": { \"type\": \"string\" },\n        \"titleImage\": { \"type\": \"string\" },\n        \"url\": { \"type\": \"string\" },\n        \"value\": { \"type\": \"string\" },\n        \"working\": { \"type\": \"boolean\" }\n      }\n    },\n    \"errors\": { \"type\": \"array\", \"items\": {} },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\", \"items\": {} },\n    \"pagination\": { \"type\": \"null\" },\n    \"permissions\": { \"type\": \"array\", \"items\": {} }\n  }\n}\n\n ```"
							},
							"response": []
						}
					],
					"description": "This folder contains a set of requests designed to successfully create new content within our application. Each request has been carefully crafted and tested to ensure that it adheres to the required specifications and completes without errors.\n\n#### Objectives:\n\n1. **Content Creation Verification**: Ensure that new content is created successfully and meets all specified requirements.\n    \n2. **Response Validation**: Validate that the API responses contain the correct status codes and data structures.\n    \n3. **Data Integrity**: Confirm that newly created content is accurately stored and retrievable.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Validations",
					"item": [
						{
							"name": "Content not exists by identifier",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The contentlet 6faf3063-5478-4e0a-a44b-dba540ec79 and language 1 does not exist\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/:wrongId",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										":wrongId"
									],
									"variable": [
										{
											"key": "wrongId",
											"value": "6faf3063-5478-4e0a-a44b-dba540ec79"
										}
									]
								},
								"description": "This HTTP GET request retrieves content from the API by providing the content ID in the URL. The request should include the specific content ID in place of \":wrongId\" in the URL.\n\n### Request\n\nNo request body is required for this endpoint.\n\n#### Request URL\n\n```\n{{serverURL}}/api/v1/content/:wrongId\n\n ```\n\n### Response\n\nUpon a successful execution, the response will have a status code of 404 and the content type will be \"application/json\". The response body will include a message indicating the reason for the failure."
							},
							"response": []
						},
						{
							"name": "Content not exists by inode",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Body matches string\", function () {",
											"    pm.expect(pm.response.text()).to.contains(\"The contentlet 21b19188-bd85-4baa-bba2-5b54cd1cb3ea and language 1 does not exist\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/content/:wrongInode",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										":wrongInode"
									],
									"variable": [
										{
											"key": "wrongInode",
											"value": "21b19188-bd85-4baa-bba2-5b54cd1cb3ea"
										}
									]
								},
								"description": "\nThis API endpoint makes an HTTP GET request to retrieve content based on the provided inode. The request should include the inode in the URL path.\n\n### Request\n\n- Method: GET\n- URL: {{serverURL}}/api/v1/content/:wrongInode\n\n### Response\n\nThe API returns a 404 status code with a JSON response in the following format:\n```json\n{\n    \"message\": \"\"\n}\n```\n"
							},
							"response": []
						},
						{
							"name": "UpdateContent_WithoutCredentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to check for the response text",
											"pm.test(\"Response text is as expected\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"CONTENT_APIS_ALLOW_ANONYMOUS permission exceeded - system set to READ but WRITE was required\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"serverURL\") + \"/api/v1/logout\",",
											"    method: 'GET'",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.log('Logout failed:', err);",
											"    } else {",
											"        console.log('Logout successful, cookies should be cleared.');",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"identifier\" : \"{{contentletIdentifier}}\",\n  \"languageId\" : 1,\n  \"key\": \"UpdatedKey\",\n  \"value\": \"Updatedvalue\"\n}\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "### Update Workflow Action\n\nThis endpoint allows you to fire any action using the actionId.\n\n#### Request Body\n\nThe request should include a JSON payload with the following structure:\n\n``` json\n{\n  \"contentlet\": {\n    \"stInode\": \"\",\n    \"languageId\": 0,\n    \"key\": \"\",\n    \"value\": \"\"\n  }\n}\n\n ```\n\nOptional: If you pass ?inode={inode}, you don't need a body here.\n\n#### Response\n\nThe response is a JSON object with the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"entity\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"AUTO_ASSIGN_WORKFLOW\": { \"type\": \"boolean\" },\n        \"__IS_NEW_CONTENT__\": { \"type\": \"boolean\" },\n        \"archived\": { \"type\": \"boolean\" },\n        \"baseType\": { \"type\": \"string\" },\n        \"contentType\": { \"type\": \"string\" },\n        \"creationDate\": { \"type\": \"number\" },\n        \"folder\": { \"type\": \"string\" },\n        \"hasLiveVersion\": { \"type\": \"boolean\" },\n        \"hasTitleImage\": { \"type\": \"boolean\" },\n        \"host\": { \"type\": \"string\" },\n        \"hostName\": { \"type\": \"string\" },\n        \"identifier\": { \"type\": \"string\" },\n        \"inode\": { \"type\": \"string\" },\n        \"key\": { \"type\": \"string\" },\n        \"languageId\": { \"type\": \"number\" },\n        \"live\": { \"type\": \"boolean\" },\n        \"locked\": { \"type\": \"boolean\" },\n        \"modDate\": { \"type\": \"number\" },\n        \"modUser\": { \"type\": \"string\" },\n        \"modUserName\": { \"type\": \"string\" },\n        \"owner\": { \"type\": \"string\" },\n        \"ownerName\": { \"type\": \"string\" },\n        \"publishDate\": { \"type\": \"number\" },\n        \"publishUser\": { \"type\": \"string\" },\n        \"publishUserName\": { \"type\": \"string\" },\n        \"sortOrder\": { \"type\": \"number\" },\n        \"stInode\": { \"type\": \"string\" },\n        \"title\": { \"type\": \"string\" },\n        \"titleImage\": { \"type\": \"string\" },\n        \"url\": { \"type\": \"string\" },\n        \"value\": { \"type\": \"string\" },\n        \"working\": { \"type\": \"boolean\" }\n      }\n    },\n    \"errors\": { \"type\": \"array\", \"items\": {} },\n    \"i18nMessagesMap\": { \"type\": \"object\" },\n    \"messages\": { \"type\": \"array\", \"items\": {} },\n    \"pagination\": { \"type\": \"null\" },\n    \"permissions\": { \"type\": \"array\", \"items\": {} }\n  }\n}\n\n ```"
							},
							"response": []
						}
					],
					"description": "This folder contains a set of requests designed to validate the creation of new content within the system. Each request ensures that the API correctly handles various scenarios, including negative cases. These validations are essential for maintaining the integrity and consistency of the content creation process.\n\n#### Objectives:\n\n1. **Negative Testing**:\n    \n    - Test for appropriate error responses when invalid data is submitted.\n        \n    - Check how the API handles missing required fields, incorrect data types, and other edge cases.\n        \n2. **Data Integrity**:\n    \n    - Confirm that duplicate content cannot be created.\n        \n    - Ensure that content constraints, such as unique fields, are respected.\n        \n3. **Security**:\n    \n    - Validate that unauthorized users cannot create content.\n        \n    - Ensure that all security checks are enforced during the content creation process.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code should be 401 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([401, 404]);",
									"});"
								]
							}
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Relate Content",
			"item": [
				{
					"name": "Relate Cotnents",
					"item": [
						{
							"name": "Create Parent Content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119489000,\n            \"id\": \"fe8f5a1b169291d093a216269218907d\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"fields-0\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"fields0\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119489000,\n            \"id\": \"9417e368fed2fdad9a4cc29bbde8bf10\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"fields-1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"fields1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119498000,\n            \"id\": \"f14d00b4e481fa6269224124fdff87f3\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"title\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"title\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"48190c8c-42c4-46af-8d1a-0cd5db894797\",\n    \"iDate\": 1654119489000,\n    \"icon\": \"event_note\",\n    \"id\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1654119489000,\n                \"id\": \"fe8f5a1b169291d093a216269218907d\",\n                \"indexed\": false,\n                \"listed\": false,\n                \"modDate\": 1654188022000,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"iDate\": 1654119489000,\n                        \"id\": \"9417e368fed2fdad9a4cc29bbde8bf10\",\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"modDate\": 1654188022000,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1654119498000,\n                            \"id\": \"f14d00b4e481fa6269224124fdff87f3\",\n                            \"indexed\": false,\n                            \"listed\": false,\n                            \"modDate\": 1654188022000,\n                            \"name\": \"title\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"title\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"modDate\": 1654188088000,\n    \"multilingualable\": false,\n    \"name\": \"ParentContentType\",\n    \"sortOrder\": 0,\n    \"system\": false,\n    \"systemActionMappings\": {\n       \n    },\n    \"variable\": \"ParentContentType\",\n    \"versionable\": true,\n    \"workflow\": [\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										""
									]
								},
								"description": "\n### Create Content Type\n\nCreates a new content type with the provided payload.\n\n#### Request Body\n- Type: JSON\n\nExample:\n```json\n{\n  \"baseType\":\"\",\n  \"clazz\":\"\",\n  \"defaultType\":true,\n  \"fields\":[\n    {\n      \"clazz\":\"\",\n      \"contentTypeId\":\"\",\n      \"dataType\":\"\",\n      \"fieldContentTypeProperties\":[],\n      \"fieldType\":\"\",\n      \"fieldTypeLabel\":\"\",\n      \"fieldVariables\":[],\n      \"fixed\":true,\n      \"iDate\":0,\n      \"id\":\"\",\n      \"indexed\":true,\n      \"listed\":true,\n      \"modDate\":0,\n      \"name\":\"\",\n      \"readOnly\":true,\n      \"required\":true,\n      \"searchable\":true,\n      \"sortOrder\":0,\n      \"unique\":true,\n      \"variable\":\"\"\n    }\n  ],\n  \"fixed\":true,\n  \"folder\":\"\",\n  \"host\":\"\",\n  \"iDate\":0,\n  \"icon\":\"\",\n  \"id\":\"\",\n  \"layout\":[\n    {\n      \"divider\":{\n        \"clazz\":\"\",\n        \"contentTypeId\":\"\",\n        \"dataType\":\"\",\n        \"fieldContentTypeProperties\":[],\n        \"fieldType\":\"\",\n        \"fieldTypeLabel\":\"\",\n        \"fieldVariables\":[],\n        \"fixed\":true,\n        \"iDate\":0,\n        \"id\":\"\",\n        \"indexed\":true,\n        \"listed\":true,\n        \"modDate\":0,\n        \"name\":\"\",\n        \"readOnly\":true,\n        \"required\":true,\n        \"searchable\":true,\n        \"sortOrder\":0,\n        \"unique\":true,\n        \"variable\":\"\"\n      },\n      \"columns\":[\n        {\n          \"columnDivider\":{\n            \"clazz\":\"\",\n            \"contentTypeId\":\"\",\n            \"dataType\":\"\",\n            \"fieldContentTypeProperties\":[],\n            \"fieldType\":\"\",\n            \"fieldTypeLabel\":\"\",\n            \"fieldVariables\":[],\n            \"fixed\":true,\n            \"iDate\":0,\n            \"id\":\"\",\n            \"indexed\":true,\n            \"listed\":true,\n            \"modDate\":0,\n            \"name\":\"\",\n            \"readOnly\":true,\n            \"required\":true,\n            \"searchable\":true,\n            \"sortOrder\":0,\n            \"unique\":true,\n            \"variable\":\"\"\n          },\n          \"fields\":[\n            {\n              \"clazz\":\"\",\n              \"contentTypeId\":\"\",\n              \"dataType\":\"\",\n              \"fieldType\":\"\",\n              \"fieldTypeLabel\":\"\",\n              \"fieldVariables\":[],\n              \"fixed\":true,\n              \"iDate\":0,\n              \"id\":\"\",\n              \"indexed\":true,\n              \"listed\":true,\n              \"modDate\":0,\n              \"name\":\"\",\n              \"readOnly\":true,\n              \"required\":true,\n              \"searchable\":true,\n              \"sortOrder\":0,\n              \"unique\":true,\n              \"variable\":\"\"\n            }\n          ]\n        }\n      ]\n    }\n  ],\n  \"modDate\":0,\n  \"multilingualable\":true,\n  \"name\":\"\",\n  \"sortOrder\":0,\n  \"system\":true,\n  \"systemActionMappings\":{},\n  \"variable\":\"\",\n  \"versionable\":true,\n  \"workflow\":[\"\"]\n}\n\n#### Response\nDocument the response of this request as a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "Create Child Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119561000,\n            \"id\": \"ccf3f29616705f7f6cdab190df8b035f\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188025000,\n            \"name\": \"fields-0\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"fields0\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119561000,\n            \"id\": \"6ffd2a29a42875f2ae85ce42d9e552fc\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188025000,\n            \"name\": \"fields-1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"fields1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119570000,\n            \"id\": \"164ea1fb45c90a351c2ec42a488ba247\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188025000,\n            \"name\": \"title\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"title\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n            \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Relationship\",\n            \"fieldTypeLabel\": \"Relationships Field\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119601000,\n            \"id\": \"b397d7ab266fa13680d1c917f2cf90a9\",\n            \"indexed\": true,\n            \"listed\": false,\n            \"modDate\": 1654188025000,\n            \"name\": \"parent\",\n            \"readOnly\": false,\n            \"relationships\": {\n                \"cardinality\": 1,\n                \"velocityVar\": \"ParentContentType\"\n            },\n            \"required\": false,\n            \"searchable\": false,\n            \"skipRelationshipCreation\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"parent\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"48190c8c-42c4-46af-8d1a-0cd5db894797\",\n    \"iDate\": 1654119561000,\n    \"icon\": \"event_note\",\n    \"id\": \"4159be5c06f829f058e4b5420eb3f61f\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1654119561000,\n                \"id\": \"ccf3f29616705f7f6cdab190df8b035f\",\n                \"indexed\": false,\n                \"listed\": false,\n                \"modDate\": 1654188025000,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"iDate\": 1654119561000,\n                        \"id\": \"6ffd2a29a42875f2ae85ce42d9e552fc\",\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"modDate\": 1654188025000,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1654119570000,\n                            \"id\": \"164ea1fb45c90a351c2ec42a488ba247\",\n                            \"indexed\": false,\n                            \"listed\": false,\n                            \"modDate\": 1654188025000,\n                            \"name\": \"title\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"title\"\n                        },\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n                            \"contentTypeId\": \"4159be5c06f829f058e4b5420eb3f61f\",\n                            \"dataType\": \"SYSTEM\",\n                            \"fieldType\": \"Relationship\",\n                            \"fieldTypeLabel\": \"Relationships Field\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1654119601000,\n                            \"id\": \"b397d7ab266fa13680d1c917f2cf90a9\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"modDate\": 1654188025000,\n                            \"name\": \"parent\",\n                            \"readOnly\": false,\n                            \"relationships\": {\n                                \"cardinality\": 1,\n                                \"velocityVar\": \"ParentContentType\"\n                            },\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"skipRelationshipCreation\": false,\n                            \"sortOrder\": 3,\n                            \"unique\": false,\n                            \"variable\": \"parent\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"modDate\": 1654188136000,\n    \"multilingualable\": false,\n    \"name\": \"ChildContentType\",\n    \"sortOrder\": 0,\n    \"system\": false,\n    \"systemActionMappings\": {\n        \n    },\n    \"variable\": \"ChildContentType\",\n    \"versionable\": true,\n    \"workflow\": [\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "### HTTP POST /api/v1/contenttype\n\nCreates the child relationship.\n\n**Request Body**\n\n- raw (application/json)\n    \n    ``` json\n    {\n    \"baseType\":\"\",\n    \"clazz\":\"\",\n    \"defaultType\":true,\n    \"fields\":[\n      {\n        \"clazz\":\"\",\n        \"contentTypeId\":\"\",\n        \"dataType\":\"\",\n        \"fieldContentTypeProperties\":[],\n        \"fieldType\":\"\",\n        \"fieldTypeLabel\":\"\",\n        \"fieldVariables\":[],\n        \"fixed\":true,\n        \"iDate\":0,\n        \"id\":\"\",\n        \"indexed\":true,\n        \"listed\":true,\n        \"modDate\":0,\n        \"name\":\"\",\n        \"readOnly\":true,\n        \"required\":true,\n        \"searchable\":true,\n        \"sortOrder\":0,\n        \"unique\":true,\n        \"variable\":\"\"\n      }\n    ],\n    \"fixed\":true,\n    \"folder\":\"\",\n    \"host\":\"\",\n    \"iDate\":0,\n    \"icon\":\"\",\n    \"id\":\"\",\n    \"layout\":[\n      {\n        \"divider\":{\n          \"clazz\":\"\",\n          \"contentTypeId\":\"\",\n          \"dataType\":\"\",\n          \"fieldContentTypeProperties\":[],\n          \"fieldType\":\"\",\n          \"fieldTypeLabel\":\"\",\n          \"fieldVariables\":[],\n          \"fixed\":true,\n          \"iDate\":0,\n          \"id\":\"\",\n          \"indexed\":true,\n          \"listed\":true,\n          \"modDate\":0,\n          \"name\":\"\",\n          \"readOnly\":true,\n          \"required\":true,\n          \"searchable\":true,\n          \"sortOrder\":0,\n          \"unique\":true,\n          \"variable\":\"\"\n        },\n        \"columns\":[\n          {\n            \"columnDivider\":{\n              \"clazz\":\"\",\n              \"contentTypeId\":\"\",\n              \"dataType\":\"\",\n              \"fieldContentTypeProperties\":[],\n              \"fieldType\":\"\",\n              \"fieldTypeLabel\":\"\",\n              \"fieldVariables\":[],\n              \"fixed\":true,\n              \"iDate\":0,\n              \"id\":\"\",\n              \"indexed\":true,\n              \"listed\":true,\n              \"modDate\":0,\n              \"name\":\"\",\n              \"readOnly\":true,\n              \"required\":true,\n              \"searchable\":true,\n              \"sortOrder\":0,\n              \"unique\":true,\n              \"variable\":\"\"\n            },\n            \"fields\":[\n              {\n                \"clazz\":\"\",\n                \"contentTypeId\":\"\",\n                \"dataType\":\"\",\n                \"fieldType\":\"\",\n                \"fieldTypeLabel\":\"\",\n                \"fieldVariables\":[],\n                \"fixed\":true,\n                \"iDate\":0,\n                \"id\":\"\",\n                \"indexed\":true,\n                \"listed\":true,\n                \"modDate\":0,\n                \"name\":\"\",\n                \"readOnly\":true,\n                \"required\":true,\n                \"searchable\":true,\n                \"sortOrder\":0,\n                \"unique\":true,\n                \"variable\":\"\"\n              }\n            ]\n          }\n        ]\n      }\n    ],\n    \"modDate\":0,\n    \"multilingualable\":true,\n    \"name\":\"\",\n    \"sortOrder\":0,\n    \"system\":true,\n    \"systemActionMappings\":{},\n    \"variable\":\"\",\n    \"versionable\":true,\n    \"workflow\":[\"\"]\n    }\n    \n     ```\n    \n\n**Response Body**\n\n``` json\n{\n  \"entity\":[\n    {\n      \"baseType\":\"\",\n      \"clazz\":\"\",\n      \"defaultType\":true,\n      \"fields\":[\n        {\n          \"clazz\":\"\",\n          \"contentTypeId\":\"\",\n          \"dataType\":\"\",\n          \"fieldContentTypeProperties\":[],\n          \"fieldType\":\"\",\n          \"fieldTypeLabel\":\"\",\n          \"fieldVariables\":[],\n          \"fixed\":true,\n          \"forceIncludeInApi\":true,\n          \"iDate\":0,\n          \"id\":\"\",\n          \"indexed\":true,\n          \"listed\":true,\n          \"modDate\":0,\n          \"name\":\"\",\n          \"readOnly\":true,\n          \"required\":true,\n          \"searchable\":true,\n          \"sortOrder\":0,\n          \"unique\":true,\n          \"variable\":\"\"\n        }\n      ],\n      \"fixed\":true,\n      \"folder\":\"\",\n      \"folderPath\":\"\",\n      \"host\":\"\",\n      \"iDate\":0,\n      \"icon\":\"\",\n      \"id\":\"\",\n      \"layout\":[\n        {\n          \"divider\":{\n            \"clazz\":\"\",\n            \"contentTypeId\":\"\",\n            \"dataType\":\"\",\n            \"fieldContentTypeProperties\":[],\n            \"fieldType\":\"\",\n            \"fieldTypeLabel\":\"\",\n            \"fieldVariables\":[],\n            \"fixed\":true,\n            \"forceIncludeInApi\":true,\n            \"iDate\":0,\n            \"id\":\"\",\n            \"indexed\":true,\n            \"listed\":true,\n            \"modDate\":0,\n            \"name\":\"\",\n            \"readOnly\":true,\n            \"required\":true,\n            \"searchable\":true,\n            \"sortOrder\":0,\n            \"unique\":true,\n            \"variable\":\"\"\n          },\n          \"columns\":[\n            {\n              \"columnDivider\":{\n                \"clazz\":\"\",\n                \"contentTypeId\":\"\",\n                \"dataType\":\"\",\n                \"fieldContentTypeProperties\":[],\n                \"fieldType\":\"\",\n                \"fieldTypeLabel\":\"\",\n                \"fieldVariables\":[],\n                \"fixed\":true,\n                \"forceIncludeInApi\":true,\n                \"iDate\":0,\n                \"id\":\"\",\n                \"indexed\":true,\n                \"listed\":true,\n                \"modDate\":0,\n                \"name\":\"\",\n                \"readOnly\":true,\n                \"required\":true,\n                \"searchable\":true,\n                \"sortOrder\":0,\n                \"unique\":true,\n                \"variable\":\"\"\n              },\n              \"fields\":[\n                {\n                  \"clazz\":\"\",\n                  \"contentTypeId\":\"\",\n                  \"dataType\":\"\",\n                  \"fieldType\":\"\",\n                  \"fieldTypeLabel\":\"\",\n                  \"fieldVariables\":[],\n                  \"fixed\":true,\n                  \"forceIncludeInApi\":true,\n                  \"iDate\":0,\n                  \"id\":\"\",\n                  \"indexed\":true,\n                  \"listed\":true,\n                  \"modDate\":0,\n                  \"name\":\"\",\n                  \"readOnly\":true,\n                  \"required\":true,\n                  \"searchable\":true,\n                  \"sortOrder\":0,\n                  \"unique\":true,\n                  \"variable\":\"\"\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      \"metadata\":{},\n      \"modDate\":0,\n      \"multilingualable\":true,\n      \"name\":\"\",\n      \"siteName\":\"\",\n      \"sortOrder\":0,\n      \"system\":true,\n      \"systemActionMappings\":{},\n      \"variable\":\"\",\n      \"versionable\":true,\n      \"workflows\":[\n        {\n          \"archived\":true,\n          \"creationDate\":0,\n          \"defaultScheme\":true,\n          \"description\":\"\",\n          \"entryActionId\":null,\n          \"id\":\"\",\n          \"mandatory\":true,\n          \"modDate\":0,\n          \"name\":\"\",\n          \"system\":true\n        }\n      ]\n    }\n  ],\n  \"errors\":[],\n  \"i18nMessagesMap\":{},\n  \"messages\":[],\n  \"pagination\":null,\n  \"permissions\":[]\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Parent Content type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119489000,\n            \"id\": \"fe8f5a1b169291d093a216269218907d\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"fields-0\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"fields0\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119489000,\n            \"id\": \"9417e368fed2fdad9a4cc29bbde8bf10\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"fields-1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"fields1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119498000,\n            \"id\": \"f14d00b4e481fa6269224124fdff87f3\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"title\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"title\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Relationship\",\n            \"fieldTypeLabel\": \"Relationships Field\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119633000,\n            \"id\": \"0511d803c9f28fe5a2bb281db424fbb9\",\n            \"indexed\": true,\n            \"listed\": false,\n            \"modDate\": 1654186518000,\n            \"name\": \"children\",\n            \"readOnly\": false,\n            \"relationships\": {\n                \"cardinality\": 1,\n                \"velocityVar\": \"ChildContentType\"\n            },\n            \"required\": false,\n            \"searchable\": false,\n            \"skipRelationshipCreation\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"children\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"48190c8c-42c4-46af-8d1a-0cd5db894797\",\n    \"iDate\": 1654119489000,\n    \"icon\": \"event_note\",\n    \"id\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1654119489000,\n                \"id\": \"fe8f5a1b169291d093a216269218907d\",\n                \"indexed\": false,\n                \"listed\": false,\n                \"modDate\": 1654188022000,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"iDate\": 1654119489000,\n                        \"id\": \"9417e368fed2fdad9a4cc29bbde8bf10\",\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"modDate\": 1654188022000,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1654119498000,\n                            \"id\": \"f14d00b4e481fa6269224124fdff87f3\",\n                            \"indexed\": false,\n                            \"listed\": false,\n                            \"modDate\": 1654188022000,\n                            \"name\": \"title\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"title\"\n                        },\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n                            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                            \"dataType\": \"SYSTEM\",\n                            \"fieldType\": \"Relationship\",\n                            \"fieldTypeLabel\": \"Relationships Field\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1654119633000,\n                            \"id\": \"0511d803c9f28fe5a2bb281db424fbb9\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"modDate\": 1654186518000,\n                            \"name\": \"children\",\n                            \"readOnly\": false,\n                            \"relationships\": {\n                                \"cardinality\": 1,\n                                \"velocityVar\": \"ChildContentType\"\n                            },\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"skipRelationshipCreation\": false,\n                            \"sortOrder\": 3,\n                            \"unique\": false,\n                            \"variable\": \"children\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"modDate\": 1654188088000,\n    \"multilingualable\": false,\n    \"name\": \"ParentContentType\",\n    \"sortOrder\": 0,\n    \"system\": false,\n    \"systemActionMappings\": {\n       \n    },\n    \"variable\": \"ParentContentType\",\n    \"versionable\": true,\n    \"workflow\": [\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/ParentContentType",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"ParentContentType"
									]
								},
								"description": "\n### Update Parent Content Type with Child Relationship\n\nThis API endpoint allows you to update the parent content type to include the child relationship when the child content type already exists.\n\n#### Request Body\nThe request body should be in JSON format and include the following parameters:\n- `baseType` (string): The base type of the content.\n- `clazz` (string): The class of the content.\n- `defaultType` (boolean): Indicates if it is the default type.\n- `fields` (array): An array of field objects, each containing information about the field.\n  - `clazz` (string): The class of the field.\n  - `contentTypeId` (string): The ID of the content type.\n  - `dataType` (string): The data type of the field.\n  - `fieldContentTypeProperties` (array): An array of field content type properties.\n  - `fieldType` (string): The type of the field.\n  - `fieldTypeLabel` (string): The label of the field type.\n  - `fieldVariables` (array): An array of field variables.\n  - `fixed` (boolean): Indicates if the field is fixed.\n  - `iDate` (number): The date of the field.\n  - `id` (string): The ID of the field.\n  - `indexed` (boolean): Indicates if the field is indexed.\n  - `listed` (boolean): Indicates if the field is listed.\n  - `modDate` (number): The modification date of the field.\n  - `name` (string): The name of the field.\n  - `readOnly` (boolean): Indicates if the field is read-only.\n  - `required` (boolean): Indicates if the field is required.\n  - `searchable` (boolean): Indicates if the field is searchable.\n  - `sortOrder` (number): The sort order of the field.\n  - `unique` (boolean): Indicates if the field is unique.\n  - `variable` (string): The variable of the field.\n- `fixed` (boolean): Indicates if it is fixed.\n- `folder` (string): The folder of the content.\n- `host` (string): The host of the content.\n- `iDate` (number): The date of the content.\n- `icon` (string): The icon of the content.\n- `id` (string): The ID of the content.\n- `layout` (array): An array containing layout information.\n  - `divider` (object): An object containing divider information.\n  - `columns` (array): An array of column objects, each containing information about the column.\n    - `columnDivider` (object): An object containing column divider information.\n    - `fields` (array): An array of field objects within the column.\n      - `clazz` (string): The class of the field.\n      - `contentTypeId` (string): The ID of the content type.\n      - `dataType` (string): The data type of the field.\n      - `fieldType` (string): The type of the field.\n      - `fieldTypeLabel` (string): The label of the field type.\n      - `fieldVariables` (array): An array of field variables.\n      - `fixed` (boolean): Indicates if the field is fixed.\n      - `iDate` (number): The date of the field.\n      - `id` (string): The ID of the field.\n      - `indexed` (boolean): Indicates if the field is indexed.\n      - `listed` (boolean): Indicates if the field is listed.\n      - `modDate` (number): The modification date of the field.\n      - `name` (string): The name of the field.\n      - `readOnly` (boolean): Indicates if the field is read-only.\n      - `required` (boolean): Indicates if the field is required.\n      - `searchable` (boolean): Indicates if the field is searchable.\n      - `sortOrder` (number): The sort order of the field.\n      - `unique` (boolean): Indicates if the field is unique.\n      - `variable` (string): The variable of the field.\n- `modDate` (number): The modification date of the content.\n- `multilingualable` (boolean): Indicates if it is multilingualable.\n- `name` (string): The name of the content.\n- `sortOrder` (number): The sort order of the content.\n- `system` (boolean): Indicates if it is a system content.\n- `systemActionMappings` (object): An object containing system action mappings.\n- `variable` (string): The variable of the content.\n- `versionable` (boolean): Indicates if it is versionable.\n- `workflow` (array): An array containing workflow information.\n\n#### Response\nThe response of this request is a JSON schema representing the updated parent content type with the child relationship included.\n\n"
							},
							"response": []
						},
						{
							"name": "Create parent1 instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"parentId1\", jsonData.entity.identifier);",
											"pm.collectionVariables.set(\"parentInode1\", jsonData.entity.inode);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlet\": {\n        \"contentType\": \"ParentContentType\",\n        \"title\": \"parent 1\"\n    }\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "### HTTP PUT /api/v1/workflow/actions/default/fire/PUBLISH\n\n#### Description\n\nCreate the a parent content instance\n\n#### Request Body\n\n- raw (application/json)\n    - contentlet (object)\n        - contentType (string)\n            \n        - title (string)\n            \n\n#### Response\n\nThe response of this request is a JSON schema."
							},
							"response": []
						},
						{
							"name": "Create parent2 Instance",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"parentId2\", jsonData.entity.identifier);",
											"pm.collectionVariables.set(\"parentInode2\", jsonData.entity.inode);",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlet\": {\n        \"contentType\": \"ParentContentType\",\n        \"title\": \"parent 2\"\n    }\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "### HTTP PUT /api/v1/workflow/actions/default/fire/PUBLISH\n\nThis endpoint is used to trigger the PUBLISH action for a default workflow.\n\n#### Request Body\n\n- contentlet (object)\n    - contentType (string, optional): The type of content.\n        \n    - title (string, optional): The title of the content.\n        \n\n#### Response\n\nThe response for this request is a JSON object conforming to the following schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"status\": {\n      \"type\": \"string\"\n    },\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Save Multiple children for parent 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors\", function () {",
											"    ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Information Saved Correctly\", function () {",
											"    ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.summary.affected).to.eql(10);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var parent1contentlets = \"\\\"\";",
											"for (var index in jsonData.entity.results) {",
											"       for (var identifier in jsonData.entity.results[index]) {",
											"             parent1contentlets += identifier + \",\";",
											"        }",
											"}",
											"",
											"parent1contentlets = parent1contentlets.slice(0, -1) + \"\\\"\";",
											"console.log(\"parent1contentlets\", parent1contentlets);     ",
											"pm.collectionVariables.set(\"parent1contentlets\", parent1contentlets);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content1\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content2\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content3\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content4\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content5\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content6\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content7\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content8\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content9\",\n           \"parent\":\"{{parentId1}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Content10\",\n           \"parent\":\"{{parentId1}}\"\n        }\n        \n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "\n### HTTP POST /api/v1/workflow/actions/default/fire/PUBLISH\n\nThe endpoint triggers the publication of contentlets for a specific workflow action.\n\n#### Request Body\n- raw (application/json)\n  ```json\n  {\n    \"contentlets\": [\n      {\n        \"contentType\": \"\",\n        \"title\": \"\",\n        \"parent\": \"\"\n      }\n    ]\n  }\n  ```\n\n#### Response\nThe response of this request is a JSON schema.\n"
							},
							"response": []
						},
						{
							"name": "Save Multiple children for parent 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors\", function () {",
											"    ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});",
											"",
											"pm.test(\"Information Saved Correctly\", function () {",
											"    ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.summary.affected).to.eql(20);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var parent2contentlets = [];",
											"jsonData.entity.results.forEach(contentlet => parent2contentlets[parent2contentlets.length] = contentlet.identifier);",
											"",
											"pm.collectionVariables.set(\"parent2contentlets\", parent2contentlets);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent11\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent12\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent13\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent14\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent15\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent16\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent17\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent18\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent19\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent20\",\n           \"parent\":\"{{parentId2}}\"\n        },\n         {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent21\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent22\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent23\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent24\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent25\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent26\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent27\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent28\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent29\",\n           \"parent\":\"{{parentId2}}\"\n        },\n        {\n            \"contentType\":\"ChildContentType\",\n            \"title\":\"Dontent30\",\n           \"parent\":\"{{parentId2}}\"\n        }\n        \n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "### HTTP POST /api/v1/workflow/actions/default/fire/PUBLISH\n\nThis endpoint is used to trigger the PUBLISH action for a default workflow.\n\n#### Request Body\n\n- raw (application/json)\n    - contentlets (array): An array of contentlets to be published.\n        - contentType (string): The type of content.\n            \n        - title (string): The title of the content.\n            \n        - parent (string): The parent of the content.\n            \n\n#### Response\n\nThe response will contain the result of the PUBLISH action."
							},
							"response": []
						},
						{
							"name": "Update parent1  children",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"parentId1\", jsonData.entity.identifier);",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\n        \"contentlet\": {\n            \"identifier\":\"{{parentId1}}\",\n            \"contentType\": \"ParentContentType\",\n            \"title\": \"parent 1\",\n            \"children\":\"+contentType:ChildContentType +title:Content*\"\n        }\n    }"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?identifier={{parentId1}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{parentId1}}"
										}
									]
								},
								"description": "Update parent1 children"
							},
							"response": []
						},
						{
							"name": "Update parent2 children",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "    {\n        \"contentlet\": {\n            \"identifier\":\"{{parentId2}}\",\n            \"contentType\": \"ParentContentType\",\n            \"title\": \"parent 2\",\n            \"children\":\"+contentType:ChildContentType +title:Content*\"\n        }\n    }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?identifier={{parentId2}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{parentId2}}"
										}
									]
								},
								"description": "Update parent2 children"
							},
							"response": []
						},
						{
							"name": "Related - Easy case parent1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var resultLength = jsonData.entity.length;",
											"pm.test(\"length check\", function () {",
											"    pm.expect(resultLength).to.eql(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"{{parentId1}}\",\n    \"fieldVariable\":\"children\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "Test an easy case for parent 1"
							},
							"response": []
						},
						{
							"name": "Related - Easy case parent1 filtering by Contentlet1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"{{parentId1}}\",\n    \"fieldVariable\":\"children\",\n     \"condition\":\"+title:Content1*\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "Test the related contentlets for parent1 but filtering by Contentlet1 (only 2 results should be)"
							},
							"response": []
						},
						{
							"name": "Related - Easy case parent2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var resultLength = jsonData.entity.length;",
											"pm.test(\"length check\", function () {",
											"    pm.expect(resultLength).to.eql(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"{{parentId2}}\",\n    \"fieldVariable\":\"children\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "Test an easy case for parent 2, should returns 20 contents"
							},
							"response": []
						},
						{
							"name": "Related - Easy case parent2 pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"var resultLength = jsonData.entity.length;",
											"pm.test(\"length check\", function () {",
											"    pm.expect(resultLength).to.eql(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"{{parentId2}}\",\n    \"fieldVariable\":\"children\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "Test an easy case for parent 2, should returns 20 contents"
							},
							"response": []
						},
						{
							"name": "Related - Easy case parent1 Anon user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"var resultLength = jsonData.entity.length;",
											"pm.test(\"length check\", function () {",
											"    pm.expect(resultLength).to.eql(10);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"{{parentId1}}\",\n    \"fieldVariable\":\"children\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "Test an easy case for parent 1"
							},
							"response": []
						},
						{
							"name": "Related - Easy case parent2 pagination last page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Validate that the 'errors' array is empty\", function () {",
											"    const response = pm.response.json();",
											"    pm.expect(response.errors).to.be.an('array').that.is.empty;",
											"});",
											"",
											"pm.test(\"Validate the existence of entity and its content\", function () {",
											"    console.log(pm.collectionVariables.get(\"parentId2\"));",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity).to.be.an('array').that.is.not.empty;",
											"    pm.expect(jsonData.entity[0]).to.have.property('title');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"{{parentId2}}\",\n    \"fieldVariable\":\"children\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "Test an easy case for parent 2, should returns 20 contents"
							},
							"response": []
						}
					],
					"description": "This folder contains a comprehensive set of requests designed to handle the creation, relationship management, and updating of content within our application. These requests are essential for ensuring that content operations are performed correctly and efficiently.\n\n#### Objectives:\n\n1. **Content Creation**: Verify the correct functioning of endpoints that handle the creation of new content.\n    \n2. **Content Relationship Management**: Ensure that relationships between different content types are correctly established and managed.\n    \n3. **Content Updates**: Validate the proper updating of existing content, ensuring data integrity and consistency.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Validations",
					"item": [
						{
							"name": "Related - Non Existing id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Correct message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The identifier:non-existing does not exist\");",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"non-existing\",\n    \"fieldVariable\":\"parent\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "Test the related contentlets with a non existing identifier, should be 404"
							},
							"response": []
						},
						{
							"name": "Related - Invalid relationship field variable",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Correct message\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"The field:non-existing is not a relationship\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"identifier\":\"{{parentId1}}\",\n    \"fieldVariable\":\"non-existing\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/content/related",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"content",
										"related"
									]
								},
								"description": "### HTTP POST /api/v1/content/related\n\nTest the related contentlets with relationship field var that do not exist, should return 400.\n\n**Request Body**\n\n- identifier (string, required): The identifier.\n    \n- fieldVariable (string, required): The field variable.\n    \n\n**Response**  \nThe response of this request is documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"error\": {\n      \"type\": \"string\"\n    }\n  }\n}\n\n ```"
							},
							"response": []
						},
						{
							"name": "Update Parent without credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response content type is text/plain\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
											"});",
											"",
											"pm.test(\"Check if the response is invalid\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Invalid User\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"serverURL\") + \"/api/v1/logout\",",
											"    method: 'GET'",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.log('Logout failed:', err);",
											"    } else {",
											"        console.log('Logout successful, cookies should be cleared.');",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119489000,\n            \"id\": \"fe8f5a1b169291d093a216269218907d\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"fields-0\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"fields0\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119489000,\n            \"id\": \"9417e368fed2fdad9a4cc29bbde8bf10\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"fields-1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"fields1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119498000,\n            \"id\": \"f14d00b4e481fa6269224124fdff87f3\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1654188022000,\n            \"name\": \"title\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"title\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Relationship\",\n            \"fieldTypeLabel\": \"Relationships Field\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1654119633000,\n            \"id\": \"0511d803c9f28fe5a2bb281db424fbb9\",\n            \"indexed\": true,\n            \"listed\": false,\n            \"modDate\": 1654186518000,\n            \"name\": \"children\",\n            \"readOnly\": false,\n            \"relationships\": {\n                \"cardinality\": 1,\n                \"velocityVar\": \"ChildContentType\"\n            },\n            \"required\": false,\n            \"searchable\": false,\n            \"skipRelationshipCreation\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"children\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"48190c8c-42c4-46af-8d1a-0cd5db894797\",\n    \"iDate\": 1654119489000,\n    \"icon\": \"event_note\",\n    \"id\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1654119489000,\n                \"id\": \"fe8f5a1b169291d093a216269218907d\",\n                \"indexed\": false,\n                \"listed\": false,\n                \"modDate\": 1654188022000,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"iDate\": 1654119489000,\n                        \"id\": \"9417e368fed2fdad9a4cc29bbde8bf10\",\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"modDate\": 1654188022000,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1654119498000,\n                            \"id\": \"f14d00b4e481fa6269224124fdff87f3\",\n                            \"indexed\": false,\n                            \"listed\": false,\n                            \"modDate\": 1654188022000,\n                            \"name\": \"title\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"title\"\n                        },\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n                            \"contentTypeId\": \"1f41ee0d4bef4e76f676c38c8ccbb663\",\n                            \"dataType\": \"SYSTEM\",\n                            \"fieldType\": \"Relationship\",\n                            \"fieldTypeLabel\": \"Relationships Field\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1654119633000,\n                            \"id\": \"0511d803c9f28fe5a2bb281db424fbb9\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"modDate\": 1654186518000,\n                            \"name\": \"children\",\n                            \"readOnly\": false,\n                            \"relationships\": {\n                                \"cardinality\": 1,\n                                \"velocityVar\": \"ChildContentType\"\n                            },\n                            \"required\": false,\n                            \"searchable\": false,\n                            \"skipRelationshipCreation\": false,\n                            \"sortOrder\": 3,\n                            \"unique\": false,\n                            \"variable\": \"children\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"modDate\": 1654188088000,\n    \"multilingualable\": false,\n    \"name\": \"ParentContentType\",\n    \"sortOrder\": 0,\n    \"system\": false,\n    \"systemActionMappings\": {\n       \n    },\n    \"variable\": \"ParentContentType\",\n    \"versionable\": true,\n    \"workflow\": [\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/ParentContentType",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"ParentContentType"
									]
								},
								"description": "\n### Update Parent Content Type with Child Relationship\n\nThis API endpoint allows you to update the parent content type to include the child relationship when the child content type already exists.\n\n#### Request Body\nThe request body should be in JSON format and include the following parameters:\n- `baseType` (string): The base type of the content.\n- `clazz` (string): The class of the content.\n- `defaultType` (boolean): Indicates if it is the default type.\n- `fields` (array): An array of field objects, each containing information about the field.\n  - `clazz` (string): The class of the field.\n  - `contentTypeId` (string): The ID of the content type.\n  - `dataType` (string): The data type of the field.\n  - `fieldContentTypeProperties` (array): An array of field content type properties.\n  - `fieldType` (string): The type of the field.\n  - `fieldTypeLabel` (string): The label of the field type.\n  - `fieldVariables` (array): An array of field variables.\n  - `fixed` (boolean): Indicates if the field is fixed.\n  - `iDate` (number): The date of the field.\n  - `id` (string): The ID of the field.\n  - `indexed` (boolean): Indicates if the field is indexed.\n  - `listed` (boolean): Indicates if the field is listed.\n  - `modDate` (number): The modification date of the field.\n  - `name` (string): The name of the field.\n  - `readOnly` (boolean): Indicates if the field is read-only.\n  - `required` (boolean): Indicates if the field is required.\n  - `searchable` (boolean): Indicates if the field is searchable.\n  - `sortOrder` (number): The sort order of the field.\n  - `unique` (boolean): Indicates if the field is unique.\n  - `variable` (string): The variable of the field.\n- `fixed` (boolean): Indicates if it is fixed.\n- `folder` (string): The folder of the content.\n- `host` (string): The host of the content.\n- `iDate` (number): The date of the content.\n- `icon` (string): The icon of the content.\n- `id` (string): The ID of the content.\n- `layout` (array): An array containing layout information.\n  - `divider` (object): An object containing divider information.\n  - `columns` (array): An array of column objects, each containing information about the column.\n    - `columnDivider` (object): An object containing column divider information.\n    - `fields` (array): An array of field objects within the column.\n      - `clazz` (string): The class of the field.\n      - `contentTypeId` (string): The ID of the content type.\n      - `dataType` (string): The data type of the field.\n      - `fieldType` (string): The type of the field.\n      - `fieldTypeLabel` (string): The label of the field type.\n      - `fieldVariables` (array): An array of field variables.\n      - `fixed` (boolean): Indicates if the field is fixed.\n      - `iDate` (number): The date of the field.\n      - `id` (string): The ID of the field.\n      - `indexed` (boolean): Indicates if the field is indexed.\n      - `listed` (boolean): Indicates if the field is listed.\n      - `modDate` (number): The modification date of the field.\n      - `name` (string): The name of the field.\n      - `readOnly` (boolean): Indicates if the field is read-only.\n      - `required` (boolean): Indicates if the field is required.\n      - `searchable` (boolean): Indicates if the field is searchable.\n      - `sortOrder` (number): The sort order of the field.\n      - `unique` (boolean): Indicates if the field is unique.\n      - `variable` (string): The variable of the field.\n- `modDate` (number): The modification date of the content.\n- `multilingualable` (boolean): Indicates if it is multilingualable.\n- `name` (string): The name of the content.\n- `sortOrder` (number): The sort order of the content.\n- `system` (boolean): Indicates if it is a system content.\n- `systemActionMappings` (object): An object containing system action mappings.\n- `variable` (string): The variable of the content.\n- `versionable` (boolean): Indicates if it is versionable.\n- `workflow` (array): An array containing workflow information.\n\n#### Response\nThe response of this request is a JSON schema representing the updated parent content type with the child relationship included.\n\n"
							},
							"response": []
						}
					],
					"description": "This folder contains a set of requests designed to ensure that our API correctly handles attempts to relate content using invalid or non-existent IDs. The validations within these requests are essential for maintaining the integrity and consistency of our data relationships.\n\n#### Objectives:\n\n1. **Invalid ID Detection**: Verify that the API appropriately rejects attempts to relate content using invalid IDs.\n    \n2. **Error Messaging**: Ensure that the API provides clear and informative error messages when invalid IDs are used.\n    \n3. **Data Integrity**: Confirm that no data relationships are established or altered when invalid IDs are submitted.\n    \n4. **Edge Cases**: Test various edge cases, including empty IDs, improperly formatted IDs, and IDs that do not exist in the database.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code should be 400, 401 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 401, 404]);",
									"});"
								]
							}
						}
					]
				}
			],
			"description": "This folder contains a comprehensive set of requests designed to handle the creation, relationship management, and updating of content within our application. These requests are essential for ensuring that content operations are performed correctly and efficiently.  \n  \nThis will include both possitive and negative testing."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (!pm.environment.get('jwt')) {",
					"    console.log(\"generating....\")",
					"    const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"    const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"    if (!pm.environment.get('jwt')) {",
					"        const username = pm.environment.get(\"user\");",
					"        const password = pm.environment.get(\"password\");",
					"        const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"        const requestOptions = {",
					"            url: apiUrl,",
					"            method: \"POST\",",
					"            header: {",
					"                \"accept\": \"*/*\",",
					"                \"content-type\": \"application/json\",",
					"                \"Authorization\": `Basic ${basicAuth}`",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    \"expirationSeconds\": 7200,",
					"                    \"userId\": \"dotcms.org.1\",",
					"                    \"network\": \"0.0.0.0/0\",",
					"                    \"claims\": {\"label\": \"postman-tests\"}",
					"                })",
					"            }",
					"        };",
					"",
					"        pm.sendRequest(requestOptions, function (err, response) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                const jwt = response.json().entity.jwt;",
					"                pm.environment.set('jwt', jwt);",
					"                console.log(jwt);",
					"            }",
					"        });",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}