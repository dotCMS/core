{
	"info": {
		"_postman_id": "6e56d154-bee5-4dbe-a95e-4ddaa868caad",
		"name": "DotAsset",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "781456"
	},
	"item": [
		{
			"name": "Create PdfDotAsset Validation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"",
							"pm.test(\"Includes default scheme\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"DOTASSET\");",
							"});",
							"",
							"pm.test(\"Includes system workflow\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"com.dotcms.contenttype.model.type.ImmutableDotAssetContentType\");",
							"});",
							"",
							"pm.test(\"Includes Document Management\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"PDFDotAsset\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"defaultType\": false,\n    \"fixed\": false,\n    \"system\": false,\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableDotAssetContentType\",\n    \"description\": \"DotAsset to encapsulate the pdf types\",\n    \"host\": \"48190c8c-42c4-46af-8d1a-0cd5db894797\",\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"PDF DotAsset\",\n    \"variable\": \"PDFDotAsset\",\n    \"workflow\": [\n        \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n    ],\n    \"systemActionMappings\": {\n    \t\"NEW\":\"ceca71a0-deee-4999-bd47-b01baa1bcfc8\",\n    \t\"EDIT\":\"ceca71a0-deee-4999-bd47-b01baa1bcfc8\"\n    }\n}\n"
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/contenttype",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"contenttype"
					]
				},
				"description": "Creates a DotAsset with accept such as application/pdf"
			},
			"response": []
		},
		{
			"name": "Create Pdf Accept PDFDotAsset FieldVariables",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"key\": \"accept\",\n    \"value\": \"img/*,image/*\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n     \"fieldId\": \"{{contentType.field1}}\"\n}"
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/contenttype/PDFDotAsset/fields/var/asset/variables",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"contenttype",
						"PDFDotAsset",
						"fields",
						"var",
						"asset",
						"variables"
					]
				}
			},
			"response": []
		},
		{
			"name": "Fire NEW for PDFDotAsset with an image",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"contentType": "image/png",
							"type": "file",
							"src": "/Users/jsanca/gitsources/new-core2/core/dotcms-postman/src/main/resources/postman/resources/dotcms.png"
						},
						{
							"key": "json",
							"value": "{\n\t \"contentlet\": {\n\t\t\"contentType\":\"PDFDotAsset\",\n\t\t\"title\":\"Test1\",\n\t\t\"contentHost\":\"demo.dotcms.com\"\n\t}\n}\n",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/NEW",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"workflow",
						"actions",
						"default",
						"fire",
						"NEW"
					]
				},
				"description": "PDFDotAsset only accepts pdf files, so if we try to upload an image, it should throw a 400"
			},
			"response": []
		},
		{
			"name": "Fire NEW for PDFDotAsset with an pdf",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"contentType": "image/png",
							"type": "file",
							"src": "/Users/jsanca/gitsources/new-core2/core/dotcms-postman/src/main/resources/postman/resources/testpdf.pdf"
						},
						{
							"key": "json",
							"value": "{\n\t \"contentlet\": {\n\t\t\"contentType\":\"PDFDotAsset\",\n\t\t\"title\":\"Test1\",\n\t\t\"contentHost\":\"demo.dotcms.com\"\n\t}\n}\n",
							"contentType": "application/json",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/NEW",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"workflow",
						"actions",
						"default",
						"fire",
						"NEW"
					]
				},
				"description": "This should be ok, valid asset"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"   const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"   const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"// If we are unable to get the JWT we need to generate a new one",
					"   if (!pm.environment.get('jwt')) {",
					"       const username = pm.environment.get(\"user\");",
					"       const password = pm.environment.get(\"password\");",
					"       const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"",
					"       const requestOptions = {",
					"           url: apiUrl,",
					"           method: \"POST\",",
					"           header: {",
					"               \"accept\": \"*/*\",",
					"               \"content-type\": \"application/json\",",
					"               \"Authorization\": `Basic ${basicAuth}`",
					"           },",
					"           body: {",
					"               mode: \"raw\",",
					"               raw: JSON.stringify({",
					"                   \"expirationSeconds\": 7200,",
					"                   \"userId\": \"dotcms.org.1\",",
					"                   \"network\": \"0.0.0.0/0\",",
					"                   \"claims\": {\"label\": \"postman-tests\"}",
					"               })",
					"           }",
					"       };",
					"",
					"",
					"       pm.sendRequest(requestOptions, function (err, response) {",
					"           if (err) {",
					"               console.log(err);",
					"           } else {",
					"               const jwt = response.json().entity.jwt;",
					"               pm.environment.set('jwt', jwt);",
					"               console.log(jwt);",
					"           }",
					"       });",
					"   }",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "contentType.field1",
			"value": ""
		}
	]
}