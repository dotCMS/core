{
	"info": {
		"_postman_id": "e3f7129d-a7cc-4b52-a5a8-8098344aa0d9",
		"name": "ContentType Resource",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31066048"
	},
	"item": [
		{
			"name": "Test CRUD new columns icon and sortOrder",
			"item": [
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"contentTypeID\", jsonData.entity[0].id);",
									"pm.collectionVariables.set(\"contentTypeVAR\", jsonData.entity[0].variable);",
									"pm.collectionVariables.set(\"contentTypeFieldID\", jsonData.entity[0].fields[2].id);",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"icon check\", function () {",
									"    pm.expect(jsonData.entity[0].icon).to.eql('testIcon');",
									"});",
									"",
									"pm.test(\"sortOrder check\", function () {",
									"    pm.expect(jsonData.entity[0].sortOrder).to.eql(3);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"testIcon\",\n    \"sortOrder\": 3,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
					},
					"response": []
				},
				{
					"name": "Get Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"icon check\", function () {",
									"    pm.expect(jsonData.entity.icon).to.eql('testIcon');",
									"});",
									"",
									"pm.test(\"sortOrder check\", function () {",
									"    pm.expect(jsonData.entity.sortOrder).to.eql(3);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeID}}"
							]
						},
						"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
					},
					"response": []
				},
				{
					"name": "Update Content Type Update Icon and SortOrder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"icon check\", function () {",
									"    pm.expect(jsonData.entity.icon).to.eql('icon2');",
									"});",
									"",
									"pm.test(\"sortOrder check\", function () {",
									"    pm.expect(jsonData.entity.sortOrder).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"host\": \"SYSTEM_HOST\",\n    \"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"{{contentTypeVAR}}\",\n\t\"fixed\": false,\n    \"id\": \"{{contentTypeID}}\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                    \"contentTypeId\": \"{{contentTypeID}}\",\n                    \"dataType\": \"TEXT\",\n                    \"fieldType\": \"Text\",\n                    \"fieldTypeLabel\": \"Text\",\n                    \"fieldVariables\": [],\n                    \"fixed\": true,\n                    \"iDate\": 1631719532000,\n                    \"id\": \"{{contentTypeFieldID}}\",\n                    \"indexed\": true,\n                    \"listed\": true,\n                    \"modDate\": 1631719532000,\n                    \"name\": \"Name\",\n                    \"readOnly\": false,\n                    \"required\": true,\n                    \"searchable\": true,\n                    \"sortOrder\": 2,\n                    \"unique\": false,\n                    \"variable\": \"name\"\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"icon\": \"icon2\",\n    \"sortOrder\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeID}}"
							]
						},
						"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
					},
					"response": []
				},
				{
					"name": "Update Content Type without sending variable success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"icon check\", function () {",
									"    pm.expect(jsonData.entity.description).to.eql('My Structure test');",
									"});",
									"",
									"pm.test(\"sortOrder check\", function () {",
									"    pm.expect(jsonData.entity.sortOrder).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure test\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"host\": \"SYSTEM_HOST\",\n    \"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"fixed\": false,\n    \"id\": \"{{contentTypeID}}\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                    \"contentTypeId\": \"{{contentTypeID}}\",\n                    \"dataType\": \"TEXT\",\n                    \"fieldType\": \"Text\",\n                    \"fieldTypeLabel\": \"Text\",\n                    \"fieldVariables\": [],\n                    \"fixed\": true,\n                    \"iDate\": 1631719532000,\n                    \"id\": \"{{contentTypeFieldID}}\",\n                    \"indexed\": true,\n                    \"listed\": true,\n                    \"modDate\": 1631719532000,\n                    \"name\": \"Name\",\n                    \"readOnly\": false,\n                    \"required\": true,\n                    \"searchable\": true,\n                    \"sortOrder\": 2,\n                    \"unique\": false,\n                    \"variable\": \"name\"\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"icon\": \"icon2\",\n    \"sortOrder\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeID}}"
							]
						},
						"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
					},
					"response": []
				},
				{
					"name": "Delete ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeID}}"
							]
						},
						"description": "Given a content type ID.\nExpect that code is 200.\nExpect content type is deleted successfully."
					},
					"response": []
				}
			]
		},
		{
			"name": "Test CRUD Fields",
			"item": [
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"contentTypeID\", jsonData.entity[0].id);",
									"pm.collectionVariables.set(\"contentTypeVAR\", jsonData.entity[0].variable);",
									"pm.collectionVariables.set(\"contentTypeFieldID\", jsonData.entity[0].fields[2].id);",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"fields check\", function () {",
									"    pm.expect(jsonData.entity[0].fields.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"description check\", function () {",
									"    pm.expect(jsonData.entity[0].description).to.eql('THE DESCRIPTION');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\", \n    \"defaultType\": false, \n    \"name\": \"Test Content Type\", \n    \"description\": \"THE DESCRIPTION\", \n    \"host\": \"SYSTEM_HOST\", \n    \"owner\": \"dotcms.org.1\", \n    \"fixed\": false, \n    \"system\": false, \n    \"folder\": \"SYSTEM_FOLDER\",\n    \"fields\": [\n            {\n                \"dataType\": \"SYSTEM\",\n                \"dbColumn\": \"system_field1\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1308941714000,\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableHostFolderField\",\n                \"indexed\": true,\n                \"listed\": false,\n                \"modDate\": 1478557845000,\n                \"name\": \"Host/Folder\",\n                \"readOnly\": false,\n                \"required\": true,\n                \"searchable\": true,\n                \"sortOrder\": 1,\n                \"unique\": false,\n                \"variable\": \"hostfolder\"\n            },\n            {\n                \"dataType\": \"LONG_TEXT\",\n                \"dbColumn\": \"text_area2\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1453474468000,\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTagField\",\n                \"indexed\": true,\n                \"listed\": false,\n                \"modDate\": 1478557845000,\n                \"name\": \"Tags\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": true,\n                \"sortOrder\": 3,\n                \"unique\": false,\n                \"variable\": \"tags\"\n            }],\n            \"workflow\": [\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}\n"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
					},
					"response": []
				},
				{
					"name": "Get Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"fields check\", function () {",
									"    pm.expect(jsonData.entity.fields.length).to.eql(4);",
									"});",
									"",
									"pm.test(\"description check\", function () {",
									"    pm.expect(jsonData.entity.description).to.eql('THE DESCRIPTION');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeID}}"
							]
						},
						"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
					},
					"response": []
				},
				{
					"name": "Update Content Type without sending variable success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"fields check\", function () {",
									"    pm.expect(jsonData.entity.fields.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"description check\", function () {",
									"    pm.expect(jsonData.entity.description).to.eql('THE DESCRIPTION');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"THE DESCRIPTION\",\n        \"fields\": [\n            {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableHostFolderField\",\n                \"contentTypeId\": \"{{contentTypeID}}\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldType\": \"Host-Folder\",\n                \"fieldTypeLabel\": \"Site or Folder\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1308941714000,\n                \"id\": \"{{contentTypeFieldID}}\",\n                \"indexed\": true,\n                \"listed\": false,\n                \"modDate\": 1632506750000,\n                \"name\": \"Host/Folder CHANGED\",\n                \"readOnly\": false,\n                \"required\": true,\n                \"searchable\": true,\n                \"sortOrder\": 1,\n                \"unique\": false,\n                \"variable\": \"hostfolder\"\n            }\n        ],\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"host\": \"SYSTEM_HOST\",\n    \"name\": \"Test Content Type\",\n\t\"fixed\": false,\n    \"id\": \"{{contentTypeID}}\",\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"icon\": \"icon2\",\n    \"sortOrder\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeID}}"
							]
						},
						"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
					},
					"response": []
				},
				{
					"name": "Delete ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeID}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeID}}"
							]
						},
						"description": "Given a content type ID.\nExpect that code is 200.\nExpect content type is deleted successfully."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Tests For New StoryBlockField",
			"item": [
				{
					"name": "Create ContentType with StoryBlockField Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var contentType = jsonData.entity[0];",
									"pm.collectionVariables.set(\"contentTypeIdWithStoryBlock\", contentType.id);",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content Type should have 4 fields\", function() {",
									"    pm.expect(contentType.fields.length).to.eql(4);",
									"});",
									"pm.test(\"Content Type has a Story_block_field\", function() {",
									"    pm.expect(contentType.fields[3].fieldType).to.eql(\"Story-Block\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"fixed\":false,\n    \"system\":false,\n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"\",\n    \"host\": \"SYSTEM_HOST\",\n    \"folder\":\"SYSTEM_FOLDER\",\n    \"name\":\"TestContentTypeWithStoryBlockField\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"fields\" : [\n        {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"title\",\n\t\t\t\"variable\": \"title\",\n\t\t\t\"fixed\": true\n\t\t},\n        {\n            \"clazz\":\"com.dotcms.contenttype.model.field.ImmutableStoryBlockField\",\n            \"required\":false,\n            \"name\":\"block\",\n            \"defaultValue\":\"\",\n            \"hint\":\"\",\n            \"searchable\":true\n            }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Creates a contentType with 2 fields:\n- A text field named Title\n- A story block field named block"
					},
					"response": []
				},
				{
					"name": "Create contentlet with StoryBlockField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Contentlet StoryBlock has value\", function() {",
									"    pm.expect(jsonData.entity.block.content[0].content[0].text).contains(\"Wow, this editor instance exports its content as JSON\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n        \"contentType\": \"{{contentTypeIdWithStoryBlock}}\",\n        \"name\": \"test with data block field\",\n        \"title\": \"test with data block field\",\n        \"block\": \"{\\\"type\\\": \\\"doc\\\",\\\"content\\\": [{\\\"type\\\": \\\"paragraph\\\",\\\"content\\\": [{\\\"type\\\": \\\"text\\\",\\\"text\\\": \\\"Wow, this editor instance exports its content as JSON.\\\"}]}]}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Get ContentTypes",
			"item": [
				{
					"name": "Get ContentTypes sending HostID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?host=8a7d5e23-da1e-420a-b4f0-471e7da8ea2d",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "host",
									"value": "8a7d5e23-da1e-420a-b4f0-471e7da8ea2d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ContentTypes sending SYSTEM_HOST",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Amount of ContentTypes could be greather or eql than 10\", function () {",
									"     pm.expect(jsonData.entity.length).to.be.gte(10);",
									"});",
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?host=SYSTEM_HOST",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "host",
									"value": "SYSTEM_HOST"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ContentTypes without any param",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Amount of ContentTypes could be greather or eql than 10\", function () {",
									"     pm.expect(jsonData.entity.length).to.be.gte(10);",
									"});",
									"",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ContentTypes sending not existing hostID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?host=aaaaa-aaaa-aaaa-aaaaaa",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "host",
									"value": "aaaaa-aaaa-aaaa-aaaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get existing Base Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there are at least 1 Content Type of Base Type 'dotAsset'\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.gte(1, \"There MUST be at least one Content Type of Base Type 'dotAsset'\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?type=DOTASSET&orderby=name",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "type",
									"value": "DOTASSET"
								},
								{
									"key": "orderby",
									"value": "name"
								}
							]
						},
						"description": "Returns all Content Types whose Base Type is 'dotAsset'. **There must be AT LEAST one Content Type of such a Base Type.**"
					},
					"response": []
				},
				{
					"name": "Get non-existing Base Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Checking that the error message is present\", function () {",
									"    const message = pm.response.json().message;",
									"    pm.expect(message).to.contain(\"FORM2\", \"The returned error message may not be\")",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?filter=filter&page=3&per_page=4&type=FORM2&orderby=name",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "filter",
									"value": "filter"
								},
								{
									"key": "page",
									"value": "3"
								},
								{
									"key": "per_page",
									"value": "4"
								},
								{
									"key": "type",
									"value": "FORM2"
								},
								{
									"key": "orderby",
									"value": "name"
								}
							]
						},
						"description": "Requesting an invalid Base Content Type will return an error message and an HTTP Status 400."
					},
					"response": []
				}
			]
		},
		{
			"name": "Test ContentType With Field Variables",
			"item": [
				{
					"name": "Create Test Data",
					"item": [
						{
							"name": "Create ContentType with field variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var contentType = jsonData.entity[0];",
											"pm.collectionVariables.set(\"contentTypeId\", contentType.id);",
											"pm.test(\"Status code should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content Type has the provided name\", function() {",
											"    pm.expect(contentType.name).to.eql(\"WYSIWYG-Content\");",
											"});",
											"pm.test(\"Content Type should have 4 fields\", function() {",
											"    pm.expect(contentType.fields.length).to.eql(4);",
											"});",
											"pm.collectionVariables.set(\"contentType.host\", contentType.host);",
											"pm.collectionVariables.set(\"contentType.field1\", contentType.fields[0].id);",
											"pm.collectionVariables.set(\"contentType.field2\", contentType.fields[1].id);",
											"pm.collectionVariables.set(\"contentType.field3\", contentType.fields[2].id);",
											"pm.collectionVariables.set(\"contentType.field4\", contentType.fields[3].id);",
											"pm.collectionVariables.set(\"contentType.field4.varName\", contentType.fields[3].variable);",
											"pm.collectionVariables.set(\"contentType.divider\", contentType.layout[0].divider.id);",
											"pm.collectionVariables.set(\"contentType.columnDivider\", contentType.layout[0].columns[0].columnDivider.id);",
											"var wysigygField = contentType.fields[3];",
											"var secondVar = wysigygField.fieldVariables[1];",
											"pm.test(\"Variable should have its key and value with hello:world\", function() {",
											"    pm.expect(secondVar.key).to.eql(\"hello\");",
											"    pm.expect(secondVar.value).to.eql(\"world\");",
											"});",
											"pm.test(\"WYSIWYG must exist and have 3 variables\", function() {",
											"    pm.expect(wysigygField.fieldType).to.eql(\"WYSIWYG\");",
											"    pm.expect(wysigygField.fieldVariables.length).to.eql(3);",
											"});",
											"var tinyMcePropsVar = wysigygField.fieldVariables[2];",
											"pm.test(\"WYSIWYG tinymceoprops variable is present with value\", function() {",
											"    pm.expect(tinyMcePropsVar.key).to.eql(\"tinymceprops\");",
											"    pm.expect(tinyMcePropsVar.value).to.eql(\"{toolbar:\\\"true\\\",menu:\\\"false\\\", theme:\\\"advanced\\\"}\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\t\"baseType\": \"CONTENT\",\n\t\t\"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n\t\t\"defaultType\": false,\n\t\t\"fields\": [{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n\t\t\t\"dataType\": \"SYSTEM\",\n\t\t\t\"fieldContentTypeProperties\": [],\n\t\t\t\"fieldType\": \"Row\",\n\t\t\t\"fieldTypeLabel\": \"Row\",\n\t\t\t\"fieldVariables\": [],\n\t\t\t\"fixed\": false,\n\t\t\t\"iDate\": 1606168604000,\n\t\t\t\"indexed\": false,\n\t\t\t\"listed\": false,\n\t\t\t\"modDate\": 1606168642000,\n\t\t\t\"name\": \"fields-0\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": false,\n\t\t\t\"searchable\": false,\n\t\t\t\"sortOrder\": 0,\n\t\t\t\"unique\": false,\n\t\t\t\"variable\": \"fields0\"\n\t\t}, {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n\t\t\t\"dataType\": \"SYSTEM\",\n\t\t\t\"fieldContentTypeProperties\": [],\n\t\t\t\"fieldType\": \"Column\",\n\t\t\t\"fieldTypeLabel\": \"Column\",\n\t\t\t\"fieldVariables\": [],\n\t\t\t\"fixed\": false,\n\t\t\t\"iDate\": 1606168604000,\n\t\t\t\"indexed\": false,\n\t\t\t\"listed\": false,\n\t\t\t\"modDate\": 1606168642000,\n\t\t\t\"name\": \"fields-1\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": false,\n\t\t\t\"searchable\": false,\n\t\t\t\"sortOrder\": 1,\n\t\t\t\"unique\": false,\n\t\t\t\"variable\": \"fields1\"\n\t\t}, {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"fieldType\": \"Text\",\n\t\t\t\"fieldTypeLabel\": \"Text\",\n\t\t\t\"fieldVariables\": [],\n\t\t\t\"fixed\": false,\n\t\t\t\"iDate\": 1606168746000,\n\t\t\t\"indexed\": true,\n\t\t\t\"listed\": false,\n\t\t\t\"modDate\": 1606168746000,\n\t\t\t\"name\": \"Title\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": false,\n\t\t\t\"searchable\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"variable\": \"title\"\n\t\t}, {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\",\n\t\t\t\"dataType\": \"LONG_TEXT\",\n\t\t\t\"fieldType\": \"WYSIWYG\",\n\t\t\t\"fieldTypeLabel\": \"WYSIWYG\",\n\t\t\t\"fieldVariables\": [{\n\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n\t\t\t\t\"key\": \"foo\",\n\t\t\t\t\"value\": \"bar\"\n\t\t\t}, {\n\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n\t\t\t\t\"key\": \"hello\",\n\t\t\t\t\"value\": \"world\"\n\t\t\t}, {\n\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n\t\t\t\t\"key\": \"tinymceprops\",\n\t\t\t\t\"value\": \"{toolbar:\\\"true\\\",menu:\\\"false\\\", theme:\\\"advanced\\\"}\"\n\t\t\t}],\n\t\t\t\"fixed\": false,\n\t\t\t\"iDate\": 1606168642000,\n\t\t\t\"indexed\": true,\n\t\t\t\"listed\": false,\n\t\t\t\"modDate\": 1606168746000,\n\t\t\t\"name\": \"component\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": false,\n\t\t\t\"searchable\": true,\n\t\t\t\"sortOrder\": 3,\n\t\t\t\"unique\": false,\n\t\t\t\"variable\": \"component\"\n\t\t}],\n\t\t\"fixed\": false,\n\t\t\"folder\": \"SYSTEM_FOLDER\",\n\t\t\"host\": \"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n\t\t\"iDate\": 1606168519000,\n\t\t\"layout\": [{\n\t\t\t\"divider\": {\n\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n\t\t\t\t\"dataType\": \"SYSTEM\",\n\t\t\t\t\"fieldContentTypeProperties\": [],\n\t\t\t\t\"fieldType\": \"Row\",\n\t\t\t\t\"fieldTypeLabel\": \"Row\",\n\t\t\t\t\"fieldVariables\": [],\n\t\t\t\t\"fixed\": false,\n\t\t\t\t\"iDate\": 1606168604000,\n\t\t\t\t\"indexed\": false,\n\t\t\t\t\"listed\": false,\n\t\t\t\t\"modDate\": 1606168642000,\n\t\t\t\t\"name\": \"fields-0\",\n\t\t\t\t\"readOnly\": false,\n\t\t\t\t\"required\": false,\n\t\t\t\t\"searchable\": false,\n\t\t\t\t\"sortOrder\": 0,\n\t\t\t\t\"unique\": false,\n\t\t\t\t\"variable\": \"fields0\"\n\t\t\t},\n\t\t\t\"columns\": [{\n\t\t\t\t\"columnDivider\": {\n\t\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n\t\t\t\t\t\"dataType\": \"SYSTEM\",\n\t\t\t\t\t\"fieldContentTypeProperties\": [],\n\t\t\t\t\t\"fieldType\": \"Column\",\n\t\t\t\t\t\"fieldTypeLabel\": \"Column\",\n\t\t\t\t\t\"fieldVariables\": [],\n\t\t\t\t\t\"fixed\": false,\n\t\t\t\t\t\"iDate\": 1606168604000,\n\t\t\t\t\t\"indexed\": false,\n\t\t\t\t\t\"listed\": false,\n\t\t\t\t\t\"modDate\": 1606168642000,\n\t\t\t\t\t\"name\": \"fields-1\",\n\t\t\t\t\t\"readOnly\": false,\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"searchable\": false,\n\t\t\t\t\t\"sortOrder\": 1,\n\t\t\t\t\t\"unique\": false,\n\t\t\t\t\t\"variable\": \"fields1\"\n\t\t\t\t},\n\t\t\t\t\"fields\": [{\n\t\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n\t\t\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\t\t\"fieldType\": \"Text\",\n\t\t\t\t\t\"fieldTypeLabel\": \"Text\",\n\t\t\t\t\t\"fieldVariables\": [],\n\t\t\t\t\t\"fixed\": false,\n\t\t\t\t\t\"iDate\": 1606168746000,\n\t\t\t\t\t\"indexed\": true,\n\t\t\t\t\t\"listed\": false,\n\t\t\t\t\t\"modDate\": 1606168746000,\n\t\t\t\t\t\"name\": \"Title\",\n\t\t\t\t\t\"readOnly\": false,\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"searchable\": true,\n\t\t\t\t\t\"sortOrder\": 2,\n\t\t\t\t\t\"unique\": false,\n\t\t\t\t\t\"variable\": \"title\"\n\t\t\t\t}, {\n\t\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\",\n\t\t\t\t\t\"dataType\": \"LONG_TEXT\",\n\t\t\t\t\t\"fieldType\": \"WYSIWYG\",\n\t\t\t\t\t\"fieldTypeLabel\": \"WYSIWYG\",\n\t\t\t\t\t\"fieldVariables\": [{\n\t\t\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n\t\t\t\t\t\t\"key\": \"foo\",\n\t\t\t\t\t\t\"value\": \"bar\"\n\t\t\t\t\t}, {\n\t\t\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n\t\t\t\t\t\t\"key\": \"hello\",\n\t\t\t\t\t\t\"value\": \"world\"\n\t\t\t\t\t}, {\n\t\t\t\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n\t\t\t\t\t\t\"key\": \"tinymceprops\",\n\t\t\t\t\t\t\"value\": \"{toolbar:\\\"true\\\",menu:\\\"false\\\", theme:\\\"advanced\\\"}\"\n\t\t\t\t\t}],\n\t\t\t\t\t\"fixed\": false,\n\t\t\t\t\t\"iDate\": 1606168642000,\n\t\t\t\t\t\"indexed\": true,\n\t\t\t\t\t\"listed\": false,\n\t\t\t\t\t\"modDate\": 1606168746000,\n\t\t\t\t\t\"name\": \"component\",\n\t\t\t\t\t\"readOnly\": false,\n\t\t\t\t\t\"required\": false,\n\t\t\t\t\t\"searchable\": true,\n\t\t\t\t\t\"sortOrder\": 3,\n\t\t\t\t\t\"unique\": false,\n\t\t\t\t\t\"variable\": \"component\"\n\t\t\t\t}]\n\t\t\t}]\n\t\t}],\n\t\t\"modDate\": 1606177211000,\n\t\t\"multilingualable\": false,\n\t\t\"name\": \"WYSIWYG-Content\",\n\t\t\"system\": false,\n\t\t\"systemActionMappings\": {},\n\t\t\"variable\": \"WysiwygContent\",\n\t\t\"versionable\": true,\n\t\t\"workflows\": []\n\t}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that WYSIWYG field is created with provided field variables."
							},
							"response": []
						},
						{
							"name": "Update ContentType with field variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var contentType = jsonData.entity",
											"pm.test(\"Status code should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content Type has the provided name\", function() {",
											"    pm.expect(contentType.name).to.eql(\"WYSIWYG-Content-Renamed\");",
											"});",
											"pm.test(\"Content Type should have 4 fields\", function() {",
											"    pm.expect(contentType.fields.length).to.eql(4);",
											"});",
											"var wysigygField = contentType.fields[3];",
											"pm.test(\"WYSIWYG must exist and have 2 variables\", function() {",
											"    pm.expect(wysigygField.fieldType).to.eql(\"WYSIWYG\");",
											"    pm.expect(wysigygField.fieldVariables.length).to.eql(2);",
											"});",
											"var firstVar = wysigygField.fieldVariables[0];",
											"pm.test(\"Variable should have its key and value modified to hola:mundo\", function() {",
											"    pm.expect(firstVar.key).to.eql(\"hola\");",
											"    pm.expect(firstVar.value).to.eql(\"mundo\");",
											"});",
											"var tinyMcePropsVar = wysigygField.fieldVariables[1];",
											"pm.test(\"WYSIWYG tinymceoprops variable is present with value\", function() {",
											"    pm.expect(tinyMcePropsVar.key).to.eql(\"tinymceprops\");",
											"    pm.expect(tinyMcePropsVar.value).to.eql(\"{toolbar:\\\"true\\\",menu:\\\"false\\\", theme:\\\"advanced\\\"}\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1606168604000,\n            \"id\": \"{{contentType.field1}}\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"fields-0\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"fields0\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1606168604000,\n            \"id\": \"{{contentType.field2}}\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"fields-1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"fields1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1606168746000,\n            \"id\": \"{{contentType.field3}}\",\n            \"indexed\": true,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"Title\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"title\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"LONG_TEXT\",\n            \"fieldType\": \"WYSIWYG\",\n            \"fieldTypeLabel\": \"WYSIWYG\",\n            \"fieldVariables\": [\n                {\n                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                    \"fieldId\": \"{{contentType.field4}}\",\n                    \"id\": \"6bf0f909-7f33-43a3-9b9c-fd7551fa73d7\",\n                    \"key\": \"hola\",\n                    \"value\": \"mundo\"\n                },\n                {\n                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                    \"fieldId\": \"{{contentType.field4}}\",\n                    \"id\": \"6b034559-d411-49a7-be14-d3039b89bd3b\",\n                    \"key\": \"tinymceprops\",\n                    \"value\": \"{toolbar:\\\"true\\\",menu:\\\"false\\\", theme:\\\"advanced\\\"}\"\n                }\n            ],\n            \"fixed\": false,\n            \"iDate\": 1606168642000,\n            \"id\": \"{{contentType.field4}}\",\n            \"indexed\": true,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"component\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": true,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"component\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"{{contentType.host}}\",\n    \"iDate\": 1606168519000,\n    \"id\": \"{{contentTypeId}}\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"contentTypeId\": \"{{contentTypeId}}\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1606168604000,\n                \"id\": \"{{contentType.divider}}\",\n                \"indexed\": false,\n                \"listed\": false,\n                \"modDate\": 1607013655000,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"contentTypeId\": \"{{contentTypeId}}\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"iDate\": 1606168604000,\n                        \"id\": \"{{contentType.columnDivider}}\",\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"modDate\": 1607013655000,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"contentTypeId\": \"{{contentTypeId}}\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1606168746000,\n                            \"id\": \"{{contentType.field1}}\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"modDate\": 1607013655000,\n                            \"name\": \"Title\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": true,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"title\"\n                        },\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\",\n                            \"contentTypeId\": \"{{contentTypeId}}\",\n                            \"dataType\": \"LONG_TEXT\",\n                            \"fieldType\": \"WYSIWYG\",\n                            \"fieldTypeLabel\": \"WYSIWYG\",\n                            \"fieldVariables\": [\n                                {\n                                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                                    \"fieldId\": \"a2a11339-d40f-472a-a921-7748d7009642\",\n                                    \"id\": \"6bf0f909-7f33-43a3-9b9c-fd7551fa73d7\",\n                                    \"key\": \"hola\",\n                                    \"value\": \"mundo\"\n                                },\n                                {\n                                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                                    \"fieldId\": \"a2a11339-d40f-472a-a921-7748d7009642\",\n                                    \"id\": \"6b034559-d411-49a7-be14-d3039b89bd3b\",\n                                    \"key\": \"tinymceprops\",\n                                    \"value\": \"{toolbar:\\\"true\\\",menu:\\\"false\\\", theme:\\\"advanced\\\"}\"\n                                }\n                            ],\n                            \"fixed\": false,\n                            \"iDate\": 1606168642000,\n                            \"id\": \"{{contentType.field4}}\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"modDate\": 1607013655000,\n                            \"name\": \"component\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": true,\n                            \"sortOrder\": 3,\n                            \"unique\": false,\n                            \"variable\": \"component\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"modDate\": 1607013655000,\n    \"multilingualable\": false,\n    \"name\": \"WYSIWYG-Content-Renamed\",\n    \"system\": false,\n    \"systemActionMappings\": {},\n    \"variable\": \"WysiwygContent\",\n    \"versionable\": true,\n    \"workflows\": [\n        {\n            \"archived\": false,\n            \"creationDate\": 1607013267018,\n            \"defaultScheme\": false,\n            \"description\": \"\",\n            \"entryActionId\": null,\n            \"id\": \"{{contentType.workflow}}\",\n            \"mandatory\": false,\n            \"modDate\": 1607013261505,\n            \"name\": \"System Workflow\",\n            \"system\": true\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a PUT.\nExpect that code is 200.\nExpect content type is updated with the provided fields.\nExpect that WYSIWYG field is updated with provided field variables."
							},
							"response": []
						},
						{
							"name": "Update ContentType with field variables - delete - update - add",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"var contentType = jsonData.entity",
											"pm.test(\"Status code should be 200\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Content Type has the provided name\", function() {",
											"    pm.expect(contentType.name).to.eql(\"WYSIWYG-Content-Renamed2\");",
											"});",
											"pm.test(\"Content Type should have 4 fields\", function() {",
											"    pm.expect(contentType.fields.length).to.eql(4);",
											"});",
											"var wysigygField = contentType.fields[3];",
											"pm.test(\"WYSIWYG must exist and have 2 variables\", function() {",
											"    pm.expect(wysigygField.fieldType).to.eql(\"WYSIWYG\");",
											"    pm.expect(wysigygField.fieldVariables.length).to.eql(2);",
											"});",
											"var firstVar = wysigygField.fieldVariables[0];",
											"pm.test(\"Variable should have its key and value modified to hola:mundo\", function() {",
											"    pm.expect(firstVar.key).to.eql(\"hi\");",
											"    pm.expect(firstVar.value).to.eql(\"all\");",
											"    pm.collectionVariables.set(\"contentType.field4.fieldVarOne.id\", firstVar.id);",
											"    pm.collectionVariables.set(\"contentType.field4.fieldVarOne.key\", firstVar.key);",
											"});",
											"var tinyMcePropsVar = wysigygField.fieldVariables[1];",
											"pm.test(\"WYSIWYG tinymceoprops variable is present with value\", function() {",
											"    pm.expect(tinyMcePropsVar.key).to.eql(\"tinymceprops\");",
											"    pm.expect(tinyMcePropsVar.value).to.eql(\"{toolbar:\\\"true\\\",menu:\\\"true\\\", theme:\\\"advanced\\\"}\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"baseType\": \"CONTENT\",\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"defaultType\": false,\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1606168604000,\n            \"id\": \"{{contentType.field1}}\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"fields-0\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"fields0\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1606168604000,\n            \"id\": \"{{contentType.field2}}\",\n            \"indexed\": false,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"fields-1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"fields1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"iDate\": 1606168746000,\n            \"id\": \"{{contentType.field3}}\",\n            \"indexed\": true,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"Title\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"titleNew\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"LONG_TEXT\",\n            \"fieldType\": \"WYSIWYG\",\n            \"fieldTypeLabel\": \"WYSIWYG\",\n            \"fieldVariables\": [\n                {\n                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                    \"fieldId\": \"{{contentType.field4}}\",\n                    \"key\": \"hi\",\n                    \"value\": \"all\"\n                },\n                {\n                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                    \"fieldId\": \"{{contentType.field4}}\",\n                    \"id\": \"6b034559-d411-49a7-be14-d3039b89bd3b\",\n                    \"key\": \"tinymceprops\",\n                    \"value\": \"{toolbar:\\\"true\\\",menu:\\\"true\\\", theme:\\\"advanced\\\"}\"\n                }\n            ],\n            \"fixed\": false,\n            \"iDate\": 1606168642000,\n            \"id\": \"{{contentType.field4}}\",\n            \"indexed\": true,\n            \"listed\": false,\n            \"modDate\": 1607013655000,\n            \"name\": \"component\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"component\"\n        }\n    ],\n    \"fixed\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"host\": \"{{contentType.host}}\",\n    \"iDate\": 1606168519000,\n    \"id\": \"{{contentTypeId}}\",\n    \"layout\": [\n        {\n            \"divider\": {\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n                \"contentTypeId\": \"{{contentTypeId}}\",\n                \"dataType\": \"SYSTEM\",\n                \"fieldContentTypeProperties\": [],\n                \"fieldType\": \"Row\",\n                \"fieldTypeLabel\": \"Row\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1606168604000,\n                \"id\": \"{{contentType.divider}}\",\n                \"indexed\": false,\n                \"listed\": false,\n                \"modDate\": 1607013655000,\n                \"name\": \"fields-0\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": false,\n                \"sortOrder\": 0,\n                \"unique\": false,\n                \"variable\": \"fields0\"\n            },\n            \"columns\": [\n                {\n                    \"columnDivider\": {\n                        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"contentTypeId\": \"{{contentTypeId}}\",\n                        \"dataType\": \"SYSTEM\",\n                        \"fieldContentTypeProperties\": [],\n                        \"fieldType\": \"Column\",\n                        \"fieldTypeLabel\": \"Column\",\n                        \"fieldVariables\": [],\n                        \"fixed\": false,\n                        \"iDate\": 1606168604000,\n                        \"id\": \"{{contentType.columnDivider}}\",\n                        \"indexed\": false,\n                        \"listed\": false,\n                        \"modDate\": 1607013655000,\n                        \"name\": \"fields-1\",\n                        \"readOnly\": false,\n                        \"required\": false,\n                        \"searchable\": false,\n                        \"sortOrder\": 1,\n                        \"unique\": false,\n                        \"variable\": \"fields1\"\n                    },\n                    \"fields\": [\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"contentTypeId\": \"{{contentTypeId}}\",\n                            \"dataType\": \"TEXT\",\n                            \"fieldType\": \"Text\",\n                            \"fieldTypeLabel\": \"Text\",\n                            \"fieldVariables\": [],\n                            \"fixed\": false,\n                            \"iDate\": 1606168746000,\n                            \"id\": \"{{contentType.field1}}\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"modDate\": 1607013655000,\n                            \"name\": \"Title\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": true,\n                            \"sortOrder\": 2,\n                            \"unique\": false,\n                            \"variable\": \"title\"\n                        },\n                        {\n                            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\",\n                            \"contentTypeId\": \"{{contentTypeId}}\",\n                            \"dataType\": \"LONG_TEXT\",\n                            \"fieldType\": \"WYSIWYG\",\n                            \"fieldTypeLabel\": \"WYSIWYG\",\n                            \"fieldVariables\": [\n                                {\n                                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                                    \"fieldId\": \"a2a11339-d40f-472a-a921-7748d7009642\",\n                                    \"id\": \"6bf0f909-7f33-43a3-9b9c-fd7551fa73d7\",\n                                    \"key\": \"hola\",\n                                    \"value\": \"mundo\"\n                                },\n                                {\n                                    \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFieldVariable\",\n                                    \"fieldId\": \"a2a11339-d40f-472a-a921-7748d7009642\",\n                                    \"id\": \"6b034559-d411-49a7-be14-d3039b89bd3b\",\n                                    \"key\": \"tinymceprops\",\n                                    \"value\": \"{toolbar:\\\"true\\\",menu:\\\"false\\\", theme:\\\"advanced\\\"}\"\n                                }\n                            ],\n                            \"fixed\": false,\n                            \"iDate\": 1606168642000,\n                            \"id\": \"{{contentType.field4}}\",\n                            \"indexed\": true,\n                            \"listed\": false,\n                            \"modDate\": 1607013655000,\n                            \"name\": \"component\",\n                            \"readOnly\": false,\n                            \"required\": false,\n                            \"searchable\": true,\n                            \"sortOrder\": 3,\n                            \"unique\": false,\n                            \"variable\": \"component\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ],\n    \"modDate\": 1607013655000,\n    \"multilingualable\": false,\n    \"name\": \"WYSIWYG-Content-Renamed2\",\n    \"system\": false,\n    \"systemActionMappings\": {},\n    \"variable\": \"WysiwygContent\",\n    \"versionable\": true,\n    \"workflows\": [\n        {\n            \"archived\": false,\n            \"creationDate\": 1607013267018,\n            \"defaultScheme\": false,\n            \"description\": \"\",\n            \"entryActionId\": null,\n            \"id\": \"{{contentType.workflow}}\",\n            \"mandatory\": false,\n            \"modDate\": 1607013261505,\n            \"name\": \"System Workflow\",\n            \"system\": true\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a PUT.\nExpect that code is 200.\nExpect content type is updated with the provided fields.\nExpect that WYSIWYG field is updated with provided field variables."
							},
							"response": []
						}
					]
				},
				{
					"name": "Field Variables - With User",
					"item": [
						{
							"name": "Create Field Variable using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"    pm.collectionVariables.set(\"contentType.field4.fieldVarOne.id\", jsonData.entity.id);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"{{contentType.field4.fieldVarOne.key}}\",\n    \"value\": \"Field variable created with ID\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Create Field Variable using Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"    pm.collectionVariables.set(\"contentType.field4.fieldVarOne.id\", jsonData.entity.id);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"{{contentType.field4.fieldVarOne.key}}\",\n    \"value\": \"Field variable created with Var Name\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Get All Field Variables using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											"",
											"pm.test(\"There must be only two Field Variables\", function () {",
											"    pm.expect(pm.response.json().entity.length).to.equal(2, 'There must be only 2 Field Variables at this point');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Get All Field Variables using Field Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											"",
											"pm.test(\"There must be only two Field Variables\", function () {",
											"    pm.expect(pm.response.json().entity.length).to.equal(2, 'There must be only 2 Field Variables at this point');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Get Field Variable using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Get Field Variable using Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Update Field Variable using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{contentType.field4.fieldVarOne.id}}\",\n    \"key\": \"{{contentType.field4.fieldVarOne.key}}\",\n    \"value\": \"Field variable updated with ID\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to update a Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Update Field Variable using Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{contentType.field4.fieldVarOne.id}}\",\n    \"key\": \"{{contentType.field4.fieldVarOne.key}}\",\n    \"value\": \"Field variable updated with Var Name\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to update a Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Delete Field Variable using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to delete a Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Re-Create Test Field Variable",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"    pm.collectionVariables.set(\"contentType.field4.fieldVarOne.id\", jsonData.entity.id);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"{{contentType.field4.fieldVarOne.key}}\",\n    \"value\": \"Field variable created with ID\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Delete Field Variable using Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"No error messages must be returned\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.equal(0, 'Error messages were generated');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to delete a Field Variable without User authentication."
							},
							"response": []
						}
					],
					"description": "Verifies that CRUD operations on Field Variables are working as expected."
				},
				{
					"name": "Field Variables - No User",
					"item": [
						{
							"name": "invalidate User Session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/logout",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Field Variable using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"An error message must be returned\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"Invalid User\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"test-field-variable\",\n    \"value\": \"Value for my field variable\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Create Field Variable using Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"An error message must be returned\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"Invalid User\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"test-field-variable\",\n    \"value\": \"NEW VALUE for my field variable\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables"
									]
								},
								"description": "Attempts to create a new Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Update Field Variable using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"An error message must be returned\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"Invalid User\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{contentType.field4.fieldVarOne.id}}\",\n    \"key\": \"{{contentType.field4.fieldVarOne.key}}\",\n    \"value\": \"UPDATED VALUE USING ID for my field variable\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to update a Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Update Field Variable using Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"An error message must be returned\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"Invalid User\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{contentType.field4.fieldVarOne.id}}\",\n    \"key\": \"{{contentType.field4.fieldVarOne.key}}\",\n    \"value\": \"UPDATED VALUE USING VAR NAME for my field variable\",\n    \"clazz\": \"com.dotcms.contenttype.model.field.FieldVariable\",\n    \"fieldId\": \"{{contentType.field4}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to update a Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Delete Field Variable using Field ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"An error message must be returned\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"Invalid User\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/id/{{contentType.field4}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"id",
										"{{contentType.field4}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to delete a Field Variable without User authentication."
							},
							"response": []
						},
						{
							"name": "Update Field Variable using Var Name",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"An error message must be returned\", function () {",
											"    pm.expect(pm.response.text()).to.equal(\"Invalid User\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/{{contentTypeId}}/fields/var/{{contentType.field4.varName}}/variables/id/{{contentType.field4.fieldVarOne.id}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"var",
										"{{contentType.field4.varName}}",
										"variables",
										"id",
										"{{contentType.field4.fieldVarOne.id}}"
									]
								},
								"description": "Attempts to delete a Field Variable without User authentication."
							},
							"response": []
						}
					],
					"description": "Verifies that CRUD operations on Field Variables DO NOT WORK for the Anonymous User."
				},
				{
					"name": "Cleanup Content Type",
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"{{contentTypeId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Verifies that creating Field Variables for Fields in a Content Type is working as expected."
		},
		{
			"name": "Test Copy ContentType",
			"item": [
				{
					"name": "Copy FileAsset Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var contentType = jsonData.entity;",
									"",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content Type has the provided name\", function() {",
									"    pm.expect(contentType.name).to.eql(\"File Asset Copy\");",
									"});",
									"pm.test(\"Content Type should have 9 fields\", function() {",
									"    pm.expect(contentType.fields.length).to.gt(8);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"File Asset Copy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/fileAsset/_copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"fileAsset",
								"_copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "ContentType Source does not exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"File Asset Copy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/fileAssetNotExist/_copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"fileAssetNotExist",
								"_copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "ContentType Name Not Sent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"variable\": \"FileAssetCopyTestNot\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/fileAsset/_copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"fileAsset",
								"_copy"
							]
						}
					},
					"response": []
				},
				{
					"name": "ContentType Copy no body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400\", function() {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/fileAsset/_copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"fileAsset",
								"_copy"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Filtered Content Types",
			"item": [
				{
					"name": "pre - Import Test Content Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle 'bundle-with-content-types-issue-22039.tar.gz' was not uploaded!\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"bundle-with-content-types-issue-22039.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/ContentTypeResource/bundle-with-content-types-issue-22039.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle/sync",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"sync"
							],
							"query": [
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle containing the Content Types that are supposed to exist for the subsequent tests to work as expected."
					},
					"response": []
				},
				{
					"name": "Get Content Types - First page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code must be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The 'Content (Generic)' type must come first!'\", function () {",
									"    pm.expect(\"Content (Generic)\").to.equal(jsonData.entity[0].name);",
									"});",
									"",
									"pm.test(\"There must be 3 Content Types in the response only!'\", function () {",
									"    pm.expect(3).to.equal(jsonData.entity.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filter\" : {\n        \"types\" : \"calendarEvent,Vanityurl,webPageContent,htmlpageasset,FileAsset\"\n    },\n    \"page\": 1,\n    \"perPage\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/_filter",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"_filter"
							]
						},
						"description": "Returns the appropriate JSON data with Content Type information based on the specified list of Velocity Variable Names **and the pagination parameters**."
					},
					"response": []
				},
				{
					"name": "Get Content Types - Second page",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code must be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"The 'dotAsset' type must come first!'\", function () {",
									"    pm.expect(\"dotAsset\").to.equal(jsonData.entity[0].name);",
									"});",
									"",
									"pm.test(\"There must be 2 Content Types in the response only!'\", function () {",
									"    pm.expect(2).to.equal(jsonData.entity.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filter\" : {\n        \"types\" : \"calendarEvent,Vanityurl,webPageContent,DotAsset,persona\"\n    },\n    \"page\": 2,\n    \"perPage\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/_filter",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"_filter"
							]
						},
						"description": "Returns the appropriate JSON data with Content Type information based on the specified list of Velocity Variable Names **and the pagination parameters**."
					},
					"response": []
				},
				{
					"name": "Get Content Types - Not paginated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code must be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"All 5 Content Types in the response only!'\", function () {",
									"    pm.expect(5).to.equal(jsonData.entity.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filter\" : {\n        \"types\" : \"calendarEvent,Vanityurl,webPageContent,DotAsset,persona\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/_filter",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"_filter"
							]
						},
						"description": "Returns the appropriate JSON data with Content Type information based on the specified list of Velocity Variable Names **without any pagination parameters.**"
					},
					"response": []
				},
				{
					"name": "Get Content Types - Filtered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code must be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Only 2 Content Types with the letters 'ent' should be returned!'\", function () {",
									"    pm.expect(2).to.equal(jsonData.entity.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filter\" : {\n        \"types\" : \"calendarEvent,Vanityurl,webPageContent,DotAsset,persona\",\n        \"query\": \"ent\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/_filter",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"_filter"
							]
						},
						"description": "Returns the appropriate JSON data with Content Type information based on the specified list of Velocity Variable Names **and the specified filter including the letters that might be present in either the Content Type's name or Velocity Var Name.**"
					},
					"response": []
				},
				{
					"name": "Get Content Types - Filtered Paginated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code must be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Only 1 Content Type with the letters 'set' should be returned!'\", function () {",
									"    pm.expect(1).to.equal(jsonData.entity.length);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"filter\" : {\n        \"types\" : \"calendarEvent,Vanityurl,webPageContent,DotAsset,persona\",\n        \"query\": \"set\"\n    },\n    \"page\": 1,\n    \"perPage\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/_filter",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"_filter"
							]
						},
						"description": "Returns the appropriate JSON data with Content Type information based on the specified list of Velocity Variable Names **and the specified filter including the letters that might be present in either the Content Type's name or Velocity Var Name.**\n\nIn this case, the second page is being requested."
					},
					"response": []
				},
				{
					"name": "Get Content Types - All types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code must be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"At least 12 Content Types must be returned, as not filter is set!'\", function () {",
									"    pm.expect(jsonData.entity.length).to.greaterThan(11)",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderBy\": \"name\",\n    \"direction\": \"ASC\",\n    \"perPage\": 40\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/_filter",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"_filter"
							]
						},
						"description": "Returns the appropriate JSON data with **ALL** the Content Types in the content repo as no filtering parameters were provided."
					},
					"response": []
				}
			],
			"description": "This Test Collection will verify that the Content Type Filtering Endpoint works as expected. This endpoint can take a list of specific Content Types and perform filtering and pagination operations on them."
		},
		{
			"name": "Test Accept Site Names and Folder Path",
			"item": [
				{
					"name": "createFolders Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.length).to.be.above(0);    ",
									"    let folder = jsonData.entity[0];",
									"    pm.expect(folder.title).eql(\"foo2\");",
									"    pm.expect(folder.type).eql(\"folder\");",
									"    pm.expect(folder.path).eql(\"/foo1/foo2/\");",
									"    pm.collectionVariables.set(\"folder\", folder);",
									"    pm.collectionVariables.set(\"folder.identifier\", folder.identifier);",
									"    pm.collectionVariables.set(\"folder.hostId\", folder.hostId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"/foo1/foo2\"]\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/folder/createfolders/default",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"folder",
								"createfolders",
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ContentType From Given Host Idenifier and Folder Identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let contentType = jsonData.entity[0];",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    let folder = pm.collectionVariables.get(\"folder\");",
									"    pm.expect(contentType.folderPath).to.eql(\"default:/foo1/foo2/\");",
									"    pm.expect(contentType.folder).to.eql(folder.identifier);",
									"    pm.expect(contentType.host).to.eql(folder.hostId);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"fixed\":false,\n    \"system\":false,\n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"CT created using the folderPath property\",    \n    \"host\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n    \"folder\":\"{{folder.identifier}}\",\n    \"name\":\"SimpleContentTypeFromFolderPath\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"fields\" : [\n        {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"title\",\n\t\t\t\"variable\": \"title\",\n\t\t\t\"fixed\": true\n\t\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Creates a contentType using the folderPath property\n\nExpect success."
					},
					"response": []
				},
				{
					"name": "Create ContentType From Given Folder Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let contentType = jsonData.entity[0];",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    let folder = pm.collectionVariables.get(\"folder\");",
									"    pm.expect(contentType.folderPath).to.eql(\"default:/foo1/foo2/\");",
									"    pm.expect(contentType.folder).to.eql(folder.identifier);",
									"    pm.expect(contentType.host).to.eql(folder.hostId);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"fixed\":false,    \n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"CT created using the folderPath property\",    \n    \"folderPath\":\"default:/foo1/foo2\",\n    \"name\":\"SimpleContentTypeFromFolderPath\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"fields\" : [\n        {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"title\",\n\t\t\t\"variable\": \"title\",\n\t\t\t\"fixed\": true\n\t\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Creates a contentType using the folderPath property\n\nExpect success."
					},
					"response": []
				},
				{
					"name": "Create ContentType From Given  Host Name and Folder Path",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let contentType = jsonData.entity[0];",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    let folder = pm.collectionVariables.get(\"folder\");",
									"    pm.expect(contentType.folderPath).to.eql(\"default:/foo1/foo2/\");",
									"    pm.expect(contentType.folder).to.eql(folder.identifier);",
									"    pm.expect(contentType.host).to.eql(folder.hostId);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"fixed\":false,\n    \"system\":false,\n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"Here we're sending host name an the folder path separately\",    \n    \"host\":\"default\",\n    \"folderPath\":\"/foo1/foo2\",\n    \"name\":\"SimpleContentTypeUsingHostNameAndFolderPath\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"fields\" : [\n        {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"title\",\n\t\t\t\"variable\": \"title\",\n\t\t\t\"fixed\": true\n\t\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Creates a contentType using a host name and folderPath\n\nHere we're sending host name and the folder path only contains the folders bit without the site name portion"
					},
					"response": []
				},
				{
					"name": "Create ContentType From Given  Host Identifier and Folder Path (no host)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let contentType = jsonData.entity[0];",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"    let folder = pm.collectionVariables.get(\"folder\");",
									"    pm.expect(contentType.folderPath).to.eql(\"default:/foo1/foo2/\");",
									"    pm.expect(contentType.folder).to.eql(folder.identifier);",
									"    pm.expect(contentType.host).to.eql(folder.hostId);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"fixed\":false,\n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"Here we're sending host name an the folder path separately\",    \n    \"host\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n    \"folderPath\":\"/foo1/foo2\",\n    \"name\":\"SimpleContentTypeUsingHostIdAndFolderPath\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"fields\" : [\n        {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"title\",\n\t\t\t\"variable\": \"title\",\n\t\t\t\"fixed\": true\n\t\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Creates a contentType using a host name and folderPath\n\nHere we're sending host name and the folder path only contains the folders bit without the site name portion"
					},
					"response": []
				},
				{
					"name": "Create FIXED ContentType  Expect System-Host and System-Folder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();",
									"let contentType = jsonData.entity[0];",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);    ",
									"    pm.expect(contentType.folderPath).to.eql(\"/\");",
									"    pm.expect(contentType.folder).to.eql(\"SYSTEM_FOLDER\");",
									"    pm.expect(contentType.host).to.eql(\"SYSTEM_HOST\");",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"fixed\":true,    \n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"CT created using the folderPath property\",    \n    \"folderPath\":\"any:/non-existing-folder\",\n    \"name\":\"SimpleContentTypeFromFolderPathNonExistingFolder\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"fields\" : [\n        {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"title\",\n\t\t\t\"variable\": \"title\",\n\t\t\t\"fixed\": true\n\t\t}\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Creates a simple contentType, that uses the folderPath property to set the location"
					},
					"response": []
				}
			]
		},
		{
			"name": "Field Data",
			"item": [
				{
					"name": "Get All Field Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status must be successful\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const expectedFieldTypes = pm.collectionVariables.get(\"fieldTypesArr\");",
									"",
									"pm.test(\"Checking the total number of Field Types\", function () {",
									"    const fieldTypes = pm.response.json().entity;",
									"    pm.expect(expectedFieldTypes.length).to.eql(fieldTypes.length, \"There must be exactly \" + expectedFieldTypes.length + \" Field Types in dotCMS\");",
									"});",
									"",
									"pm.test(\"Checking the classes in all Field Types\", function () {",
									"    const fieldTypes = pm.response.json().entity;",
									"    fieldTypes.forEach(type => {",
									"",
									"        pm.expect(expectedFieldTypes.includes(type.clazz)).to.equal(true, \"Type '\" + type.clazz + \"' doesn't exist in the official Field Type list\");",
									"",
									"    })",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const fieldTypesArr = [ ",
									"    \"com.dotcms.contenttype.model.field.ImmutableBinaryField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableStoryBlockField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableCategoryField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableCheckboxField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableConstantField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableCustomField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableDateField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableDateTimeField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableFileField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableHiddenField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableImageField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableJSONField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableKeyValueField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableLineDividerField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableMultiSelectField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutablePermissionTabField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableRadioField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableRelationshipsTabField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableSelectField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableHostFolderField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableTabDividerField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableTagField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableTextField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableTextAreaField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableTimeField\",",
									"    \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\"",
									"];",
									"pm.collectionVariables.set(\"fieldTypesArr\", fieldTypesArr);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/fieldTypes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"fieldTypes"
							]
						},
						"description": "Verifies that there's a specific number of Field Types in dotCMS, and that they all match one of the expected Field Types."
					},
					"response": []
				},
				{
					"name": "Site or Folder Field with No Searchable Option",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status must be successful\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that 'Searchable' option in 'Site or Folder' field is NOT present anymore\", function () {",
									"    const fieldTypes = pm.response.json().entity;",
									"    var isPropertyPresent = false;",
									"    fieldTypes.forEach(type => {",
									"",
									"        if (\"com.dotcms.contenttype.model.field.ImmutableHostFolderField\" === type.clazz && type.properties.includes(\"searchable\")) {",
									"            isPropertyPresent = true;",
									"        }",
									"",
									"    });",
									"    if (isPropertyPresent) {",
									"        pm.expect(false).to.equal(isPropertyPresent, \"The 'searchable' property must not be present for 'Site or Folder' fields\");",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/fieldTypes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"fieldTypes"
							]
						}
					},
					"response": []
				}
			],
			"description": "Verifies that operations related to retrieving data from fields in Content Types are aworking as expected."
		},
		{
			"name": "Test delete publish/expire field",
			"item": [
				{
					"name": "Create ContentType with publish/expire fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"contentTypeID\", jsonData.entity[0].id);",
									"pm.collectionVariables.set(\"contentTypeVAR\", jsonData.entity[0].variable);",
									"pm.collectionVariables.set(\"contentTypeFieldID\", jsonData.entity[0].fields[2].id);",
									"",
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"icon check\", function () {",
									"    pm.expect(jsonData.entity[0].icon).to.eql('testIcon');",
									"});",
									"",
									"pm.test(\"Fields check\", function () {",
									"    pm.expect(jsonData.entity[0].fields.length).to.eql(4);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test dates content {{$randomBankAccount}}\",\n\t\"variable\": \"testDatesContent{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"testIcon\",\n    \"sortOrder\": 3,\n    \"publishDateVar\": \"publishDate\",\n    \"expireDateVar\": \"expireDate\",\n\t\"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableDateTimeField\",\n            \"dataType\": \"DATE\",\n            \"fieldType\": \"Date-and-Time\",\n            \"fieldTypeLabel\": \"Date and Time\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Publish Date\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"publishDate\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableDateTimeField\",\n            \"dataType\": \"DATE\",\n            \"fieldType\": \"Date-and-Time\",\n            \"fieldTypeLabel\": \"Date and Time\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"iDate\": 1685054935000,\n            \"indexed\": true,\n            \"listed\": true,\n            \"modDate\": 1685054935000,\n            \"name\": \"Expire Date\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"expireDate\"\n        }\n\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
					},
					"response": []
				},
				{
					"name": "Delete dateTime field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"fieldsID\": [\"{{contentTypeFieldID}}\"]}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v3/contenttype/{{contentTypeID}}/fields",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v3",
								"contenttype",
								"{{contentTypeID}}",
								"fields"
							]
						},
						"description": "Given a content type ID.\nExpect that code is 200.\nExpect content type is deleted successfully."
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Types from one or more Sites",
			"item": [
				{
					"name": "(Legacy) Types from System Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there at least 10 Content Types living under System Host\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(10, \"There MUST be at least 10 Content Types living in System Host -- unless some were added/removed\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(10, \"The 'totalEntries' parameter must be at least 10\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?host=SYSTEM_HOST&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "host",
									"value": "SYSTEM_HOST"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns the Content Types living in System Host."
					},
					"response": []
				},
				{
					"name": "(Legacy) Types from Default site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there at least 2 Content Types living under the Default Site\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(2, \"There MUST be at least 2 Content Types living in the Default Site\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(10, \"The 'perPage' parameter must be 10\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(2, \"The 'totalEntries' parameter must be at least 2\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?host=8a7d5e23-da1e-420a-b4f0-471e7da8ea2d",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "host",
									"value": "8a7d5e23-da1e-420a-b4f0-471e7da8ea2d"
								}
							]
						},
						"description": "Returns all the Content Types living in the Default site."
					},
					"response": []
				},
				{
					"name": "Get Types from System Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there are at least 10 Content Types living under the System Host\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(10, \"There MUST be at least 10 Content Types living in System Host -- unless some were added/removed\");",
									"});",
									"",
									"pm.test(\"Checking that there is no Content Type from another Site\", function () {",
									"    const entity = pm.response.json().entity;",
									"    const typeFromDefaultSite = entity.find(type => type.host !== 'SYSTEM_HOST');",
									"    pm.expect(typeFromDefaultSite).equals(undefined, \"There must be no Content Types from sites other than System Host\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(10, \"The 'totalEntries' parameter must be at least 10\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?sites=SYSTEM_HOST&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "sites",
									"value": "SYSTEM_HOST"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns all the Content Types living in the Default site, using the new query string parameter."
					},
					"response": []
				},
				{
					"name": "Get Types from Default site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there are at least 2 Content Types living under the Default site\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(2, \"There MUST be at least 2 Content Types living in the Default site\");",
									"});",
									"",
									"pm.test(\"Checking that there is no Content Type from another Site\", function () {",
									"    const entity = pm.response.json().entity;",
									"    const typeFromDefaultSite = entity.find(type => type.host !== '8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
									"    pm.expect(typeFromDefaultSite).equals(undefined, \"There must be no Content Types from sites other than Default\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(2, \"The 'totalEntries' parameter must be at least 2\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?sites=default&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "sites",
									"value": "default"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns all the Content Types living in the Default site, using the new query string parameter, and passing down the Site Key."
					},
					"response": []
				},
				{
					"name": "Get Types from Default Site (ID) and System Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there are at least 12 Content Types living under the Default and System Host sites\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(12, \"There MUST be at least 12 Content Types living in the Default and System Host sites -- unless some were added/removed\");",
									"});",
									"",
									"pm.test(\"Checking that there is at least 1 Content Type from the Default Site\", function () {",
									"    const entity = pm.response.json().entity;",
									"    const typeFromDefaultSite = entity.find(type => type.host === '8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
									"    pm.expect(typeFromDefaultSite).to.not.equal(undefined, \"There MUST be at least one Content Type from the Default Site\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(12, \"The 'totalEntries' parameter must be at least 12\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?sites=8a7d5e23-da1e-420a-b4f0-471e7da8ea2d,SYSTEM_HOST&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "sites",
									"value": "8a7d5e23-da1e-420a-b4f0-471e7da8ea2d,SYSTEM_HOST"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns all the Content Types living in both the Default and System Host sites, using the IDs."
					},
					"response": []
				},
				{
					"name": "Get Types from Default Site (Site Key) and System Host Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there are at least 12 Content Types living under the Default and System Host sites\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(12, \"There MUST be at least 12 Content Types living in the Default and System Host sites -- unless some were added/removed\");",
									"});",
									"",
									"pm.test(\"Checking that there is at least 1 Content Type from the Default Site\", function () {",
									"    const entity = pm.response.json().entity;",
									"    const typeFromDefaultSite = entity.find(type => type.host === '8a7d5e23-da1e-420a-b4f0-471e7da8ea2d');",
									"    pm.expect(typeFromDefaultSite).to.not.equal(undefined, \"There MUST be at least one Content Type from the Default Site\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(12, \"The 'totalEntries' parameter must be at least 12\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?sites=default,SYSTEM_HOST&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "sites",
									"value": "default,SYSTEM_HOST"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns all the Content Types living in both the Default and System Host sites, using the Site Key."
					},
					"response": []
				},
				{
					"name": "Get Types from non-existing Site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that no Content Types are returned\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).equals(0, \"There must be no Content Types in the results\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).equals(0, \"The 'totalEntries' parameter must be zero\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?sites=non-existing-site&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "sites",
									"value": "non-existing-site"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns all the Content Types living in the non-existing site, which must return an empty list."
					},
					"response": []
				},
				{
					"name": "Get Types from non-existing Site (ID) and System Host",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there are at least 10 Content Types living under the Default and System Host sites\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(10, \"There MUST be at least 10 Content Types living in System Host -- unless some were added/removed\");",
									"});",
									"",
									"pm.test(\"Checking that all Content Types come from System Host only\", function () {",
									"    const entity = pm.response.json().entity;",
									"    const typeFromDefaultSite = entity.find(type => type.host === '12312312-abcd-1234-dcba-456456456456');",
									"    pm.expect(typeFromDefaultSite).equals(undefined, \"All Content Types must come from System Host only\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(10, \"The 'totalEntries' parameter must be at least 10\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?sites=12312312-abcd-1234-dcba-456456456456,SYSTEM_HOST&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "sites",
									"value": "12312312-abcd-1234-dcba-456456456456,SYSTEM_HOST"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns all the Content Types living in a non-existing site and System Host, which must return only the types living in System Host."
					},
					"response": []
				},
				{
					"name": "Get Types from non-existing Site (ID) and Default site",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Checking that there are at least 2 Content Types living under the Default site\", function () {",
									"    const entity = pm.response.json().entity;",
									"    pm.expect(entity.length).to.be.gte(2, \"There MUST be at least 2 Content Types living in the Default site\");",
									"});",
									"",
									"pm.test(\"Checking that all Content Types come from the Default site only\", function () {",
									"    const entity = pm.response.json().entity;",
									"    const typeFromDefaultSite = entity.find(type => type.host === '12312312-abcd-1234-dcba-456456456456');",
									"    pm.expect(typeFromDefaultSite).equals(undefined, \"All Content Types must come from the Default site only\");",
									"});",
									"",
									"pm.test(\"Checking that pagination information matches the specified parameters\", function () {",
									"    const pagination = pm.response.json().pagination;",
									"    pm.expect(pagination.perPage).equals(40, \"The 'perPage' parameter must be 40\");",
									"    pm.expect(pagination.totalEntries).to.be.gte(2, \"The 'totalEntries' parameter must be at least 2\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype?sites=invalid-site,default&per_page=40",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							],
							"query": [
								{
									"key": "sites",
									"value": "invalid-site,default"
								},
								{
									"key": "per_page",
									"value": "40"
								}
							]
						},
						"description": "Returns all the Content Types living in a non-existing site and the Defaut site, which must return only the types living in the Default site."
					},
					"response": []
				}
			],
			"description": "These requests allow you to verify that dotCMS can retrieve a filtered paginated list of Content Types from a specific list of Sites only, and not from the whole repository. You can use both the Site's Identifier, or its Key -- aka, Site Name.\n\nThis suite is testing both the existing per-Site Endpoint -- flagged with **`(Legacy)`** -- and the new multi-site parameter."
		},
		{
			"name": "Test detail page",
			"item": [
				{
					"name": "Test update detail page with id and URI",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Storing page data for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"pageDetailSiteId\", jsonData.entity.identifier);",
											"    pm.collectionVariables.set(\"pageDetailSiteName\", jsonData.entity.siteName);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"page.detail.host.com.{{$timestamp}}\",\n    \"variables\":[]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create test Page1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Storing page id and path for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"pageDetailPageId1\", jsonData.entity.identifier);",
											"    pm.collectionVariables.set(\"pageDetailPageInode1\", jsonData.entity.inode);",
											"    pm.collectionVariables.set(\"pageDetailPageURL1\", jsonData.entity.url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"contentlet\":{\n\t\t\"stName\": \"htmlpageasset\",\n\t\t\"title\": \"Page1 {{$timestamp}}\",\n        \"url\": \"page1-{{$timestamp}}\",\n        \"friendlyName\":\"page1-{{$timestamp}}\",\n        \"template\": \"SYSTEM_TEMPLATE\",\n        \"sortOrder\": \"0\",\n        \"cachettl\": \"100\",\n        \"hostFolder\":\"{{pageDetailSiteId}}\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create test Page2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Storing page id and path for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"pageDetailPageId2\", jsonData.entity.identifier);",
											"    pm.collectionVariables.set(\"pageDetailPageInode2\", jsonData.entity.inode);",
											"    pm.collectionVariables.set(\"pageDetailPageURL2\", jsonData.entity.url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"contentlet\":{\n\t\t\"stName\": \"htmlpageasset\",\n\t\t\"title\": \"Pag2 {{$timestamp}}\",\n        \"url\": \"page2-{{$timestamp}}\",\n        \"friendlyName\":\"page2-{{$timestamp}}\",\n        \"template\": \"SYSTEM_TEMPLATE\",\n        \"sortOrder\": \"0\",\n        \"cachettl\": \"100\",\n        \"hostFolder\":\"{{pageDetailSiteId}}\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ContentType with page detail id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Storing content type id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
											"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
											"});",
											"",
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId1\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL1\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity[0].detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity[0].detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"detailPage\": \"{{pageDetailPageId1}}\",\n    \"urlMapPattern\" : \"/{name}\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId1\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL1\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
							},
							"response": []
						},
						{
							"name": "Update Content Type with page detail with URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId2\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL2\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"detailPage\": \"//{{pageDetailSiteName}}{{pageDetailPageURL2}}\",\n    \"urlMapPattern\" : \"/{name}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId2\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL2\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
							},
							"response": []
						},
						{
							"name": "Update Content Type with page detail id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId1\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL1\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"detailPage\": \"{{pageDetailPageId1}}\",\n    \"urlMapPattern\" : \"/{name}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId1\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL1\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
							},
							"response": []
						},
						{
							"name": "Update Content Type with page detail with URI Again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId2\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL2\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"detailPage\": \"//{{pageDetailSiteName}}{{pageDetailPageURL2}}\",\n    \"urlMapPattern\" : \"/{name}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId2\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL2\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
							},
							"response": []
						},
						{
							"name": "Update Content Type removing page detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).not.have.property('detailPage');",
											"    pm.expect(jsonData).not.have.property('detailPagePath');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"urlMapPattern\" : \"/{name}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).not.have.property('detailPage');",
											"    pm.expect(jsonData).not.have.property('detailPagePath');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
							},
							"response": []
						},
						{
							"name": "Archive Test Page1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors must be present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{serverURL}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/ARCHIVE?inode={{pageDetailPageInode1}}&identifier={{pageDetailPageId1}}&indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"ARCHIVE"
									],
									"query": [
										{
											"key": "inode",
											"value": "{{pageDetailPageInode1}}"
										},
										{
											"key": "identifier",
											"value": "{{pageDetailPageId1}}"
										},
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Archive Test Page2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors must be present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{serverURL}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/ARCHIVE?inode={{pageDetailPageInode2}}&identifier={{pageDetailPageId2}}&indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"ARCHIVE"
									],
									"query": [
										{
											"key": "inode",
											"value": "{{pageDetailPageInode2}}"
										},
										{
											"key": "identifier",
											"value": "{{pageDetailPageId2}}"
										},
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Test Page1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors must be present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{serverURL}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/DELETE?inode={{pageDetailPageInode1}}&identifier={{pageDetailPageId1}}&indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"DELETE"
									],
									"query": [
										{
											"key": "inode",
											"value": "{{pageDetailPageInode1}}"
										},
										{
											"key": "identifier",
											"value": "{{pageDetailPageId1}}"
										},
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Test Page2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors must be present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{serverURL}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/DELETE?inode={{pageDetailPageInode2}}&identifier={{pageDetailPageId2}}&indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"DELETE"
									],
									"query": [
										{
											"key": "inode",
											"value": "{{pageDetailPageInode2}}"
										},
										{
											"key": "identifier",
											"value": "{{pageDetailPageId2}}"
										},
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response entity contains 'deleted'\", function () {",
											"  pm.expect(pm.response.json().entity).to.include(\"deleted\");",
											"});",
											"",
											"pm.test(\"Errors array is empty\", function () {",
											"  pm.expect(pm.response.json().errors).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID.\nExpect that code is 200.\nExpect content type is deleted successfully."
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Entity archived property is true\", function () {",
											"    var siteId= pm.collectionVariables.get(\"pageDetailSiteId\")",
											"    pm.expect(pm.response.json().entity.identifier).contains(siteId);",
											"    pm.expect(pm.response.json().entity.archived).to.be.true;",
											"});",
											"",
											"pm.test(\"Errors array is empty\", function () {",
											"  pm.expect(pm.response.json().errors).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{pageDetailSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{pageDetailSiteId}}",
										"_archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Errors array is empty\", function () {",
											"  pm.expect(pm.response.json().errors).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{pageDetailSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{pageDetailSiteId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The `detailPage` attribute supports id and URI for updates, these tests validate both cases are working as expected.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Test create content type with detailPage as URI",
					"item": [
						{
							"name": "Create Test Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Storing page data for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"pageDetailSiteId\", jsonData.entity.identifier);",
											"    pm.collectionVariables.set(\"pageDetailSiteName\", jsonData.entity.siteName);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"siteName\":\"page.detail.host.com.{{$timestamp}}\",\n    \"variables\":[]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/site",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create test Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Storing page id and path for subsequent tests\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"pageDetailPageId1\", jsonData.entity.identifier);",
											"    pm.collectionVariables.set(\"pageDetailPageInode1\", jsonData.entity.inode);",
											"    pm.collectionVariables.set(\"pageDetailPageURL1\", jsonData.entity.url);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"contentlet\":{\n\t\t\"stName\": \"htmlpageasset\",\n\t\t\"title\": \"Page1 {{$timestamp}}\",\n        \"url\": \"page1-{{$timestamp}}\",\n        \"friendlyName\":\"page1-{{$timestamp}}\",\n        \"template\": \"SYSTEM_TEMPLATE\",\n        \"sortOrder\": \"0\",\n        \"cachettl\": \"100\",\n        \"hostFolder\":\"{{pageDetailSiteId}}\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create ContentType with page detail as URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Storing content type id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
											"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
											"});",
											"",
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId1\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL1\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity[0].detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity[0].detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"detailPage\": \"//{{pageDetailSiteName}}{{pageDetailPageURL1}}\",\n    \"urlMapPattern\" : \"/{name}\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
							},
							"response": []
						},
						{
							"name": "Try to create a page detail with non existing URI",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Correct response message\", function () {",
											"    pm.expect(pm.response.json().message).to.include('Missing required information when creating Content Type(s):');",
											"});",
											"",
											"pm.collectionVariables.set(\"skipPreResquest\", false); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"skipPreResquest\", true); "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"detailPage\": \"//{{pageDetailSiteName}}11{{pageDetailPageURL1}}\",\n    \"urlMapPattern\" : \"/{name}\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
							},
							"response": []
						},
						{
							"name": "Try to create ContentType with page detail as URI without credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											"",
											"pm.test(\"Response content type is text/plain\", function () {",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");",
											"});",
											"",
											"pm.test(\"Check if the response is invalid\", function () {",
											"  pm.expect(pm.response.text()).to.include(\"Invalid User\");",
											"});",
											"",
											"",
											"pm.collectionVariables.set(\"skipPreResquest\", false);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"serverURL\") + \"/api/v1/logout\",",
											"    method: 'GET'",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.log('Logout failed:', err);",
											"    } else {",
											"        console.log('Logout successful, cookies should be cleared.');",
											"    }",
											"});",
											"",
											"pm.collectionVariables.set(\"skipPreResquest\", true);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"detailPage\": \"//{{pageDetailSiteName}}{{pageDetailPageURL1}}\",\n    \"urlMapPattern\" : \"/{name}\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"",
											"    var pageId = pm.collectionVariables.get(\"pageDetailPageId1\");",
											"    var siteName = pm.collectionVariables.get(\"pageDetailSiteName\");",
											"    var pageURL = pm.collectionVariables.get(\"pageDetailPageURL1\");",
											"",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.entity.detailPage).to.eql(pageId);",
											"    pm.expect(jsonData.entity.detailPagePath).to.eql(\"//\"+siteName+pageURL);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
							},
							"response": []
						},
						{
							"name": "Update Content Type removing page detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).not.have.property('detailPage');",
											"    pm.expect(jsonData).not.have.property('detailPagePath');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"sortOrder\": 3,\n    \"urlMapPattern\" : \"/{name}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Check detail page\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).not.have.property('detailPage');",
											"    pm.expect(jsonData).not.have.property('detailPagePath');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID. \nExpect that code is 200.\nExpect that the new content type properties (icon and sortOrder) are returned."
							},
							"response": []
						},
						{
							"name": "Archive Test Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors must be present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{serverURL}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/ARCHIVE?inode={{pageDetailPageInode1}}&identifier={{pageDetailPageId1}}&indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"ARCHIVE"
									],
									"query": [
										{
											"key": "inode",
											"value": "{{pageDetailPageInode1}}"
										},
										{
											"key": "identifier",
											"value": "{{pageDetailPageId1}}"
										},
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Test Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"No errors must be present\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Origin",
										"value": "{{serverURL}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/DELETE?inode={{pageDetailPageInode1}}&identifier={{pageDetailPageId1}}&indexPolicy=WAIT_FOR",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"DELETE"
									],
									"query": [
										{
											"key": "inode",
											"value": "{{pageDetailPageInode1}}"
										},
										{
											"key": "identifier",
											"value": "{{pageDetailPageId1}}"
										},
										{
											"key": "indexPolicy",
											"value": "WAIT_FOR"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Given a content type ID.\nExpect that code is 200.\nExpect content type is deleted successfully."
							},
							"response": []
						},
						{
							"name": "Archive Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Entity archived property is true\", function () {",
											"    var siteId= pm.collectionVariables.get(\"pageDetailSiteId\")",
											"    pm.expect(pm.response.json().entity.identifier).contains(siteId);",
											"    pm.expect(pm.response.json().entity.archived).to.be.true;",
											"});",
											"",
											"pm.test(\"Errors array is empty\", function () {",
											"  pm.expect(pm.response.json().errors).to.be.an('array').that.is.empty;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{pageDetailSiteId}}/_archive",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{pageDetailSiteId}}",
										"_archive"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Site",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Errors array is empty\", function () {",
											"  pm.expect(pm.response.json().errors).to.be.an('array').that.is.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/site/{{pageDetailSiteId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"site",
										"{{pageDetailSiteId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "The `detailPage` attribute supports id and URI for updates, these tests validate both cases are working as expected.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									"skipPreResquest = pm.collectionVariables.get(\"skipPreResquest\");",
									"",
									"if (!skipPreResquest){",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"}"
								]
							}
						}
					]
				}
			],
			"description": "when specifying a detail page for a url mapped page, a user should be able to specify a path and not rely on an id, e.g. //demo.dotcms.com/blogs/detail-page",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Test don't relying on id",
			"item": [
				{
					"name": "Content Type",
					"item": [
						{
							"name": "Creation without id",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type without a content type id in the body."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Searched for a content type by id validating the content type was created."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Cleanup"
									},
									"response": []
								}
							],
							"description": "This test tries to create a content type without provide a content type id in the body, this is the most common escenario creating a content type."
						},
						{
							"name": "Creation with non existing id",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"123ec8e74bc0fd62172507{{$timestamp}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type using in the body a non existing content type id."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Searched for a content type by id validating the content type was created."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Cleanup"
									},
									"response": []
								}
							],
							"description": "This test creates a content type with a not existing id in the body"
						},
						{
							"name": "Multiple update permutations",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"    pm.collectionVariables.set(\"contentTypeField1Id\", jsonData.entity[0].fields[2].id);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Simple content type creation to set up the test data."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Searched for a content type by id validating the content type was created."
									},
									"response": []
								},
								{
									"name": "Update Content Type without id in body and variable in body but existing id in path param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeVariable = pm.collectionVariables.get(\"contentTypeVariable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.id).to.eql(contentTypeId);",
													"    pm.expect(jsonData.entity.variable).to.eql(contentTypeVariable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type without an id and variable in the body but with a valid content type id as path param."
									},
									"response": []
								},
								{
									"name": "Update Content Type without id in body and variable in body but existing variable in path param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeVariable = pm.collectionVariables.get(\"contentTypeVariable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.id).to.eql(contentTypeId);",
													"    pm.expect(jsonData.entity.variable).to.eql(contentTypeVariable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeVariable}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeVariable}}"
											]
										},
										"description": "Updates a content type without an id and variable in the body but with a valid content type id as path param."
									},
									"response": []
								},
								{
									"name": "Update Content Type without id in body and variable in body and non existing id in path param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 404 Not found\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/does-not-exist",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"does-not-exist"
											]
										},
										"description": "Updates a content type without an id and variable in the body and without a valid content type id as path param."
									},
									"response": []
								},
								{
									"name": "Update Content Type with existing ids",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeVariable = pm.collectionVariables.get(\"contentTypeVariable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.id).to.eql(contentTypeId);",
													"    pm.expect(jsonData.entity.variable).to.eql(contentTypeVariable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type with valid ids and variable name."
									},
									"response": []
								},
								{
									"name": "Update Content Type with existing id and variable in body but non existing id in path param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeVariable = pm.collectionVariables.get(\"contentTypeVariable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.id).to.eql(contentTypeId);",
													"    pm.expect(jsonData.entity.variable).to.eql(contentTypeVariable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/does-not-exist",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"does-not-exist"
											]
										},
										"description": "Updates a content type resolving the content type using the data in the body as the path param id does not exist."
									},
									"response": []
								},
								{
									"name": "Update Content Type with no existing id in body and not existing id in path param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeVariable = pm.collectionVariables.get(\"contentTypeVariable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.id).to.eql(contentTypeId);",
													"    pm.expect(jsonData.entity.variable).to.eql(contentTypeVariable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"does-not-exist\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/does-not-exist",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"does-not-exist"
											]
										},
										"description": "Updates a content type resolving the content type using the id and variable in the body as the path param id does not exist.  \nIn this test the id does not exist but the variable does."
									},
									"response": []
								},
								{
									"name": "Update Content Type without id in body and not existing id in path param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeVariable = pm.collectionVariables.get(\"contentTypeVariable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.id).to.eql(contentTypeId);",
													"    pm.expect(jsonData.entity.variable).to.eql(contentTypeVariable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/does-not-exist",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"does-not-exist"
											]
										},
										"description": "Updates a content type resolving the content type using variable in the body as the path param id does not exist.  \nIn this test the id in the body is not set, so the variable should be used."
									},
									"response": []
								},
								{
									"name": "Update Content Type with not existing variable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeVariable = pm.collectionVariables.get(\"contentTypeVariable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.id).to.eql(contentTypeId);",
													"    pm.expect(jsonData.entity.variable).to.eql(contentTypeVariable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"doesnotexist\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/does-not-exist",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"does-not-exist"
											]
										},
										"description": "Updates a content type resolving the content type using the id and variable in the body as the path param id does not exist.  \nIn this test the variable in the body does not exist."
									},
									"response": []
								},
								{
									"name": "Update Content Type with not existing id and variable and path param",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"does-not-exist\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"doesnotexist\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/does-not-exist",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"does-not-exist"
											]
										},
										"description": "Given a content type ID and a payload containing content type properties.\nExpect that code is 200.\nExpect content type is updated without issues.\nExpect that the new properties (icon and sortOrder) are updated with the new values."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Cleanup"
									},
									"response": []
								}
							],
							"description": "On this set of tests we are going to test multiple updates permutations."
						}
					],
					"description": "In this folder we test different scenarios for handling the Content Type where we validate cases in order to not always rely on the Content Type ID."
				},
				{
					"name": "Fields",
					"item": [
						{
							"name": "Creation without id",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type and field without a field id or content type id in the field."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Validates the content type and field were created as expected."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Cleanup."
									},
									"response": []
								}
							],
							"description": "This test tries to create a content type and field without provide a field ID in the body, this is the most common escenario creating a content type."
						},
						{
							"name": "Creation with non existing id",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"",
													"    pm.collectionVariables.set(\"contentTypeField1Id\", jsonData.entity[0].fields[2].id);",
													"    pm.collectionVariables.set(\"contentTypeField1Variable\", jsonData.entity[0].fields[2].variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"123ec8e74bc0fd62172507{{$timestamp}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a field using a non existing field id."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Validates the content type and field were created as expected."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Cleanup"
									},
									"response": []
								}
							],
							"description": "This test creates the Content Type with a field with a not existing field id in the body."
						},
						{
							"name": "Multiple update permutations",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"    pm.collectionVariables.set(\"contentTypeField1Id\", jsonData.entity[0].fields[2].id);",
													"    pm.collectionVariables.set(\"contentTypeField1Variable\", jsonData.entity[0].fields[2].variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Simple creation to sep up the data for the update tests."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Validates the content type and field were created as expected."
									},
									"response": []
								},
								{
									"name": "Update field with no variable name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates the field with no variable name."
									},
									"response": []
								},
								{
									"name": "Update field with no content type id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeId = pm.collectionVariables.get(\"contentTypeId\");",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"    pm.expect(jsonData.entity.fields[2].contentTypeId).to.eql(contentTypeId);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates the fields with no content type id in the fields."
									},
									"response": []
								},
								{
									"name": "Update field with content type id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates the fields with the content type id in the fields."
									},
									"response": []
								},
								{
									"name": "Update field with existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a field using an existing field id."
									},
									"response": []
								},
								{
									"name": "Update field with no existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"does-not-exist\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeVariable}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeVariable}}"
											]
										},
										"description": "Updates the field with a non existing field id but existing field variable name."
									},
									"response": []
								},
								{
									"name": "Update field without id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Check response\", function () {",
													"",
													"    var contentTypeField1Id = pm.collectionVariables.get(\"contentTypeField1Id\");",
													"    var contentTypeField1Variable = pm.collectionVariables.get(\"contentTypeField1Variable\");",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.entity.fields[2].id).to.eql(contentTypeField1Id);",
													"    pm.expect(jsonData.entity.fields[2].variable).to.eql(contentTypeField1Variable);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeVariable}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeVariable}}"
											]
										},
										"description": "Updates a field without a field id in the body but with a valid variable name."
									},
									"response": []
								},
								{
									"name": "Update field without id and variable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeVariable}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeVariable}}"
											]
										},
										"description": "Updates a content type with a field without a field id and field variable in the body, as there is not data to use to identify the field, a new field will be created."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Cleanup"
									},
									"response": []
								}
							]
						}
					],
					"description": "In this folder we test different scenarios for handling the Content Type fields where we validate cases in order to not always rely on the Content Type field ID."
				}
			],
			"description": "When saving content type and fields, we don't need to rely entirely on ids, if the id does not exist or is not provided, we should use variables as the key.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Test Workflows",
			"item": [
				{
					"name": "Simple workflows array",
					"item": [
						{
							"name": "Creation",
							"item": [
								{
									"name": "Create Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing workflow data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"schemeId\", jsonData.entity.id);",
													"    pm.collectionVariables.set(\"schemeName\", jsonData.entity.name);",
													"    pm.collectionVariables.set(\"schemeVariableName\", jsonData.entity.variableName);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"Test Schema {{$timestamp}}\", \"schemeDescription\": \"Test sechema\", \"schemeArchived\": \"false\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes"
											]
										},
										"description": "Creates a new test scheme"
									},
									"response": []
								},
								{
									"name": "Create ContentType with workflow id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type using a workflow id."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ContentType with workflow variable name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"systemworkflow\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type using a workflow variable name."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ContentType with workflow variable name and id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var testSchemeId = pm.collectionVariables.get(\"schemeId\");",
													"    var testSchemeVariableName = pm.collectionVariables.get(\"schemeVariableName\");",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    workflows = workflows.sort(compareBy);",
													"    pm.expect(2).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"    pm.expect(workflows[1].id).to.eql(testSchemeId);",
													"    pm.expect(workflows[1].variableName).to.eql(testSchemeVariableName);",
													"});",
													"",
													"function compareBy(a, b) {",
													"  if (a.variableName < b.variableName) { return -1; }",
													"  if (a.variableName > b.variableName) { return  1; }",
													"  return 0;",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"{{schemeId}}\",\"systemworkflow\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type using a workflow id and a workflow variable name."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ContentType with wrong workflow #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"doesNotExist\",\"systemworkflow\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow is used."
									},
									"response": []
								},
								{
									"name": "Create ContentType with wrong workflow #2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"doesNotExist\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow is used."
									},
									"response": []
								},
								{
									"name": "Archive Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"{{schemeName}}\", \"schemeArchived\": \"true\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										},
										"description": "\n### Update Workflow Scheme\n\nUpdates an existing workflow scheme.\n\n#### Request Body\n- `schemeName` (string, optional): The name of the scheme.\n- `schemeArchived` (boolean, optional): Indicates if the scheme is archived.\n\n#### Response\nThe response for this request is documented as a JSON schema.\n"
									},
									"response": []
								},
								{
									"name": "Delete Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Covering different save scenarios for saving workflows in a content type.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Create Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing workflow data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"schemeId\", jsonData.entity.id);",
													"    pm.collectionVariables.set(\"schemeName\", jsonData.entity.name);",
													"    pm.collectionVariables.set(\"schemeVariableName\", jsonData.entity.variableName);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"Test Schema {{$timestamp}}\", \"schemeDescription\": \"Test sechema\", \"schemeArchived\": \"false\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes"
											]
										},
										"description": "Creates a test scheme"
									},
									"response": []
								},
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"    pm.collectionVariables.set(\"contentTypeField1Id\", jsonData.entity[0].fields[2].id);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type using a workflow id."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Type with workflow id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type using a workflow id."
									},
									"response": []
								},
								{
									"name": "Update Content Type with workflow variable name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"systemworkflow\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type using a workflow variable name."
									},
									"response": []
								},
								{
									"name": "Update Content Type with workflow variable name and id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var testSchemeId = pm.collectionVariables.get(\"schemeId\");",
													"    var testSchemeVariableName = pm.collectionVariables.get(\"schemeVariableName\");",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity.workflows;",
													"    workflows = workflows.sort(compareBy);",
													"    pm.expect(2).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"    pm.expect(workflows[1].id).to.eql(testSchemeId);",
													"    pm.expect(workflows[1].variableName).to.eql(testSchemeVariableName);",
													"});",
													"",
													"function compareBy(a, b) {",
													"  if (a.variableName < b.variableName) { return -1; }",
													"  if (a.variableName > b.variableName) { return  1; }",
													"  return 0;",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"systemworkflow\", \"{{schemeId}}\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type using a workflow variable name and a workflow id."
									},
									"response": []
								},
								{
									"name": "Update Content Type with wrong workflow #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"systemworkflow\", \"doestNotExist\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow is used."
									},
									"response": []
								},
								{
									"name": "Update Content Type with wrong workflow #2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\":[\"doestNotExist\"]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow is used."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Archive Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"{{schemeName}}\", \"schemeArchived\": \"true\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Covering different update scenarios for saving workflows in a content type.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "The content type allows to pass a simple array of workflows ids or variables, these tests cases will cover diferent escenarios for this workflows list."
				},
				{
					"name": "Structured workflows array",
					"item": [
						{
							"name": "Creation",
							"item": [
								{
									"name": "Create Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing workflow data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"schemeId\", jsonData.entity.id);",
													"    pm.collectionVariables.set(\"schemeName\", jsonData.entity.name);",
													"    pm.collectionVariables.set(\"schemeVariableName\", jsonData.entity.variableName);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"Test Schema {{$timestamp}}\", \"schemeDescription\": \"Test sechema\", \"schemeArchived\": \"false\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes"
											]
										},
										"description": "Creates a new test scheme"
									},
									"response": []
								},
								{
									"name": "Create ContentType with workflow id and variable name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"indexed\": true,\n            \"dataType\": \"TEXT\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"listed\": true,\n            \"unique\": false,\n            \"name\": \"Name\",\n            \"variable\": \"name\",\n            \"fixed\": true\n        }\n    ],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n            \"variableName\": \"SystemWorkflow\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type specifying a workflow id and variable name."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ContentType with workflow variable name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"variableName\": \"SystemWorkflow\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type using just the workflow variable name."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ContentType with workflow id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type using just the workflow id."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ContentType with multiple workflows",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var testSchemeId = pm.collectionVariables.get(\"schemeId\");",
													"    var testSchemeVariableName = pm.collectionVariables.get(\"schemeVariableName\");",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    workflows = workflows.sort(compareBy);",
													"    pm.expect(2).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"    pm.expect(workflows[1].id).to.eql(testSchemeId);",
													"    pm.expect(workflows[1].variableName).to.eql(testSchemeVariableName);",
													"});",
													"",
													"function compareBy(a, b) {",
													"  if (a.variableName < b.variableName) { return -1; }",
													"  if (a.variableName > b.variableName) { return  1; }",
													"  return 0;",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n            \"variableName\": \"SystemWorkflow\"\n        },\n        {\n            \"id\": \"{{schemeId}}\",\n            \"variableName\": \"{{schemeVariableName}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type with multiple workflows"
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ContentType with non existing id but valid variable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bf12345\",\n            \"variableName\": \"SystemWorkflow\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type with with a workflow using a non existing id but with a valid variable name."
									},
									"response": []
								},
								{
									"name": "Create ContentType with non existing variable but valid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n            \"variableName\": \"doesNotExit\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type with with a workflow using a non existing variable but with a valid id."
									},
									"response": []
								},
								{
									"name": "Create ContentType with wrong workflow #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"doesNotExist\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow is used."
									},
									"response": []
								},
								{
									"name": "Create ContentType with wrong workflow #2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"variableName\": \"doesNotExist\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow is used."
									},
									"response": []
								},
								{
									"name": "Archive Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"{{schemeName}}\", \"schemeArchived\": \"true\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										},
										"description": "\n### Update Workflow Scheme\n\nUpdates an existing workflow scheme.\n\n#### Request Body\n- `schemeName` (string, optional): The name of the scheme.\n- `schemeArchived` (boolean, optional): Indicates if the scheme is archived.\n\n#### Response\nThe response for this request is documented as a JSON schema.\n"
									},
									"response": []
								},
								{
									"name": "Delete Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Covering different save scenarios for saving workflows in a content type.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Update",
							"item": [
								{
									"name": "Create Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing workflow data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"schemeId\", jsonData.entity.id);",
													"    pm.collectionVariables.set(\"schemeName\", jsonData.entity.name);",
													"    pm.collectionVariables.set(\"schemeVariableName\", jsonData.entity.variableName);",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"Test Schema {{$timestamp}}\", \"schemeDescription\": \"Test sechema\", \"schemeArchived\": \"false\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes"
											]
										},
										"description": "Creates a test scheme"
									},
									"response": []
								},
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Storing content type data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
													"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
													"    pm.collectionVariables.set(\"contentTypeField1Id\", jsonData.entity[0].fields[2].id);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity[0].workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$randomAlphaNumeric}}{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n            \"variableName\": \"SystemWorkflow\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										},
										"description": "Creates a content type with a workflow using an id and variable name."
									},
									"response": []
								},
								{
									"name": "Get Content Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Content Type with workflow id and variable name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n            \"variableName\": \"SystemWorkflow\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type using a workflow with id and variable name."
									},
									"response": []
								},
								{
									"name": "Update Content Type with workflow variable name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"variableName\": \"SystemWorkflow\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type using a workflow with just a variable name."
									},
									"response": []
								},
								{
									"name": "Update Content Type with workflow id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type using a workflow with just an id."
									},
									"response": []
								},
								{
									"name": "Update Content Type with with multiple workflows",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var testSchemeId = pm.collectionVariables.get(\"schemeId\");",
													"    var testSchemeVariableName = pm.collectionVariables.get(\"schemeVariableName\");",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    var workflows = jsonData.entity.workflows;",
													"    workflows = workflows.sort(compareBy);",
													"    pm.expect(2).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"    pm.expect(workflows[1].id).to.eql(testSchemeId);",
													"    pm.expect(workflows[1].variableName).to.eql(testSchemeVariableName);",
													"});",
													"",
													"function compareBy(a, b) {",
													"  if (a.variableName < b.variableName) { return -1; }",
													"  if (a.variableName > b.variableName) { return  1; }",
													"  return 0;",
													"}"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n            \"variableName\": \"SystemWorkflow\"\n        },\n        {\n            \"id\": \"{{schemeId}}\",\n            \"variableName\": \"{{schemeVariableName}}\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type with multiple workflow."
									},
									"response": []
								},
								{
									"name": "Update Content Type with non existing id but valid variable",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bf12345\",\n            \"variableName\": \"SystemWorkflow\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type with a workflow where the id is invalid but with a valid variable name."
									},
									"response": []
								},
								{
									"name": "Update Content Type with non existing variable but valid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Validate response\", function () {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    var workflows = jsonData.entity.workflows;",
													"    pm.expect(1).to.eql(workflows.length);",
													"    pm.expect(workflows[0].id).to.eql(\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\");",
													"    pm.expect(workflows[0].variableName).to.eql(\"SystemWorkflow\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n            \"variableName\": \"doesNotExit\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Updates a content type with a workflow where the id valid but with an invalid variable name."
									},
									"response": []
								},
								{
									"name": "Update Content Type with wrong workflow #1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"id\": \"doesNotExist\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow id is used."
									},
									"response": []
								},
								{
									"name": "Update Content Type with wrong workflow #2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"{{contentTypeVariable}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n            \"id\": \"{{contentTypeField1Id}}\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t],\n    \"workflow\": [\n        {\n            \"variableName\": \"doesNotExist\"\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										},
										"description": "Validates the proper error handling when a wrong workflow variable name is used."
									},
									"response": []
								},
								{
									"name": "Delete ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code should be ok 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype",
												"id",
												"{{contentTypeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Archive Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\"schemeName\": \"{{schemeName}}\", \"schemeArchived\": \"true\"}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Scheme",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 \", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												},
												{
													"key": "saveHelperData",
													"type": "any"
												},
												{
													"key": "showPassword",
													"value": false,
													"type": "boolean"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"schemes",
												"{{schemeId}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "Covering different update scenarios for saving workflows in a content type.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"description": "The content type allows to pass also a more estructured array of workflows where you can specify the id and variable for each workflow, these tests cases will cover diferent escenarios for this workflows list."
				}
			],
			"description": "Testing the diferent scenarios for saving workflows in a Content Type",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Layout fields",
			"item": [
				{
					"name": "Create",
					"item": [
						{
							"name": "Create ContentType without layout fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Storing content type id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
											"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity[0].fields;",
											"    pm.expect(3).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity[0].fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Test to validate the layout fields are created even if not layout fields are sent."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(3).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Validates the content type and fields were created as expected."
							},
							"response": []
						},
						{
							"name": "Delete ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Cleanup"
							},
							"response": []
						},
						{
							"name": "Create ContentType with layout fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Storing content type id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
											"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity[0].fields;",
											"    pm.expect(3).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity[0].fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"testContentType{{$timestamp}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fixed\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name\"\n        }\n    ],\n    \"workflow\": [\n        \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n    ]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Test to validate the layout fields are respected when sent in the request."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(3).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Validates the content type and fields were created as expected."
							},
							"response": []
						},
						{
							"name": "Delete ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Cleanup"
							},
							"response": []
						},
						{
							"name": "Create ContentType with wrong layout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Storing content type id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
											"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity[0].fields;",
											"    pm.expect(4).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity[0].fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"testContentType{{$timestamp}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 10,\n            \"unique\": false\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name\"\n        }\n    ],\n    \"workflow\": [\n        \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n    ]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Test to validate the layout is fixed even if the layout in the body is wrong."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(4).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Validates the content type and fields were created as expected."
							},
							"response": []
						},
						{
							"name": "Delete ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Cleanup"
							},
							"response": []
						}
					],
					"description": "Folder to encapsulate multiple tests to validate the proper creation and handling of layout fields."
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Create ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Storing content type id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"contentTypeId\", jsonData.entity[0].id);",
											"    pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
											"    pm.collectionVariables.set(\"contentTypeField1Id\", jsonData.entity[0].fields[0].id);",
											"    pm.collectionVariables.set(\"contentTypeField1Variable\", jsonData.entity[0].fields[0].variable);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Test Content Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"Test Content Type\",\n\t\"variable\": \"testContentType{{$timestamp}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n    \"icon\": \"inventory\",\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": false\n\t\t}\n\t],\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Simple creation to sep up the data for the update tests."
							},
							"response": []
						},
						{
							"name": "Get Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(3).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Validates the content type and fields were created as expected."
							},
							"response": []
						},
						{
							"name": "Update fields exceeding maximum columns",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(11).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[4].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[5].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[6].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[7].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[8].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[9].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[10].clazz);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"{{contentTypeVariable}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"rowField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"columnField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name1\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field2\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"columnField2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name2\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 4,\n            \"unique\": false,\n            \"variable\": \"name2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field3\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 5,\n            \"unique\": false,\n            \"variable\": \"columnField3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name3\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 6,\n            \"unique\": false,\n            \"variable\": \"name3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field4\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 7,\n            \"unique\": false,\n            \"variable\": \"columnField4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name4\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 8,\n            \"unique\": false,\n            \"variable\": \"name4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field5\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 9,\n            \"unique\": false,\n            \"variable\": \"columnField5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name5\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 10,\n            \"unique\": false,\n            \"variable\": \"name5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field6\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 11,\n            \"unique\": false,\n            \"variable\": \"columnField6\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name6\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 12,\n            \"unique\": false,\n            \"variable\": \"name6\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Updates the fields exceeding maximum ammounts of columns per row."
							},
							"response": []
						},
						{
							"name": "Update fields exceeding maximum columns with multiple rows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(22).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[4].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[5].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[6].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[7].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[8].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[9].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[10].clazz);",
											"",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[11].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[12].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[13].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[14].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[15].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[16].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[17].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[18].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[19].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[20].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[21].clazz);    ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"{{contentTypeVariable}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"rowField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"columnField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name1\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field2\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"columnField2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name2\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 4,\n            \"unique\": false,\n            \"variable\": \"name2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field3\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 5,\n            \"unique\": false,\n            \"variable\": \"columnField3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name3\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 6,\n            \"unique\": false,\n            \"variable\": \"name3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field4\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 7,\n            \"unique\": false,\n            \"variable\": \"columnField4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name4\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 8,\n            \"unique\": false,\n            \"variable\": \"name4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field5\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 9,\n            \"unique\": false,\n            \"variable\": \"columnField5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name5\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 10,\n            \"unique\": false,\n            \"variable\": \"name5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field6\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 11,\n            \"unique\": false,\n            \"variable\": \"columnField6\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name6\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 12,\n            \"unique\": false,\n            \"variable\": \"name6\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field2\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 13,\n            \"unique\": false,\n            \"variable\": \"rowField2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field11\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 14,\n            \"unique\": false,\n            \"variable\": \"columnField11\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name11\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 15,\n            \"unique\": false,\n            \"variable\": \"name11\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field22\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 16,\n            \"unique\": false,\n            \"variable\": \"columnField22\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name22\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 17,\n            \"unique\": false,\n            \"variable\": \"name22\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field33\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 18,\n            \"unique\": false,\n            \"variable\": \"columnField33\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name33\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 19,\n            \"unique\": false,\n            \"variable\": \"name33\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field44\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 20,\n            \"unique\": false,\n            \"variable\": \"columnField44\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name44\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 21,\n            \"unique\": false,\n            \"variable\": \"name44\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field55\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 22,\n            \"unique\": false,\n            \"variable\": \"columnField55\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name55\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 23,\n            \"unique\": false,\n            \"variable\": \"name55\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field66\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 24,\n            \"unique\": false,\n            \"variable\": \"columnField66\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name66\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 25,\n            \"unique\": false,\n            \"variable\": \"name66\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Updates the fields exceeding maximum ammounts of columns per row."
							},
							"response": []
						},
						{
							"name": "Update fields validating order is respected",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(11).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields type order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[4].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[5].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[6].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[7].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[8].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[9].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[10].clazz);",
											"});",
											"",
											"pm.test(\"Validate fields order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"rowField1\").to.eql(fields[0].variable);",
											"    pm.expect(\"columnField1\").to.eql(fields[1].variable);",
											"    pm.expect(\"name1\").to.eql(fields[2].variable);",
											"    pm.expect(\"columnField2\").to.eql(fields[3].variable);",
											"    pm.expect(\"name2\").to.eql(fields[4].variable);",
											"    pm.expect(\"columnField3\").to.eql(fields[5].variable);",
											"    pm.expect(\"name3\").to.eql(fields[6].variable);",
											"    pm.expect(\"columnField4\").to.eql(fields[7].variable);",
											"    pm.expect(\"name4\").to.eql(fields[8].variable);",
											"    pm.expect(\"name5\").to.eql(fields[9].variable);",
											"    pm.expect(\"name6\").to.eql(fields[10].variable);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"{{contentTypeVariable}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"rowField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"columnField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name1\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field2\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"columnField2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name2\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 4,\n            \"unique\": false,\n            \"variable\": \"name2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field3\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 5,\n            \"unique\": false,\n            \"variable\": \"columnField3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name3\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 6,\n            \"unique\": false,\n            \"variable\": \"name3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field4\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 7,\n            \"unique\": false,\n            \"variable\": \"columnField4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name4\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 8,\n            \"unique\": false,\n            \"variable\": \"name4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name5\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 9,\n            \"unique\": false,\n            \"variable\": \"name5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name6\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 10,\n            \"unique\": false,\n            \"variable\": \"name6\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Updates the fields validating the given order is respected."
							},
							"response": []
						},
						{
							"name": "Update fields changing order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(11).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields type order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[4].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[5].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[6].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[7].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[8].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[9].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[10].clazz);",
											"});",
											"",
											"pm.test(\"Validate fields order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"rowField1\").to.eql(fields[0].variable);",
											"    pm.expect(\"columnField1\").to.eql(fields[1].variable);",
											"    pm.expect(\"name1\").to.eql(fields[2].variable);",
											"    pm.expect(\"columnField2\").to.eql(fields[3].variable);",
											"    pm.expect(\"name2\").to.eql(fields[4].variable);",
											"    pm.expect(\"columnField3\").to.eql(fields[5].variable);",
											"    pm.expect(\"name3\").to.eql(fields[6].variable);",
											"    pm.expect(\"columnField4\").to.eql(fields[7].variable);",
											"    pm.expect(\"name6\").to.eql(fields[8].variable);",
											"    pm.expect(\"name4\").to.eql(fields[9].variable);",
											"    pm.expect(\"name5\").to.eql(fields[10].variable);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"{{contentTypeVariable}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"rowField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"columnField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name1\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field2\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"columnField2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name2\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 4,\n            \"unique\": false,\n            \"variable\": \"name2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field3\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 5,\n            \"unique\": false,\n            \"variable\": \"columnField3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name3\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 6,\n            \"unique\": false,\n            \"variable\": \"name3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field4\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 7,\n            \"unique\": false,\n            \"variable\": \"columnField4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name4\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 9,\n            \"unique\": false,\n            \"variable\": \"name4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name5\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 10,\n            \"unique\": false,\n            \"variable\": \"name5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name6\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 8,\n            \"unique\": false,\n            \"variable\": \"name6\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Updates the fields changing the order of the fields"
							},
							"response": []
						},
						{
							"name": "Update fields changing order again",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(11).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields type order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[4].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[5].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[6].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[7].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[8].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[9].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[10].clazz);",
											"});",
											"",
											"pm.test(\"Validate fields order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"rowField1\").to.eql(fields[0].variable);",
											"    pm.expect(\"columnField1\").to.eql(fields[1].variable);",
											"    pm.expect(\"name1\").to.eql(fields[2].variable);",
											"    pm.expect(\"columnField2\").to.eql(fields[3].variable);",
											"    pm.expect(\"name3\").to.eql(fields[4].variable);",
											"    pm.expect(\"columnField3\").to.eql(fields[5].variable);",
											"    pm.expect(\"name2\").to.eql(fields[6].variable);",
											"    pm.expect(\"columnField4\").to.eql(fields[7].variable);",
											"    pm.expect(\"name6\").to.eql(fields[8].variable);",
											"    pm.expect(\"name4\").to.eql(fields[9].variable);",
											"    pm.expect(\"name5\").to.eql(fields[10].variable);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"{{contentTypeVariable}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"rowField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"columnField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name1\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field2\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"columnField2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name2\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 6,\n            \"unique\": false,\n            \"variable\": \"name2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field3\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 5,\n            \"unique\": false,\n            \"variable\": \"columnField3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name3\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 4,\n            \"unique\": false,\n            \"variable\": \"name3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field4\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 7,\n            \"unique\": false,\n            \"variable\": \"columnField4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name4\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 9,\n            \"unique\": false,\n            \"variable\": \"name4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name5\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 10,\n            \"unique\": false,\n            \"variable\": \"name5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name6\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 8,\n            \"unique\": false,\n            \"variable\": \"name6\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Updates the fields changing the order of the fields"
							},
							"response": []
						},
						{
							"name": "Update fields removing column",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Validate fields size\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(10).to.eql(fields.length);",
											"});",
											"",
											"pm.test(\"Validate fields type order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableRowField\").to.eql(fields[0].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[1].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[2].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[3].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[4].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableColumnField\").to.eql(fields[5].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[6].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[7].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[8].clazz);",
											"    pm.expect(\"com.dotcms.contenttype.model.field.ImmutableTextField\").to.eql(fields[9].clazz);",
											"});",
											"",
											"pm.test(\"Validate fields order\", function () {",
											"    var jsonData = pm.response.json();",
											"    var fields = jsonData.entity.fields;",
											"    pm.expect(\"rowField1\").to.eql(fields[0].variable);",
											"    pm.expect(\"columnField1\").to.eql(fields[1].variable);",
											"    pm.expect(\"name1\").to.eql(fields[2].variable);",
											"    pm.expect(\"columnField2\").to.eql(fields[3].variable);",
											"    pm.expect(\"name3\").to.eql(fields[4].variable);",
											"    pm.expect(\"columnField3\").to.eql(fields[5].variable);",
											"    pm.expect(\"name2\").to.eql(fields[6].variable);",
											"    pm.expect(\"name6\").to.eql(fields[7].variable);",
											"    pm.expect(\"name4\").to.eql(fields[8].variable);",
											"    pm.expect(\"name5\").to.eql(fields[9].variable);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n    \"id\": \"{{contentTypeId}}\",\n    \"description\": \"Test Content Type\",\n    \"defaultType\": false,\n    \"system\": false,\n    \"folder\": \"SYSTEM_FOLDER\",\n    \"name\": \"Test Content Type\",\n    \"variable\": \"{{contentTypeVariable}}\",\n    \"host\": \"SYSTEM_HOST\",\n    \"fixed\": false,\n    \"icon\": \"inventory\",\n    \"fields\": [\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Row\",\n            \"fieldTypeLabel\": \"Row\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Row Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 0,\n            \"unique\": false,\n            \"variable\": \"rowField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field1\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 1,\n            \"unique\": false,\n            \"variable\": \"columnField1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name1\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 2,\n            \"unique\": false,\n            \"variable\": \"name1\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field2\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 3,\n            \"unique\": false,\n            \"variable\": \"columnField2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name2\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 6,\n            \"unique\": false,\n            \"variable\": \"name2\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"SYSTEM\",\n            \"fieldContentTypeProperties\": [],\n            \"fieldType\": \"Column\",\n            \"fieldTypeLabel\": \"Column\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": false,\n            \"listed\": false,\n            \"name\": \"Column Field3\",\n            \"readOnly\": false,\n            \"required\": false,\n            \"searchable\": false,\n            \"sortOrder\": 5,\n            \"unique\": false,\n            \"variable\": \"columnField3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name3\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 4,\n            \"unique\": false,\n            \"variable\": \"name3\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name4\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 9,\n            \"unique\": false,\n            \"variable\": \"name4\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name5\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 10,\n            \"unique\": false,\n            \"variable\": \"name5\"\n        },\n        {\n            \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n            \"contentTypeId\": \"{{contentTypeId}}\",\n            \"dataType\": \"TEXT\",\n            \"fieldType\": \"Text\",\n            \"fieldTypeLabel\": \"Text\",\n            \"fieldVariables\": [],\n            \"fixed\": false,\n            \"forceIncludeInApi\": false,\n            \"indexed\": true,\n            \"listed\": true,\n            \"name\": \"Name6\",\n            \"readOnly\": false,\n            \"required\": true,\n            \"searchable\": true,\n            \"sortOrder\": 8,\n            \"unique\": false,\n            \"variable\": \"name6\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Updates the fields removing a column an validating the layout is correct."
							},
							"response": []
						},
						{
							"name": "Delete ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Cleanup"
							},
							"response": []
						}
					],
					"description": "Folder to encapsulate multiple tests to validate the proper update and handling of layout fields."
				}
			],
			"description": "Multiple tests validating the proper handling of layout fields when saving content types",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if (!pm.environment.get('jwt')) {",
					"    console.log(\"generating....\")",
					"    const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"    const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"    if (!pm.environment.get('jwt')) {",
					"        const username = pm.environment.get(\"user\");",
					"        const password = pm.environment.get(\"password\");",
					"        const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"        const requestOptions = {",
					"            url: apiUrl,",
					"            method: \"POST\",",
					"            header: {",
					"                \"accept\": \"*/*\",",
					"                \"content-type\": \"application/json\",",
					"                \"Authorization\": `Basic ${basicAuth}`",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    \"expirationSeconds\": 7200,",
					"                    \"userId\": \"dotcms.org.1\",",
					"                    \"network\": \"0.0.0.0/0\",",
					"                    \"claims\": {\"label\": \"postman-tests\"}",
					"                })",
					"            }",
					"        };",
					"",
					"        pm.sendRequest(requestOptions, function (err, response) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                const jwt = response.json().entity.jwt;",
					"                pm.environment.set('jwt', jwt);",
					"                console.log(jwt);",
					"            }",
					"        });",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "testDetailPagePageId1",
			"value": ""
		},
		{
			"key": "testDetailPagePageURL1",
			"value": ""
		},
		{
			"key": "testDetailPagePageId2",
			"value": ""
		},
		{
			"key": "testDetailPagePageURL2",
			"value": ""
		},
		{
			"key": "testDetailPagePageInode1",
			"value": ""
		},
		{
			"key": "testDetailPagePageInode2",
			"value": ""
		},
		{
			"key": "contentTypeID",
			"value": ""
		},
		{
			"key": "contentTypeVAR",
			"value": ""
		},
		{
			"key": "contentTypeFieldID",
			"value": ""
		},
		{
			"key": "pageDetailSiteId",
			"value": ""
		},
		{
			"key": "pageDetailSiteName",
			"value": ""
		},
		{
			"key": "contentTypeId",
			"value": ""
		},
		{
			"key": "pageDetailPageId1",
			"value": ""
		},
		{
			"key": "pageDetailPageInode1",
			"value": ""
		},
		{
			"key": "pageDetailPageURL1",
			"value": ""
		},
		{
			"key": "pageDetailPageId2",
			"value": ""
		},
		{
			"key": "pageDetailPageInode2",
			"value": ""
		},
		{
			"key": "pageDetailPageURL2",
			"value": ""
		},
		{
			"key": "contentTypeVariable",
			"value": ""
		},
		{
			"key": "contentTypeField1Id",
			"value": ""
		},
		{
			"key": "contentTypeField1Variable",
			"value": ""
		},
		{
			"key": "skipPreResquest",
			"value": ""
		}
	]
}