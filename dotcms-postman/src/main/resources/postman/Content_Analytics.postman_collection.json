{
	"info": {
		"_postman_id": "7ee5bd9d-3a24-4808-b8b6-a86214fe8b77",
		"name": "Content Analytics",
		"description": "Performs simple data validation for the Content Analytics REST Endpoint. It's very important to notice that, for the time being, the CICD instance does not start up any of the additional third-party tools required to actually run the Content Analytics feature.\n\nThis means that these test do not deal with retrieveing or saving data at all. It verifies that important/required information is present.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30436704"
	},
	"item": [
		{
			"name": "Data Query",
			"item": [
				{
					"name": "Using Simple Strings",
					"item": [
						{
							"name": "No User Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"measures\": \"count,totalSessions\",\n    \"dimensions\": \"host,whatAmI,url\",\n    \"timeDimensions\": \"createdAt,day:Last month\",\n    \"filters\": \"totalRequest gt 0,whatAmI contains PAGE||FILE\",\n    \"order\": \"count asc,createdAt asc\",\n    \"limit\": 5,\n    \"offset\": 0\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/analytics/content",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"analytics",
										"content"
									]
								}
							},
							"response": []
						},
						{
							"name": "Missing Required Parameters",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be Bad Request\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Check that minimum required parameters are NOT present\", function () {",
											"    pm.expect(pm.response.json().message).to.equal(\"The 'form' JSON data cannot be null\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/analytics/content",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"analytics",
										"content"
									]
								},
								"description": "As the error message states, the CubeJS Query should contain either measures, dimensions or timeDimensions with granularities in order to be valid."
							},
							"response": []
						},
						{
							"name": "Unsupported Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate the response status is 415",
											"pm.test(\"Response status is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"});",
											"",
											"// Validate that the response body contains the 'message' property and it is not empty",
											"pm.test(\"Response should have an error message\", function () {",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property('message').that.is.not.empty;",
											"    pm.expect(responseBody.message).to.equal('HTTP 415 Unsupported Media Type');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": {}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/analytics/content",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"analytics",
										"content"
									]
								}
							},
							"response": []
						}
					],
					"description": "This test group verifies that the Endpoint that receives simple String parameters for the Content Analytics query works as expected. This endpoint takes a JSON body with parameters such as the following:\n\n`{`\n\n`\"measures\": \"count,totalSessions\",`\n\n`\"dimensions\": \"host,whatAmI,url\",`\n\n`\"timeDimensions\": \"createdAt,day:Last month\",`\n\n`\"filters\": \"totalRequest gt 0,whatAmI contains PAGE,FILE\",`\n\n`\"order\": \"count asc,createdAt asc\",`\n\n`\"limit\": 5,`\n\n`\"offset\": 0`\n\n`}`\n\nThe schema prefix for the appropriate terms is appended automatically by the service."
				},
				{
					"name": "Using the JSON query",
					"item": [
						{
							"name": "No User Authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"HTTP Status code must be unauthorized\", function () {",
											"    pm.response.to.have.status(401);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/analytics/content/_query",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"analytics",
										"content",
										"_query"
									]
								}
							},
							"response": []
						},
						{
							"name": "No Query Form",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": {}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/analytics/content/_query",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"analytics",
										"content",
										"_query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unsupported Media Type _Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate the response status is 415",
											"pm.test(\"Response status is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"});",
											"",
											"// Validate that the response body contains the 'message' property and it is not empty",
											"pm.test(\"Response should have an error message\", function () {",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property('message').that.is.not.empty;",
											"    pm.expect(responseBody.message).to.equal('HTTP 415 Unsupported Media Type');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": {}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/analytics/content/_query",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"analytics",
										"content",
										"_query"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unsupported Media Type _Query Cube",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate the response status is 415",
											"pm.test(\"Response status is 415\", function () {",
											"    pm.response.to.have.status(415);",
											"});",
											"",
											"// Validate that the response body contains the 'message' property and it is not empty",
											"pm.test(\"Response should have an error message\", function () {",
											"    const responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property('message').that.is.not.empty;",
											"    pm.expect(responseBody.message).to.equal('HTTP 415 Unsupported Media Type');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"query\": {}\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/analytics/content/_query/cube",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"analytics",
										"content",
										"_query",
										"cube"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "No Query Form on Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/analytics/content/event",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"analytics",
								"content",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unsupported Media Type Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate the response status is 415",
									"pm.test(\"Response status is 415\", function () {",
									"    pm.response.to.have.status(415);",
									"});",
									"",
									"// Validate that the response body contains the 'message' property and it is not empty",
									"pm.test(\"Response should have an error message\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('message').that.is.not.empty;",
									"    pm.expect(responseBody.message).to.equal('HTTP 415 Unsupported Media Type');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": {}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/analytics/content/event",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"analytics",
								"content",
								"event"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code must be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"context\": {\n        \"siteKey\": \"xyz\",\n        \"sessionId\": \"abc\",\n        \"userId\": \"qwe\" \n    },\n    \"events\": [\n        {\n            \"eventType\": \"page_view\",\n            \"data\": {\n                \"page\": {\n                    \"url\": \"http://loquesea.com/index#pepito?a=b\",\n                    \"doc_encoding\": \"UTF8\",\n                    \"title\": \"This is my index page\",\n                    \"languageID\": \"23213\",\n                    \"persona\": \"ANY_PERSONA\",\n                    \"dot_path\": \"index\",\n                    \"dot_host\": \"loquesea.com\",\n                    \"doc_protocol\": \"http\",\n                    \"doc_hash\": \"pepito\",\n                    \"doc_search\": \"a=b\",\n                    \"referer\": \"referer\",\n                    \"useragent\": \"useragent=b\"\n                },\n                \"device\": {\n                    \"screenResolution\": \"1280x720\",\n                    \"language\": \"en\",\n                    \"viewportWidth\": \"1280\",\n                    \"viewportHeight\": \"720\"\n                },\n                \"utm\": {\n                    \"medium\": \"medium\",\n                    \"source\": \"source\",\n                    \"campaign\": \"campaign\",\n                    \"term\": \"term\",\n                    \"content\": \"content\"\n                }\n            }\n        },\n        {\n            \"eventType\": \"page_view\",\n            \"data\": {\n                \"page\": {\n                    \"url\": \"http://loquesea.com/another_page#pepe?c=d\",\n                    \"encoding\": \"UTF8\",\n                    \"title\": \"This is my another page\",\n                    \"languageID\": \"555555\",\n                    \"persona\": \"ANY_PERSONA_BUT_NOT_PREVIOUS_PERSONA\",\n                    \"dot_path\": \"another_page\",\n                    \"dot_host\": \"loquesea.com\",\n                    \"doc_protocol\": \"http\",\n                    \"doc_hash\": \"pepe\",\n                    \"doc_search\": \"c=d\",\n                    \"referer\": \"another_referer\",\n                    \"useragent\": \"another_useragent=b\"\n                },\n                \"device\": {\n                    \"screenResolution\": \"3840x2160\",\n                    \"language\": \"en\",\n                    \"viewportWidth\": \"3840\",\n                    \"viewportHeight\": \"2160\"\n                },\n                \"utm\": {\n                    \"medium\": \"another_medium\",\n                    \"source\": \"another_source\",\n                    \"campaign\": \"another_campaign\",\n                    \"term\": \"another_term\",\n                    \"content\": \"another_content\"\n                }\n            }\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8082/api/v1/analytics/content/event",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8082",
							"path": [
								"api",
								"v1",
								"analytics",
								"content",
								"event"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (!pm.environment.get('jwt')) {",
					"    console.log(\"generating....\")",
					"    const serverURL = pm.environment.get('serverURL'); // Get the server URL from the environment variable",
					"    const apiUrl = `${serverURL}/api/v1/apitoken`; // Construct the full API URL",
					"",
					"    if (!pm.environment.get('jwt')) {",
					"        const username = pm.environment.get(\"user\");",
					"        const password = pm.environment.get(\"password\");",
					"        const basicAuth = Buffer.from(`${username}:${password}`).toString('base64');",
					"",
					"        const requestOptions = {",
					"            url: apiUrl,",
					"            method: \"POST\",",
					"            header: {",
					"                \"accept\": \"*/*\",",
					"                \"content-type\": \"application/json\",",
					"                \"Authorization\": `Basic ${basicAuth}`",
					"            },",
					"            body: {",
					"                mode: \"raw\",",
					"                raw: JSON.stringify({",
					"                    \"expirationSeconds\": 7200,",
					"                    \"userId\": \"dotcms.org.1\",",
					"                    \"network\": \"0.0.0.0/0\",",
					"                    \"claims\": {\"label\": \"postman-tests\"}",
					"                })",
					"            }",
					"        };",
					"",
					"        pm.sendRequest(requestOptions, function (err, response) {",
					"            if (err) {",
					"                console.log(err);",
					"            } else {",
					"                const jwt = response.json().entity.jwt;",
					"                pm.environment.set('jwt', jwt);",
					"                console.log(jwt);",
					"            }",
					"        });",
					"    }",
					"}",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}