{
	"info": {
		"_postman_id": "0cc4fb1f-3947-4eb8-a7c2-65b28ff8e9e7",
		"name": "AI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11174695",
		"_collection_link": "https://codigami.postman.co/workspace/dotcms~e3711525-51bb-47dd-b4c3-2cd73fa0cecf/collection/11174695-0cc4fb1f-3947-4eb8-a7c2-65b28ff8e9e7?action=share&source=collection_link&creator=11174695"
	},
	"item": [
		{
			"name": "Generative",
			"item": [
				{
					"name": "Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Type is returned', function () {",
									"    pm.expect(jsonData.type, 'Type is \"image\"').equals('image');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/image/test",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"image",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Text is generated', function () {",
									"    pm.expect(jsonData.choices, 'Choices are included in dotAI response').not.undefined;",
									"    pm.expect(jsonData.choices, 'Choices are included in dotAI respons are not empty').not.empty;",
									"    pm.expect(jsonData.choices[0].text).contains('The FIFA World Cup in 2018 was won by the French national football team')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"Who won the FIFA World Cup in 2018?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/text/generate",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"text",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Text is generated', function () {",
									"    pm.expect(jsonData.choices, 'Choices are included in dotAI response').not.undefined;",
									"    pm.expect(jsonData.choices, 'Choices are included in dotAI respons are not empty').not.empty;",
									"    pm.expect(jsonData.choices[0].text).contains('The theory of relativity, developed by Albert Einstein, consists of')",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/text/generate?prompt=What%20is%20the%20theory%20of%20relativity%3F",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"text",
								"generate"
							],
							"query": [
								{
									"key": "prompt",
									"value": "What%20is%20the%20theory%20of%20relativity%3F"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Text without prompt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Error message is returned', function () {",
									"    pm.expect(jsonData.message, 'Error message is included in response').equals('query/prompt cannot be null');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/text/generate",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"text",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Image is generated', function () {",
									"    pm.expect(jsonData.revised_prompt, 'Field revised_prompt is included in dotAI response').not.null;",
									"    pm.expect(jsonData.url, 'Field url is included in dotAI response').not.null;",
									"    pm.expect(jsonData.tempFileName, 'Field tempFileName is included in dotAI response').not.null;",
									"    pm.expect(jsonData.tempFile, 'Field tempFile is included in dotAI response').not.null;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"Generate image of a turtle training for a marathon\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/image/generate",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"image",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Image is generated', function () {",
									"    pm.expect(jsonData.revised_prompt, 'Field revised_prompt is included in dotAI response').not.null;",
									"    pm.expect(jsonData.url, 'Field url is included in dotAI response').not.null;",
									"    pm.expect(jsonData.tempFileName, 'Field tempFileName is included in dotAI response').not.null;",
									"    pm.expect(jsonData.tempFile, 'Field tempFile is included in dotAI response').not.null;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/image/generate?prompt=Image%20of%20a%20robot%20painting%20the%20sixteen%20chapel",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"image",
								"generate"
							],
							"query": [
								{
									"key": "prompt",
									"value": "Image%20of%20a%20robot%20painting%20the%20sixteen%20chapel"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Image without prompt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Error message is returned', function () {",
									"    pm.expect(jsonData.error, 'Error message is included in response').equals('`prompt` is required');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/image/generate",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"image",
								"generate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Embeddings",
			"item": [
				{
					"name": "Delete DB",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('DB is reset', function () {",
									"    pm.expect(jsonData.created, 'DB is deleted and created').equals(true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings/db",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings",
								"db"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Type is returned', function () {",
									"    pm.expect(jsonData.type, 'Type is \"embeddings\"').equals('embeddings');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings/test",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const seoContentTypeId = jsonData.entity[0].id;",
									"pm.collectionVariables.set('seoContentTypeId', seoContentTypeId);",
									"const seoContentTypeVar = jsonData.entity[0].variable;",
									"pm.collectionVariables.set('seoContentTypeVar', seoContentTypeVar);",
									"",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"const seoIndex = parseInt(pm.collectionVariables.get('seoIndex')) || 0;",
									"const currentSeo = seos[seoIndex];",
									"if (currentSeo) {",
									"    currentSeo.seoContentTypeId = seoContentTypeId;",
									"    currentSeo.seoContentTypeVar = seoContentTypeVar;",
									"    pm.collectionVariables.set('seoText', currentSeo.text);",
									"    pm.collectionVariables.set('seos', JSON.stringify(seos, null, 2));",
									"}",
									"",
									"console.log('seoIndex', seoIndex);",
									"console.log('currentSeo', JSON.stringify(currentSeo, null, 2));",
									"",
									"postman.setNextRequest('Add Field to Content Type');",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seoIndex = parseInt(pm.collectionVariables.get('seoIndex')) || 0;",
									"",
									" if (seoIndex === 0) {",
									"    pm.collectionVariables.clear();",
									" }",
									" pm.collectionVariables.set('seoIndex', seoIndex);",
									"",
									"const initialSeos = [",
									"    {",
									"        id: 'stock-market',",
									"        text: 'The stock market has shown significant volatility over the past few months. Analysts attribute this to geopolitical tensions and economic uncertainty. Investors are advised to diversify their portfolios to mitigate risks.'",
									"    },",
									"    {",
									"        id: 'popular-novel',",
									"        text: 'J.K. Rowling\\'s \\'Harry Potter and the Sorcerer\\'s Stone\\' follows the journey of a young boy, Harry Potter, who discovers he is a wizard on his eleventh birthday. He attends Hogwarts School of Witchcraft and Wizardry, where he makes friends, learns about his past, and uncovers the truth about his parents\\' mysterious deaths.'",
									"    },",
									"    {",
									"        id: 'historical-event',",
									"        text: 'The signing of the Declaration of Independence on July 4, 1776, marked the Thirteen Colonies\\' formal separation from Great Britain. This historic document, primarily authored by Thomas Jefferson, outlined the colonies\\' grievances against the British crown and asserted their right to self-governance.'",
									"    },",
									"    {",
									"        id: 'mental-health',",
									"        text: 'Mental health awareness has become increasingly important in recent years. Experts emphasize the need for regular mental health check-ups and advocate for reducing the stigma associated with mental illnesses.'",
									"    }",
									"];",
									"",
									"const collectionSeos = pm.collectionVariables.get('seos');",
									"const seos = collectionSeos ? JSON.parse(collectionSeos) : initialSeos;",
									"pm.collectionVariables.set('seoId', seos[seoIndex].id);",
									"const seosJson = JSON.stringify(seos, null, 2);",
									"pm.collectionVariables.set('seos', seosJson);",
									"console.log('seos', seosJson);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"icon\":null,\n    \"fixed\":false,\n    \"system\":false,\n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"\",\n    \"host\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n    \"folder\":\"SYSTEM_FOLDER\",\n    \"name\":\"{{seoId}}-ContentType\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Field to Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"postman.setNextRequest('Create Contentlet');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"layout\":[\n        {\"divider\":{\n            \"clazz\":\"com.dotcms.contenttype.model.field.ImmutableRowField\",\n            \"contentTypeId\":\"{{seoContentTypeId}}\",\n            \"dataType\":\"SYSTEM\",\n            \"fieldContentTypeProperties\":[],\n            \"fieldType\":\"Row\",\n            \"fieldTypeLabel\":\"Row\",\n            \"fieldVariables\":[],\n            \"fixed\":false,\n            \"iDate\":1667572217000,\n            \"indexed\":false,\n            \"listed\":false,\n            \"modDate\":1667572217000,\n            \"name\":\"Row Field\",\n            \"readOnly\":false,\n            \"required\":false,\n            \"searchable\":false,\n            \"sortOrder\":-1,\n            \"unique\":false},\n            \"columns\":[\n                {\n                    \"columnDivider\":{\n                        \"clazz\":\"com.dotcms.contenttype.model.field.ImmutableColumnField\",\n                        \"contentTypeId\":\"{{seoContentTypeId}}\",\n                        \"dataType\":\"SYSTEM\",\n                        \"fieldContentTypeProperties\":[],\n                        \"fieldType\":\"Column\",\n                        \"fieldTypeLabel\":\"Column\",\n                        \"fieldVariables\":[],\n                        \"fixed\":false,\n                        \"iDate\":1667572217000,\n                        \"indexed\":false,\n                        \"listed\":false,\n                        \"modDate\":1667572217000,\n                        \"name\":\"Column Field\",\n                        \"readOnly\":false,\n                        \"required\":false,\n                        \"searchable\":false,\n                        \"sortOrder\":-1,\n                        \"unique\":false\n                    },\n                    \"fields\":[\n                        {\n                            \"clazz\":\"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                            \"name\":\"seo\",\n                            \"dataType\":\"TEXT\",\n                            \"regexCheck\":\"\",\n                            \"defaultValue\":\"\",\n                            \"hint\":\"\",\n                            \"required\":false,\n                            \"searchable\":false,\n                            \"indexed\":false,\n                            \"listed\":false,\n                            \"unique\":false,\n                            \"id\":null\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v3/contenttype/{{seoContentTypeId}}/fields/move",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v3",
								"contenttype",
								"{{seoContentTypeId}}",
								"fields",
								"move"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contentlet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"",
									"let seoIndex = parseInt(pm.collectionVariables.get('seoIndex')) || 0;",
									"console.log('seoIndex', seoIndex);",
									"",
									"const currentSeo = seos[seoIndex];",
									"if (currentSeo) {",
									"    if (!currentSeo.contentlets) {",
									"        currentSeo.contentlets = [];",
									"    }",
									"",
									"    const contentlet = {};",
									"    contentlet.identifier = jsonData.entity.identifier;",
									"    contentlet.inode = jsonData.entity.inode;",
									"    currentSeo.contentlets.push(contentlet);",
									"    console.log('currentSeo', JSON.stringify(currentSeo, null, 2));",
									"    pm.collectionVariables.set('seos', JSON.stringify(seos, null, 2));",
									"}",
									"",
									"seoIndex++;",
									"pm.collectionVariables.set('seoIndex', seoIndex);",
									"console.log('New seoIndex', seoIndex);",
									"let nextRequest = null;",
									"if (seoIndex < seos.length) {",
									"    console.log('Continuing with next SEO');",
									"    nextRequest = 'Create Content Type'",
									"} else {",
									"    console.log('SEO loading done');",
									"    pm.collectionVariables.set('seoIndex', null);",
									"    pm.collectionVariables.set('seoId', null);",
									"    pm.collectionVariables.set('seoContentTypeId', null);",
									"    pm.collectionVariables.set('seoContentTypeVar', null);",
									"    pm.collectionVariables.set('seoText', null);",
									"    nextRequest = 'Create Embeddings without query';",
									"}",
									"postman.setNextRequest(nextRequest);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"contentlet\" : {\n        \"title\" : \"content_{{seoId}}\",\n        \"languageId\" : 1,\n        \"stInode\": \"{{seoContentTypeId}}\",\n        \"seo\": \"{{seoText}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Embeddings without query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Error message is returned', function () {",
									"    pm.expect(jsonData.message, 'Error message is included in response').equals('query cannot be null');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Embeddings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"let seoIndex = parseInt(pm.collectionVariables.get('seoIndex')) || 0;",
									"const currentSeo = seos[seoIndex];",
									"if (currentSeo) {",
									"    if (!currentSeo.embedded) {",
									"        currentSeo.embedded = jsonData.totalToEmbed > 0;",
									"    }",
									"    ",
									"    console.log('currentSeo', JSON.stringify(currentSeo, null, 2));",
									"    pm.collectionVariables.set('seos', JSON.stringify(seos, null, 2));",
									"}",
									"",
									"pm.test('Emebeddings are created', function () {",
									"    pm.expect(jsonData.indexName, 'Index name should be \"default\"').equals('default');",
									"    pm.expect(parseInt(jsonData.timeToEmbeddings.split('ms')[0]), 'Time to embeddings must be greater than zero').greaterThan(0);",
									"    if (currentSeo.embedded) {",
									"        pm.expect(jsonData.totalToEmbed, 'Total to embed is greater than zero').greaterThan(0);",
									"    } else {",
									"        pm.expect(jsonData.totalToEmbed, 'Total to embed is greater than zero').equals(0);",
									"    }",
									"});",
									"",
									"seoIndex++;",
									"pm.collectionVariables.set('seoIndex', seoIndex);",
									"console.log('New seoIndex', seoIndex);",
									"let nextRequest = null;",
									"if (seoIndex < seos.length) {",
									"    console.log('Continuing with next SEO');",
									"    nextRequest = 'Create Embeddings';",
									"} else {",
									"    console.log('Embeddings creation done');",
									"    pm.collectionVariables.set('seoIndex', null);",
									"    pm.collectionVariables.set('seoId', null);",
									"    pm.collectionVariables.set('seoContentTypeVar', null);",
									"    pm.collectionVariables.set('seoContentTypeId', null);",
									"    pm.collectionVariables.set('seoText', null);",
									"    nextRequest = 'Count Embeddings without prompt';",
									"}",
									"postman.setNextRequest(nextRequest);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]') || 0;",
									"const seoIndex = parseInt(pm.collectionVariables.get('seoIndex')) || 0;",
									"const currentSeo = seos[seoIndex];",
									"if (currentSeo) {",
									"    pm.collectionVariables.set('seoContentTypeVar', currentSeo.seoContentTypeVar);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"+contentType:{{seoContentTypeVar}}\",\n    \"fields\": \"seo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count Embeddings without prompt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Error message is returned', function () {",
									"    pm.expect(jsonData.message).equals('query/prompt cannot be null');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings/count",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Count Embeddings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Embeddings are counted', function () {",
									"    pm.expect(jsonData.embeddingsCount, 'Embeddings count should be 2').equals(2);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seos = JSON.parse(pm.collectionVariables.get('seos'));",
									"pm.collectionVariables.set('seoContentTypeVar', seos[0].seoContentTypeVar);",
									"pm.collectionVariables.set('seoText', seos[0].text);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"{{seoText}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings/count",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings",
								"count"
							]
						}
					},
					"response": []
				},
				{
					"name": "Index Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const seos = JSON.parse(pm.collectionVariables.get('seos'));",
									"",
									"pm.test('Embeddings are counted by index', function () {",
									"    const defaultIndexCount = jsonData.indexCount['default'];",
									"    pm.expect(defaultIndexCount, 'Embeddings by index count should exist').not.undefined;",
									"    pm.expect(defaultIndexCount.contentTypes.split(',').length, 'Embeddings by index content types splitted by comma should be 4').equals(4);",
									"    pm.expect(defaultIndexCount.contents, 'Embeddings by index contents count should be 4').equals(4);",
									"    seos.forEach(seo => pm.expect(defaultIndexCount.contentTypes.includes(seo.seoContentTypeVar), 'Each seo content type should exist in response `contentTypes`').is.true);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings/indexCount",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings",
								"indexCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Embeddings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Embeddings are deleted', function () {",
									"    pm.expect(jsonData.deleted, 'Number of embeddings deleted must be greater than zero').greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seos = JSON.parse(pm.collectionVariables.get('seos'));",
									"pm.collectionVariables.set('seoContentTypeVar', seos[0].seoContentTypeVar);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"deleteQuery\": \"+contentType:{{seoContentTypeVar}}\",\n    \"indexName\": \"default\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Embeddings without delete query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Embeddings are deleted', function () {",
									"    pm.expect(jsonData.deleted, 'Number of embeddings deleted must be greater than zero').greaterThan(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seos = JSON.parse(pm.collectionVariables.get('seos'));",
									"pm.collectionVariables.set('seoContentTypeVar', seos[3].seoContentTypeVar);",
									"pm.collectionVariables.set('identifier', seos[3].contentlets[0].identifier);",
									"pm.collectionVariables.set('inode', seos[3].contentlets[0].inode);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"indexName\": \"default\",\n    \"identifier\": \"{{identifier}}\",\n    \"inode\": \"{{inode}}\",\n    \"contentType\": \"{{seoContentTypeVar}}\",\n    \"language\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/embeddings",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"embeddings"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search",
			"item": [
				{
					"name": "Test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Type is returned', function () {",
									"    pm.expect(jsonData.type, 'Type is \"search\"').equals('search');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search/test",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search",
								"test"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search without query",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 400', function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Error message is returned', function () {",
									"    pm.expect(jsonData.message, 'Error message is included in response').equals('query/prompt cannot be null');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Search return results', function () {",
									"    const seoText = pm.collectionVariables.get('seoText');",
									"    const seoContentTypeId = pm.collectionVariables.get('seoContentTypeId');",
									"    const seoContentTypeVar = pm.collectionVariables.get('seoContentTypeVar');",
									"    pm.expect(parseInt(jsonData.timeToEmbeddings.split('ms')[0]), 'Time to embeddings must be greater than zero').greaterThan(0);",
									"    pm.expect(jsonData.total, 'Total must be more than zero').greaterThan(0);",
									"    pm.expect(jsonData.query, 'Query must be kept').equals(seoText);",
									"    pm.expect(jsonData.operator, 'Operator must be kept').equals('<=>');",
									"    pm.expect(jsonData.threshold, 'Threshold must be kept').equals(0.25);",
									"    pm.expect(jsonData.dotCMSResults, 'DotCMS results must present').not.undefined;",
									"    pm.expect(jsonData.dotCMSResults.length, 'DotCMS results must not be empty').greaterThan(0);",
									"    const matchedResult = jsonData.dotCMSResults.filter(result => result.matches.find(match => match.distance === 0))[0];",
									"    pm.expect(matchedResult, 'There should be at least one match with zero distance').not.undefined;",
									"    pm.expect(matchedResult.stInode, 'Result must have the same content type id').equals(seoContentTypeId);",
									"    pm.expect(matchedResult.contentType, 'Result must have the same content type var').equals(seoContentTypeVar);",
									"    pm.expect(matchedResult.seo, 'Result must have the same SEO').equals(seoText);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('seoIndex', null);",
									"pm.collectionVariables.set('seoContentTypeVar', null);",
									"pm.collectionVariables.set('seoContentTypeId', null);",
									"pm.collectionVariables.set('seoText', null);",
									"",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"const currentSeo = seos[1];",
									"if (currentSeo) {",
									"    pm.collectionVariables.set('seoContentTypeVar', currentSeo.seoContentTypeVar);",
									"    pm.collectionVariables.set('seoContentTypeId', currentSeo.seoContentTypeId);",
									"    pm.collectionVariables.set('seoText', currentSeo.text);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"prompt\": \"{{seoText}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Search return results', function () {",
									"    const seoText = decodeURI(pm.collectionVariables.get('seoText'));",
									"    const seoContentTypeId = pm.collectionVariables.get('seoContentTypeId');",
									"    const seoContentTypeVar = pm.collectionVariables.get('seoContentTypeVar');",
									"    pm.expect(parseInt(jsonData.timeToEmbeddings.split('ms')[0]), 'Time to embeddings must be greater than zero').greaterThan(0);",
									"    pm.expect(jsonData.total, 'Total must be more than zero').greaterThan(0);",
									"    pm.expect(jsonData.query, 'Query must be kept').equals(seoText);",
									"    pm.expect(jsonData.operator, 'Operator must be kept').equals('<=>');",
									"    pm.expect(jsonData.threshold, 'Threshold must be kept').equals(0.5);",
									"    pm.expect(jsonData.dotCMSResults, 'DotCMS results must present').not.undefined;",
									"    pm.expect(jsonData.dotCMSResults.length, 'DotCMS results must not be empty').greaterThan(0);",
									"    const matchedResult = jsonData.dotCMSResults.filter(result => result.matches.find(match => match.distance === 0))[0];",
									"    pm.expect(matchedResult, 'There should be at least one match with zero distance').not.undefined;",
									"    pm.expect(matchedResult.stInode, 'Result must have the same content type id').equals(seoContentTypeId);",
									"    pm.expect(matchedResult.contentType, 'Result must have the same content type var').equals(seoContentTypeVar);",
									"    pm.expect(matchedResult.seo, 'Result must have the same SEO').equals(seoText);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"const currentSeo = seos[2];",
									"if (currentSeo) {",
									"    pm.collectionVariables.set('seoContentTypeVar', currentSeo.seoContentTypeVar);",
									"    pm.collectionVariables.set('seoContentTypeId', currentSeo.seoContentTypeId);",
									"    pm.collectionVariables.set('seoText', encodeURI(currentSeo.text));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search?query={{seoText}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search"
							],
							"query": [
								{
									"key": "query",
									"value": "{{seoText}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Related not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Error message is returned', function () {",
									"    pm.expect(jsonData.message).equals('contentlet not found');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"inode\": \"UNKNOWN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search/related",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search",
								"related"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Related by inode without fieldVar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 404', function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Error message is returned', function () {",
									"    pm.expect(jsonData.message).equals('content not found');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('seoIndex', null);",
									"pm.collectionVariables.set('seoContentTypeVar', null);",
									"pm.collectionVariables.set('seoContentTypeId', null);",
									"pm.collectionVariables.set('seoText', null);",
									"",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"const currentSeo = seos[1];",
									"if (currentSeo) {",
									"    pm.collectionVariables.set('inode', currentSeo.contentlets[0].inode);",
									"    pm.collectionVariables.set('identifier', currentSeo.contentlets[0].identifier);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"inode\": \"{{inode}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search/related",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search",
								"related"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Contentlet - Popular Novel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be ok 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"",
									"let seoIndex = 1;",
									"console.log('seoIndex', seoIndex);",
									"",
									"const currentSeo = seos[seoIndex];",
									"if (currentSeo) {",
									"    if (!currentSeo.contentlets) {",
									"        currentSeo.contentlets = [];",
									"    }",
									"",
									"    const contentlet = {};",
									"    contentlet.identifier = jsonData.entity.identifier;",
									"    contentlet.inode = jsonData.entity.inode;",
									"    currentSeo.contentlets.push(contentlet);",
									"    console.log('currentSeo', JSON.stringify(currentSeo, null, 2));",
									"    pm.collectionVariables.set('seos', JSON.stringify(seos, null, 2));",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n        \"title\": \"content_popular-novel\",\n        \"languageId\": 1,\n        \"stInode\": \"8c12f1be13fb43db771731910991e759\",\n        \"seo\": \"J.K. Rowling's 'Harry Potter and the Sorcerer's Stone' follows the journey of a young boy, Harry Potter, who discovers he is a wizard on his eleventh birthday. He attends Hogwarts School of Witchcraft and Wizardry, where he makes friends, learns about his past, and uncovers the truth about his parents' mysterious deaths.\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Related by inode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Search return results', function () {",
									"    const seoText = pm.collectionVariables.get('seoText');",
									"    const seoContentTypeId = pm.collectionVariables.get('seoContentTypeId');",
									"    const seoContentTypeVar = pm.collectionVariables.get('seoContentTypeVar');",
									"    pm.expect(parseInt(jsonData.timeToEmbeddings.split('ms')[0]), 'Time to embeddings must be greater than zero').greaterThan(0);",
									"    pm.expect(jsonData.total, 'Total must be more than zero').greaterThan(0);",
									"    pm.expect(jsonData.query, 'Query must be kept').equals(seoText);",
									"    pm.expect(jsonData.operator, 'Operator must be kept').equals('<=>');",
									"    pm.expect(jsonData.threshold, 'Threshold must be kept').equals(0.25);",
									"    pm.expect(jsonData.dotCMSResults, 'DotCMS results must present').not.undefined;",
									"    pm.expect(jsonData.dotCMSResults.length, 'DotCMS results must not be empty').greaterThan(0);",
									"    const matchedResult = jsonData.dotCMSResults.filter(result => result.matches.find(match => match.distance === 0))[0];",
									"    pm.expect(matchedResult, 'There should be at least one match with zero distance').not.undefined;",
									"    pm.expect(matchedResult.stInode, 'Result must have the same content type id').equals(seoContentTypeId);",
									"    pm.expect(matchedResult.contentType, 'Result must have the same content type var').equals(seoContentTypeVar);",
									"    pm.expect(matchedResult.seo, 'Result must have the same SEO').equals(seoText);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('seoIndex', null);",
									"pm.collectionVariables.set('seoContentTypeVar', null);",
									"pm.collectionVariables.set('seoContentTypeId', null);",
									"pm.collectionVariables.set('seoText', null);",
									"",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"const currentSeo = seos[1];",
									"if (currentSeo) {",
									"    pm.collectionVariables.set('seoContentTypeVar', currentSeo.seoContentTypeVar);",
									"    pm.collectionVariables.set('seoContentTypeId', currentSeo.seoContentTypeId);",
									"    pm.collectionVariables.set('seoText', currentSeo.text);",
									"    const contentlet = currentSeo.contentlets[1];",
									"    pm.collectionVariables.set('inode', contentlet.inode);",
									"    pm.collectionVariables.set('identifier', contentlet.identifier);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"inode\": \"{{inode}}\",\n    \"fieldVar\": \"seo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search/related",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search",
								"related"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Related by identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code should be ok 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Search return results', function () {",
									"    const seoText = pm.collectionVariables.get('seoText');",
									"    const seoContentTypeId = pm.collectionVariables.get('seoContentTypeId');",
									"    const seoContentTypeVar = pm.collectionVariables.get('seoContentTypeVar');",
									"    pm.expect(parseInt(jsonData.timeToEmbeddings.split('ms')[0]), 'Time to embeddings must be greater than zero').greaterThan(0);",
									"    pm.expect(jsonData.total, 'Total must be more than zero').greaterThan(0);",
									"    pm.expect(jsonData.query, 'Query must be kept').equals(seoText);",
									"    pm.expect(jsonData.operator, 'Operator must be kept').equals('<=>');",
									"    pm.expect(jsonData.threshold, 'Threshold must be kept').equals(0.25);",
									"    pm.expect(jsonData.dotCMSResults, 'DotCMS results must present').not.undefined;",
									"    pm.expect(jsonData.dotCMSResults.length, 'DotCMS results must not be empty').greaterThan(0);",
									"    const matchedResult = jsonData.dotCMSResults.filter(result => result.matches.find(match => match.distance === 0))[0];",
									"    pm.expect(matchedResult, 'There should be at least one match with zero distance').not.undefined;",
									"    pm.expect(matchedResult.stInode, 'Result must have the same content type id').equals(seoContentTypeId);",
									"    pm.expect(matchedResult.contentType, 'Result must have the same content type var').equals(seoContentTypeVar);",
									"    pm.expect(matchedResult.seo, 'Result must have the same SEO').equals(seoText);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set('seoIndex', null);",
									"pm.collectionVariables.set('seoContentTypeVar', null);",
									"pm.collectionVariables.set('seoContentTypeId', null);",
									"pm.collectionVariables.set('seoText', null);",
									"",
									"const seos = JSON.parse(pm.collectionVariables.get('seos') || '[]');",
									"const currentSeo = seos[1];",
									"if (currentSeo) {",
									"    pm.collectionVariables.set('seoContentTypeVar', currentSeo.seoContentTypeVar);",
									"    pm.collectionVariables.set('seoContentTypeId', currentSeo.seoContentTypeId);",
									"    pm.collectionVariables.set('seoText', currentSeo.text);",
									"    const contentlet = currentSeo.contentlets[1];",
									"    pm.collectionVariables.set('inode', contentlet.inode);",
									"    pm.collectionVariables.set('identifier', contentlet.identifier);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identifier\": \"{{identifier}}\",\n    \"fieldVar\": \"seo\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/ai/search/related",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"ai",
								"search",
								"related"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "seoIndex",
			"value": ""
		},
		{
			"key": "seoId",
			"value": ""
		},
		{
			"key": "seos",
			"value": ""
		},
		{
			"key": "seoContentTypeId",
			"value": ""
		},
		{
			"key": "seoContentTypeVar",
			"value": ""
		},
		{
			"key": "seoText",
			"value": ""
		},
		{
			"key": "identifier",
			"value": ""
		},
		{
			"key": "inode",
			"value": ""
		}
	]
}