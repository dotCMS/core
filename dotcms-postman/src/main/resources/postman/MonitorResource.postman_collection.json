{
	"info": {
		"_postman_id": "384ec7bc-86c4-4916-866d-bf6a13330f5a",
		"name": "Monitor Resource",
		"description": "@Path(\"/v1/{a:system-status|probes}\")\n\nThis REST Endpoint provides a set of probes to check the status of the different subsystems used by dotCMS. This tool is crucial for Engineering Teams to check that dotCMS is running properly.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5403727"
	},
	"item": [
		{
			"name": "System Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to validate the response schema",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"object\",",
							"    properties: {",
							"      backendHealthy: {",
							"        type: \"boolean\"",
							"      },",
							"      dotCMSHealthy: {",
							"        type: \"boolean\"",
							"      },",
							"      frontendHealthy: {",
							"        type: \"boolean\"",
							"      },",
							"      subsystems: {",
							"        type: \"object\",",
							"        properties: {",
							"          assetFSHealthy: {",
							"            type: \"boolean\"",
							"          },",
							"          cacheHealthy: {",
							"            type: \"boolean\"",
							"          },",
							"          dbSelectHealthy: {",
							"            type: \"boolean\"",
							"          },",
							"          esHealthy: {",
							"            type: \"boolean\"",
							"          },",
							"          localFSHealthy: {",
							"            type: \"boolean\"",
							"          }",
							"        },",
							"        required: [\"assetFSHealthy\", \"cacheHealthy\", \"dbSelectHealthy\", \"esHealthy\", \"localFSHealthy\"]",
							"      }",
							"    },",
							"    required: [\"backendHealthy\", \"dotCMSHealthy\", \"frontendHealthy\", \"subsystems\"]",
							"  };",
							"",
							"  var response = pm.response.json();",
							"  pm.expect(tv4.validate(response, schema)).to.be.equal(true, 'At least one status check value is not the expected one, or the JSON response has changed');",
							"});",
							"",
							"// Validate all the boolean fields looks ok (true)",
							"pm.test(\"Boolean fields in the response are true\", function () {",
							"  var responseJSON = pm.response.json();",
							"  var booleanFields = [\"backendHealthy\", \"dotCMSHealthy\", \"frontendHealthy\", \"subsystems.assetFSHealthy\", \"subsystems.cacheHealthy\", \"subsystems.dbSelectHealthy\", \"subsystems.esHealthy\", \"subsystems.localFSHealthy\"];",
							"",
							"  booleanFields.forEach(function(field) {",
							"    pm.expect(responseJSON).to.have.nested.property(field, true);",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/system-status",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"system-status"
					]
				},
				"description": "# System Status API\n\nThis API endpoint makes an HTTP GET request to retrieve the system status with extended details.\n\n## Request\n\n- Method: GET\n    \n- Endpoint: `{{serverURL}}/api/v1/system-status`\n    \n\n## Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"backendHealthy\": true,\n    \"dotCMSHealthy\": true,\n    \"frontendHealthy\": true,\n    \"subsystems\": {\n        \"assetFSHealthy\": true,\n        \"cacheHealthy\": true,\n        \"dbSelectHealthy\": true,\n        \"esHealthy\": true,\n        \"localFSHealthy\": true\n    }\n}\n\n ```\n\nThe response contains detailed information about the health status of different subsystems within the system."
			},
			"response": []
		},
		{
			"name": "Probe Startup",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response must include the expected JSON\", function () {",
							"    var responseJSON = pm.response.json();",
							"  var booleanFields = [\"backendHealthy\", \"dotCMSHealthy\", \"frontendHealthy\", \"subsystems.assetFSHealthy\", \"subsystems.cacheHealthy\", \"subsystems.dbSelectHealthy\", \"subsystems.esHealthy\", \"subsystems.localFSHealthy\"];",
							"",
							"  booleanFields.forEach(function(field) {",
							"    pm.expect(responseJSON).to.have.nested.property(field, true, \"The returned '\" + field + \"' status check must be 'true'\");",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/probes",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"probes"
					]
				},
				"description": "# Get Probes\n\nThis endpoint retrieves a list of probes from the server.\n\n## Request\n\n- Method: GET\n    \n- URL: `{{serverURL}}/api/v1/probes`\n    \n\n## Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"backendHealthy\": true,\n    \"dotCMSHealthy\": true,\n    \"frontendHealthy\": true,\n    \"subsystems\": {\n        \"assetFSHealthy\": true,\n        \"cacheHealthy\": true,\n        \"dbSelectHealthy\": true,\n        \"esHealthy\": true,\n        \"localFSHealthy\": true\n    }\n}\n\n ```\n\nThe response contains detailed information about the health status of different subsystems within the system."
			},
			"response": []
		},
		{
			"name": "Probe Ready",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response must include the expected JSON\", function () {",
							"    var responseJSON = pm.response.json();",
							"  var booleanFields = [\"backendHealthy\", \"dotCMSHealthy\", \"frontendHealthy\", \"subsystems.assetFSHealthy\", \"subsystems.cacheHealthy\", \"subsystems.dbSelectHealthy\", \"subsystems.esHealthy\", \"subsystems.localFSHealthy\"];",
							"",
							"  booleanFields.forEach(function(field) {",
							"    pm.expect(responseJSON).to.have.nested.property(field, true, \"The returned '\" + field + \"' status check must be 'true'\");",
							"  });",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/probes/ready",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"probes",
						"ready"
					]
				},
				"description": "This endpoint makes an HTTP GET request to retrieve the readiness status of a probe. The response is in the form of a JSON schema.\n\n## Response\n\n- Status: 200 OK\n    \n- Content-Type: application/json\n    \n\n``` json\n{\n    \"backendHealthy\": true,\n    \"dotCMSHealthy\": true,\n    \"frontendHealthy\": true,\n    \"subsystems\": {\n        \"assetFSHealthy\": true,\n        \"cacheHealthy\": true,\n        \"dbSelectHealthy\": true,\n        \"esHealthy\": true,\n        \"localFSHealthy\": true\n    }\n}\n\n ```\n\nThe response contains detailed information about the health status of different subsystems within the system."
			},
			"response": []
		},
		{
			"name": "Probe Alive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate a JSONError",
							"pm.test(\"Response must be null or empty\", function () {",
							"    pm.expect(pm.response.text()).to.be.oneOf([null, \"\", \"{}\"], \"The Response form this request must be an empty String or JSON object.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/probes/alive",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"probes",
						"alive"
					]
				},
				"description": "This /alive probe is lightweight - it checks if the server is up by requesting a common object from the dotCMS cache layer twice in a row. By the time a request gets here it has already run through the CMSFilter) .\n\n## Response\n\n- Status: 200 OK\n    \n- An empty String or JSON Object."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"HTTP Status code must be 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});",
					""
				]
			}
		}
	]
}