{
  "info": {
    "_postman_id": "b858a505-82a0-4a5e-be48-0e5fcffc859f",
    "name": "dotCMS",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "24818383"
  },
  "item": [
    {
      "name": "http://localhost:8080/api/v1/contenttype/basetypes",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response contains required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.all.keys('entity', 'errors', 'i18nMessagesMap', 'messages', 'pagination', 'permissions');",
              "});",
              "",
              "",
              "pm.test(\"Entity is an array and contains at least one object\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.entity).to.be.an('array').that.is.not.empty;",
              "    pm.expect(responseData.entity).to.satisfy(function(arr) {",
              "        return arr.every(item => typeof item === 'object' && item !== null);",
              "    });",
              "});",
              "",
              "pm.test(\"Validate the schema of the objects within the entity array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.entity).to.be.an('array');",
              "",
              "    responseData.entity.forEach(function(item) {",
              "        pm.expect(item).to.be.an('object');",
              "        pm.expect(item).to.have.all.keys('index', 'label', 'name', 'types');",
              "        pm.expect(item.index).to.be.a('number');",
              "        pm.expect(item.label).to.be.a('string');",
              "        pm.expect(item.name).to.be.a('string');",
              "        pm.expect(item.types).to.satisfy(function(value) {",
              "            return value === null || Array.isArray(value);",
              "        });",
              "    });",
              "});",
              ""
            ],
            "type": "text/javascript",
            "packages": {},
            "requests": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/api/v1/contenttype/basetypes",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "api",
            "v1",
            "contenttype",
            "basetypes"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Test Empty Types Parameter",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "pm.test(\"Response has valid JSON structure\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.property('entity');",
              "    pm.expect(responseData).to.have.property('errors');",
              "    pm.expect(responseData).to.have.property('pagination');",
              "});",
              "",
              "pm.test(\"Entity field is not empty and contains content types\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.entity).to.be.an('array');",
              "    pm.expect(responseData.entity).to.not.be.empty;",
              "    ",
              "    // Verify each item in entity has basic content type structure",
              "    responseData.entity.forEach(function(item) {",
              "        pm.expect(item).to.be.an('object');",
              "        pm.expect(item).to.have.property('id');",
              "        pm.expect(item).to.have.property('name');",
              "        pm.expect(item).to.have.property('variable');",
              "        pm.expect(item.name).to.be.a('string').that.is.not.empty;",
              "    });",
              "});",
              "",
              "pm.test(\"Pagination object contains expected fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData.pagination).to.be.an('object');",
              "    pm.expect(responseData.pagination).to.have.property('totalEntries');",
              "    pm.expect(responseData.pagination).to.have.property('perPage');",
              "    pm.expect(responseData.pagination).to.have.property('currentPage');",
              "    pm.expect(responseData.pagination.currentPage).to.equal(2);",
              "    pm.expect(responseData.pagination.perPage).to.equal(40);",
              "});",
              "",
              "pm.test(\"Empty types parameter behaves like no filter (regression test)\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    // Should return content types without filtering",
              "    pm.expect(responseData.entity.length).to.be.greaterThan(0);",
              "    pm.expect(responseData.pagination.totalEntries).to.be.greaterThan(0);",
              "    ",
              "    console.log('Total content types found:', responseData.pagination.totalEntries);",
              "    console.log('Content types in page 2:', responseData.entity.length);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Authorization",
            "value": "Basic {{basicAuth}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{serverURL}}/api/v1/contenttype?per_page=40&orderby=upper%28name%29&page=2&types=&direction=ASC",
          "host": [
            "{{serverURL}}"
          ],
          "path": [
            "api",
            "v1",
            "contenttype"
          ],
          "query": [
            {
              "key": "per_page",
              "value": "40"
            },
            {
              "key": "orderby",
              "value": "upper%28name%29"
            },
            {
              "key": "page",
              "value": "2"
            },
            {
              "key": "types",
              "value": ""
            },
            {
              "key": "direction",
              "value": "ASC"
            }
          ]
        },
        "description": "Test that empty types parameter behaves correctly and returns content types without filtering. This is a regression test for the fix that handles empty string values in List<String> type parameter."
      },
      "response": []
    }
  ]
}