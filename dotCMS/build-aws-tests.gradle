// -*- coding: utf-8; mode: groovy -*-


import com.amazonaws.services.ec2.AmazonEC2
import com.amazonaws.services.ec2.model.CreateTagsRequest
import com.amazonaws.services.ec2.model.DescribeInstancesRequest
import com.amazonaws.services.ec2.model.DescribeInstancesResult
import com.amazonaws.services.ec2.model.Tag
import com.amazonaws.services.rds.AmazonRDS
import com.amazonaws.services.rds.model.DescribeDBInstancesRequest
import com.amazonaws.services.rds.model.DescribeDBInstancesResult
import jp.classmethod.aws.gradle.ec2.*
import jp.classmethod.aws.gradle.rds.AmazonRDSCreateDBInstanceTask
import jp.classmethod.aws.gradle.rds.AmazonRDSDeleteDBInstanceTask
import jp.classmethod.aws.gradle.rds.AmazonRDSPluginExtension
import jp.classmethod.aws.gradle.rds.AmazonRDSWaitInstanceStatusTask

import java.nio.file.Files
import java.nio.file.Paths

buildscript {
	repositories {
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath "jp.classmethod.aws:gradle-aws-plugin:0.35"
		classpath "org.hidetake:gradle-ssh-plugin:2.7.0"
		classpath "io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE"
	}
}

fileTree("../libs/buildlibs").include('jtds-*.jar', 'mysql-conn*.jar', 'ojdbc*.jar', 'postgres*.jar', 'sqljdbc*.jar').visit( { element ->
	GroovyObject.class.classLoader.addURL(element.file.toURI().toURL());
})



apply plugin: "java"
apply plugin: "jp.classmethod.aws.s3"
apply plugin: "jp.classmethod.aws.ec2"
apply plugin: "jp.classmethod.aws.rds"
apply plugin: "org.hidetake.ssh"


dependencies {
    compile 'com.amazonaws:aws-java-sdk-s3'
}


if (hasProperty('database') == false) { throw new GradleException( "Required project property \'database\' was not set" ) }
if (hasProperty('branch') == false) { throw new GradleException( "Required project property \'branch\' was not set" ) }
if (hasProperty('commit') == false) { ext.commit = "" }
if (hasProperty('provisioned') == false) { ext.provisioned = "false" }

if (hasProperty('propertiesFile') == false) { ext.propertiesFile = "build-aws-tests.properties" }
if (hasProperty('scriptFile') == false) { ext.scriptFile = "build-aws-tests.sh" }
if (hasProperty('outputFile') == false) { ext.outputFile = "build-aws-tests.zip" }

Properties properties = new Properties()
properties.load(Files.newInputStream(Paths.get(project.propertiesFile)))

if (hasProperty('keyFile') == false) { ext.keyFile = properties.getProperty("security.key.private.file") }

aws {
	profileName = properties.getProperty("aws.credentials.profile")
	region = properties.getProperty("aws.region")
}

ssh.settings {
	knownHosts = allowAnyHosts
}


//---------------------------------------------- AWS/SSH Instances ----------------------------------------------//

if (hasProperty('instanceId') == false) { ext.instanceId = "" }
if (hasProperty('instancePublicDnsName') == false) { ext.instancePublicDnsName = "" }


task importKey(type: AmazonEC2ImportKeyTask) {
	keyName properties.getProperty("security.key.name")
	publicKeyMaterial properties.getProperty("security.key.public.material")
	ifNotExists true
}


task launchInstance(type: AmazonEC2RunInstanceTask, dependsOn: importKey) {
	ami properties.getProperty("aws.instance.ami")
	keyName properties.getProperty("security.key.name")
	instanceType properties.getProperty("aws.instance.type")

	userData "#! /bin/bash\nyum -y update"

	securityGroupIds = new java.util.ArrayList<String>()
	securityGroupIds += properties.getProperty("aws.securityGroupId")

	doLast {
		project.instanceId = runInstancesResult.getReservation().getInstances().get(0).instanceId

		println("Launched Instance = "+ runInstancesResult.getReservation().getInstances().get(0))
	}
}


task stopInstance(type: AmazonEC2StopInstanceTask) {
	doFirst {
		instanceIds += project.instanceId
	}
}

task startInstance(type: AmazonEC2StartInstanceTask) {
	doFirst {
		instanceIds += project.instanceId
	}
}

task terminateInstance(type: AmazonEC2TerminateInstanceTask) {
	doFirst {
		instanceIds += project.instanceId
	}

	doLast {
		println("Terminated Instance = "+ instanceIds)
	}
}


task waitInstanceLaunched(type: AmazonEC2WaitInstanceStatusTask) {
	loopWait = 2

	doFirst {
		instanceId = project.instanceId
	}

	doLast {
		println("Launched Instance = "+ instanceId)
	}
}

task waitInstanceTerminated(type: AmazonEC2WaitInstanceStatusTask) {
	loopWait = 10
	loopTimeout = 1800

	doFirst {
		instanceId = project.instanceId
	}

	doLast {
		println("Terminated Instance = "+ instanceId)
	}
}


task setupInstance {
	doLast {
		setInstanceTagName( project.instanceId,
			properties.getProperty("aws.instance.name") +" ("+ project.branch +" - "+ project.database +")"
		)

		sleep(60 * 1000)
	}
}

task describeInstance {
	doLast {
		String publicDnsName = getInstancePublicDnsName(project.instanceId)

		project.instancePublicDnsName = publicDnsName;

		println("Described Instance = "+ publicDnsName )
	}
}


String getInstancePublicDnsName(String instanceId) {
	DescribeInstancesResult describeInstancesResult = getAmazonEC2Client().describeInstances(
		new DescribeInstancesRequest().withInstanceIds( instanceId )
	)

	String instancePublicDnsName = describeInstancesResult.reservations.instances.get(0).publicDnsName;

	return instancePublicDnsName.substring(1, instancePublicDnsName.length() - 1);
}

void setInstanceTagName(String instanceId, String instanceName) {
	CreateTagsRequest request = new CreateTagsRequest()

    getAmazonEC2Client().createTags(
    	request.withResources( instanceId ).withTags( new Tag( "Name", instanceName ) )
    )
}

AmazonEC2 getAmazonEC2Client() {
	return project.extensions.getByType( AmazonEC2PluginExtension.class ).client
}


//---------------------------------------------- AWS/RDS Instances ----------------------------------------------//

if (hasProperty('dbInstanceEndpoint') == false) { ext.dbInstanceEndpoint = "" }
if (hasProperty('dbDriverClassName') == false) { ext.dbDriverClassName = "" }
if (hasProperty('dbInstanceName') == false) { ext.dbInstanceName = "" }
if (hasProperty('dbInstancePort') == false) { ext.dbInstancePort = "" }
if (hasProperty('dbInstanceUsername') == false) { ext.dbInstanceUsername = "" }
if (hasProperty('dbInstancePassword') == false) { ext.dbInstancePassword = "" }
if (hasProperty('dbInstanceSlaveUsername') == false) { ext.dbInstanceSlaveUsername = "" }
if (hasProperty('dbInstanceSlavePassword') == false) { ext.dbInstanceSlavePassword = "" }
if (hasProperty('dbInstanceUrl') == false) { ext.dbInstanceUrl = "" }
if (hasProperty('validationQuery') == false) { ext.validationQuery = "" }

task createDBInstance(type: AmazonRDSCreateDBInstanceTask) {
	doFirst {
		dbInstanceIdentifier = getDatabasePropertyIdentifier( properties, project.database, project.branch )

		if ( ! "MSSQL".equalsIgnoreCase( project.database ) ) {
			dbName = getDatabasePropertyName( properties, project.database, project.branch )
		}

		engine = getDatabaseProperty( properties, "engine", project.database )
		dbInstanceClass = getDatabaseProperty( properties, "instance.class", project.database )

		engineVersion = getDatabaseProperty( properties, "engine.version", project.database )
		port = getDatabaseProperty( properties, "port", project.database ).toInteger()
		licenseModel = getDatabaseProperty( properties, "license", project.database )
		publiclyAccessible = getDatabaseProperty( properties, "public", project.database ).toBoolean()
		allocatedStorage = getDatabaseProperty( properties, "storage", project.database ).toInteger()

		masterUsername = getDatabaseProperty( properties, "user.master.username", project.database )
		masterUserPassword = getDatabaseProperty( properties, "user.master.password", project.database )

		backupRetentionPeriod = getDatabaseProperty( properties, "backupRetentionPeriod", project.database ).toInteger()
		multiAZ = getDatabaseProperty( properties, "multiAZ", project.database ).toBoolean()
		autoMinorVersionUpgrade = getDatabaseProperty( properties, "autoMinorVersionUpgrade", project.database ).toBoolean()

		vpcSecurityGroupIds = new java.util.ArrayList<String>()
		vpcSecurityGroupIds += properties.getProperty("aws.securityGroupId")

		println("About to Create Database = "+ dbInstanceIdentifier)
	}

	doLast {
		println("Created Database = "+ dbInstance)
	}
}


task deleteDBInstance(type: AmazonRDSDeleteDBInstanceTask) {
	skipFinalSnapshot = true

	doFirst {
		dbInstanceIdentifier = getDatabasePropertyIdentifier( properties, project.database, project.branch )
	}
}

task waitDBInstanceCreated(type: AmazonRDSWaitInstanceStatusTask) {
	loopWait = 10
	loopTimeout = 1800

	successStatuses = [ "available", "terminated" ]

	waitStatuses = [ "backing-up", "creating", "deleting", "modifying", "rebooting", "renaming", "resetting-master-credentials" ]

	doFirst {
		dbInstanceIdentifier = getDatabasePropertyIdentifier( properties, project.database, project.branch )
	}
}


task describeDBInstance {
	doLast {
		String dbInstanceEndpoint = ("true".equalsIgnoreCase(project.provisioned))
			? "localhost"
			: getDBInstanceEndpoint( getDatabasePropertyIdentifier( properties, project.database, project.branch ) );

		String dbInstanceName = getDatabasePropertyName( properties, project.database, project.branch )

		String dbDriverClassName = getDatabaseProperty( properties, "driver", project.database )
		String dbInstancePort = getDatabaseProperty( properties, "port", project.database )
		String dbInstanceUsername = getDatabaseProperty( properties, "user.master.username", project.database )
		String dbInstancePassword = getDatabaseProperty( properties, "user.master.password", project.database )
		String dbInstanceSlaveUsername = getDatabaseProperty( properties, "user.slave.username", project.database )
		String dbInstanceSlavePassword = getDatabaseProperty( properties, "user.slave.password", project.database )

		String dbInstanceUrl = null;
		String validationQuery = null;
		switch( project.database.toUpperCase() ) {

			case "POSTGRES":
				dbInstanceUrl = "jdbc:postgresql://${dbInstanceEndpoint}:${dbInstancePort}/${dbInstanceName}"
				validationQuery = "SELECT 1"
				break;

			case "MYSQL":
				dbInstanceUrl = "jdbc:mysql://${dbInstanceEndpoint}:${dbInstancePort}/${dbInstanceName}?characterEncoding=UTF-8"
				validationQuery = "SELECT 1"
				break;

			case "MSSQL":
				dbInstanceUrl = "jdbc:jtds:sqlserver://${dbInstanceEndpoint}:${dbInstancePort};databaseName=${dbInstanceName}";
				validationQuery = "SELECT 1"
				break;

			case "ORACLE":
				dbInstanceUrl = "jdbc:oracle:thin:@${dbInstanceEndpoint}:${dbInstancePort}:${dbInstanceName}";
				validationQuery = "SELECT 1 FROM DUAL"
				break;
		}

		project.dbInstanceEndpoint = dbInstanceEndpoint;
		project.dbDriverClassName = dbDriverClassName;
		project.dbInstanceName = dbInstanceName;
		project.dbInstancePort = dbInstancePort;
		project.dbInstanceUsername = dbInstanceUsername;
		project.dbInstancePassword = dbInstancePassword;
		project.dbInstanceSlaveUsername = dbInstanceSlaveUsername;
		project.dbInstanceSlavePassword = dbInstanceSlavePassword;
		project.dbInstanceUrl = dbInstanceUrl;
		project.validationQuery = validationQuery;

		println("Described DB Instance = "+ project.dbInstanceEndpoint )
	}
}


task setupDBInstance(dependsOn: describeDBInstance) {
	doLast {
		String dbInstanceEndpoint = project.dbInstanceEndpoint
		String dbDriverClassName = project.dbDriverClassName
		String dbInstanceName = project.dbInstanceName
		String dbInstancePort = project.dbInstancePort
		String dbInstanceUsername = project.dbInstanceUsername
		String dbInstancePassword = project.dbInstancePassword
		String dbInstanceSlaveUsername = project.dbInstanceSlaveUsername
		String dbInstanceSlavePassword = project.dbInstanceSlavePassword
		String dbInstanceUrl = project.dbInstanceUrl
		String validationQuery = project.validationQuery

		Class.forName( dbDriverClassName, true, GroovyObject.class.classLoader )

		switch( project.database.toUpperCase() ) {

			case "MYSQL":
				groovy.sql.Sql sql = groovy.sql.Sql.newInstance(
					dbInstanceUrl, dbInstanceUsername, dbInstancePassword, dbDriverClassName
				)

				sql.execute( "ALTER DATABASE "+ dbInstanceName +" CHARACTER SET utf8 COLLATE utf8_general_ci;" )

				break;

			case "MSSQL":
				groovy.sql.Sql sql = groovy.sql.Sql.newInstance(
					dbInstanceUrl.replaceAll(";databaseName="+dbInstanceName, ";databaseName=master"),
					dbInstanceUsername, dbInstancePassword, dbDriverClassName
				)

				sql.execute( "CREATE DATABASE "+ dbInstanceName )
				sql.execute( "ALTER DATABASE "+ dbInstanceName +" SET READ_COMMITTED_SNAPSHOT ON;" )
				sql.execute( "ALTER DATABASE "+ dbInstanceName +" SET ALLOW_SNAPSHOT_ISOLATION ON;" )				

				break;

			case "ORACLE":
				groovy.sql.Sql sql = groovy.sql.Sql.newInstance(
					dbInstanceUrl, dbInstanceUsername, dbInstancePassword, dbDriverClassName
				)

				sql.execute( "CREATE USER \""+ dbInstanceSlaveUsername +"\" PROFILE \"DEFAULT\" IDENTIFIED BY \""+ dbInstanceSlavePassword +"\"" )
				sql.execute( "GRANT DBA TO "+ dbInstanceSlaveUsername )
				sql.execute( "GRANT CONNECT, RESOURCE TO "+ dbInstanceSlaveUsername )


				groovy.sql.Sql sql2 = groovy.sql.Sql.newInstance(
					dbInstanceUrl, dbInstanceSlaveUsername, dbInstanceSlavePassword, dbDriverClassName
				)

				sql2.execute( "CREATE OR REPLACE TRIGGER WORKAROUNDORA9965278 AFTER LOGON ON DATABASE BEGIN EXECUTE IMMEDIATE \'ALTER SESSION SET \"_replace_virtual_columns\"=false\'; END" )

				break;
		}
	}
}


String getDBInstanceEndpoint(String dbInstanceIdentifier) {
	DescribeDBInstancesResult describeDBInstancesResult = getAmazonRDSClient().describeDBInstances(
		new DescribeDBInstancesRequest().withDBInstanceIdentifier(dbInstanceIdentifier)
	);

	String endpoint = describeDBInstancesResult.getDBInstances().get(0).getEndpoint();

	return endpoint.replaceAll("^\\{.*Address:\\s*([^,]+).*\\}\$", "\$1");
}

AmazonRDS getAmazonRDSClient() {
	return project.extensions.getByType( AmazonRDSPluginExtension.class ).client
}


//---------------------------------------------- Script Execution ----------------------------------------------//

task executeScript(dependsOn: [describeInstance, describeDBInstance]) {
	doFirst {
		mkdir buildDir
	}

	doLast {
		String database = project.database

		String dbInstanceEndpoint = project.dbInstanceEndpoint
		String dbDriverClassName = project.dbDriverClassName
		String dbInstanceName = project.dbInstanceName
		String dbInstancePort = project.dbInstancePort
		String dbInstanceUsername = project.dbInstanceUsername
		String dbInstancePassword = project.dbInstancePassword
		String dbInstanceSlaveUsername = project.dbInstanceSlaveUsername
		String dbInstanceSlavePassword = project.dbInstanceSlavePassword
		String dbInstanceUrl = project.dbInstanceUrl
		String validationQuery = project.validationQuery


		// Define the variables supported on script
		def variables = [
			"BUILD_CODE": getBuildCode(project.database, project.branch),
			"BUILD_PROVISIONED": String.valueOf("true".equalsIgnoreCase(project.provisioned)),

			"BRANCH": project.branch,
			"COMMIT": project.commit,

			"DB_TYPE": project.database.toLowerCase(),
			"DB_DRIVER": dbDriverClassName,
			"DB_NAME": dbInstanceName,
			"DB_HOST": dbInstanceEndpoint,
			"DB_PORT": dbInstancePort,
			"DB_URL": dbInstanceUrl,
			"DB_USERNAME": dbInstanceSlaveUsername,
			"DB_PASSWORD": dbInstanceSlavePassword,
			"DB_VALIDATION_QUERY": validationQuery,
			"ESCLUSTER": "dotCMS"+ database + cleanBranchName(branch),

			"OUTPUT_FILE": project.outputFile,
		]


		// Create temporal script file with all variables interpolated
		String instanceScriptFilePath = File.createTempFile('tempExecuteScript', '.sh').absolutePath
		String[] instanceScriptFileParts = instanceScriptFilePath.split("/")
		String instanceScriptFileName = instanceScriptFileParts[ instanceScriptFileParts.length - 1 ]

		new File( instanceScriptFilePath ).withWriter { w ->
			new File( project.scriptFile ).eachLine { line ->
				String interpolatedLine = line

				variables.each{ k, v ->
					interpolatedLine = interpolatedLine.replaceAll( java.util.regex.Pattern.quote( '$'+ k ), v )
				}

				w << interpolatedLine + System.getProperty("line.separator")
  			}
		}

        println( "Getting License file from: $System.env.JENKINS_HOME/license.dat")

		//Copy license file to the instance
		ssh.run {
			session(
					host: project.instancePublicDnsName, user: properties.getProperty("ssh.username"),
					identity: file( project.keyFile )
			) {
				put( from: file("$System.env.JENKINS_HOME/license.dat"), into: "/home/"+ properties.getProperty("ssh.username") )
			}
		}

		println( "License file saved" )

		// Open SSH session in order to run the interpolated script and transfer its output
		ssh.run {
			session(
				host: project.instancePublicDnsName, user: properties.getProperty("ssh.username"),
				identity: file( project.keyFile )
			) {
				// Transfer temporal script as an executable file into remote home directory
				put( from: file( instanceScriptFilePath ), into: "/home/"+ properties.getProperty("ssh.username") )
				execute( "chmod 777 "+ instanceScriptFileName )

				// Execute temporal script transferred to remote home directory
				execute( "./"+ instanceScriptFileName, logging: "none", interaction: {
					when(line: _, from: standardOutput) { line -> println( line ) }
					when(line: _, from: standardError) { line -> println( line ) }
				})

				// Transfer output file into local build directory
				get( from: variables.OUTPUT_FILE, into: buildDir )
			}
		}

		println( "Saved Tests Results in \'"+ buildDir.absolutePath +"/"+ variables.OUTPUT_FILE +"\'" )
	}
}


//---------------------------------------------- Utilities ----------------------------------------------//

String getBuildCode(String database, String branch) {
	return String.valueOf( Math.abs( Objects.hash( database, branch ) ) );
}


String getDatabasePropertyIdentifier(Properties properties, String database, String branch) {
	return properties.getProperty( "db.instance.identifier.prefix" ) +"-"+ cleanBranchName(branch) +"-"+ database.toLowerCase()
}

String getDatabasePropertyName(Properties properties, String database, String branch) {
	String result = getDatabaseProperty(properties, "name", database);

	if ( ! "ORACLE".equalsIgnoreCase( database ) ) {
		result += cleanBranchName(branch);
	}

	return result;
}

String getDatabaseProperty(Properties properties, String propertyName, String database) {
	return properties.getProperty( "db."+ database.toLowerCase() +"."+ propertyName );
}

String cleanBranchName(String branch) {
	return branch.toLowerCase().replace(".", "").replace("-", "");
}
