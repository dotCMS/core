buildscript {
    repositories {
        maven { url "http://repo.dotcms.com/artifactory/libs-release" }
    }
    dependencies {
        classpath 'org.ajoberstar:grgit:1.7.0'
    }
}


configurations {
    compile
    compileOnly
    apt
    testCompile
}


def scriptDescription = """\

    ********************************************************
    Script that will upload a given file as released or as a snapshot using the 'uploadArchives' task:

    When the file is treated as a release will be uploaded to the libs-release-local repository (http://repo.dotcms.com/artifactory/libs-release-local)
     otherwise it will be treated as a snapshot and uploaded to the libs-snapshot-local repository (http://repo.dotcms.com/artifactory/libs-snapshot-local)


'uploadArchives' task
----------------------
"""

def taskDescription = """
    Parameters:

        groupId:                            - Repository group id
            -> Required
        file: File to upload
            -> Required
        release: (true/false)               - true if is a release upload, false if is a snapshot
            -> Default false
        includeDependencies: (true/false)   - If upload given file including the complete set of dependencies in the file pom (required for the dotcms jar).
            -> Default false                  The set of dependencies is given by the dependencies.gradle script
        username:                           - user name of the user with upload privileges
            -> Required
        password:                           - password of the user with upload privileges
            -> Required

    Examples of use:

        dotcms jar:
            Name convention: dotcms_version_hash.jar -> dotcms_3.0_a434224.jar
            As snapshot: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms -PincludeDependencies=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/WEB-INF/lib/dotcms_3.0_a434224.jar
            As release: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms -PincludeDependencies=true -Prelease=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/WEB-INF/lib/dotcms_3.0_a434224.jar

        Enterprise jar
            Name convention: ee_dotcmsversion.jar -> ee_3.6.jar
            As snapshot: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms.enterprise -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/WEB-INF/lib/ee_3.6.jar
            As release: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms.enterprise -Prelease=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/WEB-INF/lib/ee_3.6.jar

        Enterprise license jar
            Name convention: eelic_dotcmsversion.jar -> eelic_3.6.jar
            As snapshot: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms.enterprise -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/WEB-INF/lib/eelic_3.6.jar
            As release: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms.enterprise -Prelease=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/WEB-INF/lib/eelic_3.6.jar

         starter zip
            Name convention: starter_timestamp.zip -> starter_20140805.zip
            As snapshot: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/starter_20140805.zip
            As release: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms -Prelease=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/starter_20140805.zip

         Ant Tooling jar
            Name convention: ant-tooling_version.jar -> ant-tooling_1.1.jar
            As release: ./gradlew -b deploy.gradle uploadArchives -PgroupId=com.dotcms -Prelease=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/ant-tooling/build/libs/ant-tooling_1.1.jar

    NOTE:
        For a known gradle bug we can not use the default snapshot behaviour and right now each snapshot have to be an artifact:
            http://issues.gradle.org/browse/GRADLE-2784
            http://forums.gradle.org/gradle/topics/using_a_specific_snapshot_version_of_an_artifact

"""
/**
 * Override both the Gradle out-of-the-box 'help' task
 */
task help(overwrite:true) {

    print """
    Welcome to Gradle $gradle.gradleVersion.

    To run a build, run 'gradle <task> ...'

    To see a list of available tasks, run 'gradle tasks'

    To see a list of command-line options, run 'gradle --help'

    """
    //println scriptDescription
    print taskDescription
}
help.description = 'Displays a help message'

apply plugin: 'maven'

import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

repositories {
    maven { url "http://repo.dotcms.com/artifactory/libs-release" }
    maven { url "http://repo.dotcms.com/artifactory/libs-snapshot-local" }
}

ext {

    artifactGroupId = "com.dotcms"
    fileToUpload    = ""
    jarName         = ""
    submodulePath   = ""

    git = org.ajoberstar.grgit.Grgit.open(file('..'))

    releaseRepository  = "http://repo.dotcms.com/artifactory/libs-release-local"
    snapshotRepository = "http://repo.dotcms.com/artifactory/libs-snapshot-local"
    repositoryUrl      = snapshotRepository

    if (gradle.startParameter.taskNames.contains("uploadEnterprise")) {
        jarName = "ee_$dotcmsReleaseVersion" + ".jar"
        fileToUpload = "src/main/enterprise/build/libs/$jarName"
        artifactGroupId = "com.dotcms.enterprise"
        submodulePath = "src/main/enterprise"
    }

    if (gradle.startParameter.taskNames.contains("uploadLicense")) {
        jarName = "eelic_$dotcmsReleaseVersion" + ".jar"
        fileToUpload = "src/main/license/build/libs/$jarName"
        artifactGroupId = "com.dotcms.enterprise"
        submodulePath = "src/main/license"
    }

    if (gradle.startParameter.taskNames.contains("uploadDotcms")) {
        jarName = "dotcms_$dotcmsReleaseVersion"
        fileToUpload = "build/libs/$jarName" + ".jar"
        submodulePath = "."
    }

    if (project.hasProperty('file')) {
        fileToUpload = "$file"
    }


    releaseUpload = "false"
    if (project.hasProperty('release')) {
        releaseUpload = "$release"
    }

    //true if we want to add all the dotcms dependencies to the generated pom file
    useDependencies = "false"
    if (project.hasProperty('includeDependencies')) {
        useDependencies = "$includeDependencies"
    }

    repositoryUsername = ""
    if (project.hasProperty('username')) {
        repositoryUsername = "$username"
    }
    repositoryPassword = ""
    if (project.hasProperty('password')) {
        repositoryPassword = "$password"
    }
}

//We will only apply the dependencies for the dotcms_version.jar, adding these dependencies affects the creation of the pom file for this artifact
if (useDependencies == "true") {
    //Import and apply the dependencies from the dependencies scripts
    apply from: "$rootDir/dependencies.gradle"
}

File toUpload

artifacts {
    if (fileToUpload.length() > 0) {
        toUpload = file(new File(fileToUpload))
        def extension = toUpload.name.substring(toUpload.name.lastIndexOf(".") + 1, toUpload.name.length())
        def fileName = toUpload.name.replace("." + extension, "")
        archives new DefaultPublishArtifact(fileName, extension, extension, null, new Date(), toUpload)
    }

}
uploadArchives {

    description = taskDescription

    repositories {
        mavenDeployer {

            if (toUpload != null) {

                def isRelease = false
                if (releaseUpload == "true") {
                    isRelease = true
                }

                def extension = toUpload.name.substring(toUpload.name.lastIndexOf(".") + 1, toUpload.name.length())
                def fileName = toUpload.name.replace("." + extension, "")
                def nameArray = fileName.split("_")
                def artifactId = nameArray[0]
                def version = nameArray[1]
                if (nameArray.length > 2 && !isRelease) {//If is a release we don't need a second identifier
                    version += "_" + nameArray[2]
                }
                //Required for artifactory in order to upload it to the snapshots repo, without it the upload fails
                if (!isRelease) {
                    version += "-SNAPSHOT"
                }

                //Verify if we are releasing or just creating a snapshot
                if (isRelease) {
                    repositoryUrl = releaseRepository
                }

                addFilter(fileName) { artifact, file ->
                    artifact.name == fileName
                }

                //Setting the properties for the pom and artifactory
                pom(fileName).artifactId = artifactId
                pom(fileName).version = version
                pom(fileName).groupId = artifactGroupId

                // Add project dependencies to generated pom.xml file (Note: scope and exclusions not yet supported)
                pom(fileName).withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.compile.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }

                //Some feedback
                println " --> Preparing to upload: " + fileName
                println "\tgroupId: " + artifactGroupId
                println "\tartifactId: " + artifactId
                println "\tversion: " + version
                println "\trepository: " + repositoryUrl

                repository(url: repositoryUrl) {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
            }
        }

    }
}

defaultTasks 'help', 'tasks'

//Generates dynamic tasks with the same content for Enterprise, License, Dotcms, Starter and AntTooling.
//Tasks generated will be called: uploadEnterprise, uploadLicense, uploadDotcms, uploadStarter and uploadAntTooling
//respectively
['Enterprise', 'License', 'Dotcms', 'Starter', 'AntTooling'].each { taskName ->
    task "upload$taskName"() {
        doLast {
            updateSubmoduleReference()
        }
    }
}

uploadEnterprise.finalizedBy "generateArtifact"
uploadLicense.finalizedBy "generateArtifact"
uploadDotcms.finalizedBy "generateArtifact"
uploadStarter.finalizedBy "generateArtifact"
uploadAntTooling.finalizedBy "generateArtifact"

task generateArtifact(type: GradleBuild) {

    //Get the latest changes from the branch for each submodule
    project.exec{
        commandLine "git", "submodule", "update", "--remote"
    }

    buildFile = "$submodulePath/build.gradle"
    tasks     = ['clean','jar']
    startParameter.projectProperties = [jarBaseName: jarName]
}
generateArtifact.onlyIf { !submodulePath.equals("")}

generateArtifact.finalizedBy "uploadArchives"

//Updating submodule reference (commits and pushes reference)
def updateSubmoduleReference(){

    if(!(submodulePath.equals("") || submodulePath.equals("."))){

        git.add(patterns: ["dotCMS/$submodulePath"])

        if (git.status().staged.modified.contains("dotCMS/$submodulePath".toString())){

            git.commit(message: "Updating commit reference for $submodulePath", paths:["dotCMS/$submodulePath"])
            git.push()
        }
    }
}

uploadEnterprise.description """
Creates and uploads a snapshot or release version of the Enterprise project to the artifactory repository

Parameters:

    release: (true/false)           - true if is a release upload, false if is a snapshot
        -> Default false
    username:                       - user name of the user with upload privileges
        -> Required
    password:                       - password of the user with upload privileges
        -> Required

Example of use:

Name convention: ee_version.jar -> ee_3.6.jar
As snapshot: ./gradlew -b deploy.gradle uploadEnterprise -Pusername=username -Ppassword=XYZ 
As release: ./gradlew -b deploy.gradle uploadEnterprise -Prelease=true -Pusername=username -Ppassword=XYZ
"""

uploadEnterprise.group='dotCMS Upload Version'

uploadLicense.description """
Creates and uploads a snapshot or release version of the License project to the artifactory repository

Parameters:

    release: (true/false)           - true if is a release upload, false if is a snapshot
        -> Default false
    username:                       - user name of the user with upload privileges
        -> Required
    password:                       - password of the user with upload privileges
        -> Required

Example of use:

Name convention: eelic_version.jar -> eelic_3.6.jar
As snapshot: ./gradlew -b deploy.gradle uploadLicense -Pusername=username -Ppassword=XYZ 
As release: ./gradlew -b deploy.gradle uploadLicense -Prelease=true -Pusername=username -Ppassword=XYZ
"""

uploadLicense.group='dotCMS Upload Version'

uploadDotcms.description """
Creates and uploads a snapshot or release version of the core project to the artifactory repository

Parameters:

    release: (true/false)               - true if is a release upload, false if is a snapshot
        -> Default false
    username:                           - user name of the user with upload privileges
        -> Required
    password:                           - password of the user with upload privileges
        -> Required
    includeDependencies: (true/false)   - It will include the complete set of dependencies in the pom file
                                          (required for the dotcms jar).
        -> Default false                  The set of dependencies is given by the dependencies.gradle
        

Example of use:

Name convention: dotcms_version_hash.jar -> dotcms_3.6_a434224.jar
As snapshot: ./gradlew -b deploy.gradle uploadDotcms -Pusername=username -Ppassword=XYZ -PincludeDependencies=true
As release: ./gradlew -b deploy.gradle uploadDotcms -Prelease=true -Pusername=username -Ppassword=XYZ -PincludeDependencies=true
"""

uploadDotcms.group='dotCMS Upload Version'

uploadStarter.description """
Uploads a snapshot or release version of the starter to the artifactory repository

Parameters:

    release: (true/false)           - true if is a release upload, false if is a snapshot
        -> Default false
    username:                       - user name of the user with upload privileges
        -> Required
    password:                       - password of the user with upload privileges
        -> Required
    file: File to upload.           - the file path used as the artifact
        -> Required

Example of use:
Name convention: starter_timestamp.zip -> starter_20140805.zip
As snapshot: ./gradlew -b deploy.gradle uploadStarter -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/starter_20140805.zip
As release: ./gradlew -b deploy.gradle uploadStarter -Prelease=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/dotCMS/dotCMS/starter_20140805.zip
"""

uploadStarter.group='dotCMS Upload Version'

uploadAntTooling.description """
Uploads a snapshot or release version of the ant-tooling to the artifactory repository

Parameters:

    release: (true/false)           - true if is a release upload, false if is a snapshot
        -> Default false
    username:                       - user name of the user with upload privileges
        -> Required
    password:                       - password of the user with upload privileges
        -> Required
    file: File to upload.           - the file path used as the artifact
        -> Required

Example of use:
Name convention: ant-tooling_version.jar -> ant-tooling_1.1.jar
As snapshot: ./gradlew -b deploy.gradle uploadAntTooling -Pusername=username -Ppassword=XYZ -Pfile=/project/path/ant-tooling/build/libs/ant-tooling_1.1.jar
As release: ./gradlew -b deploy.gradle uploadAntTooling -Prelease=true -Pusername=username -Ppassword=XYZ -Pfile=/project/path/ant-tooling/build/libs/ant-tooling_1.1.jar

NOTE: BEFORE GENERATING A NEW VERSION OF THE JAR FILE, ALL UNIT TESTS FOUND IN THE ANT-TOOLING REPO MUST BE RUN AND ALL OF THE MUST PASS. 
"""

uploadAntTooling.group='dotCMS Upload Version'