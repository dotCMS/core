package com.dotcms.rendering.velocity.viewtools;

import com.dotcms.IntegrationTestBase;
import com.dotcms.util.IntegrationTestInitService;
import com.dotmarketing.exception.DotDataException;
import com.dotmarketing.exception.DotSecurityException;
import org.junit.BeforeClass;
import org.junit.Test;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Test {@link JSONTool}
 * @author jsanca
 */
public class JSONToolTest extends IntegrationTestBase {

    @BeforeClass
    public static void prepare() throws Exception{
        //Setting web app environment
        IntegrationTestInitService.getInstance().init();
    }

    /**
     * Method to test: {@link JSONTool#generate(String)}
     * Given Scenario: Parsing an plain object
     * ExpectedResult: Expected a map with the properties
     * @throws DotSecurityException
     * @throws DotDataException
     */
    @Test
    public void test_Generate_simple_Map() throws Exception {

        final JSONTool jsonTool   = new JSONTool();
        final String   stringJson = "{\n" +
                "            \"body\": \"## Container: Blank Container\\r\\n## This is autogenerated code that cannot be changed\\r\\n#parseContainer('d71d56b4-0a8b-4bb2-be15-ffa5a23366ea','1539784124854')\\r\\n\",\n" +
                "            \"canPublish\": true,\n" +
                "            \"canRead\": true,\n" +
                "            \"canWrite\": true,\n" +
                "            \"categoryId\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "            \"countAddContainer\": 0,\n" +
                "            \"countContainers\": 0,\n" +
                "            \"deleted\": false,\n" +
                "            \"drawed\": false,\n" +
                "            \"drawedBody\": null,\n" +
                "            \"footer\": \"null\",\n" +
                "            \"friendlyName\": \"Blank template (No: header, footer, javascript or css)\",\n" +
                "            \"hasLiveVersion\": true,\n" +
                "            \"headCode\": null,\n" +
                "            \"header\": \"null\",\n" +
                "            \"identifier\": \"7acdb856-4bbc-41c5-8695-a39c2e4a913f\",\n" +
                "            \"image\": \"21ea6da6-68d0-48db-bce8-d1691abd6314\",\n" +
                "            \"inode\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "            \"live\": true,\n" +
                "            \"locked\": false,\n" +
                "            \"modDate\": 1570214794657,\n" +
                "            \"modUser\": \"036fd43a-6d98-46e0-b22e-bae02cb86f0c\",\n" +
                "            \"name\": \"Blank\",\n" +
                "            \"new\": false,\n" +
                "            \"owner\": \"null\",\n" +
                "            \"selectedimage\": null,\n" +
                "            \"showOnMenu\": true,\n" +
                "            \"sortOrder\": 0,\n" +
                "            \"theme\": null,\n" +
                "            \"themeName\": null,\n" +
                "            \"title\": \"Blank\",\n" +
                "            \"working\": true\n" +
                "        }";
        final Object objectMap = jsonTool.generate(stringJson);

        assertNotNull(objectMap);
        assertTrue(objectMap instanceof Map);

        final Map<String, Object> map = (Map<String, Object>) objectMap;
        assertFalse(map.isEmpty());

        assertEquals(true, map.get("canPublish"));
        assertEquals(false, map.get("new"));
        assertEquals("Blank", map.get("name"));
        assertEquals("036fd43a-6d98-46e0-b22e-bae02cb86f0c", map.get("modUser"));
        assertEquals(1570214794657l, map.get("modDate"));
    }

    /**
     * Method to test: {@link JSONTool#generate(String)}
     * Given Scenario: Parsing an composite object
     * ExpectedResult: Expected a map with the inner properties parsed
     * @throws DotSecurityException
     * @throws DotDataException
     */
    @Test
    public void test_Generate_inner_Map() throws Exception {

        final JSONTool jsonTool   = new JSONTool();
        final String   stringJson = "{\n" +
                "            \"body\": \"## Container: Blank Container\\r\\n## This is autogenerated code that cannot be changed\\r\\n#parseContainer('d71d56b4-0a8b-4bb2-be15-ffa5a23366ea','1539784124854')\\r\\n\",\n" +
                "            \"canPublish\": true,\n" +
                "            \"canRead\": true,\n" +
                "            \"canWrite\": true,\n" +
                "            \"categoryId\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "            \"countAddContainer\": 0,\n" +
                "            \"countContainers\": 0,\n" +
                "            \"deleted\": false,\n" +
                "            \"drawed\": false,\n" +
                "            \"drawedBody\": null,\n" +
                "            \"footer\": \"null\",\n" +
                "            \"friendlyName\": \"Blank template (No: header, footer, javascript or css)\",\n" +
                "            \"hasLiveVersion\": true,\n" +
                "            \"headCode\": null,\n" +
                "            \"header\": \"null\",\n" +
                "            \"inner\": {\n" +
                "            \t\"identifier\": \"7acdb856-4bbc-41c5-8695-a39c2e4a913f\",\n" +
                "\t            \"image\": \"21ea6da6-68d0-48db-bce8-d1691abd6318\",\n" +
                "    \t        \"inode\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "                 \"modDate\": 1570214794655\n" +
                "            },\n" +
                "            \"live\": true,\n" +
                "            \"locked\": false,\n" +
                "            \"modDate\": 1570214794657,\n" +
                "            \"modUser\": \"036fd43a-6d98-46e0-b22e-bae02cb86f0c\",\n" +
                "            \"name\": \"Blank\",\n" +
                "            \"new\": false,\n" +
                "            \"owner\": \"null\",\n" +
                "            \"selectedimage\": null,\n" +
                "            \"showOnMenu\": true,\n" +
                "            \"sortOrder\": 0,\n" +
                "            \"theme\": null,\n" +
                "            \"themeName\": null,\n" +
                "            \"title\": \"Blank\",\n" +
                "            \"working\": true\n" +
                "        }";
        final Object objectMap = jsonTool.generate(stringJson);

        assertNotNull(objectMap);
        assertTrue(objectMap instanceof Map);

        final Map<String, Object> map = (Map<String, Object>) objectMap;
        assertFalse(map.isEmpty());

        assertEquals(true, map.get("canPublish"));
        assertEquals(false, map.get("new"));
        assertEquals("Blank", map.get("name"));
        assertEquals("036fd43a-6d98-46e0-b22e-bae02cb86f0c", map.get("modUser"));
        assertEquals(1570214794657l, map.get("modDate"));
        assertTrue(map.containsKey("inner"));
        assertTrue(map.get("inner") instanceof Map);

        final Map<String, Object> innerMap = (Map<String, Object>) map.get("inner");
        assertFalse(innerMap.isEmpty());

        assertEquals(1570214794655l , innerMap.get("modDate"));
        assertEquals("21ea6da6-68d0-48db-bce8-d1691abd6318" , innerMap.get("image"));
    }

    /**
     * Method to test: {@link JSONTool#generate(String)}
     * Given Scenario: Parsing an empty list
     * ExpectedResult: Expected empty {@link java.util.List}
     * @throws DotSecurityException
     * @throws DotDataException
     */
    @Test
    public void test_Generate_empty_list() throws Exception {

        final JSONTool jsonTool   = new JSONTool();
        final String   stringJson = "[]";
        final Object objectMap = jsonTool.generate(stringJson);

        assertNotNull(objectMap);
        assertTrue(objectMap instanceof List);

        final List<Map<String, Object>> list = (List<Map<String, Object>>) objectMap;
        assertTrue(list.isEmpty());
    }

    /**
     * Method to test: {@link JSONTool#generate(String)}
     * Given Scenario: Parsing a list with a plain map
     * ExpectedResult: Expected non-empty {@link java.util.List} with a map inside
     * @throws DotSecurityException
     * @throws DotDataException
     */
    @Test
    public void test_Generate_list_plain_map() throws Exception {

        final JSONTool jsonTool   = new JSONTool();
        final String   stringJson = "[{\n" +
                "            \"body\": \"## Container: Blank Container\\r\\n## This is autogenerated code that cannot be changed\\r\\n#parseContainer('d71d56b4-0a8b-4bb2-be15-ffa5a23366ea','1539784124854')\\r\\n\",\n" +
                "            \"canPublish\": true,\n" +
                "            \"canRead\": true,\n" +
                "            \"canWrite\": true,\n" +
                "            \"categoryId\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "            \"countAddContainer\": 0,\n" +
                "            \"countContainers\": 0,\n" +
                "            \"deleted\": false,\n" +
                "            \"drawed\": false,\n" +
                "            \"drawedBody\": null,\n" +
                "            \"footer\": \"null\",\n" +
                "            \"friendlyName\": \"Blank template (No: header, footer, javascript or css)\",\n" +
                "            \"hasLiveVersion\": true,\n" +
                "            \"headCode\": null,\n" +
                "            \"header\": \"null\",\n" +
                "            \"identifier\": \"7acdb856-4bbc-41c5-8695-a39c2e4a913f\",\n" +
                "            \"image\": \"21ea6da6-68d0-48db-bce8-d1691abd6314\",\n" +
                "            \"inode\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "            \"live\": true,\n" +
                "            \"locked\": false,\n" +
                "            \"modDate\": 1570214794657,\n" +
                "            \"modUser\": \"036fd43a-6d98-46e0-b22e-bae02cb86f0c\",\n" +
                "            \"name\": \"Blank\",\n" +
                "            \"new\": false,\n" +
                "            \"owner\": \"null\",\n" +
                "            \"selectedimage\": null,\n" +
                "            \"showOnMenu\": true,\n" +
                "            \"sortOrder\": 0,\n" +
                "            \"theme\": null,\n" +
                "            \"themeName\": null,\n" +
                "            \"title\": \"Blank\",\n" +
                "            \"working\": true\n" +
                "        }]";
        final Object objectMap = jsonTool.generate(stringJson);

        assertNotNull(objectMap);
        assertTrue(objectMap instanceof List);

        final List<Map<String, Object>> list = (List<Map<String, Object>>) objectMap;
        assertFalse(list.isEmpty());
        assertEquals(1, list.size());

        final Map<String, Object> map = list.get(0);
        assertFalse(map.isEmpty());

        assertEquals(true, map.get("canPublish"));
        assertEquals(false, map.get("new"));
        assertEquals("Blank", map.get("name"));
        assertEquals("036fd43a-6d98-46e0-b22e-bae02cb86f0c", map.get("modUser"));
        assertEquals(1570214794657l, map.get("modDate"));
    }

    /**
     * Method to test: {@link JSONTool#generate(String)}
     * Given Scenario: Parsing a list with a plain map
     * ExpectedResult: Expected non-empty {@link java.util.List} with a map inside
     * @throws DotSecurityException
     * @throws DotDataException
     */
    @Test
    public void test_Generate_list_inner_map() throws Exception {

        final JSONTool jsonTool   = new JSONTool();
        final String   stringJson = "[{\n" +
                "            \"body\": \"## Container: Blank Container\\r\\n## This is autogenerated code that cannot be changed\\r\\n#parseContainer('d71d56b4-0a8b-4bb2-be15-ffa5a23366ea','1539784124854')\\r\\n\",\n" +
                "            \"canPublish\": true,\n" +
                "            \"canRead\": true,\n" +
                "            \"canWrite\": true,\n" +
                "            \"categoryId\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "            \"countAddContainer\": 0,\n" +
                "            \"countContainers\": 0,\n" +
                "            \"deleted\": false,\n" +
                "            \"drawed\": false,\n" +
                "            \"drawedBody\": null,\n" +
                "            \"footer\": \"null\",\n" +
                "            \"friendlyName\": \"Blank template (No: header, footer, javascript or css)\",\n" +
                "            \"hasLiveVersion\": true,\n" +
                "            \"headCode\": null,\n" +
                "            \"header\": \"null\",\n" +
                "            \"inner\": {\n" +
                "            \t\"identifier\": \"7acdb856-4bbc-41c5-8695-a39c2e4a913f\",\n" +
                "\t            \"image\": \"21ea6da6-68d0-48db-bce8-d1691abd6318\",\n" +
                "    \t        \"inode\": \"9d11b327-9bf5-4d42-92bd-7894d56ed218\",\n" +
                "                 \"modDate\": 1570214794655\n" +
                "            },\n" +
                "            \"live\": true,\n" +
                "            \"locked\": false,\n" +
                "            \"modDate\": 1570214794657,\n" +
                "            \"modUser\": \"036fd43a-6d98-46e0-b22e-bae02cb86f0c\",\n" +
                "            \"name\": \"Blank\",\n" +
                "            \"new\": false,\n" +
                "            \"owner\": \"null\",\n" +
                "            \"selectedimage\": null,\n" +
                "            \"showOnMenu\": true,\n" +
                "            \"sortOrder\": 0,\n" +
                "            \"theme\": null,\n" +
                "            \"themeName\": null,\n" +
                "            \"title\": \"Blank\",\n" +
                "            \"working\": true\n" +
                "        }]";
        final Object objectMap = jsonTool.generate(stringJson);

        assertNotNull(objectMap);
        assertTrue(objectMap instanceof List);

        final List<Map<String, Object>> list = (List<Map<String, Object>>) objectMap;

        assertFalse(list.isEmpty());
        assertEquals(1, list.size());

        final Map<String, Object> map = list.get(0);
        assertFalse(map.isEmpty());

        assertEquals(true, map.get("canPublish"));
        assertEquals(false, map.get("new"));
        assertEquals("Blank", map.get("name"));
        assertEquals("036fd43a-6d98-46e0-b22e-bae02cb86f0c", map.get("modUser"));
        assertEquals(1570214794657l, map.get("modDate"));
        assertTrue(map.containsKey("inner"));
        assertTrue(map.get("inner") instanceof Map);

        final Map<String, Object> innerMap = (Map<String, Object>) map.get("inner");
        assertFalse(innerMap.isEmpty());

        assertEquals(1570214794655l , innerMap.get("modDate"));
        assertEquals("21ea6da6-68d0-48db-bce8-d1691abd6318" , innerMap.get("image"));
    }
}
