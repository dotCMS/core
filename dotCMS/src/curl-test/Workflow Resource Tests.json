{
	"info": {
		"_postman_id": "bab9b51b-731a-448a-ab05-c4511e518799",
		"name": "Workflow Resource Tests [/api/v1/workflows]",
		"description": "Test the necesary validations to every end point of the worlflow resource ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10041132"
	},
	"item": [
		{
			"name": "Save Scheme [POST /api/v1/workflow/schemes]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"REST1\", \"schemeDescription\": \"rest1\", \"schemeArchived\": \"false\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes"
							]
						},
						"description": "Creates a new scheme \n\n@Path(\"/schemes\")"
					},
					"response": []
				},
				{
					"name": "GivenValidScheme_ShouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"REST Schema\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"schemeId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"schemeIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"REST Schema\", \"schemeDescription\": \"rest1\", \"schemeArchived\": \"false\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes"
							]
						},
						"description": "Creates a new scheme \n\n@Path(\"/schemes\")"
					},
					"response": []
				},
				{
					"name": "GivenNewSchemeWithExistingName_ShouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Scheme already exist\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"REST\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"REST1\", \"schemeDescription\": \"rest1\", \"schemeArchived\": \"false\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes"
							]
						},
						"description": "Creates a new scheme \n\n@Path(\"/schemes\")"
					},
					"response": []
				},
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenEmptyBody_ShouldRespondBadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes"
							]
						},
						"description": "Creates a new scheme \n\n@Path(\"/schemes\")"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Save Step [POST /api/v1/workflow/steps]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\", \"stepName\":\"REST123\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "GivenValidStep_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"stepId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"stepIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"{{schemeId}}\", \"stepName\":\"My REST step\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "GivenInvalidSchemeId_ShouldRespond404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"ad61a59e1-a49c-46f2-a929-db2b4bfa88b2\", \"stepName\":\"REST123\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "SupportShortly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"Step shorty schema id\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"{{schemeIdShorty}}\", \"stepName\":\"Step shorty schema id\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "GivenEmptyBody_ShouldRespondBadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SaveAction [POST /api/v1/workflow/actions]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"ee24a4cb-2d15-4c98-b1bd-6327126451f3\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "ValidAction_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"actionId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"actionIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"{{stepId}}\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"{{schemeId}}\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId_ShouldRespond404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"aaee24a4cb-2d15-4c98-b1bd-6327126451f3\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "InvalidSchemeId_ShouldRespond404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"ee24a4cb-2d15-4c98-b1bd-6327126451f3\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"ad61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "ValidActionWithShortyStepIdAndShortySchemeId_ShouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"{{stepIdShorty}}\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"{{schemeIdShorty}}\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "EmptyBody_ShouldRespondBadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				}
			],
			"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n@Path(\"/actions\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findSchemas [GET /api/v1/workflow/schemes]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes"
							]
						},
						"description": "Validate you can't get workflow data if you don't have credentials"
					},
					"response": []
				},
				{
					"name": "SuccessListOfSchemes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//Validate that returns the schemes included in the empty starter site ",
									"",
									"pm.test(\"Includes exiting Scheme\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"REST Schema\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes"
							]
						},
						"description": "Validate you have the list of schemas "
					},
					"response": []
				}
			],
			"description": "Returns all schemes non-archived associated to a content type. 401 if the user does not have permission.\n\n@Path(\"/schemes\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findAllSchemesAndSchemesByContentType",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/schemescontenttypes/2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"schemescontenttypes",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Validate you can't get workflow data if you don't have credentials\n"
					},
					"response": []
				},
				{
					"name": "Validate read permissions to the content type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Content types permissions\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"System Workflow\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/schemescontenttypes/2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"schemescontenttypes",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Validate we return a 401 error in case you try to get shemes info of an unautorized conte type\n\nTo test: \nDelete permissions to the content type (generic) and add just permissions to admin "
					},
					"response": []
				},
				{
					"name": "Invalid cotnet type ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 404, Content types not found\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/schemescontenttypes/2a3e91e4-fbbf-4876-8c5b-2233c1739b0",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"schemescontenttypes",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b0"
							]
						},
						"description": "Validate we return a 401 error in case you try to get shemes info of an unautorized conte type\n\nTo test: \nDelete permissions to the content type (generic) and add just permissions to admin "
					},
					"response": []
				},
				{
					"name": "SucessListOfSchemes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//Validate that returns the schemes included in the starter site ",
									"",
									"pm.test(\"Includes system workflow\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.contentTypeSchemes[0].name).to.equal(\"System Workflow\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/schemescontenttypes/2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"schemescontenttypes",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Validate you have the list of schemas "
					},
					"response": []
				}
			],
			"description": "Returns all schemes for the content type and include schemes non-archive . 401 if the user does not have permission\n\n@Path(\"/schemes/schemescontenttypes/{contentTypeId}\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findStepsByScheme [GET /api/v1/workflow/schemes/{schemeId}/steps]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/d61a59e1-a49c-46f2-a929-db2b4bfa88b2/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"d61a59e1-a49c-46f2-a929-db2b4bfa88b2",
								"steps"
							]
						},
						"description": "Return Steps associated to the scheme, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/schemes/{schemeId}/steps\")"
					},
					"response": []
				},
				{
					"name": "SuccessListOfSteps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//Validate that returns the schemes included in the starter site ",
									"",
									"pm.test(\"Includes existing step\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}",
								"steps"
							]
						},
						"description": "Return Steps associated to the scheme, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/schemes/{schemeId}/steps\")"
					},
					"response": []
				},
				{
					"name": "InvalidSchemeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"//Validate that returns the schemes included in the starter site ",
									"",
									"pm.test(\"Valid Response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exist\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/ad61a59e1-a49c-46f2-a929-db2b4bfa88b2/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"ad61a59e1-a49c-46f2-a929-db2b4bfa88b2",
								"steps"
							]
						},
						"description": "Return Steps associated to the scheme, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/schemes/{schemeId}/steps\")"
					},
					"response": []
				},
				{
					"name": "SupportShortly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"//Validate that returns the schemes included in the starter site ",
									"",
									"pm.test(\"Includes `New` step\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"New\");",
									"});",
									"",
									"pm.test(\"Includes Draft step\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Draft\");",
									"});",
									"",
									"pm.test(\"Includes Published step\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Published\");",
									"});",
									"",
									"",
									"pm.test(\"Includes Archived step\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Archived\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/d61a59e1a49c/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"d61a59e1a49c",
								"steps"
							]
						},
						"description": "Return Steps associated to the scheme, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/schemes/{schemeId}/steps\")"
					},
					"response": []
				}
			],
			"description": "Return Steps associated to the scheme, 404 if does not exists. 401 if the user does not have permission\n\n@Path(\"/schemes/{schemeId}/steps\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findAvailableActions [GET }/api/v1/workflow/contentlet/{contentId}/actions]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/contentlet/47327d24-c894-4433-aa4b-0977f458e574/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"contentlet",
								"47327d24-c894-4433-aa4b-0977f458e574",
								"actions"
							]
						},
						"description": "This method return all the available actions for an inode\n\n@Path(\"/contentlet/{inode}/actions\")"
					},
					"response": []
				},
				{
					"name": "NonExistingInode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 404\"] = responseCode.code === 404;",
									"var body = JSON.parse(responseBody);",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Contentlet identified by inode\");",
									"    pm.expect(pm.response.text()).to.include(\"was Not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/contentlet/123/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"contentlet",
								"123",
								"actions"
							]
						},
						"description": "This method return all the available actions for an inode\n\n@Path(\"/contentlet/{inode}/actions\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"postman\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentletIdentifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"contentletInode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"contentletIdShorty\", jsonData.entity.inode.replace(\"-\",\"\").substring(0,10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"postmanXXY\",\n  \"value\": \"postmanXXY\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "Valid Inode",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Publish\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/contentlet/{{contentletInode}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"contentlet",
								"{{contentletInode}}",
								"actions"
							]
						},
						"description": "This method return all the available actions for an inode\n\n@Path(\"/contentlet/{inode}/actions\")"
					},
					"response": []
				},
				{
					"name": "ShortlyIdValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Publish\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/contentlet/{{contentletIdShorty}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"contentlet",
								"{{contentletIdShorty}}",
								"actions"
							]
						},
						"description": "This method return all the available actions for an inode\n\n@Path(\"/contentlet/{inode}/actions\")"
					},
					"response": []
				}
			],
			"description": "This method return all the available actions for an inode\n\n@Path(\"/contentlet/{inode}/actions\")\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findAction [GET /api/v1/workflow/actions/{actionId}]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436"
							]
						},
						"description": "Returns a single action, 404 if does not exists. 401 if the user does not have permission\n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "NonExistingActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The action does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to find Workflow Action (using actionId=b9d89c803)\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c803",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c803"
							]
						},
						"description": "Returns a single action, 404 if does not exists. 401 if the user does not have permission\n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "findAction_GivenExistingActionId_ShouldReturnAction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var actionId = pm.collectionVariables.get(\"actionId\");",
									"",
									"pm.test(\"Includes Action Id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"id\\\":\\\"\"+actionId+\"\\\"\");",
									"});",
									"",
									"pm.test(\"Includes Action name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									"pm.test(\"Includes Scheme Id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"schemeId\\\":\\\"\"+pm.collectionVariables.get(\"schemeId\")+\"\\\"\");",
									";",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"{{actionId}}"
							]
						},
						"description": "Returns a single action, 404 if does not exists. 401 if the user does not have permission\n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "ShortlyIdValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\",\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "bill",
									"type": "string"
								},
								{
									"key": "username",
									"value": "bill@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"{{actionIdShorty}}"
							]
						},
						"description": "Returns a single action, 404 if does not exists. 401 if the user does not have permission\n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "findActionByStep [GET /api/v1/workflow/steps/{{stepId}}/actions/{{actionId}}]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/6cb7e3bd-1710-4eed-8838-d3db60f78f19/actions/b9d89c80-3d88-4311-8365-187323c96436",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"6cb7e3bd-1710-4eed-8838-d3db60f78f19",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436"
							]
						},
						"description": "Returns a single action associated to the step, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId_ShouldReturn404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The step does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"stepId=\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/123/actions/{{actionId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"123",
								"actions",
								"{{actionId}}"
							]
						},
						"description": "Returns a single action associated to the step, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "ValidActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The action does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Unable to find Workflow Action\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}/actions/123",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}",
								"actions",
								"123"
							]
						},
						"description": "Returns a single action associated to the step, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "ValidStepIdAndActionId_ShouldReturnAction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}/actions/{{actionId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}",
								"actions",
								"{{actionId}}"
							]
						},
						"description": "Returns a single action associated to the step, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "ShortlyIdvalidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepIdShorty}}/actions/{{actionIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepIdShorty}}",
								"actions",
								"{{actionIdShorty}}"
							]
						},
						"description": "Returns a single action associated to the step, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				}
			],
			"description": "Returns a single action associated to the step, 404 if does not exists. 401 if the user does not have permission.\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findActionsByStep (all the actions)",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "userCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/6cb7e3bd-1710-4eed-8838-d3db60f78f19/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"6cb7e3bd-1710-4eed-8838-d3db60f78f19",
								"actions"
							]
						},
						"description": "Returns a collection of actions associated to the step, if step does not have any will returns 200 and an empty list.\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "InvalidStep_ShouldRespond404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The step does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/123/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"123",
								"actions"
							]
						},
						"description": "Returns a collection of actions associated to the step, if step does not have any will returns 200 and an empty list.\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "GivenExistingStepWithActions_ShouldReturnActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Step returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}",
								"actions"
							]
						},
						"description": "Returns a collection of actions associated to the step, if step does not have any will returns 200 and an empty list.\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "ShortlyIdValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Step returned\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}",
								"actions"
							]
						},
						"description": "Returns a collection of actions associated to the step, if step does not have any will returns 200 and an empty list.\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				}
			],
			"description": "Returns a collection of actions associated to the step, if step does not have any will returns 200 and an empty list.\n\n@Path(\"/steps/{stepId}/actions\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findActionByScheme [GET /api/v1/workflow/schemes/{{schemeIdShorty}}/actions]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}",
								"actions"
							]
						},
						"description": "Returns a set of actions associated to the schemeId\n\n@Path(\"/schemes/{schemeId}/actions\")"
					},
					"response": []
				},
				{
					"name": "InvalidSchemeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The scheme does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/d123/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"d123",
								"actions"
							]
						},
						"description": "Returns a set of actions associated to the schemeId\n\n@Path(\"/schemes/{schemeId}/actions\")"
					},
					"response": []
				},
				{
					"name": "GivenExistingSchemeWithActions_ShouldReturnActions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Success request\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"// Validate every return ",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}",
								"actions"
							]
						},
						"description": "Returns a set of actions associated to the schemeId\n\n@Path(\"/schemes/{schemeId}/actions\")"
					},
					"response": []
				},
				{
					"name": "ShortlyIdValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, Success request\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"// Validate every return ",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeIdShorty}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeIdShorty}}",
								"actions"
							]
						},
						"description": "Returns a set of actions associated to the schemeId\n\n@Path(\"/schemes/{schemeId}/actions\")"
					},
					"response": []
				}
			],
			"description": "Returns a set of actions associated to the schemeId\n\n@Path(\"/schemes/{schemeId}/actions\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findStepById [GET /api/v1/workflow/steps/{stepId}]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/94178d17-96a0-4e08-b9aa-94214a7fb31e",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"94178d17-96a0-4e08-b9aa-94214a7fb31e"
							]
						},
						"description": "Get the step by id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}"
							]
						},
						"description": "Get the step by id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The action does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/adc3c9cd0-8467-404b-bf95-cb7df3fbc293",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"adc3c9cd0-8467-404b-bf95-cb7df3fbc293"
							]
						},
						"description": "Get the step by id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				},
				{
					"name": "ShortyValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepIdShorty}}"
							]
						},
						"description": "Get the step by id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "findAvailableDefaultActionsByContentType",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {   ",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/defaultactions/contenttype/2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"defaultactions",
								"contenttype",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Returns all the possible default actions associated to the content type workflow schemes. 401 if the user does not have permission.\n\n@Path(\"/defaultactions/contenttype/{contentTypeId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Save\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/defaultactions/contenttype/2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"defaultactions",
								"contenttype",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Returns all the possible default actions associated to the content type workflow schemes. 401 if the user does not have permission.\n\n@Path(\"/defaultactions/contenttype/{contentTypeId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidContentTypeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The action does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Content Type with id\");",
									"});",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/defaultactions/contenttype/a2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"defaultactions",
								"contenttype",
								"a2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Returns all the possible default actions associated to the content type workflow schemes. 401 if the user does not have permission.\n\n@Path(\"/defaultactions/contenttype/{contentTypeId}\")"
					},
					"response": []
				}
			],
			"description": "Returns all the possible default actions associated to the content type workflow schemes. 401 if the user does not have permission.\n\n@Path(\"/defaultactions/contenttype/{contentTypeId}\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "findAvailableDefaultActionsBySchemes",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/defaultactions/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"defaultactions",
								"schemes"
							]
						},
						"description": "Returns all the possible default actions associated to the workflow schemes.\n401 if the user does not have permission.\n\n@Path(\"/defaultactions/schemes\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/defaultactions/schemes?ids={{schemeId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"defaultactions",
								"schemes"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{schemeId}}"
								}
							]
						},
						"description": "Returns all the possible default actions associated to the workflow schemes.\n401 if the user does not have permission.\n\n@Path(\"/defaultactions/schemes\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, The action does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/defaultactions/schemes?ids=e61a59e1-a49c-46f2-a929-db2b4bfa88b2",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"defaultactions",
								"schemes"
							],
							"query": [
								{
									"key": "ids",
									"value": "e61a59e1-a49c-46f2-a929-db2b4bfa88b2"
								}
							]
						},
						"description": "Returns all the possible default actions associated to the workflow schemes.\n401 if the user does not have permission.\n\n@Path(\"/defaultactions/schemes\")"
					},
					"response": []
				},
				{
					"name": "ShortlySupport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/defaultactions/schemes?ids={{schemeIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"defaultactions",
								"schemes"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{schemeIdShorty}}"
								}
							]
						},
						"description": "Returns all the possible default actions associated to the workflow schemes.\n401 if the user does not have permission.\n\n@Path(\"/defaultactions/schemes\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "findInitialAvailableActionsByContentType",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/initialactions/contenttype/2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"initialactions",
								"contenttype",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Finds the available actions of the initial/first step(s) of the workflow scheme(s) associated with a content type Id.\n\n@Path(\"/initialactions/contenttype/{contentTypeId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"System Workflow\");",
									"});",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Save\");",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/initialactions/contenttype/2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"initialactions",
								"contenttype",
								"2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Finds the available actions of the initial/first step(s) of the workflow scheme(s) associated with a content type Id.\n\n@Path(\"/initialactions/contenttype/{contentTypeId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidContentTypeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Content Type with id:\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/initialactions/contenttype/a2a3e91e4-fbbf-4876-8c5b-2233c1739b05",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"initialactions",
								"contenttype",
								"a2a3e91e4-fbbf-4876-8c5b-2233c1739b05"
							]
						},
						"description": "Finds the available actions of the initial/first step(s) of the workflow scheme(s) associated with a content type Id.\n\n@Path(\"/initialactions/contenttype/{contentTypeId}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdateAction [PUT /api/v1/workflow/actions/{actionId}]",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"ee24a4cb-2d15-4c98-b1bd-6327126451f3\",\n      \"actionName\": \"Republish\",\n      \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/4958588d-9c8e-40e4-bfcb-4ded",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"4958588d-9c8e-40e4-bfcb-4ded"
							]
						},
						"description": "This resource updates the workflow action \n404 if the id does not exist \n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Republish\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"ee24a4cb-2d15-4c98-b1bd-6327126451f3\",\n      \"actionName\": \"Republish\",\n      \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"{{actionId}}"
							]
						},
						"description": "This resource updates the workflow action \n404 if the id does not exist \n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404, Action does not exist\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Action does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"ee24a4cb-2d15-4c98-b1bd-6327126451f3\",\n      \"actionName\": \"Republish-test2\",\n      \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/123",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"123"
							]
						},
						"description": "This resource updates the workflow action \n404 if the id does not exist \n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "ShortlyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Republish\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n      \"actionName\": \"Republish-123fa\",\n      \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"{{actionIdShorty}}"
							]
						},
						"description": "This resource updates the workflow action \n404 if the id does not exist \n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "EmptyBody_ShouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/4958588d-9c8e-40e4-bfcb-4ded",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"4958588d-9c8e-40e4-bfcb-4ded"
							]
						},
						"description": "This resource updates the workflow action \n404 if the id does not exist \n\n@Path(\"/actions/{actionId}\")"
					},
					"response": []
				}
			],
			"description": "This resource updates the workflow action 404 if the id does not exist\n@Path(\"/actions/{actionId}\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "SaveActionToStep",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"actionId\": \"777f1c6b-c877-4a37-ba4b-10627316c2cc\" }"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/dc3c9cd0-8467-404b-bf95-cb7df3fbc293/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"dc3c9cd0-8467-404b-bf95-cb7df3fbc293",
								"actions"
							]
						},
						"description": "This method saves the actions and associate to a specific step\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"actionId\": \"{{actionId}}\" }"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}",
								"actions"
							]
						},
						"description": "This method saves the actions and associate to a specific step\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"actionId\": \"777f1c6b-c877-4a37-ba4b-10627316c2cc\" }"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/adc3c9cd0-8467-404b-bf95-cb7df3fbc293/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"adc3c9cd0-8467-404b-bf95-cb7df3fbc293",
								"actions"
							]
						},
						"description": "This method saves the actions and associate to a specific step\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "InvalidActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Action does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"actionId\": \"a777f1c6b-c877-4a37-ba4b-10627316c2cc\" }"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/dc3c9cd0-8467-404b-bf95-cb7df3fbc293/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"dc3c9cd0-8467-404b-bf95-cb7df3fbc293",
								"actions"
							]
						},
						"description": "This method saves the actions and associate to a specific step\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "SupportShortly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"actionId\": \"{{actionIdShorty}}\" }"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepIdShorty}}/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepIdShorty}}",
								"actions"
							]
						},
						"description": "This method saves the actions and associate to a specific step\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				},
				{
					"name": "EmptyBody_ShouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/dc3c9cd0-8467-404b-bf95-cb7df3fbc293/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"dc3c9cd0-8467-404b-bf95-cb7df3fbc293",
								"actions"
							]
						},
						"description": "This method saves the actions and associate to a specific step\n\n@Path(\"/steps/{stepId}/actions\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "ImportScheme",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Credentials Validations",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, Invalid Credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    {\n        \"workflowObject\": {\n            \"schemes\": [\n                {\n                    \n                    \"creationDate\": 1523640559394,\n                    \"name\": \"Test1\",\n                    \"description\": \"\",\n                    \"archived\": false,\n                    \"mandatory\": false,\n                    \"defaultScheme\": false,\n                    \"modDate\": 1523640423771,\n                    \"entryActionId\": null,\n                    \"system\": false\n                }\n            ],\n            \"steps\": [\n                {\n                    \"id\": \"01d5d41a-007e-463d-a5b5-c35ea27b1a30\",\n                    \"creationDate\": 1523643857447,\n                    \"name\": \"Step1\",\n                    \"schemeId\": \"766d9cef-e138-4fe0-9acc-b8e7e40bbed3\",\n                    \"myOrder\": 0,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                },\n                {\n                    \"id\": \"2cbf9872-0ed3-407b-b803-70a9a161a7db\",\n                    \"creationDate\": 1523643857447,\n                    \"name\": \"step2\",\n                    \"schemeId\": \"766d9cef-e138-4fe0-9acc-b8e7e40bbed3\",\n                    \"myOrder\": 1,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                }\n            ],\n            \"actions\": [\n                {\n                    \"id\": \"81522b66-221b-4496-aec6-0e4c484973f7\",\n                    \"name\": \"Save it\",\n                    \"schemeId\": \"766d9cef-e138-4fe0-9acc-b8e7e40bbed3\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"2cbf9872-0ed3-407b-b803-70a9a161a7db\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"LOCKED\",\n                        \"NEW\",\n                        \"UNLOCKED\"\n                    ]\n                },\n                {\n                    \"id\": \"687c0729-95fe-4e1d-b37c-e9f70615df23\",\n                    \"name\": \"TEst\",\n                    \"schemeId\": \"766d9cef-e138-4fe0-9acc-b8e7e40bbed3\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"currentstep\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": true,\n                    \"showOn\": [\n                        \"LOCKED\",\n                        \"UNLOCKED\"\n                    ]\n                }\n            ],\n            \"actionSteps\": [\n                {\n                    \"stepId\": \"01d5d41a-007e-463d-a5b5-c35ea27b1a30\",\n                    \"actionId\": \"81522b66-221b-4496-aec6-0e4c484973f7\",\n                    \"actionOrder\": \"0\"\n                },\n                {\n                    \"stepId\": \"2cbf9872-0ed3-407b-b803-70a9a161a7db\",\n                    \"actionId\": \"687c0729-95fe-4e1d-b37c-e9f70615df23\",\n                    \"actionOrder\": \"0\"\n                }\n            ],\n            \"actionClasses\": [\n                {\n                    \"id\": \"2298b780-e1d3-4916-b981-e22fd5553086\",\n                    \"actionId\": \"81522b66-221b-4496-aec6-0e4c484973f7\",\n                    \"name\": \"Save content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Save content\",\n                        \"parameters\": null,\n                        \"nextStep\": null,\n                        \"howTo\": \"This actionlet will checkin the content.\",\n                        \"localizedName\": \"Save content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet.howTo\"\n                    }\n                }\n            ],\n            \"actionClassParams\": []\n        },\n        \"permissions\": []\n}\n    \n"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/import",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"import"
							]
						},
						"description": "Validate you can't import schemes without credentials"
					},
					"response": []
				},
				{
					"name": "SucessImportAsAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"workflowObject\": {\n            \"version\": \"1.0\",\n            \"schemes\": [\n                {\n                    \"id\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"creationDate\": 1527632337579,\n                    \"name\": \"WF_Import_AsAdmin\",\n                    \"description\": \"REST_1\",\n                    \"archived\": false,\n                    \"mandatory\": false,\n                    \"defaultScheme\": false,\n                    \"modDate\": 1527632329252,\n                    \"entryActionId\": null,\n                    \"system\": false\n                }\n            ],\n            \"steps\": [\n                {\n                    \"id\": \"4ec41c51-4006-4713-a28d-d42a719934ac\",\n                    \"creationDate\": 1527632495697,\n                    \"name\": \"Step1\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 0,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                },\n                {\n                    \"id\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"creationDate\": 1527632495698,\n                    \"name\": \"Step2\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 1,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                },\n                {\n                    \"id\": \"a0f9a62c-182a-4571-b136-6a807550e597\",\n                    \"creationDate\": 1527632495699,\n                    \"name\": \"Step3\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 2,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                },\n                {\n                    \"id\": \"09d794cb-c13a-4379-9553-cdef3842d98c\",\n                    \"creationDate\": 1527632495700,\n                    \"name\": \"Step4\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 3,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                }\n            ],\n            \"actions\": [\n                {\n                    \"id\": \"1e916358-b9bf-4331-b28b-7af41eefc970\",\n                    \"name\": \"Archive\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"09d794cb-c13a-4379-9553-cdef3842d98c\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"UNPUBLISHED\",\n                        \"UNLOCKED\",\n                        \"LOCKED\"\n                    ]\n                },\n                {\n                    \"id\": \"e93c8802-2033-4c3b-88f9-8125301d9816\",\n                    \"name\": \"Publish\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"a0f9a62c-182a-4571-b136-6a807550e597\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"UNPUBLISHED\",\n                        \"UNLOCKED\",\n                        \"LOCKED\"\n                    ]\n                },\n                {\n                    \"id\": \"b588eae6-fa32-4eeb-b30e-fa9f7a80da7f\",\n                    \"name\": \"Save\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"NEW\",\n                        \"UNLOCKED\",\n                        \"LOCKED\"\n                    ]\n                },\n                {\n                    \"id\": \"334a0f26-76b9-4be7-803b-ab6dc5461023\",\n                    \"name\": \"Un-Archive\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"currentstep\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": true,\n                    \"showOn\": [\n                        \"UNLOCKED\",\n                        \"LOCKED\",\n                        \"ARCHIVED\"\n                    ]\n                },\n                {\n                    \"id\": \"0e807408-701d-4e02-b7a0-8279f3668fdd\",\n                    \"name\": \"Unpublish\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"UNLOCKED\",\n                        \"LOCKED\",\n                        \"PUBLISHED\"\n                    ]\n                }\n            ],\n            \"actionSteps\": [\n                {\n                    \"stepId\": \"4ec41c51-4006-4713-a28d-d42a719934ac\",\n                    \"actionId\": \"b588eae6-fa32-4eeb-b30e-fa9f7a80da7f\",\n                    \"actionOrder\": \"0\"\n                },\n                {\n                    \"stepId\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"actionId\": \"1e916358-b9bf-4331-b28b-7af41eefc970\",\n                    \"actionOrder\": \"0\"\n                },\n                {\n                    \"stepId\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"actionId\": \"e93c8802-2033-4c3b-88f9-8125301d9816\",\n                    \"actionOrder\": \"1\"\n                },\n                {\n                    \"stepId\": \"a0f9a62c-182a-4571-b136-6a807550e597\",\n                    \"actionId\": \"0e807408-701d-4e02-b7a0-8279f3668fdd\",\n                    \"actionOrder\": \"0\"\n                },\n                {\n                    \"stepId\": \"09d794cb-c13a-4379-9553-cdef3842d98c\",\n                    \"actionId\": \"334a0f26-76b9-4be7-803b-ab6dc5461023\",\n                    \"actionOrder\": \"0\"\n                }\n            ],\n            \"actionClasses\": [\n                {\n                    \"id\": \"889a58e3-2c22-4164-b3c1-62fbf93b5949\",\n                    \"actionId\": \"1e916358-b9bf-4331-b28b-7af41eefc970\",\n                    \"name\": \"Archive content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.ArchiveContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Archive content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will archive the content.\",\n                        \"localizedName\": \"Archive Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.ArchiveContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"51610a9a-9be6-489b-ba75-336bf632fc13\",\n                    \"actionId\": \"e93c8802-2033-4c3b-88f9-8125301d9816\",\n                    \"name\": \"Publish content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Publish content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will publish the content.\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Publish Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"f52163e8-c4a1-4862-be40-0c530cd8f154\",\n                    \"actionId\": \"b588eae6-fa32-4eeb-b30e-fa9f7a80da7f\",\n                    \"name\": \"Save content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Save content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will checkin the content.\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Save content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"789b3b43-0b19-40df-b5e0-e7e161dd1f39\",\n                    \"actionId\": \"334a0f26-76b9-4be7-803b-ab6dc5461023\",\n                    \"name\": \"Unarchive content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.UnarchiveContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Unarchive content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will un archive the content and return it to a working state\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Unarchive Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.UnarchiveContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"700330ab-8974-40d5-9131-67aa05731b48\",\n                    \"actionId\": \"0e807408-701d-4e02-b7a0-8279f3668fdd\",\n                    \"name\": \"Publish content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Publish content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will publish the content.\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Publish Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet.howTo\"\n                    }\n                }\n            ],\n            \"actionClassParams\": []\n        },\n        \"permissions\": []\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/import",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"import"
							]
						},
						"description": "Validate you can import schemes as admin\n"
					},
					"response": []
				},
				{
					"name": "ImportSchemaExistingId_ShouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Already existing id\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Already exist a scheme with the same id\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n        \"workflowObject\": {\n            \"version\": \"1.0\",\n            \"schemes\": [\n                {\n                    \"id\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"creationDate\": 1527632337579,\n                    \"name\": \"WF_Import_AsAdmin\",\n                    \"description\": \"REST_1\",\n                    \"archived\": false,\n                    \"mandatory\": false,\n                    \"defaultScheme\": false,\n                    \"modDate\": 1527632329252,\n                    \"entryActionId\": null,\n                    \"system\": false\n                }\n            ],\n            \"steps\": [\n                {\n                    \"id\": \"4ec41c51-4006-4713-a28d-d42a719934ac\",\n                    \"creationDate\": 1527632495697,\n                    \"name\": \"Step1\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 0,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                },\n                {\n                    \"id\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"creationDate\": 1527632495698,\n                    \"name\": \"Step2\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 1,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                },\n                {\n                    \"id\": \"a0f9a62c-182a-4571-b136-6a807550e597\",\n                    \"creationDate\": 1527632495699,\n                    \"name\": \"Step3\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 2,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                },\n                {\n                    \"id\": \"09d794cb-c13a-4379-9553-cdef3842d98c\",\n                    \"creationDate\": 1527632495700,\n                    \"name\": \"Step4\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"myOrder\": 3,\n                    \"resolved\": false,\n                    \"enableEscalation\": false,\n                    \"escalationAction\": null,\n                    \"escalationTime\": 0\n                }\n            ],\n            \"actions\": [\n                {\n                    \"id\": \"1e916358-b9bf-4331-b28b-7af41eefc970\",\n                    \"name\": \"Archive\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"09d794cb-c13a-4379-9553-cdef3842d98c\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"UNPUBLISHED\",\n                        \"UNLOCKED\",\n                        \"LOCKED\"\n                    ]\n                },\n                {\n                    \"id\": \"e93c8802-2033-4c3b-88f9-8125301d9816\",\n                    \"name\": \"Publish\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"a0f9a62c-182a-4571-b136-6a807550e597\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"UNPUBLISHED\",\n                        \"UNLOCKED\",\n                        \"LOCKED\"\n                    ]\n                },\n                {\n                    \"id\": \"b588eae6-fa32-4eeb-b30e-fa9f7a80da7f\",\n                    \"name\": \"Save\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"NEW\",\n                        \"UNLOCKED\",\n                        \"LOCKED\"\n                    ]\n                },\n                {\n                    \"id\": \"334a0f26-76b9-4be7-803b-ab6dc5461023\",\n                    \"name\": \"Un-Archive\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"currentstep\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": true,\n                    \"showOn\": [\n                        \"UNLOCKED\",\n                        \"LOCKED\",\n                        \"ARCHIVED\"\n                    ]\n                },\n                {\n                    \"id\": \"0e807408-701d-4e02-b7a0-8279f3668fdd\",\n                    \"name\": \"Unpublish\",\n                    \"schemeId\": \"42771904-b7d9-42b7-b038-8e077fabcf3f\",\n                    \"condition\": \"\",\n                    \"nextStep\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"nextAssign\": \"e7d4e34e-5127-45fc-8123-d48b62d510e3\",\n                    \"icon\": \"workflowIcon\",\n                    \"roleHierarchyForAssign\": false,\n                    \"assignable\": false,\n                    \"commentable\": false,\n                    \"order\": 0,\n                    \"owner\": null,\n                    \"nextStepCurrentStep\": false,\n                    \"showOn\": [\n                        \"UNLOCKED\",\n                        \"LOCKED\",\n                        \"PUBLISHED\"\n                    ]\n                }\n            ],\n            \"actionSteps\": [\n                {\n                    \"stepId\": \"4ec41c51-4006-4713-a28d-d42a719934ac\",\n                    \"actionId\": \"b588eae6-fa32-4eeb-b30e-fa9f7a80da7f\",\n                    \"actionOrder\": \"0\"\n                },\n                {\n                    \"stepId\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"actionId\": \"1e916358-b9bf-4331-b28b-7af41eefc970\",\n                    \"actionOrder\": \"0\"\n                },\n                {\n                    \"stepId\": \"5fa5a384-53c0-4c47-8ba1-5751e003b7b4\",\n                    \"actionId\": \"e93c8802-2033-4c3b-88f9-8125301d9816\",\n                    \"actionOrder\": \"1\"\n                },\n                {\n                    \"stepId\": \"a0f9a62c-182a-4571-b136-6a807550e597\",\n                    \"actionId\": \"0e807408-701d-4e02-b7a0-8279f3668fdd\",\n                    \"actionOrder\": \"0\"\n                },\n                {\n                    \"stepId\": \"09d794cb-c13a-4379-9553-cdef3842d98c\",\n                    \"actionId\": \"334a0f26-76b9-4be7-803b-ab6dc5461023\",\n                    \"actionOrder\": \"0\"\n                }\n            ],\n            \"actionClasses\": [\n                {\n                    \"id\": \"889a58e3-2c22-4164-b3c1-62fbf93b5949\",\n                    \"actionId\": \"1e916358-b9bf-4331-b28b-7af41eefc970\",\n                    \"name\": \"Archive content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.ArchiveContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Archive content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will archive the content.\",\n                        \"localizedName\": \"Archive Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.ArchiveContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"51610a9a-9be6-489b-ba75-336bf632fc13\",\n                    \"actionId\": \"e93c8802-2033-4c3b-88f9-8125301d9816\",\n                    \"name\": \"Publish content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Publish content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will publish the content.\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Publish Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"f52163e8-c4a1-4862-be40-0c530cd8f154\",\n                    \"actionId\": \"b588eae6-fa32-4eeb-b30e-fa9f7a80da7f\",\n                    \"name\": \"Save content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Save content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will checkin the content.\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Save content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"789b3b43-0b19-40df-b5e0-e7e161dd1f39\",\n                    \"actionId\": \"334a0f26-76b9-4be7-803b-ab6dc5461023\",\n                    \"name\": \"Unarchive content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.UnarchiveContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Unarchive content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will un archive the content and return it to a working state\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Unarchive Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.UnarchiveContentActionlet.howTo\"\n                    }\n                },\n                {\n                    \"id\": \"700330ab-8974-40d5-9131-67aa05731b48\",\n                    \"actionId\": \"0e807408-701d-4e02-b7a0-8279f3668fdd\",\n                    \"name\": \"Publish content\",\n                    \"order\": 0,\n                    \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet\",\n                    \"actionlet\": {\n                        \"name\": \"Publish content\",\n                        \"parameters\": null,\n                        \"howTo\": \"This actionlet will publish the content.\",\n                        \"nextStep\": null,\n                        \"localizedName\": \"Publish Content\",\n                        \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet.howTo\"\n                    }\n                }\n            ],\n            \"actionClassParams\": []\n        },\n        \"permissions\": []\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/import",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"import"
							]
						},
						"description": "Validate you can import schemes as admin\n"
					},
					"response": []
				},
				{
					"name": "EmptyBody_ShouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/import",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"import"
							]
						},
						"description": "Validate you can import schemes as limited user if you have permissions to the workflow portlet "
					},
					"response": []
				},
				{
					"name": "ImportWithNotifyAssignActionlet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"OK\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"workflowObject\": {\n        \"actionClassParams\": [\n            {\n                \"actionClassId\": \"deb0865a-8367-499a-9c80-f70f6cb4a201\",\n                \"id\": \"2163cb23-8b9a-406a-b2fa-7beecd5c63b0\",\n                \"key\": \"emailSubject\",\n                \"value\": \"subject\"\n            },\n            {\n                \"actionClassId\": \"deb0865a-8367-499a-9c80-f70f6cb4a201\",\n                \"id\": \"f98771e9-ca5c-438a-a23b-85594b92af45\",\n                \"key\": \"emailBody\",\n                \"value\": \"msg\"\n            },\n            {\n                \"actionClassId\": \"deb0865a-8367-499a-9c80-f70f6cb4a201\",\n                \"id\": \"d831815e-f9c4-4338-956f-2e8b9e0e371b\",\n                \"key\": \"isHtml\",\n                \"value\": \"true\"\n            }\n        ],\n        \"actionClasses\": [\n            {\n                \"actionId\": \"9148bd02-9d49-4765-8570-17f9a28d64bc\",\n                \"actionlet\": {\n                    \"actionClass\": \"com.dotmarketing.portlets.workflows.actionlet.NotifyAssigneeActionlet\",\n                    \"howTo\": \"This actionlet will send an email to the assignee (or assignees if the next assign is a role).  It uses a default email subject and message, but can be overridden.  Both the subject and message are parsed Velocity, and have access to a $workflow object that gives them $workflow.task, $workflow.nextAssign, $workflow.action, $workflow.step, etc.. \",\n                    \"localizedHowto\": \"com.dotmarketing.portlets.workflows.actionlet.NotifyAssigneeActionlet.howTo\",\n                    \"localizedName\": \"Notify Assignee\",\n                    \"name\": \"Notify Assignee\",\n                    \"nextStep\": null,\n                    \"parameters\": [\n                        {\n                            \"defaultValue\": \"\",\n                            \"displayName\": \"Email Subject\",\n                            \"key\": \"emailSubject\",\n                            \"required\": false\n                        },\n                        {\n                            \"defaultValue\": null,\n                            \"displayName\": \"Email Message\",\n                            \"key\": \"emailBody\",\n                            \"required\": false\n                        },\n                        {\n                            \"defaultValue\": \"true\",\n                            \"displayName\": \"Is Html?\",\n                            \"key\": \"isHtml\",\n                            \"required\": false\n                        }\n                    ]\n                },\n                \"clazz\": \"com.dotmarketing.portlets.workflows.actionlet.NotifyAssigneeActionlet\",\n                \"id\": \"deb0865a-8367-499a-9c80-f70f6cb4a201\",\n                \"name\": \"Notify Assignee\",\n                \"order\": 0\n            }\n        ],\n        \"actionSteps\": [\n            {\n                \"actionId\": \"9148bd02-9d49-4765-8570-17f9a28d64bc\",\n                \"actionOrder\": \"0\",\n                \"stepId\": \"2ad8291f-eee4-4ce7-ab99-1b2186ef4dec\"\n            }\n        ],\n        \"actions\": [\n            {\n                \"assignable\": false,\n                \"commentable\": false,\n                \"condition\": \"\",\n                \"icon\": \"workflowIcon\",\n                \"id\": \"9148bd02-9d49-4765-8570-17f9a28d64bc\",\n                \"name\": \"test\",\n                \"nextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n                \"nextStep\": \"currentstep\",\n                \"nextStepCurrentStep\": true,\n                \"order\": 0,\n                \"owner\": null,\n                \"roleHierarchyForAssign\": false,\n                \"schemeId\": \"8760ea91-9912-456c-b719-7c63e81fa981\",\n                \"showOn\": []\n            }\n        ],\n        \"schemeSystemActionWorkflowActionMappings\": [],\n        \"schemes\": [\n            {\n                \"archived\": false,\n                \"creationDate\": 1623256714100,\n                \"defaultScheme\": false,\n                \"description\": \"\",\n                \"entryActionId\": null,\n                \"id\": \"8760ea91-9912-456c-b719-7c63e81fa981\",\n                \"mandatory\": false,\n                \"modDate\": 1623203259556,\n                \"name\": \"Test\",\n                \"system\": false\n            }\n        ],\n        \"steps\": [\n            {\n                \"creationDate\": 1623256717104,\n                \"enableEscalation\": false,\n                \"escalationAction\": null,\n                \"escalationTime\": 0,\n                \"id\": \"2ad8291f-eee4-4ce7-ab99-1b2186ef4dec\",\n                \"myOrder\": 0,\n                \"name\": \"step1\",\n                \"resolved\": false,\n                \"schemeId\": \"8760ea91-9912-456c-b719-7c63e81fa981\"\n            }\n        ],\n        \"version\": \"1.0\"\n    },\n    \"permissions\": []\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/import",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"import"
							]
						},
						"description": "Validate you can import schemes as admin\n"
					},
					"response": []
				},
				{
					"name": "CopySchemewithNotifyAssignActionlet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n       \"name\": \"Copy Workflow\"\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/8760ea91-9912-456c-b719-7c63e81fa981/copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"8760ea91-9912-456c-b719-7c63e81fa981",
								"copy"
							]
						},
						"description": "Validate you can import schemes as admin\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "ExportScheme",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Credentials Validation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, Invalid credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Correct response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/d61a59e1a4/export",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"d61a59e1a4",
								"export"
							]
						},
						"description": "Validate you can't export without credentials"
					},
					"response": []
				},
				{
					"name": "Sucess Export As Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Includes scheme\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"REST Schema\\\"\");",
									"});",
									"",
									"pm.test(\"Includes step\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									"",
									"pm.test(\"Includes action\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}/export",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}",
								"export"
							]
						},
						"description": "Validate you can export schemes as admin user"
					},
					"response": []
				},
				{
					"name": "ShortlyIdValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Includes scheme\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"REST Schema\\\"\");",
									"});",
									"",
									"pm.test(\"Includes step\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									"",
									"pm.test(\"Includes action\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeIdShorty}}/export",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeIdShorty}}",
								"export"
							]
						},
						"description": "Validate you can export schemes as admin user"
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdateStep",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/94178d17-96a0-4e08-b9aa-94214a7fb31e",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"94178d17-96a0-4e08-b9aa-94214a7fb31e"
							]
						},
						"description": "This method update the some step using the id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"REST step UPDATED\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"stepOrder\":5, \"stepName\":\"REST step UPDATED\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}"
							]
						},
						"description": "This method update the some step using the id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"stepOrder\":5, \"stepName\":\"REST\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/ad6b095b6-b65f-4bdb-bbfd-701d663dfee2",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"ad6b095b6-b65f-4bdb-bbfd-701d663dfee2"
							]
						},
						"description": "This method update the some step using the id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				},
				{
					"name": "SupportShortlyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"REST step Updated again\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"stepOrder\":5, \"stepName\":\"REST step Updated again\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepIdShorty}}"
							]
						},
						"description": "This method update the some step using the id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				},
				{
					"name": "EmptyBody_shouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/d6b095b6-b65f-4bdb-bbfd-701d663dfee2",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"d6b095b6-b65f-4bdb-bbfd-701d663dfee2"
							]
						},
						"description": "This method update the some step using the id \n\n@Path(\"/steps/{stepId}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "ReorderStep",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/step/94178d17-96a0-4e08-b9aa-94214a7fb31e/order/0",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"step",
								"94178d17-96a0-4e08-b9aa-94214a7fb31e",
								"order",
								"0"
							]
						},
						"description": "Change the order of the steps in a scheme\n\n@Path(\"/reorder/step/{stepId}/order/{order}\")"
					},
					"response": []
				},
				{
					"name": "SuccessReorder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/step/{{stepId}}/order/0",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"step",
								"{{stepId}}",
								"order",
								"0"
							]
						},
						"description": "Change the order of the steps in a scheme\n\n@Path(\"/reorder/step/{stepId}/order/{order}\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/step/adc3c9cd0-8467-404b-bf95-cb7df3fbc293/order/0",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"step",
								"adc3c9cd0-8467-404b-bf95-cb7df3fbc293",
								"order",
								"0"
							]
						},
						"description": "Change the order of the steps in a scheme\n\n@Path(\"/reorder/step/{stepId}/order/{order}\")"
					},
					"response": []
				},
				{
					"name": "SupportShortlyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/step/{{stepIdShorty}}/order/0",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"step",
								"{{stepIdShorty}}",
								"order",
								"0"
							]
						},
						"description": "Change the order of the steps in a scheme\n\n@Path(\"/reorder/step/{stepId}/order/{order}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "UpdateScheme",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"REST2\", \"schemeDescription\": \"rest1\", \"schemeArchived\": \"false\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/211040db-5d79-4e3c-807a-1f2dec2ff16b",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"211040db-5d79-4e3c-807a-1f2dec2ff16b"
							]
						},
						"description": "Updates an existing scheme\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessUpdate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"WF_Import_AsAdmin_edited\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"WF_Import_AsAdmin_edited\", \"schemeDescription\": \"AutomaticTest\", \"schemeArchived\": \"false\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}"
							]
						},
						"description": "Updates an existing scheme\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidSchemeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 \", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"Default Scheme Updated from REST\", \"schemeDescription\": \"AutomaticTest\", \"schemeArchived\": \"false\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/a85c1515c-c4f3-463c-bac2-860b8fcacc34",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"a85c1515c-c4f3-463c-bac2-860b8fcacc34"
							]
						},
						"description": "Updates an existing scheme\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "SupportShorty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"WF_Import_AsAdmin_edited_Shorty\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"WF_Import_AsAdmin_edited_Shorty\", \"schemeDescription\": \"AutomaticTest\", \"schemeArchived\": \"true\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeIdShorty}}"
							]
						},
						"description": "Updates an existing scheme\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "EmptyBody_ShouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/85c1515c-c4f3-463c-bac2-860b8fcacc34",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"85c1515c-c4f3-463c-bac2-860b8fcacc34"
							]
						},
						"description": "Updates an existing scheme\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "ReorderAction",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"order\" : 3}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/steps/94178d17-96a0-4e08-b9aa-94214a7fb31e/actions/7075981c-eda2-4896-a65c-71749ee2877e",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"steps",
								"94178d17-96a0-4e08-b9aa-94214a7fb31e",
								"actions",
								"7075981c-eda2-4896-a65c-71749ee2877e"
							]
						},
						"description": "Change the order of an action associated to the step\n\n@Path(\"/reorder/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"order\" : 0}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/steps/{{stepId}}/actions/{{actionId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"steps",
								"{{stepId}}",
								"actions",
								"{{actionId}}"
							]
						},
						"description": "Change the order of an action associated to the step\n\n@Path(\"/reorder/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidOrderValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400, Bad request\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Numeric value\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "bill",
									"type": "string"
								},
								{
									"key": "username",
									"value": "bill@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"order\" : 123012301203102301230102301230123}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/steps/1f67a807-5094-4229-9dd7-7b0a4fb57a1e/actions/64fa7b51-bfc4-4686-8775-70a8cd44aee7",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"steps",
								"1f67a807-5094-4229-9dd7-7b0a4fb57a1e",
								"actions",
								"64fa7b51-bfc4-4686-8775-70a8cd44aee7"
							]
						},
						"description": "Change the order of an action associated to the step\n\n@Path(\"/reorder/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Action does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "bill",
									"type": "string"
								},
								{
									"key": "username",
									"value": "bill@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"order\" : 1}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/steps/a1f67a807-5094-4229-9dd7-7b0a4fb57a1e/actions/64fa7b51-bfc4-4686-8775-70a8cd44aee7",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"steps",
								"a1f67a807-5094-4229-9dd7-7b0a4fb57a1e",
								"actions",
								"64fa7b51-bfc4-4686-8775-70a8cd44aee7"
							]
						},
						"description": "Change the order of an action associated to the step\n\n@Path(\"/reorder/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidActionId ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Action does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "bill",
									"type": "string"
								},
								{
									"key": "username",
									"value": "bill@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"order\" : 1}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/steps/1f67a807-5094-4229-9dd7-7b0a4fb57a1e/actions/a64fa7b51-bfc4-4686-8775-70a8cd44aee7",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"steps",
								"1f67a807-5094-4229-9dd7-7b0a4fb57a1e",
								"actions",
								"a64fa7b51-bfc4-4686-8775-70a8cd44aee7"
							]
						},
						"description": "Change the order of an action associated to the step\n\n@Path(\"/reorder/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "SupportShortly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"order\" : 1}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/steps/{{stepIdShorty}}/actions/{{actionIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"steps",
								"{{stepIdShorty}}",
								"actions",
								"{{actionIdShorty}}"
							]
						},
						"description": "Change the order of an action associated to the step\n\n@Path(\"/reorder/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "EmptyBody_shouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/reorder/steps/1f67a807-5094-4229-9dd7-7b0a4fb57a1e/actions/64fa7b51-bfc4-4686-8775-70a8cd44aee7",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"reorder",
								"steps",
								"1f67a807-5094-4229-9dd7-7b0a4fb57a1e",
								"actions",
								"64fa7b51-bfc4-4686-8775-70a8cd44aee7"
							]
						},
						"description": "Change the order of an action associated to the step\n\n@Path(\"/reorder/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "FireActionById",
			"item": [
				{
					"name": "Fire Destroy",
					"item": [
						{
							"name": "Create ContentType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"contentTypeID\", jsonData.entity[0].id);",
											"pm.collectionVariables.set(\"contentTypeVAR\", jsonData.entity[0].variable);",
											"pm.collectionVariables.set(\"contentTypeFieldID\", jsonData.entity[0].fields[0].id);",
											"",
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"fields check\", function () {",
											"    pm.expect(jsonData.entity[0].fields.length).to.eql(1);",
											"});",
											"",
											"pm.test(\"description check\", function () {",
											"    pm.expect(jsonData.entity[0].description).to.eql('THE DESCRIPTION');",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\", \n    \"defaultType\": false, \n    \"name\": \"Test Content Type\", \n    \"description\": \"THE DESCRIPTION\", \n    \"host\": \"SYSTEM_HOST\", \n    \"owner\": \"dotcms.org.1\", \n    \"fixed\": false, \n    \"system\": false, \n    \"folder\": \"SYSTEM_FOLDER\",\n    \"fields\": [\n            {\n                \"dataType\": \"LONG_TEXT\",\n                \"dbColumn\": \"text_area2\",\n                \"fieldVariables\": [],\n                \"fixed\": false,\n                \"iDate\": 1453474468000,\n                \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n                \"indexed\": true,\n                \"listed\": false,\n                \"modDate\": 1478557845000,\n                \"name\": \"Title\",\n                \"readOnly\": false,\n                \"required\": false,\n                \"searchable\": true,\n                \"sortOrder\": 3,\n                \"unique\": false,\n                \"variable\": \"title\"\n            }],\n            \"workflow\": [\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"]\n}\n"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that new properties of content types are set (icon and sortOrder)."
							},
							"response": []
						},
						{
							"name": "Create contentlet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.collectionVariables.set(\"contentletID\", jsonData.entity.identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"contentlet\":{\n\t\t\"stName\": \"{{contentTypeVAR}}\",\n\t\t\"title\": \"test\"\n\t}\n}"
								},
								"url": {
									"raw": "http://localhost:8080/api/v1/workflow/actions/default/fire/NEW",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"NEW"
									]
								}
							},
							"response": []
						},
						{
							"name": "Archive contentlet",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " ",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/4da13a42-5d59-480c-ad8f-94a3adf809fe/fire?identifier={{contentletID}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"4da13a42-5d59-480c-ad8f-94a3adf809fe",
										"fire"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{contentletID}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Destroy Contentlet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code should be ok 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": " {}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/1e0f1c6b-b67f-4c99-983d-db2b4bfa88b2/fire?identifier={{contentletID}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"1e0f1c6b-b67f-4c99-983d-db2b4bfa88b2",
										"fire"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{contentletID}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SucessRequest\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentletIdentifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"contentletInode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"fireActionLanguageKey\", jsonData.entity.key);",
									"// pm.collectionVariables.set(\"contentletIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"SucessRequest{{$timestamp}}\",\n  \"value\": \"SucessRequest{{$timestamp}}\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "InvalidActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Action does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"postman\",\n  \"value\": \"postman\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/ab9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"ab9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "InvalidContentTypeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Content Type with id\");",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"af4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"postman\",\n  \"value\": \"postman\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "SupportShorlty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SupportShorty\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"SupportShorty{{$timestamp}}\",\n  \"value\": \"SupportShorty{{$timestamp}}\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d8843/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d8843",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "FireActionWithoutBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SucessRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d8843/fire?inode={{contentletInode}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d8843",
								"fire"
							],
							"query": [
								{
									"key": "inode",
									"value": "{{contentletInode}}"
								}
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "ExistingUniqueContent_ShouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400, BadRequest\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"unique\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"{{fireActionLanguageKey}}\",\n  \"value\": \"postman3\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest_Mutipart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"First binary included\", function () {",
									"    pm.expect(jsonData.entity.asset).include(\"james.jpeg\"); ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json",
									"value": "{ \"contentlet\" : {\n  \"stInode\" : \"f2d8a1c7-2b77-2081-bcf1-b5348988c08d\"\n}\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "resources/WorkflowResource/testImages/james.jpeg"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "FireDefaultAction",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SucessRequest\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentletIdentifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"contentletInode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"fireActionLanguageKey\", jsonData.entity.key);",
									"// pm.collectionVariables.set(\"contentletIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"SucessRequest{{$timestamp}}\",\n  \"value\": \"SucessRequest{{$timestamp}}\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "Fire Publish BaseType Can Not Be Resolved BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\":{\n        \"baseType\":\"BaseTypeNotExist\",\n        \"asset\":\"temp_c41afefd64\",\n        \"hostFolder\":\"48190c8c-42c4-46af-8d1a-0cd5db894797\",\n        \"indexPolicy\":\"WAIT_FOR\"\n        }\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Fire a publish action. In the body the contentType is not sent, just the baseType but it doesn't exists so 400."
					},
					"response": []
				},
				{
					"name": "InvalidActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"No enum constant\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"postman\",\n  \"value\": \"postman\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/NONEXISTING",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"NONEXISTING"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "InvalidContentTypeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Content Type with id\");",
									"    pm.expect(pm.response.text()).to.include(\"not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"af4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"postman\",\n  \"value\": \"postman\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "FireActionWithoutBody",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"SucessRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d8843/fire?inode={{contentletInode}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d8843",
								"fire"
							],
							"query": [
								{
									"key": "inode",
									"value": "{{contentletInode}}"
								}
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "ExistingUniqueContent_ShouldRespond400",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400, BadRequest\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"unique\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"f4d7c1b8-2c88-4071-abf1-a5328977b07d\",\n  \"languageId\" : 1,\n  \"key\": \"{{fireActionLanguageKey}}\",\n  \"value\": \"postman3\"\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "BadRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400 \", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/b9d89c80-3d88-4311-8365-187323c96436/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"b9d89c80-3d88-4311-8365-187323c96436",
								"fire"
							]
						},
						"description": "Fire any action uysing the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here. \n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				},
				{
					"name": "SuccessRequest_Mutipart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"First binary included\", function () {",
									"    pm.expect(jsonData.entity.asset).include(\"james.jpeg\"); ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json",
									"value": "{ \"contentlet\" : {\n  \"stInode\" : \"f2d8a1c7-2b77-2081-bcf1-b5348988c08d\"\n}\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "resources/WorkflowResource/testImages/james.jpeg"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "CopyScheme",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/d61a59e1a4/copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"d61a59e1a4",
								"copy"
							]
						},
						"description": "Do a copy of an existing scheme \n\n@Path(\"/schemes/{schemeId}/copy\")"
					},
					"response": []
				},
				{
					"name": "SuccessCopy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Copy from REST (automatic)\");",
									"});",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"creationDate\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}/copy?name=Copy from REST (automatic)",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}",
								"copy"
							],
							"query": [
								{
									"key": "name",
									"value": "Copy from REST (automatic)"
								}
							]
						},
						"description": "Do a copy of an existing scheme \n\n@Path(\"/schemes/{schemeId}/copy\")"
					},
					"response": []
				},
				{
					"name": "InvalidSchemeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exis\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/ad61a59e1-a49c-46f2-a929-db2b4bfa88b2/copy?name=Copy from REST (automatic)_limited",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"ad61a59e1-a49c-46f2-a929-db2b4bfa88b2",
								"copy"
							],
							"query": [
								{
									"key": "name",
									"value": "Copy from REST (automatic)_limited"
								}
							]
						},
						"description": "Do a copy of an existing scheme \n\n@Path(\"/schemes/{schemeId}/copy\")"
					},
					"response": []
				},
				{
					"name": "CopyWithAlreadyExistingName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Copy from REST (automatic)_limited\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}/copy?name=Copy from REST (automatic)_limited",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}",
								"copy"
							],
							"query": [
								{
									"key": "name",
									"value": "Copy from REST (automatic)_limited"
								}
							]
						},
						"description": "Do a copy of an existing scheme \n\n@Path(\"/schemes/{schemeId}/copy\")"
					},
					"response": []
				},
				{
					"name": "CopyWithotNameParam",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Copy from REST (automatic)_limited\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\":\"Copy from REST (automatic)_limited\" }"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}/copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}",
								"copy"
							]
						},
						"description": "Do a copy of an existing scheme \n\n@Path(\"/schemes/{schemeId}/copy\")"
					},
					"response": []
				},
				{
					"name": "SupportShortly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Copy Using ShortlyID\");",
									"});",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"creationDate\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"name\":\"Copy from REST (automatic)_limited\" }"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeIdShorty}}/copy?name=Copy Using ShortlyID",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeIdShorty}}",
								"copy"
							],
							"query": [
								{
									"key": "name",
									"value": "Copy Using ShortlyID"
								}
							]
						},
						"description": "Do a copy of an existing scheme \n\n@Path(\"/schemes/{schemeId}/copy\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteStep",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/c6035d07-8e8f-4a71-ad93-93adabf13906",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"c6035d07-8e8f-4a71-ad93-93adabf13906"
							]
						},
						"description": "This method deletes a step using the ID\n\n@Path(\"/steps/{stepId}\")\n"
					},
					"response": []
				},
				{
					"name": "SuccessDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"stepId\"));",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}"
							]
						},
						"description": "This method deletes a step using the ID\n\n@Path(\"/steps/{stepId}\")\n"
					},
					"response": []
				},
				{
					"name": "ReferencedStepValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"is being referenced by\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/ee24a4cb-2d15-4c98-b1bd-6327126451f3",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"ee24a4cb-2d15-4c98-b1bd-6327126451f3"
							]
						},
						"description": "This method deletes a step using the ID\n\n@Path(\"/steps/{stepId}\")\n"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/zee24a4cb-2d15-4c98-b1bd-6327126451f3",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"zee24a4cb-2d15-4c98-b1bd-6327126451f3"
							]
						},
						"description": "This method deletes a step using the ID\n\n@Path(\"/steps/{stepId}\")\n"
					},
					"response": []
				},
				{
					"name": "GivenValidStep_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"stepId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"stepIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"{{schemeId}}\", \"stepName\":\"My REST step\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "SupportShortly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"stepId\"));",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepIdShorty}}"
							]
						},
						"description": "This method deletes a step using the ID\n\n@Path(\"/steps/{stepId}\")\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteAction (Permanently)",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/9012b349-e8ce-446f-86df-50b4f82a82ff",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"9012b349-e8ce-446f-86df-50b4f82a82ff"
							]
						},
						"description": "Deletes an action associated to the scheme and all references into steps\n\n@Path(\"/actions/{actionId}\")\n"
					},
					"response": []
				},
				{
					"name": "SuccessRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"{{actionId}}"
							]
						},
						"description": "Deletes an action associated to the scheme and all references into steps\n\n@Path(\"/actions/{actionId}\")\n"
					},
					"response": []
				},
				{
					"name": "InvalidActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Action does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "chris",
									"type": "string"
								},
								{
									"key": "username",
									"value": "chris@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/123",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"123"
							]
						},
						"description": "Deletes an action associated to the scheme and all references into steps\n\n@Path(\"/actions/{actionId}\")\n"
					},
					"response": []
				},
				{
					"name": "GivenValidStep_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"stepId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"stepIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"{{schemeId}}\", \"stepName\":\"My REST step\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "ValidAction_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"actionId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"actionIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"{{stepId}}\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"{{schemeId}}\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "SupportShortly",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"{{actionIdShorty}}"
							]
						},
						"description": "Deletes an action associated to the scheme and all references into steps\n\n@Path(\"/actions/{actionId}\")\n"
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteAction (from step)",
			"item": [
				{
					"name": "GivenValidStep_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"stepId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"stepIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"{{schemeId}}\", \"stepName\":\"My REST step\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "ValidAction_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"actionId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"actionIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"{{stepId}}\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"{{schemeId}}\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/0c5018fc-4773-4524-9ba8-328ca4c3d0b2/actions/658278d3-aa3b-4ce4-a028-c9e1656e4f9e",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"0c5018fc-4773-4524-9ba8-328ca4c3d0b2",
								"actions",
								"658278d3-aa3b-4ce4-a028-c9e1656e4f9e"
							]
						},
						"description": "Deletes an action associated to the step\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "SuceessDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}/actions/{{actionId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}",
								"actions",
								"{{actionId}}"
							]
						},
						"description": "Deletes an action associated to the step\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidStepId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Step does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/123/actions/c92f9aa1-9503-4567-ac30-d3242b54d02d",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"123",
								"actions",
								"c92f9aa1-9503-4567-ac30-d3242b54d02d"
							]
						},
						"description": "Deletes an action associated to the step\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidActionId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Action does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepId}}/actions/123",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepId}}",
								"actions",
								"123"
							]
						},
						"description": "Deletes an action associated to the step\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				},
				{
					"name": "GivenValidStep_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"My REST step\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"stepId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"stepIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " { \"schemeId\" : \"{{schemeId}}\", \"stepName\":\"My REST step\", \"enableEscalation\":false, \"escalationAction\":\"\", \"escalationTime\":\"0\",\"stepResolved\":false} "
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps"
							]
						},
						"description": "Add a new workflow step \n\n@Path(\"/steps\")"
					},
					"response": []
				},
				{
					"name": "ValidAction_shouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"saveContent FROM REST NEW\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"actionId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"actionIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"stepId\": \"{{stepId}}\",\n      \"actionName\": \"saveContent FROM REST NEW\",\n      \"schemeId\": \"{{schemeId}}\",\n      \"actionCondition\": \"\",\n      \"actionNextStep\": \"currentstep\",\n      \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n      \"actionRoleHierarchyForAssign\": false,\n      \"actionAssignable\": false,\n      \"actionCommentable\": true,\n      \"whoCanUse\":[],\n      \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n      ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions"
							]
						},
						"description": "Saves an action, by default the action is associated to the schema, however if the stepId is set will be automatically associated to the step too.\n\n@Path(\"/actions\")"
					},
					"response": []
				},
				{
					"name": "SupportShortlyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Ok\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/steps/{{stepIdShorty}}/actions/{{actionIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"steps",
								"{{stepIdShorty}}",
								"actions",
								"{{actionIdShorty}}"
							]
						},
						"description": "Deletes an action associated to the step\n\n@Path(\"/steps/{stepId}/actions/{actionId}\")"
					},
					"response": []
				}
			]
		},
		{
			"name": "DeleteScheme",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "UserCredentialsValidation",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Status code is 401, You need credentials\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Invalid User\");",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/85c1515c-c4f3-463c-bac2-860b8fcacc34",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"85c1515c-c4f3-463c-bac2-860b8fcacc34"
							]
						},
						"description": "Deletes an existing scheme (the response is async)\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "archiveScheme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"WF_Import_AsAdmin_edited\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"WF_Import_AsAdmin_edited\", \"schemeDescription\": \"AutomaticTest\", \"schemeArchived\": \"true\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}"
							]
						},
						"description": "Updates an existing scheme\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "SuccessDelete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"id\");",
									"});",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"name\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}"
							]
						},
						"description": "Deletes an existing scheme (the response is async)\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "InvalidSchemeId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"The Workflow Scheme does not exist\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/123",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"123"
							]
						},
						"description": "Deletes an existing scheme (the response is async)\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "GivenValidScheme_ShouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes name\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"REST Schema\\\"\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"schemeId\", jsonData.entity.id);",
									"pm.collectionVariables.set(\"schemeIdShorty\", jsonData.entity.id.replace(\"-\",\"\").substring(0,10));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"REST Schema\", \"schemeDescription\": \"rest1\", \"schemeArchived\": \"false\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes"
							]
						},
						"description": "Creates a new scheme \n\n@Path(\"/schemes\")"
					},
					"response": []
				},
				{
					"name": "archiveScheme",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"\\\"name\\\":\\\"WF_Import_AsAdmin_edited\\\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"schemeName\": \"WF_Import_AsAdmin_edited\", \"schemeDescription\": \"AutomaticTest\", \"schemeArchived\": \"true\"}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeId}}"
							]
						},
						"description": "Updates an existing scheme\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				},
				{
					"name": "SupportShorlty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200, You need credentials\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"WF_Import_AsAdmin_edited\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/schemes/{{schemeIdShorty}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"schemes",
								"{{schemeIdShorty}}"
							]
						},
						"description": "Deletes an existing scheme (the response is async)\n\n@Path(\"/schemes/{schemeId}\")"
					},
					"response": []
				}
			],
			"description": "Deletes an existing scheme (the response is async)\n\n@Path(\"/schemes/{schemeId}\")",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "systemActions",
			"item": [
				{
					"name": "Creates a Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"defaultType\":false,\n   \"fixed\":false,\n   \"system\":false,\n   \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n   \"description\":\"\",\n   \"host\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n   \"folder\":\"SYSTEM_FOLDER\",\n   \"name\":\"TestContentTypeSystemActions\",\n   \"systemActionMappings\":{\n      \"NEW\":\"ceca71a0-deee-4999-bd47-b01baa1bcfc8\"\n   },\n   \"workflow\":[\n      \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								""
							]
						},
						"description": "Creates a content type to associate a system workflow"
					},
					"response": []
				},
				{
					"name": "Create System Workflow Action for New Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"actionId\":\"b9d89c80-3d88-4311-8365-187323c96436\",\n\t\"systemAction\":\"EDIT\",\n\t\"contentTypeVariable\":\"TestContentTypeSystemActions\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/system/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"system",
								"actions"
							]
						},
						"description": "Create for the new content type a new mapping for EDIT"
					},
					"response": []
				},
				{
					"name": "Get Content Type System Actions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Return 2 items\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"Has New System Action\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity[0].systemAction).to.eql(\"NEW\");",
									"});",
									"",
									"pm.test(\"New  has a Save Action\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity[0].workflowAction.id).to.eql(\"ceca71a0-deee-4999-bd47-b01baa1bcfc8\");",
									"});",
									"",
									"pm.test(\"Has Edit System Action\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity[1].systemAction).to.eql(\"EDIT\");",
									"});",
									"",
									"pm.test(\"New  has a Save/Publish Action\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity[1].workflowAction.id).to.eql(\"b9d89c80-3d88-4311-8365-187323c96436\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/contenttypes/TestContentTypeSystemActions/system/actions",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"contenttypes",
								"TestContentTypeSystemActions",
								"system",
								"actions"
							]
						},
						"description": "Get the two content types"
					},
					"response": []
				},
				{
					"name": "Fires a default New Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.baseType).to.eql(\"CONTENT\");",
									"    pm.expect(jsonData.entity.contentType).to.eql(\"TestContentTypeSystemActions\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comments\":\"Adding New Content type\",\n\t\"contentlet\": {\n\t\t\"contentType\":\"TestContentTypeSystemActions\"\n\t\t\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/NEW",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"NEW"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fires a default EDIT Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.baseType).to.eql(\"CONTENT\");",
									"    pm.expect(jsonData.entity.contentType).to.eql(\"TestContentTypeSystemActions\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comments\":\"Adding New Content type\",\n\t\"contentlet\": {\n\t\t\"contentType\":\"TestContentTypeSystemActions\"\n\t\t\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/EDIT",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"EDIT"
							]
						},
						"description": "Fires an EDIT default action"
					},
					"response": []
				},
				{
					"name": "Fires a default PUBLISH Action ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Publish Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.baseType).to.eql(\"CONTENT\");",
									"    pm.expect(jsonData.entity.contentType).to.eql(\"TestContentTypeSystemActions\");",
									"     pm.expect(jsonData.entity.live).to.eql(true);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comments\":\"Adding New Content type\",\n\t\"contentlet\": {\n\t\t\"contentType\":\"TestContentTypeSystemActions\"\n\t\t\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Fires an PUBLISH default action"
					},
					"response": []
				}
			]
		},
		{
			"name": "mergeAction",
			"item": [
				{
					"name": "AddMergeContentlet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.baseType).to.eql(\"CONTENT\");",
									"    pm.expect(jsonData.entity.contentType).to.eql(\"webPageContent\");",
									"});",
									"",
									"var requestcounter = pm.environment.get(\"requestcounter\");",
									"console.log(\"requestcounter #: \" + requestcounter)",
									"",
									"if(!requestcounter || requestcounter > 10) {",
									"",
									"    pm.environment.set(\"requestcounter\", 1);",
									"} else {",
									"",
									"    pm.environment.set(\"requestcounter\", requestcounter+1);",
									"}",
									"",
									"if (requestcounter <= 10) {",
									"    ",
									"    console.log(\"Calling AddMergeContentlet again #: \" + requestcounter)",
									"    postman.setNextRequest(\"AddMergeContentlet\");",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comments\":\"Adding New Generic content\",\n\t\"contentlet\": {\n\t\t\"contentType\":\"webPageContent\",\n        \"title\":\"Test Merge Content\",\n        \"body\":\"Test Merge Body\",\n\t\t\"contentHost\":\"default\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/NEW",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"NEW"
							]
						}
					},
					"response": []
				},
				{
					"name": "PublishMerge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.summary.affected).to.above(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comments\":\"Publish an existing Generic content\",\n    \"query\":\"+contentType:webPageContent AND title:\\\"Test Merge Content\\\"\",\n\t\"contentlet\": {\n        \"title\":\"Test Merge Content Published\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNewGenericContentlet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"contentlet\": {\n        \"contentType\":\"webPageContent\",\n        \"title\":\"Test title\",\n        \"body\":\"Test body\",\n        \"contentHost\":\"default\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/NEW",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"NEW"
							]
						}
					},
					"response": []
				},
				{
					"name": "PublishMergeIndividual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.summary.affected).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comments\":\"Publish an existing Generic content\",\n\t\"contentlet\": {\n        \"title\":\"Test Merge Content Published\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?inode={{genericContentletInode}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "inode",
									"value": "{{genericContentletInode}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PublishMergeNotExists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.summary.affected).to.eql(1);",
									"});",
									"",
									"pm.test(\"Content Not Found\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.results[0].xxxx.errorMessage).to.eql(\"Content not found\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"comments\":\"Publish an existing Generic content\",\n\t\"contentlet\": {\n        \"title\":\"Test Merge Content Published\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?inode=xxxx",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "inode",
									"value": "xxxx"
								}
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "basic",
				"basic": [
					{
						"key": "password",
						"value": "admin",
						"type": "string"
					},
					{
						"key": "username",
						"value": "admin@dotcms.com",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "saveMultiple",
			"item": [
				{
					"name": "Save Multiple Generic Contentlets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.summary.affected).to.eql(20);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content1\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content1\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content2\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content2\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content3\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content3\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content4\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content4\"\n        },\n         {\n             \"contentType\":\"webPageContent\",\n            \"title\":\"Content5\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content5\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content6\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content6\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content7\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content7\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content8\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content8\"\n        },\n         {\n             \"contentType\":\"webPageContent\",\n            \"title\":\"Content9\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content9\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content10\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content10\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content11\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content11\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content12\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content12\"\n        },\n         {\n             \"contentType\":\"webPageContent\",\n            \"title\":\"Content13\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content13\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content14\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content14\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content15\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content15\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content16\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content16\"\n        },\n         {\n             \"contentType\":\"webPageContent\",\n            \"title\":\"Content17\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content17\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content18\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content18\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content19\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content19\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content20\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content20\"\n        }\n        \n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Multiple Generic Contentlets Some Without Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Errors\", function () {",
									"    pm.expect(jsonData.entity.summary.failCount).to.eql(1);",
									"});",
									"",
									"pm.test(\"Success\", function () {",
									"    pm.expect(jsonData.entity.summary.successCount).to.eql(1);",
									"});",
									"",
									"pm.test(\"Affected\", function () {",
									"    pm.expect(jsonData.entity.summary.affected).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content1 SUCCESS\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content1\"\n        },\n        {\n            \"title\":\"Content2 FAIL\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content2\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Creates several contentlets but some of them are sent without ContentType so it should fail"
					},
					"response": []
				},
				{
					"name": "Create Temporal File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"File name check\", function () {",
									"    pm.expect(jsonData.tempFiles[0].fileName).to.eql('250px-Bocas2.jpg');",
									"});",
									"pm.collectionVariables.set(\"temporalFileOneId\", jsonData.tempFiles[0].id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Origin",
								"value": "{{serverURL}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"fileName\":\"250px-Bocas2.jpg\",\n\t\"remoteUrl\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/b8/Bocas2.jpg/250px-Bocas2.jpg\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/temp/byUrl",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"temp",
								"byUrl"
							]
						},
						"description": "Creates a temporal file to be uploaded later"
					},
					"response": []
				},
				{
					"name": "Save Multiple With Temp File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Errors\", function () {",
									"    pm.expect(jsonData.entity.summary.failCount).to.eql(0);",
									"});",
									"",
									"pm.test(\"Success\", function () {",
									"    pm.expect(jsonData.entity.summary.successCount).to.eql(1);",
									"});",
									"",
									"pm.test(\"Affected\", function () {",
									"    pm.expect(jsonData.entity.summary.affected).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"DotAsset\",\n            \"asset\":\"{{temporalFileOneId}}\",\n            \"hostFolder\":\"default\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Creates several contentlets with binary fields on them, to achieve this the file must be uploaded first using the temp resource."
					},
					"response": []
				}
			]
		},
		{
			"name": "Move",
			"item": [
				{
					"name": "Content Already Exist At New Path",
					"item": [
						{
							"name": "CreateMoveSystemWorkflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Running test\")",
											"",
											"pm.test(\"No errors\", function () {",
											"    ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"actionId\", jsonData.entity.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stepId\": \"dc3c9cd0-8467-404b-bf95-cb7df3fbc293\",\n    \"actionName\": \"Move Test\",\n    \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n    \"actionCondition\": \"\",\n    \"actionNextStep\": \"currentstep\",\n    \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n    \"actionRoleHierarchyForAssign\": false,\n    \"actionAssignable\": false,\n    \"actionCommentable\": true,\n    \"whoCanUse\": [],\n    \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add move actionlet",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionletClass\":\"com.dotmarketing.portlets.workflows.actionlet.MoveContentActionlet\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}/actionlets",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"{{actionId}}",
										"actionlets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Page One",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Identifier must contains path\", function () {",
											"    pm.expect(jsonData.entity.template).contains(\"//default/application/templates/system/\");",
											"});",
											"",
											"pm.collectionVariables.set(\"pageOneToMoveIdentifier\", jsonData.entity.identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"contentlet\":{\n\t\t\"stName\": \"htmlpageasset\",\n\t\t\"title\": \"PageAsset ContentAlreadyExists Move\",\n        \"url\": \"pageassetcontentalreadyexistsmove\",\n        \"friendlyName\":\"pageassetsystemtemplate\",\n        \"template\": \"//default/application/templates/system/\",\n        \"sortOrder\": \"0\",\n        \"cachettl\": \"100\",\n        \"hostFolder\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Move Over Page One",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 \", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.collectionVariables.set(\"folderId\", jsonData.entity.folder);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pathToMove\":\"//default/moveto\",\n    \"contentlet\":{}\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}/fire?identifier={{pageOneToMoveIdentifier}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"{{actionId}}",
										"fire"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{pageOneToMoveIdentifier}}"
										}
									]
								},
								"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
							},
							"response": []
						},
						{
							"name": "Create Page Two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code should be 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Identifier must contains path\", function () {",
											"    pm.expect(jsonData.entity.template).contains(\"//default/application/templates/system/\");",
											"});",
											"",
											"pm.collectionVariables.set(\"pageTwoToMoveIdentifier\", jsonData.entity.identifier);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"contentlet\":{\n\t\t\"stName\": \"htmlpageasset\",\n\t\t\"title\": \"PageAsset ContentAlreadyExists Move\",\n        \"url\": \"pageassetcontentalreadyexistsmove\",\n        \"friendlyName\":\"pageassetsystemtemplate\",\n        \"template\": \"//default/application/templates/system/\",\n        \"sortOrder\": \"0\",\n        \"cachettl\": \"100\",\n        \"hostFolder\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								}
							},
							"response": []
						},
						{
							"name": "Fire Move Over Page Two",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400 \", function () {",
											"    pm.response.to.have.status(400);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pathToMove\":\"//default/moveto\",\n    \"contentlet\":{}\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}/fire?identifier={{pageTwoToMoveIdentifier}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"{{actionId}}",
										"fire"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{pageTwoToMoveIdentifier}}"
										}
									]
								},
								"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
							},
							"response": []
						}
					],
					"description": "This is for testing the following case:\nIf you try to move a contentlet to a folder but there already exist content with the same name, should throw a 400."
				},
				{
					"name": "Success",
					"item": [
						{
							"name": "CreateMoveSystemWorkflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(\"Running test\")",
											"",
											"pm.test(\"No errors\", function () {",
											"    ",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errors.length).to.eql(0);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"actionId\", jsonData.entity.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"stepId\": \"dc3c9cd0-8467-404b-bf95-cb7df3fbc293\",\n    \"actionName\": \"Move Test\",\n    \"schemeId\": \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\",\n    \"actionCondition\": \"\",\n    \"actionNextStep\": \"currentstep\",\n    \"actionNextAssign\": \"654b0931-1027-41f7-ad4d-173115ed8ec1\",\n    \"actionRoleHierarchyForAssign\": false,\n    \"actionAssignable\": false,\n    \"actionCommentable\": true,\n    \"whoCanUse\": [],\n    \"showOn\": [\n        \"UNPUBLISHED\",\n        \"NEW\",\n        \"LOCKED\",\n        \"PUBLISHED\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add move actionlet",
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionletClass\":\"com.dotmarketing.portlets.workflows.actionlet.MoveContentActionlet\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}/actionlets",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"{{actionId}}",
										"actionlets"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreatesTestingContentlet",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 \", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"pm.collectionVariables.set(\"contentletIdentifier\", jsonData.entity.identifier);",
											"pm.collectionVariables.set(\"contentletInode\", jsonData.entity.inode);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlet\": {\n        \"contentType\": \"webPageContent\",\n        \"title\":\"Test\",\n        \"body\":\"Test\",\n        \"contentHost\":\"SYSTEM_HOST\"\n\n    }\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
							},
							"response": []
						},
						{
							"name": "Fire Move",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 \", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"",
											"pm.collectionVariables.set(\"folderId\", jsonData.entity.folder);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"pathToMove\":\"//default/moveto\",\n    \"contentlet\":{}\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/{{actionId}}/fire?identifier={{contentletIdentifier}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"{{actionId}}",
										"fire"
									],
									"query": [
										{
											"key": "identifier",
											"value": "{{contentletIdentifier}}"
										}
									]
								},
								"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
							},
							"response": []
						},
						{
							"name": "Check Folder",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 \", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Valid response\", function () {",
											"    pm.expect(jsonData.entity.path).to.eq(\"/moveto/\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/folder/{{folderId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"folder",
										"{{folderId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "fire",
			"item": [
				{
					"name": "Broken-Binary-Field-Update",
					"item": [
						{
							"name": "create-content-type-with-binaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);        ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "resources/issue-21482-01G2AM0CE9G41M4B0P7HAYDNWT.tar.gz"
										}
									]
								},
								"url": {
									"raw": "{{serverURL}}/api/bundle/sync",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"bundle",
										"sync"
									]
								}
							},
							"response": []
						},
						{
							"name": "get-contentlet-identifier-by-contnet-type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); ",
											"    let jsonData = pm.response.json();",
											"    let entiry = (jsonData.entity);",
											"    let identifier = entiry.jsonObjectView.contentlets[0].identifier;       ",
											"    pm.collectionVariables.set(\"identifier21482\", identifier);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"query\":\"+contentType:Issue21482 +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/content/_search",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"content",
										"_search"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-contentlet-no-binaries-sent-expect-binaries-not-modified",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);    ",
											"    let jsonData = pm.response.json();",
											"    let entiry = (jsonData.entity);",
											"    pm.expect(entiry.image).to.not.eql(undefined);",
											"    pm.expect(entiry.video).to.not.eql(undefined);    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Publishing content\",\n    \"contentlet\":{\n       \"title\": \"Iron Maiden - Somewhere in time\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier21482}}\",              \n       \"contentType\":\"Issue21482\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"fire"
									]
								}
							},
							"response": []
						},
						{
							"name": "update-contentlet-remove-one-binary",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);    ",
											"    let jsonData = pm.response.json();",
											"    let entiry = (jsonData.entity);",
											"    pm.expect(entiry.image).to.be.eql(undefined);",
											"    pm.expect(entiry.video).to.not.eql(undefined);    ",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Publishing content\",\n    \"contentlet\":{\n       \"title\": \"Iron Maiden - Somewhere in time\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier21482}}\",              \n       \"contentType\":\"Issue21482\",\n       \"image\":null\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"fire"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "FireContentWithPermissions",
			"item": [
				{
					"name": "RequestRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var resultLength = jsonData.entity.length;",
									"pm.test(\"length check\", function () {",
									"    pm.expect(resultLength).to.greaterThan(1);",
									"});",
									"",
									"pm.collectionVariables.set(\"role1\", jsonData.entity[0].id);",
									"pm.collectionVariables.set(\"role1\", jsonData.entity[1].id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/roles/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"_search"
							]
						}
					},
					"response": []
				},
				{
					"name": "FireWithPermissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\":{\n        \"contentType\":\"webPageContent\",\n        \"title\":\"Test3-11\",\n        \"contentHost\":\"default\",\n        \"body\":\"Test body\"\n    },\n    \"individualPermissions\": {\n        \"READ\":[\"{{role1}}\"],\n        \"WRITE\":[\"{{role1}}\"]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=WAIT_FOR",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "indexPolicy",
									"value": "WAIT_FOR"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check the permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var textBody = pm.response.text();",
									"",
									"",
									"pm.test(\"The permission should be EDIT\", function () {",
									"    pm.expect(textBody).to.contains(\"EDIT\");",
									"    pm.expect(textBody).to.contains(\"READ\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/api/v1/permissions/_bycontent?contentletId={{identifier}}&type=ALL",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"v1",
								"permissions",
								"_bycontent"
							],
							"query": [
								{
									"key": "contentletId",
									"value": "{{identifier}}"
								},
								{
									"key": "type",
									"value": "ALL"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "This set of test, try the fire with permissions"
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "create-content-type-with-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);        ",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"issue-22756-categories-01GCAK78NPY1JH8TRGX8SWCVN3.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/issue-22756-categories-01GCAK78NPY1JH8TRGX8SWCVN3.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle/sync",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"sync"
							]
						},
						"description": "This endpoint imports a bundle that contains an instance of a Content Type that contains 2 category fields."
					},
					"response": []
				},
				{
					"name": "get-contentlet-identifier-by-contnet-type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    const identifier = entity.jsonObjectView.contentlets[0].identifier;       ",
									"    pm.collectionVariables.set(\"identifier22756\", identifier);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"+contentType:BikeNameAndCategory +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"_search"
							]
						},
						"description": "Once the Content type that contains the category fields has been imported this request finds it and gets the identifier from it."
					},
					"response": []
				},
				{
					"name": "update-contentlet-add-category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    let jsonData = pm.response.json();",
									"    let entity = (jsonData.entity);",
									"    pm.expect(entity.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"    pm.expect(entity.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Updated Norco Revolver\",\n    \"contentlet\":{\n       \"title\": \"Update Norco Revolver\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier22756}}\",              \n       \"contentType\":\"BikeNameAndCategory\",\n       \"bikeType\":[\"MTB\",\"Road\"],\n       \"make\":[\"Norco\"]\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"fire"
							]
						},
						"description": "This is basically the happy path test. We validate that the content-type can be updated passing arrays of valid categories. Then verify the response to check the categories are the expected."
					},
					"response": []
				},
				{
					"name": "update-contentlet-add-category-ignore-fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    pm.expect(entity.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"    pm.expect(entity.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Updated Norco Revolver\",\n    \"contentlet\":{\n       \"title\": \"Update Norco Revolver\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier22756}}\",              \n       \"contentType\":\"BikeNameAndCategory\"      \n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"fire"
							]
						},
						"description": "This test is meant to send a request without including any of the category fields. The categories on the target content should remain the same."
					},
					"response": []
				},
				{
					"name": "get-contentlet-identifier-by-contnet-type-verify-ignored-fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"    let jsonData = pm.response.json();",
									"    let entiry = (jsonData.entity);",
									"    let contentlets = entiry.jsonObjectView.contentlets;       ",
									"",
									"    let identifier = pm.collectionVariables.get(\"identifier22756\");",
									"",
									"    const result = contentlets.filter(con => con.identifier === identifier); ",
									"    const entity = result[0];",
									"    console.log(entity.bikeType);",
									"    pm.expect(entity.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"    pm.expect(entity.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"+contentType:BikeNameAndCategory +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"_search"
							]
						},
						"description": "This request is intended to fetch the instance of our content with categories and verify it remains unmodified after the last request that had excluded the category fields."
					},
					"response": []
				},
				{
					"name": "update-contentlet-remove-category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    pm.expect(entity.bikeType).to.eql(undefined);    ",
									"    pm.expect(entity.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Updated Norco Revolver\",\n    \"contentlet\":{\n       \"title\": \"Update Norco Revolver\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier22756}}\",              \n       \"contentType\":\"BikeNameAndCategory\",\n       \"bikeType\":[]\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"fire"
							]
						},
						"description": "Now we're gonna try removing the contents from one of the category fields and at the same time we're gonna ignore the second field.\n\nThe expected outcome is: Content withe the \"bikeType\" field cleared and the while \"make\" should still keep their values."
					},
					"response": []
				},
				{
					"name": "update-contentlet-add-invalid-category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);    ",
									"    let jsonData = pm.response.json();    ",
									"    pm.expect(jsonData.message).to.eql(\"Unable to resolve the string value [lol] as a valid form of category name/var/key or identifier.\");    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Updated Norco Revolver\",\n    \"contentlet\":{\n       \"title\": \"Update Norco Revolver\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier22756}}\",              \n       \"contentType\":\"BikeNameAndCategory\",\n       \"bikeType\":[\"lol\"]\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"fire"
							]
						},
						"description": "In this request we want to test that when sending an invalid category name we can expect an invalid request response."
					},
					"response": []
				},
				{
					"name": "update-contentlet-add-category-string",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    pm.expect(entity.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Updated Norco Revolver\",\n    \"contentlet\":{\n       \"title\": \"Update Norco Revolver\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier22756}}\",              \n       \"contentType\":\"BikeNameAndCategory\",\n       \"bikeType\":\"MTB,Road\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"fire"
							]
						},
						"description": "This request is intended to test that we can also update categories sending them on the request as a comma separated string."
					},
					"response": []
				},
				{
					"name": "update-contentlet-add-category-pass-null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);    ",
									"    let jsonData = pm.response.json();",
									"    let entity = (jsonData.entity);",
									"    pm.expect(entity.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionName\": \"publish\",\n    \"comments\": \"Updated Norco Revolver\",\n    \"contentlet\":{\n       \"title\": \"Update Norco Revolver\",\n       \"contentHost\": \"demo.dotcms.com\",\n       \"identifier\": \"{{identifier22756}}\",              \n       \"contentType\":\"BikeNameAndCategory\",\n       \"bikeType\":null,\n       \"make\":null\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/fire",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"fire"
							]
						},
						"description": "And finally we want to test that sending null as the value on the category field has the same effect as ignoring the field."
					},
					"response": []
				}
			]
		},
		{
			"name": "SaveContentWIthJSONField",
			"item": [
				{
					"name": "pre_ImportBundleWithContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"experimentType.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/WorkflowResource/experimentType.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* HTMLPage /blog/index\n* HTMLPage /blog/destinations/costa-rica\n* Contentlet [Blog] Ecotourism in Costa Rica\n* Blog Detail Page /blog/blog-detail"
					},
					"response": []
				},
				{
					"name": "GivenContentWithJSONFIeld_ShouldSave",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid JSON field in response\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.trafficProportion.type).to.be.eql(\"SPLIT_EVENLY\");",
									"    pm.expect(jsonData.entity.trafficProportion.variants[0].name).to.be.eql(\"default\");",
									"});",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \"contentlet\" : {\n  \"stInode\" : \"28ff0587887d2be07175b8b4fe06129f\",\n  \"languageId\" : 1,\n  \"name\": \"experiment 2\",\n  \"description\": \"exp desc\", \n  \"trafficAllocation\": 50.0, \n  \"trafficProportion\":  {\n        \"variants\": [\n            {\n                \"name\": \"default\",\n                \"trafficPercentage\": 50.0\n            },\n            {\n                \"name\": \"variant1\",\n                \"trafficPercentage\": 50.0\n            }\n        ],\n        \"type\": \"SPLIT_EVENLY\"\n    }\n}\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Fire any action using the actionId\n\nOptional: If you pass ?inode={inode}, you don't need body here.\n\n@Path(\"/actions/{actionId}/fire\")"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "serverURL",
			"value": "http://localhost:8080"
		},
		{
			"key": "actionId",
			"value": "47c38af4-209b-499a-9628-b2a8409cf03c"
		},
		{
			"key": "schemeId",
			"value": "2e96562e-495c-4a29-8cd1-0410608e9a65"
		},
		{
			"key": "schemeIdShorty",
			"value": "2e96562e49"
		},
		{
			"key": "stepId",
			"value": "1c156cd2-eb58-4b57-986b-dc728cc3ea09"
		},
		{
			"key": "stepIdShorty",
			"value": "1c156cd2eb"
		},
		{
			"key": "actionIdShorty",
			"value": "47c38af420"
		},
		{
			"key": "contentletIdentifier",
			"value": "6f88e2ed-71cb-49ad-90a4-8c74d906c3fe"
		},
		{
			"key": "contentletInode",
			"value": "94926188-341a-40a3-8422-03af9e3a3634"
		},
		{
			"key": "contentletIdShorty",
			"value": "14c31e4294"
		},
		{
			"key": "fireActionLanguageKey",
			"value": "SucessRequest1615939422"
		},
		{
			"key": "genericContentletInode",
			"value": "811e3dda-049f-48d9-a96c-10f0dc341047"
		},
		{
			"key": "folderId",
			"value": ""
		},
		{
			"key": "pageOneToMoveIdentifier",
			"value": ""
		},
		{
			"key": "pageTwoToMoveIdentifier",
			"value": ""
		},
		{
			"key": "temporalFileId",
			"value": ""
		},
		{
			"key": "temporalFileTwoId",
			"value": ""
		},
		{
			"key": "temporalFileOneId",
			"value": ""
		},
		{
			"key": "contentletID",
			"value": ""
		},
		{
			"key": "contentTypeID",
			"value": ""
		},
		{
			"key": "contentTypeVAR",
			"value": ""
		},
		{
			"key": "contentTypeFieldID",
			"value": ""
		},
		{
			"key": "identifier21482",
			"value": ""
		},
		{
			"key": "role1",
			"value": ""
		},
		{
			"key": "role2",
			"value": ""
		},
		{
			"key": "identifier",
			"value": ""
		},
		{
			"key": "identifier22756",
			"value": ""
		}
	]
}