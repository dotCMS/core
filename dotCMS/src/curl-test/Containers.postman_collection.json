{
	"info": {
		"_postman_id": "98343aa6-b3da-4fde-8ea5-454c58117b23",
		"name": "Containers",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Bulk Delete",
			"item": [
				{
					"name": "Create New Container 1 To Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeDeletedContainer1\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToDeleteId1\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeDeletedContainer1\",\n    \"friendlyName\":\"ToBeDeletedContainer1 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Create New Container 2 To Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeDeletedContainer2\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToDeleteId2\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeDeletedContainer2\",\n    \"friendlyName\":\"ToBeDeletedContainer2 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Delete Container Failed To Delete Container Id Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Delete Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Delete Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"NOTFOUNDCONTAINER\",\"12345678-abcd-1234-abcd-123456789abc\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkdelete",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkdelete"
							]
						},
						"description": "Tries to delete a template but the id passed does not belong to any template so it fails."
					},
					"response": []
				},
				{
					"name": "Delete Container Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Delete Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(2);",
									"});",
									"",
									"pm.test(\"Failed To Delete Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\"{{containerToDeleteId1}}\",\"{{containerToDeleteId2}}\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkdelete",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkdelete"
							]
						},
						"description": "Delete a template successfully"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bulk Publish",
			"item": [
				{
					"name": "Create New Container 1 To Publish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBePublishedContainer1\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToPublishId1\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBePublishedContainer1\",\n    \"friendlyName\":\"ToBePublishedContainer1 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Create New Container 2 To Publish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBePublishedContainer2\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToPublishId2\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBePublishedContainer2\",\n    \"friendlyName\":\"ToBePublishedContainer2 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Publish Invalid ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\" \",\" \"]"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkpublish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkpublish"
							]
						},
						"description": "try to unpublish an invalid container"
					},
					"response": []
				},
				{
					"name": "Publish Not Found ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"NOTFOUNDCONTAINER\",\"12345678-abcd-1234-abcd-123456789abc\"]"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkpublish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkpublish"
							]
						},
						"description": "Try to unpublish a non existing container"
					},
					"response": []
				},
				{
					"name": "Publish Container Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(2);",
									"});",
									"",
									"pm.test(\"Failed To Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"{{containerToPublishId1}}\",\"{{containerToPublishId2}}\"]"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkpublish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkpublish"
							]
						},
						"description": "Publish a container"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bulk Unpublish",
			"item": [
				{
					"name": "Create New Container 1 To Unpublish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeUnpublishedContainer1\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\"); ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToUnpublishId1\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeUnpublishedContainer1\",\n    \"friendlyName\":\"ToBeUnpublishedContainer1 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Create New Container 2 To Unpublish",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeUnpublishedContainer2\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToUnpublishId2\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeUnpublishedContainer2\",\n    \"friendlyName\":\"ToBeUnpublishedContainer2 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Unpublish Invalid ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Unpublish Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Unpublish Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\" \",\" \"]"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkunpublish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkunpublish"
							]
						},
						"description": "try to unpublish an invalid container"
					},
					"response": []
				},
				{
					"name": "Unpublish Not Found ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Unpublish Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Unpublish Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"NOTFOUNDCONTAINER\",\"12345678-abcd-1234-abcd-123456789abc\"]"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkunpublish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkunpublish"
							]
						},
						"description": "Try to unpublish a non existing container"
					},
					"response": []
				},
				{
					"name": "Publish Container Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(2);",
									"});",
									"",
									"pm.test(\"Failed To Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"{{containerToUnpublishId1}}\",\"{{containerToUnpublishId2}}\"]"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkpublish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkpublish"
							]
						},
						"description": "Publish a container"
					},
					"response": []
				},
				{
					"name": "Unpublish Container Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(2);",
									"});",
									"",
									"pm.test(\"Failed To Publish Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"{{containerToUnpublishId1}}\",\"{{containerToUnpublishId2}}\"]"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkunpublish",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkunpublish"
							]
						},
						"description": "Publish a container"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bulk Archive",
			"item": [
				{
					"name": "Create New Container 1 To Archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeArchivedContainer1\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\"); ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToArchiveId1\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeArchivedContainer1\",\n    \"friendlyName\":\"ToBeArchivedContainer1 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Create New Container 2 To Archive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeArchivedContainer2\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\"); ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToArchiveId2\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeArchivedContainer2\",\n    \"friendlyName\":\"ToBeArchivedContainer2 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Archive Container Invalid ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\" \",\" \"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkarchive",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkarchive"
							]
						},
						"description": "Archive an invalid container"
					},
					"response": []
				},
				{
					"name": "Archive Container Not Found ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"NOTFOUNDCONTAINER\",\"12345678-abcd-1234-abcd-123456789abc\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkarchive",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkarchive"
							]
						},
						"description": "Archive a non existing container"
					},
					"response": []
				},
				{
					"name": "Archive Container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(2);",
									"});",
									"",
									"pm.test(\"Failed To Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"{{containerToArchiveId1}}\",\"{{containerToArchiveId2}}\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkarchive",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkarchive"
							]
						},
						"description": "archive a container"
					},
					"response": []
				}
			]
		},
		{
			"name": "Bulk Unarchive",
			"item": [
				{
					"name": "Create New Container 1 To Unarchive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeUnarchivedContainer1\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\"); ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToUnarchiveId1\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeUnarchivedContainer1\",\n    \"friendlyName\":\"ToBeUnarchivedContainer1 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Create New Container 2 To Unarchive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"ToBeUnarchivedContainer2\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\"); ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"pm.collectionVariables.set(\"containerToUnarchiveId2\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"ToBeUnarchivedContainer2\",\n    \"friendlyName\":\"ToBeUnarchivedContainer2 description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Unarchive Container Invalid ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Unarchive Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Unarchive Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\" \",\" \"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkunarchive",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkunarchive"
							]
						},
						"description": "Archive an invalid container"
					},
					"response": []
				},
				{
					"name": "Unarchive Container Not Found ContainerId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Unarchive Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(0);",
									"});",
									"",
									"pm.test(\"Failed To Unarchive Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"NOTFOUNDCONTAINER\",\"12345678-abcd-1234-abcd-123456789abc\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkunarchive",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkunarchive"
							]
						},
						"description": "Archive a non existing container"
					},
					"response": []
				},
				{
					"name": "Archive Container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(2);",
									"});",
									"",
									"pm.test(\"Failed To Archive Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"{{containerToUnarchiveId1}}\",\"{{containerToUnarchiveId2}}\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkarchive",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkarchive"
							]
						},
						"description": "archive a container"
					},
					"response": []
				},
				{
					"name": "Unarchive Container",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Unarchive Container Check\", function () {",
									"    pm.expect(jsonData.entity.successCount).to.be.eql(2);",
									"});",
									"",
									"pm.test(\"Failed To Unarchive Container Check\", function () {",
									"    pm.expect(jsonData.entity.fails).to.have.lengthOf(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\"{{containerToUnarchiveId1}}\",\"{{containerToUnarchiveId2}}\"]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/_bulkunarchive",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"_bulkunarchive"
							]
						},
						"description": "archive a container"
					},
					"response": []
				}
			]
		},
		{
			"name": "Copy",
			"item": [
				{
					"name": "CopyContainerCreateNewContainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"abcd\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"",
									"pm.collectionVariables.set(\"containerToCopyId\", jsonData.entity.identifier);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"abcd\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "CopyContainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": []
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/{{containerToCopyId}}/_copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"{{containerToCopyId}}",
								"_copy"
							]
						},
						"description": "Deletes the container"
					},
					"response": []
				},
				{
					"name": "CopyContainerNotFoundContainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Not found container message\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contains(\"Can't find Container:12345678-abcd-1234-abcd-123456789abc\");  ",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/12345678-abcd-1234-abcd-123456789abc/_copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"12345678-abcd-1234-abcd-123456789abc",
								"_copy"
							]
						},
						"description": "Deletes the container"
					},
					"response": []
				},
				{
					"name": "CopyContainerEmptyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Empty container id message\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"The container id is required\");  ",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"  pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/ /_copy",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								" ",
								"_copy"
							]
						},
						"description": "Deletes the container"
					},
					"response": []
				}
			]
		},
		{
			"name": "Save new",
			"item": [
				{
					"name": "CreateNewContainer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "CreateNewContainer with more than 1 containerStructures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":2,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "CreateNewContainer with maxContentlets 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":0,\n    \"code\" : \"code\",\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				}
			]
		},
		{
			"name": "get working",
			"item": [
				{
					"name": "Add Container with containerStructures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
									"    ",
									"    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"containderIdentifierToGetDetails\", jsonData.entity.identifier);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":2,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Get working with content types- Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/working?containerId={{containderIdentifierToGetDetails}}&includeContentType=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"working"
							],
							"query": [
								{
									"key": "containerId",
									"value": "{{containderIdentifierToGetDetails}}"
								},
								{
									"key": "includeContentType",
									"value": "true"
								}
							]
						},
						"description": "Get the working version of a container"
					},
					"response": []
				},
				{
					"name": "Get details failed - NotFound",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"  pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Not found container message\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.contains(\"Can't find Container:12345678-abcd-1234-abcd-123456789abc\");  ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/containers/working?containerId=12345678-abcd-1234-abcd-123456789abc",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers",
								"working"
							],
							"query": [
								{
									"key": "containerId",
									"value": "12345678-abcd-1234-abcd-123456789abc"
								}
							]
						},
						"description": "Get the working version of a container"
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Container",
			"item": [
				{
					"name": "CreateNewContainer with maxContentlets 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"Test Container to update\");    ",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"identifierForUpdateContainer\", jsonData.entity.identifier);",
									"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\":\"Test Container to update\",\n    \"friendlyName\":\"Test Container to update description\",\n    \"maxContentlets\":0,\n    \"code\" : \"code\",\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Create a container"
					},
					"response": []
				},
				{
					"name": "Edit Containe with code - success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
									"    pm.expect(jsonData.entity.notes).to.eql(\"Notes 1\");",
									"    ",
									"    ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"identifier\":\"{{identifierForUpdateContainer}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":0,\n    \"code\" : \"new code\",\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/containers",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"containers"
							]
						},
						"description": "Edit the existing container"
					},
					"response": []
				}
			]
		},
		{
			"name": "pre_ImportBundleWithApplicationContainerFolder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bundle uploaded sucessfully\", function () {",
							"    pm.response.to.have.status(200);",
							"",
							"    var jsonData = pm.response.json();",
							"    console.log(jsonData);",
							"",
							"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"application_containers_folder.tar.gz\");",
							"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/octet-stream"
					},
					{
						"key": "Content-Disposition",
						"type": "text",
						"value": "attachment"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "resources/ContainerResource/application_containers_folder.tar.gz"
						}
					]
				},
				"url": {
					"raw": "{{serverURL}}/api/bundle?sync=true",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"bundle"
					],
					"query": [
						{
							"key": "sync",
							"value": "true"
						},
						{
							"key": "AUTH_TOKEN",
							"value": "",
							"disabled": true
						}
					]
				},
				"description": "Imports a Bundle that includes:\n* A piece of content with a tag field without any tags selected"
			},
			"response": []
		},
		{
			"name": "CreateApplicationContainerFolders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity[0].path).to.eql(\"/application/containers/test/\");",
							"    pm.expect(jsonData.entity[0].type).to.eql(\"folder\");",
							"    pm.expect(jsonData.entity[0].title).to.eql(\"test\");",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"folderidentifier\", jsonData.entity[0].identifier);",
							"pm.collectionVariables.set(\"folderinode\", jsonData.entity[0].inode);",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\n    \"/application/containers/test\"\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/folder/createfolders/default",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"folder",
						"createfolders",
						"default"
					]
				},
				"description": "Make a request without log in user"
			},
			"response": []
		},
		{
			"name": "CreateFileTestContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.contentType).to.eql(\"FileAsset\");",
							"    pm.expect(jsonData.entity.fileName).to.eql(\"container.vtl\");",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "json",
							"value": "{\n    \"contentlet\": {\n        \"contentType\": \"FileAsset\",\n        \"title\": \"container.vtl\",\n        \"fileName\": \"container.vtl\",\n        \"hostFolder\":\"{{folderidentifier}}\"\n    }\n}\n",
							"type": "text"
						},
						{
							"key": "file",
							"type": "file",
							"src": "resources/containertest/container.vtl"
						}
					]
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"workflow",
						"actions",
						"default",
						"fire",
						"PUBLISH"
					]
				},
				"description": "Make a request without log in user"
			},
			"response": []
		},
		{
			"name": "invalidateSession",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/logout",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "EditNewContainerNoUser",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"  pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					]
				},
				"description": "Make a request without any log in user"
			},
			"response": []
		},
		{
			"name": "EditNewContainerNonFoundContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"NOTFOUNDCONTAINER\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					]
				},
				"description": "Make a request using a non existing container"
			},
			"response": []
		},
		{
			"name": "GetWorkingInvalidContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/working?containerId=INVALIDCONTAINER",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"working"
					],
					"query": [
						{
							"key": "containerId",
							"value": "INVALIDCONTAINER"
						}
					]
				},
				"description": "Make a request to a non existing container"
			},
			"response": []
		},
		{
			"name": "GetLiveInvalidContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/live?containerId=/application/containers/blablablabla",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"live"
					],
					"query": [
						{
							"key": "containerId",
							"value": "/application/containers/blablablabla"
						}
					]
				},
				"description": "Make a request using a non existing file container"
			},
			"response": []
		},
		{
			"name": "GetLiveByuuidInvalirContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/live?containerId=invalidContainer",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"live"
					],
					"query": [
						{
							"key": "containerId",
							"value": "invalidContainer"
						}
					]
				},
				"description": "Make a request using a non existing container"
			},
			"response": []
		},
		{
			"name": "PublishInvalidContainerId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_publish?containerId=",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_publish"
					],
					"query": [
						{
							"key": "containerId",
							"value": ""
						}
					]
				},
				"description": "try to unpublish an invalid container"
			},
			"response": []
		},
		{
			"name": "PublishNotFoundContainerId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_publish?containerId=NOTFOUNDCONTAINER",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_publish"
					],
					"query": [
						{
							"key": "containerId",
							"value": "NOTFOUNDCONTAINER"
						}
					]
				},
				"description": "Try to unpublish a non existing container"
			},
			"response": []
		},
		{
			"name": "UnPublishContainerInvalidContainerId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unpublish?containerId=",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unpublish"
					],
					"query": [
						{
							"key": "containerId",
							"value": ""
						}
					]
				},
				"description": "Try to unpublish an invalid container"
			},
			"response": []
		},
		{
			"name": "UnPublishNotFoundContainerId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unpublish?containerId=NOTFOUNDCONTAINER",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unpublish"
					],
					"query": [
						{
							"key": "containerId",
							"value": "NOTFOUNDCONTAINER"
						}
					]
				},
				"description": "Unpublish an not existing container"
			},
			"response": []
		},
		{
			"name": "ArchiveContainerInvalidContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_archive?containerId=",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_archive"
					],
					"query": [
						{
							"key": "containerId",
							"value": ""
						}
					]
				},
				"description": "Archive an invalid container"
			},
			"response": []
		},
		{
			"name": "ArchiveContainerNotFoundContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_archive?containerId=NOTFOUND",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_archive"
					],
					"query": [
						{
							"key": "containerId",
							"value": "NOTFOUND"
						}
					]
				},
				"description": "Archive a non existing container"
			},
			"response": []
		},
		{
			"name": "UnarchiveContainerInvalidContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unarchive?containerId=",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unarchive"
					],
					"query": [
						{
							"key": "containerId",
							"value": ""
						}
					]
				},
				"description": "UNArchive an invalid container"
			},
			"response": []
		},
		{
			"name": "UnarchiveContainerNotFoundContainer Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unarchive?containerId=NOTFOUND",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unarchive"
					],
					"query": [
						{
							"key": "containerId",
							"value": "NOTFOUND"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteContainerInvalidContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"  pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers?containerId=",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					],
					"query": [
						{
							"key": "containerId",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteContainerNotFoundContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"  pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers?containerId=NOTFOUND",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					],
					"query": [
						{
							"key": "containerId",
							"value": "NOTFOUND"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateNewContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"abcd\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Notes\");",
							"    ",
							"    ",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"identifier\", jsonData.entity.identifier);",
							"pm.collectionVariables.set(\"inode\", jsonData.entity.inode);",
							"",
							"pm.collectionVariables.set(\"containerToCopyId\", jsonData.entity.identifier);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\":\"abcd\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					]
				},
				"description": "Create a container"
			},
			"response": []
		},
		{
			"name": "EditNewContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Notes 1\");",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					]
				},
				"description": "Edit the existing container"
			},
			"response": []
		},
		{
			"name": "SelectDefaultHostAsDefault",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/site/8a7d5e23-da1e-420a-b4f0-471e7da8ea2d/_makedefault",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"site",
						"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d",
						"_makedefault"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetWorking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Notes 1\");",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/working?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"working"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "Get the working version of a container"
			},
			"response": []
		},
		{
			"name": "Get containers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Notes 1\");",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/working?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"working"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "Get the working version of a container"
			},
			"response": []
		},
		{
			"name": "GetLive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.name).to.eql(\"Test Container\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Test Container\");",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/live?containerId=/application/containers/test",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"live"
					],
					"query": [
						{
							"key": "containerId",
							"value": "/application/containers/test"
						}
					]
				},
				"description": "Get the live version of a container"
			},
			"response": []
		},
		{
			"name": "Publish",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Notes 1\");",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_publish?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_publish"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "Publish a container"
			},
			"response": []
		},
		{
			"name": "GetLiveByuuid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Notes 1\");",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/live?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"live"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "Get live version of the container by uuid"
			},
			"response": []
		},
		{
			"name": "GetLiveByuuid_does_not_exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Bundle uploaded sucessfully\", function () {",
							"    pm.response.to.have.status(404);",
							"",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/live?containerId=xxxxx",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"live"
					],
					"query": [
						{
							"key": "containerId",
							"value": "xxxxx"
						}
					]
				},
				"description": "Get the live version of the file container"
			},
			"response": []
		},
		{
			"name": "UnPublishContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json(); ",
							"    pm.expect(jsonData.errors.length).to.eql(0); ",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.notes).to.eql(\"Notes 1\");",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unpublish?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unpublish"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "Unpublish a container"
			},
			"response": []
		},
		{
			"name": "UnPublishFileContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () { ",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"Test Container\");",
							"    pm.expect(jsonData.entity.live).to.eql(false); ",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unpublish?containerId=/application/containers/test",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unpublish"
					],
					"query": [
						{
							"key": "containerId",
							"value": "/application/containers/test"
						}
					]
				},
				"description": "Unpublish a file container"
			},
			"response": []
		},
		{
			"name": "ArchiveContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () { ",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.live).to.eql(false); ",
							"    pm.expect(jsonData.entity.archived).to.eql(true); ",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_archive?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_archive"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "archive a container"
			},
			"response": []
		},
		{
			"name": "ArchiveFileContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () { ",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"Test Container\");",
							"    pm.expect(jsonData.entity.live).to.eql(false); ",
							"    pm.expect(jsonData.entity.archived).to.eql(true); ",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_archive?containerId=/application/containers/test",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_archive"
					],
					"query": [
						{
							"key": "containerId",
							"value": "/application/containers/test"
						}
					]
				},
				"description": "un archive a file container"
			},
			"response": []
		},
		{
			"name": "UnarchiveContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () { ",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"TestContainer\");",
							"    pm.expect(jsonData.entity.live).to.eql(false);  ",
							"    pm.expect(jsonData.entity.archived).to.eql(false); ",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unarchive?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unarchive"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "Unarchive container"
			},
			"response": []
		},
		{
			"name": "UnarchiveFileContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () { ",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"Test Container\");",
							"    pm.expect(jsonData.entity.live).to.eql(false); ",
							"    pm.expect(jsonData.entity.archived).to.eql(false); ",
							"    ",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_unarchive?containerId=/application/containers/test",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_unarchive"
					],
					"query": [
						{
							"key": "containerId",
							"value": "/application/containers/test"
						}
					]
				},
				"description": "un archive a file container"
			},
			"response": []
		},
		{
			"name": "PublishFileContainerAgain",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () { ",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.title).to.eql(\"Test Container\");",
							"    ",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"identifier\":\"{{identifier}}\",\n    \"title\":\"TestContainer\",\n    \"friendlyName\":\"TestContainer description\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes 1\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_publish?containerId=/application/containers/test",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_publish"
					],
					"query": [
						{
							"key": "containerId",
							"value": "/application/containers/test"
						}
					]
				},
				"description": "Publish the file container again"
			},
			"response": []
		},
		{
			"name": "DeleteContainer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers?containerId={{identifier}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifier}}"
						}
					]
				},
				"description": "Deletes the container"
			},
			"response": []
		},
		{
			"name": "Archive containers - Create New Container",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"No errors\", function () {",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    pm.expect(jsonData.entity.title).to.eql(\"Container to be archived\");    ",
							"});",
							"",
							"pm.collectionVariables.set(\"identifierToArchiveContainer\", jsonData.entity.identifier);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\":\"Container to be archived\",\n    \"friendlyName\":\"Container to be archived\",\n    \"maxContentlets\":1,\n    \"notes\":\"Notes\",\n    \"preLoop\":\"preLoop xxxx\",\n    \"postLoop\":\"postLoop xxxx\",\n    \"containerStructures\":[\n        {\n            \"structureId\":\"webPageContent\",\n            \"code\":\" code xxxx\"\n        },\n        {\n            \"structureId\":\"DotAsset\",\n            \"code\":\" tags: $!{tags}\"\n        }\n    ]\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					]
				},
				"description": "Create a container"
			},
			"response": []
		},
		{
			"name": "Archive containers - archive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"",
							"pm.test(\"No errors\", function () {",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {         ",
							"    pm.expect(jsonData.entity.live).to.eql(false); ",
							"    pm.expect(jsonData.entity.archived).to.eql(true);    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/containers/_archive?containerId={{identifierToArchiveContainer}}",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers",
						"_archive"
					],
					"query": [
						{
							"key": "containerId",
							"value": "{{identifierToArchiveContainer}}"
						}
					]
				},
				"description": "archive a container"
			},
			"response": []
		},
		{
			"name": "Archive containers - Get archived containers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"No errors\", function () {   ",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Fetch archived containers successfully\", function () {",
							"    pm.expect(jsonData.errors).to.have.lengthOf(0);",
							"    ",
							"    var archived = false;",
							"",
							"    for(var i=0; i < jsonData.entity.length; i++){",
							"        if(jsonData.entity[i].archived == true){",
							"            archived = true;",
							"            break;",
							"        }",
							"    }",
							"",
							"     pm.expect(archived).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{serverURL}}/api/v1/containers?filter=&page=0&per_page=50&ordeby=title&direction=ASC&host=&system=true&archive=true",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"containers"
					],
					"query": [
						{
							"key": "filter",
							"value": ""
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "per_page",
							"value": "50"
						},
						{
							"key": "ordeby",
							"value": "title"
						},
						{
							"key": "direction",
							"value": "ASC"
						},
						{
							"key": "host",
							"value": ""
						},
						{
							"key": "system",
							"value": "true"
						},
						{
							"key": "archive",
							"value": "true"
						}
					]
				},
				"description": "Get the working version of a container"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "identifier",
			"value": ""
		},
		{
			"key": "inode",
			"value": ""
		},
		{
			"key": "folderidentifier",
			"value": ""
		},
		{
			"key": "folderinode",
			"value": ""
		},
		{
			"key": "containerToCopyId",
			"value": ""
		},
		{
			"key": "containerToDeleteId",
			"value": ""
		},
		{
			"key": "containerToDeleteId1",
			"value": ""
		},
		{
			"key": "containerToDeleteId2",
			"value": ""
		},
		{
			"key": "containerToPublishId1",
			"value": ""
		},
		{
			"key": "containerToPublishId2",
			"value": ""
		},
		{
			"key": "containerToUnpublishId1",
			"value": ""
		},
		{
			"key": "containerToUnpublishId2",
			"value": ""
		},
		{
			"key": "containerToArchiveId1",
			"value": ""
		},
		{
			"key": "containerToArchiveId2",
			"value": ""
		},
		{
			"key": "containerToUnarchiveId1",
			"value": ""
		},
		{
			"key": "containerToUnarchiveId2",
			"value": ""
		},
		{
			"key": "containderIdentifierToGetDetails",
			"value": ""
		},
		{
			"key": "identifierForUpdateContainer",
			"value": ""
		},
		{
			"key": "identifierToArchiveContainer",
			"value": ""
		}
	]
}