{
	"info": {
		"_postman_id": "b1172ad8-7b61-4179-96ee-23ec37e48822",
		"name": "Content Resource",
		"description": "Content Resource test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test Content Search",
			"item": [
				{
					"name": "Create ContentType with 360 Icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var contentType = jsonData.entity[0];",
									"",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Icon should be 360\", function() {",
									"    pm.expect(contentType.icon).to.eql(\"360\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"defaultType\":false,\n   \"icon\":\"360\",\n   \"fixed\":false,\n   \"system\":false,\n   \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n   \"description\":\"\",\n   \"host\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n   \"folder\":\"SYSTEM_FOLDER\",\n   \"name\":\"360IconTest\",\n   \"fields\": [{\n       \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n\t\t\"dataType\": \"TEXT\",\n\t\t\"fieldType\": \"Text\",\n\t\t\"fieldTypeLabel\": \"Text\",\n\t\t\"fieldVariables\": [],\n\t\t\"fixed\": false,\n\t\t\"iDate\": 1606168746000,\n\t\t\"indexed\": true,\n\t\t\"listed\": false,\n\t\t\"modDate\": 1606168746000,\n\t\t\"name\": \"Title\",\n\t\t\"readOnly\": false,\n\t\t\"required\": false,\n\t\t\"searchable\": true,\n\t\t\"sortOrder\": 1,\n\t\t\"unique\": false,\n\t\t\"variable\": \"title\"\n    }\n   ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that WYSIWYG field is created with provided field variables."
					},
					"response": []
				},
				{
					"name": "Create 360IconTest  Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.summary.affected).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"Three60IconTest\",\n            \"title\":\"360IconTest\",\n            \"contentHost\":\"default\"            \n        }        \n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request a Contet-Type Expect ContetType Icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Id check\", function () {",
									"    pm.expect(jsonData.contentlets[0].__icon__).to.eql('contentIcon');",
									"    pm.expect(jsonData.contentlets[0].contentTypeIcon).to.eql('360');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/content/render/false/query/+contentType:Three60IconTest",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"render",
								"false",
								"query",
								"+contentType:Three60IconTest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Save Multiple Generic Contentlets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Running test\")",
							"",
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.summary.affected).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content1\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content1\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content2\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content2\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content3\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content3\"\n        }\n        \n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"workflow",
						"actions",
						"default",
						"fire",
						"PUBLISH"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalidateSession",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/logout",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Anonymous Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking the results \" , function(){",
							"        ",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    if(jsonData.entity.contentTook<0){",
							"        throw new Error(\"contentTook should be >= 0\");",
							"    } ",
							"",
							"    if(jsonData.entity.jsonObjectView.contentlets.length<=0){",
							"        throw new Error(\"contentlets should be > 0\");",
							"    } else {",
							"",
							"        for (var i in jsonData.entity.jsonObjectView.contentlets) {",
							"",
							"            let contentlet = jsonData.entity.jsonObjectView.contentlets[i];",
							"            console.log(jsonData.entity.jsonObjectView.contentlets[i]);",
							"            if(!contentlet.hasOwnProperty('hostName')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has hostName\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('inode')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has inode\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('identifier')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has identifier\");",
							"            }",
							"        }",
							"    }",
							"        ",
							"",
							" });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+contentType:webPageContent\",\n      \t \"sort\":\"modDate\",\n      \t \"limit\":20,\n      \t \"offset\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "This is an annonymous request"
			},
			"response": []
		},
		{
			"name": "Admin Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking the results \" , function(){",
							"        ",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    if(jsonData.entity.contentTook<0){",
							"        throw new Error(\"contentTook should be >= 0\");",
							"    } ",
							"",
							"    if(jsonData.entity.jsonObjectView.contentlets.length<=0){",
							"        throw new Error(\"contentlets should be > 0\");",
							"    } else {",
							"",
							"        for (var i in jsonData.entity.jsonObjectView.contentlets) {",
							"",
							"            let contentlet = jsonData.entity.jsonObjectView.contentlets[i];",
							"            console.log(jsonData.entity.jsonObjectView.contentlets[i]);",
							"            if(!contentlet.hasOwnProperty('hostName')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has hostName\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('inode')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has inode\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('identifier')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has identifier\");",
							"            }",
							"        }",
							"    }",
							"        ",
							"",
							" });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+contentType:webPageContent\",\n          \"limit\": 3,\n          \"offset\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "Just an admin request"
			},
			"response": []
		},
		{
			"name": "Admin Request + Invalid User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+structurename:webpagecontent\",\n      \t \"sort\":\"modDate\",\n      \t \"limit\":20,\n      \t \"offset\":1,\n         \"userId\":\"xxx\"  \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "using an admin user but with invalid user"
			},
			"response": []
		},
		{
			"name": "Admin Request Just Query Param_Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Should contains a content\", function () {",
							"    pm.expect(pm.response.json().entity.jsonObjectView.contentlets.length).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+contentType:webPageContent\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "Make a request but only include the query, not any other param.\nShould use the default limit and offset values."
			},
			"response": []
		},
		{
			"name": "XML is not allowed on Save",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<content>\n     <contentType>webPageContent</contentType>\n     <languageId>1</languageId>\n     <title>test content</title>\n     <contentHost>demo.dotcms.com</contentHost>\n     <body>test body</body>\n</content>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/save/1",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"save",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "XML is not allowed on Publish",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<java.util.PriorityQueue serialization=\"custom\">\n  <unserializable-parents/>\n  <java.util.PriorityQueue>\n    <default>\n      <size>2</size>\n      <comparator class=\"org.apache.commons.beanutils.BeanComparator\">\n        <property>databaseMetaData</property>\n        <comparator class=\"java.util.Collections$ReverseComparator\"/>\n      </comparator>\n    </default>\n    <int>3</int>\n    <com.sun.rowset.JdbcRowSetImpl serialization=\"custom\">\n      <javax.sql.rowset.BaseRowSet>\n        <default>\n          <concurrency>1008</concurrency>\n          <escapeProcessing>true</escapeProcessing>\n          <fetchDir>1000</fetchDir>\n          <fetchSize>0</fetchSize>\n          <isolation>2</isolation>\n          <maxFieldSize>0</maxFieldSize>\n          <maxRows>0</maxRows>\n          <queryTimeout>0</queryTimeout>\n          <readOnly>true</readOnly>\n          <rowSetType>1004</rowSetType>\n          <showDeleted>false</showDeleted>\n          <dataSource>jdbc/dotCMSPool</dataSource>\n          <params/>\n        </default>\n      </javax.sql.rowset.BaseRowSet>\n      <com.sun.rowset.JdbcRowSetImpl>\n        <default>\n          <iMatchColumns>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n          </iMatchColumns>\n          <strMatchColumns>\n            <string>foo</string>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n          </strMatchColumns>\n        </default>\n      </com.sun.rowset.JdbcRowSetImpl>\n    </com.sun.rowset.JdbcRowSetImpl>\n    <com.sun.rowset.JdbcRowSetImpl reference=\"../com.sun.rowset.JdbcRowSetImpl\"/>\n  </java.util.PriorityQueue>\n</java.util.PriorityQueue>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/publish/1",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"publish",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request a Host",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Id check\", function () {",
							"    pm.expect(jsonData.contentlets[0].hostname).to.eql('default');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/content/render/false/query/+contentType:host +title:default",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"content",
						"render",
						"false",
						"query",
						"+contentType:host +title:default"
					]
				}
			},
			"response": []
		}
	]
}