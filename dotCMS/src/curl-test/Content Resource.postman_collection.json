{
	"info": {
		"_postman_id": "64a156b5-40b4-46ce-8bab-6083e910e48a",
		"name": "Content Resource",
		"description": "Content Resource test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5403727"
	},
	"item": [
		{
			"name": "Test Content Search",
			"item": [
				{
					"name": "Story Block Field Tests",
					"item": [
						{
							"name": "Create Content Type with WYSIWYG field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Content Type creation must be successful\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"var contentType = jsonData.entity[0];",
											"",
											"pm.collectionVariables.set(\"contentTypeId\", contentType.id);",
											"pm.collectionVariables.set(\"contentTypeName\", contentType.name);",
											"pm.collectionVariables.set(\"fieldId\", contentType.fields[0].id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"defaultType\":false,\n   \"fixed\":false,\n   \"system\":false,\n   \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n   \"description\":\"\",\n   \"host\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n   \"folder\":\"SYSTEM_FOLDER\",\n   \"name\":\"TestRichCT\",\n   \"fields\": [{\n       \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableWysiwygField\",\n\t\t\"dataType\": \"LONG_TEXT\",\n\t\t\"fieldVariables\": [],\n\t\t\"fixed\": false,\n\t\t\"iDate\": 1662153603216,\n\t\t\"indexed\": true,\n\t\t\"listed\": false,\n\t\t\"modDate\": 1662153603216,\n\t\t\"name\": \"Description\",\n\t\t\"readOnly\": false,\n\t\t\"required\": false,\n\t\t\"searchable\": true,\n\t\t\"sortOrder\": 1,\n\t\t\"unique\": false,\n\t\t\"variable\": \"description\"\n    }\n   ]\n}"
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype"
									]
								},
								"description": "Creates a test Content Type with a single WYSIWYG field, which will be transformed into a Story Block field later on."
							},
							"response": []
						},
						{
							"name": "Create Test Content",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Content creation must be successful\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Test contentlet was created successfully\", function () {",
											"    var jsonData = pm.response.json().entity;",
											"",
											"    pm.expect(jsonData.summary.failCount).to.eql(0, \"An error occurred when creating the test Content Type\");",
											"    pm.expect(jsonData.summary.successCount).to.eql(1, \"One piece of content should have been created\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"contentlets\": [\n        {\n            \"contentType\": \"{{contentTypeName}}\",\n            \"description\": \"<h1>My Title</h1><p>This is my test content.</p>\",\n            \"contentHost\": \"default\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"workflow",
										"actions",
										"default",
										"fire",
										"PUBLISH"
									]
								},
								"description": "Creates a test Contentlet of the previously generated Content Type."
							},
							"response": []
						},
						{
							"name": "Transform WYSIWYG field into Story Block",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"WYSIWYG transformation must be successful\", function() {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Checking transformation of WYSIWYG field into Story Block\", function () {",
											"    var jsonData = pm.response.json().entity;",
											"",
											"    pm.expect(jsonData[0].columns[0].fields[0].clazz).to.eql(\"com.dotcms.contenttype.model.field.ImmutableStoryBlockField\", \"Field type is not the expected ImmutableStoryBlockField\");",
											"    pm.expect(jsonData[0].columns[0].fields[0].variable).to.eql(\"description\", \"Story Block Field does not correspond to expected 'description' field\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"field\": {\n        \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableStoryBlockField\",\n        \"contentTypeId\": \"{{contentTypeId}}\",\n        \"dataType\": \"LONG_TEXT\",\n        \"fieldType\": \"Story-Block\",\n        \"fieldTypeLabel\": \"Story Block\",\n        \"fieldVariables\": [],\n        \"fixed\": false,\n        \"iDate\": 1662153603000,\n        \"id\": \"{{fieldId}}\",\n        \"indexed\": true,\n        \"listed\": false,\n        \"modDate\": 1662153723000,\n        \"name\": \"Description\",\n        \"readOnly\": false,\n        \"required\": false,\n        \"searchable\": true,\n        \"sortOrder\": 1,\n        \"unique\": false,\n        \"variable\": \"description\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v3/contenttype/{{contentTypeId}}/fields/{{fieldId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v3",
										"contenttype",
										"{{contentTypeId}}",
										"fields",
										"{{fieldId}}"
									]
								},
								"description": "Transforms the WYSIWYG into the Story Block field. This is NOT a new REST Endpoint, it is the existing Endpoint used to update data for any field."
							},
							"response": []
						},
						{
							"name": "Delete Test Content Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Test Content Type deletion must be successful\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"type": "any"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{serverURL}}/api/v1/contenttype/id/{{contentTypeId}}",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"contenttype",
										"id",
										"{{contentTypeId}}"
									]
								},
								"description": "Deletes the test Content Type with the now-transformed Story Block field."
							},
							"response": []
						}
					],
					"description": "This folder contains Postman tests related to the interaction with Story Block fields in dotCMS."
				},
				{
					"name": "Create ContentType with 360 Icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var contentType = jsonData.entity[0];",
									"",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Icon should be 360\", function() {",
									"    pm.expect(contentType.icon).to.eql(\"360\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"defaultType\":false,\n   \"icon\":\"360\",\n   \"fixed\":false,\n   \"system\":false,\n   \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n   \"description\":\"\",\n   \"host\":\"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n   \"folder\":\"SYSTEM_FOLDER\",\n   \"name\":\"360IconTest\",\n   \"fields\": [{\n       \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableTextField\",\n\t\t\"dataType\": \"TEXT\",\n\t\t\"fieldType\": \"Text\",\n\t\t\"fieldTypeLabel\": \"Text\",\n\t\t\"fieldVariables\": [],\n\t\t\"fixed\": false,\n\t\t\"iDate\": 1606168746000,\n\t\t\"indexed\": true,\n\t\t\"listed\": false,\n\t\t\"modDate\": 1606168746000,\n\t\t\"name\": \"Title\",\n\t\t\"readOnly\": false,\n\t\t\"required\": false,\n\t\t\"searchable\": true,\n\t\t\"sortOrder\": 1,\n\t\t\"unique\": false,\n\t\t\"variable\": \"title\"\n    }\n   ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Given a content type payload containing field variables.\nWhen sending a POST.\nExpect that code is 200.\nExpect content type is created with the provided fields.\nExpect that WYSIWYG field is created with provided field variables."
					},
					"response": []
				},
				{
					"name": "Create 360IconTest  Instance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Running test\")",
									"",
									"pm.test(\"No errors\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});",
									"",
									"pm.test(\"Information Saved Correctly\", function () {",
									"    ",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.entity.summary.affected).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"Three60IconTest\",\n            \"title\":\"360IconTest\",\n            \"contentHost\":\"default\"            \n        }        \n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request a Contet-Type Expect ContetType Icon",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Id check\", function () {",
									"    pm.expect(jsonData.contentlets[0].__icon__).to.eql('contentIcon');",
									"    pm.expect(jsonData.contentlets[0].contentTypeIcon).to.eql('360');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/content/render/false/query/+contentType:Three60IconTest",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"render",
								"false",
								"query",
								"+contentType:Three60IconTest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Related Items Pagination",
			"item": [
				{
					"name": "Import Content ManyToMany Parent Children",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"issue-22236-RelatedPagination-01GA6T1VX69MHWX2NYME3EG238.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/issue-22236-RelatedPagination-01GA6T1VX69MHWX2NYME3EG238.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n\n*   pp-test page with all the dependencies. pp-test page was created on a demo.dotcms.com site"
					},
					"response": []
				},
				{
					"name": "Request a Contet With Offset 0 Expect 3 Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"check items\", function () {",
									"    pm.expect(jsonData.contentlets.length).eql(3);    ",
									"    pm.expect(jsonData.contentlets[0].title).eql('Parent-1');",
									"    pm.expect(jsonData.contentlets[1].title).eql('Parent-2');",
									"    pm.expect(jsonData.contentlets[2].title).eql('Parent-3');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/content/render/false/query/+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true/orderby/title,modDate%20desc/related/Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96/limit/10/offset/0",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"render",
								"false",
								"query",
								"+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true",
								"orderby",
								"title,modDate%20desc",
								"related",
								"Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96",
								"limit",
								"10",
								"offset",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request a Contet With Offset 1 Expect 2 items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"check items\", function () {",
									"    pm.expect(jsonData.contentlets.length).eql(2);    ",
									"    pm.expect(jsonData.contentlets[0].title).eql('Parent-2');",
									"    pm.expect(jsonData.contentlets[1].title).eql('Parent-3');    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/content/render/false/query/+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true/orderby/title,modDate%20desc/related/Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96/limit/10/offset/1",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"render",
								"false",
								"query",
								"+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true",
								"orderby",
								"title,modDate%20desc",
								"related",
								"Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96",
								"limit",
								"10",
								"offset",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request a Contet With Offset 2 Expect 1 items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"check items\", function () {",
									"    pm.expect(jsonData.contentlets.length).eql(1);        ",
									"    pm.expect(jsonData.contentlets[0].title).eql('Parent-3');    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/content/render/false/query/+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true/orderby/title,modDate%20desc/related/Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96/limit/10/offset/2",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"render",
								"false",
								"query",
								"+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true",
								"orderby",
								"title,modDate%20desc",
								"related",
								"Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96",
								"limit",
								"10",
								"offset",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Request a Contet With Offset 0 Limit 1 Expect 1 items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"check items\", function () {",
									"    pm.expect(jsonData.contentlets.length).eql(1);        ",
									"    pm.expect(jsonData.contentlets[0].title).eql('Parent-1');    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/content/render/false/query/+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true/orderby/title,modDate%20desc/related/Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96/limit/1/offset/0",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"render",
								"false",
								"query",
								"+contentType:Issue22236Parent%20+languageId:1%20+deleted:false%20+working:true",
								"orderby",
								"title,modDate%20desc",
								"related",
								"Issue22236Parent.children:a696acd4d82bce47eac68da48e26ca96",
								"limit",
								"1",
								"offset",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "create-content-type-with-categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);        ",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"issue-22756-categories-01GCAK78NPY1JH8TRGX8SWCVN3.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/issue-22756-categories-01GCAK78NPY1JH8TRGX8SWCVN3.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle/sync",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle",
								"sync"
							]
						},
						"description": "This endpoint imports a bundle that contains an instance of a Content Type that contains 2 category fields."
					},
					"response": []
				},
				{
					"name": "get-contentlet-identifier-by-contnet-type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    const identifier = entity.jsonObjectView.contentlets[0].identifier;       ",
									"    pm.collectionVariables.set(\"identifier22756\", identifier);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"+contentType:BikeNameAndCategory +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"_search"
							]
						},
						"description": "Once the Content type that contains the category fields has been imported this request finds it and gets the identifier from it."
					},
					"response": []
				},
				{
					"name": "update-contentlet-add-category-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);               ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \n    \"title\": \"Update Norco Revolver\",\n    \"contentHost\": \"demo.dotcms.com\",\n    \"identifier\": \"{{identifier22756}}\",              \n    \"contentType\":\"BikeNameAndCategory\",\n    \"bikeType\":[\"MTB\",\"Road\"],\n    \"make\":[\"Norco\"]   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/publish/1",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"publish",
								"1"
							]
						},
						"description": "This is basically the happy path test. We validate that the content-type can be updated passing arrays of valid categories. Then verify the response to check the categories are the expected."
					},
					"response": []
				},
				{
					"name": "validate-contentlet-categories-post-update-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    const contentlet = entity.jsonObjectView.contentlets[0];",
									"    pm.expect(contentlet.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"    pm.expect(contentlet.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"+contentType:BikeNameAndCategory +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"_search"
							]
						},
						"description": "Once the Content type that contains the category fields has been imported this request finds it and gets the identifier from it."
					},
					"response": []
				},
				{
					"name": "update-contentlet-test-null-category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);               ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \n    \"title\": \"Update Norco Revolver\",\n    \"contentHost\": \"demo.dotcms.com\",\n    \"identifier\": \"{{identifier22756}}\",              \n    \"contentType\":\"BikeNameAndCategory\",\n    \"bikeType\":null,\n    \"make\":null   \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/publish/1",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"publish",
								"1"
							]
						},
						"description": "Update categories passing null values on eachoena of them"
					},
					"response": []
				},
				{
					"name": "validate-contentlet-categories-post-update-with-null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    const contentlet = entity.jsonObjectView.contentlets[0];",
									"    pm.expect(contentlet.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"    pm.expect(contentlet.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"+contentType:BikeNameAndCategory +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"_search"
							]
						},
						"description": "validate that passing null did not affected the content. specifically the category fields."
					},
					"response": []
				},
				{
					"name": "update-contentlet-test-ignored-category-fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);               ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \n    \"title\": \"Update Norco Revolver\",\n    \"contentHost\": \"demo.dotcms.com\",\n    \"identifier\": \"{{identifier22756}}\",              \n    \"contentType\":\"BikeNameAndCategory\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/publish/1",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"publish",
								"1"
							]
						},
						"description": "Test ignoring the fields."
					},
					"response": []
				},
				{
					"name": "validate-contentlet-categories-post-update-ignored-fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    const contentlet = entity.jsonObjectView.contentlets[0];",
									"    pm.expect(contentlet.bikeType).to.eql([{\"MTB\":\"MTB\"},{\"Road\":\"Road\"}]);    ",
									"    pm.expect(contentlet.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"+contentType:BikeNameAndCategory +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"_search"
							]
						},
						"description": "Validate the results after having ignored the fields."
					},
					"response": []
				},
				{
					"name": "update-contentlet-test-ignored-category-fields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);               ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \n    \"title\": \"Update Norco Revolver\",\n    \"contentHost\": \"demo.dotcms.com\",\n    \"identifier\": \"{{identifier22756}}\",              \n    \"contentType\":\"BikeNameAndCategory\",\n    \"bikeType\":[] \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/publish/1",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"publish",
								"1"
							]
						},
						"description": "Test removing the categories on one fields and ignoring the other"
					},
					"response": []
				},
				{
					"name": "validate-contentlet-categories-post-update-ignored-fields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); ",
									"    const jsonData = pm.response.json();",
									"    const entity = (jsonData.entity);",
									"    const contentlet = entity.jsonObjectView.contentlets[0];",
									"    pm.expect(contentlet.bikeType).to.eql(undefined);   ",
									"    pm.expect(contentlet.make).to.eql([{\"Norco\":\"Norco\"}]);    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"query\":\"+contentType:BikeNameAndCategory +languageId:1 +deleted:false +working:true\",\"sort\":\"modDate desc\",\"offset\":0}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/content/_search",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"_search"
							]
						},
						"description": "Validate that the fiel that got the empty array has lost the categories while the other one remains intact"
					},
					"response": []
				}
			]
		},
		{
			"name": "File Asset Metadata",
			"item": [
				{
					"name": "Create Test File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test File created successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors must be present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"",
									"    pm.collectionVariables.set(\"fileId\", jsonData.entity.identifier);",
									"    pm.collectionVariables.set(\"fileInode\", jsonData.entity.inode);",
									"    pm.collectionVariables.set(\"fileName\", jsonData.entity.fileName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{serverURL}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/testpdf.pdf"
								},
								{
									"key": "json",
									"value": "{\"contentlet\": {\"contentType\":\"FileAsset\",\"title\":\"testpdf.pdf\",\"hostFolder\":\"default\"}}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "Create a test File Asset that will be used to read Metadata from."
					},
					"response": []
				},
				{
					"name": "Check Metadata Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status must be successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Metadata section must be present and not empty\", function () {",
									"    pm.expect(jsonData.contentlets[0].metaData.length).to.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Expected Metadata are present\", function () {",
									"    var expectedFileName = pm.collectionVariables.get(\"fileName\");",
									"    var expectedFileInode = pm.collectionVariables.get(\"fileInode\");",
									"    pm.expect(jsonData.contentlets[0].metaData.isImage).to.eq(false);",
									"    pm.expect(jsonData.contentlets[0].metaData.name).to.eq(expectedFileName);",
									"    pm.expect(jsonData.contentlets[0].metaData.contentType).to.eq(\"application/pdf\");",
									"    pm.expect(jsonData.contentlets[0].metaData.path).to.include(\"/\" + expectedFileInode + \"/fileAsset/\" + expectedFileName);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/content/id/{{fileId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"content",
								"id",
								"{{fileId}}"
							]
						},
						"description": "Checks a few Metadata properties, such as:\n\n- **isImage:** should be \"false\" for a PDF.\n- **name:** File name.\n- **contentType**: The HTTP content type, not the dotCMS content Type.\n- **path**: The Inode-based path to the file."
					},
					"response": []
				},
				{
					"name": "Unpublish Test File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test File unpublished successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors must be present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{serverURL}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/UNPUBLISH?inode={{fileInode}}&identifier={{fileId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"UNPUBLISH"
							],
							"query": [
								{
									"key": "inode",
									"value": "{{fileInode}}"
								},
								{
									"key": "identifier",
									"value": "{{fileId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Archive Test File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test File archived successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors must be present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{serverURL}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/ARCHIVE?inode={{fileInode}}&identifier={{fileId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"ARCHIVE"
							],
							"query": [
								{
									"key": "inode",
									"value": "{{fileInode}}"
								},
								{
									"key": "identifier",
									"value": "{{fileId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Test File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test File deleted successfully\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors must be present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.length).to.eql(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Origin",
								"value": "{{serverURL}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/DELETE?inode={{fileInode}}&identifier={{fileId}}",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"DELETE"
							],
							"query": [
								{
									"key": "inode",
									"value": "{{fileInode}}"
								},
								{
									"key": "identifier",
									"value": "{{fileId}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Verifies that the Metadata section in the JSON response in a File Asset is added."
		},
		{
			"name": "Save Multiple Generic Contentlets",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"console.log(\"Running test\")",
							"",
							"pm.test(\"No errors\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.errors.length).to.eql(0);",
							"});",
							"",
							"pm.test(\"Information Saved Correctly\", function () {",
							"    ",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.entity.summary.affected).to.eql(3);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"contentlets\":[\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content1\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content1\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content2\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content2\"\n        },\n        {\n            \"contentType\":\"webPageContent\",\n            \"title\":\"Content3\",\n            \"contentHost\":\"default\",\n            \"body\":\"Body Content3\"\n        }\n        \n    ]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"workflow",
						"actions",
						"default",
						"fire",
						"PUBLISH"
					]
				}
			},
			"response": []
		},
		{
			"name": "invalidateSession",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{serverURL}}/api/v1/logout",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"v1",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Anonymous Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking the results \" , function(){",
							"        ",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    if(jsonData.entity.contentTook<0){",
							"        throw new Error(\"contentTook should be >= 0\");",
							"    } ",
							"",
							"    if(jsonData.entity.jsonObjectView.contentlets.length<=0){",
							"        throw new Error(\"contentlets should be > 0\");",
							"    } else {",
							"",
							"        for (var i in jsonData.entity.jsonObjectView.contentlets) {",
							"",
							"            let contentlet = jsonData.entity.jsonObjectView.contentlets[i];",
							"            console.log(jsonData.entity.jsonObjectView.contentlets[i]);",
							"            if(!contentlet.hasOwnProperty('hostName')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has hostName\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('inode')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has inode\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('identifier')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has identifier\");",
							"            }",
							"        }",
							"    }",
							"        ",
							"",
							" });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+contentType:webPageContent\",\n      \t \"sort\":\"modDate\",\n      \t \"limit\":20,\n      \t \"offset\":1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "This is an annonymous request"
			},
			"response": []
		},
		{
			"name": "Admin Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Checking the results \" , function(){",
							"        ",
							"    var jsonData = JSON.parse(responseBody);",
							"    ",
							"    if(jsonData.entity.contentTook<0){",
							"        throw new Error(\"contentTook should be >= 0\");",
							"    } ",
							"",
							"    if(jsonData.entity.jsonObjectView.contentlets.length<=0){",
							"        throw new Error(\"contentlets should be > 0\");",
							"    } else {",
							"",
							"        for (var i in jsonData.entity.jsonObjectView.contentlets) {",
							"",
							"            let contentlet = jsonData.entity.jsonObjectView.contentlets[i];",
							"            console.log(jsonData.entity.jsonObjectView.contentlets[i]);",
							"            if(!contentlet.hasOwnProperty('hostName')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has hostName\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('inode')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has inode\");",
							"            }",
							"",
							"            if(!contentlet.hasOwnProperty('identifier')) {",
							"                throw new Error(\"contentlet: \" + contentlet + \" should has identifier\");",
							"            }",
							"        }",
							"    }",
							"        ",
							"",
							" });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+contentType:webPageContent\",\n          \"limit\": 3,\n          \"offset\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "Just an admin request"
			},
			"response": []
		},
		{
			"name": "Admin Request + Invalid User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+structurename:webpagecontent\",\n      \t \"sort\":\"modDate\",\n      \t \"limit\":20,\n      \t \"offset\":1,\n         \"userId\":\"xxx\"  \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "using an admin user but with invalid user"
			},
			"response": []
		},
		{
			"name": "Admin Request Just Query Param_Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Should contains a content\", function () {",
							"    pm.expect(pm.response.json().entity.jsonObjectView.contentlets.length).to.be.greaterThan(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						},
						{
							"key": "saveHelperData",
							"type": "any"
						},
						{
							"key": "showPassword",
							"value": false,
							"type": "boolean"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n     \t \"query\": \"+contentType:webPageContent\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/_search",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"_search"
					]
				},
				"description": "Make a request but only include the query, not any other param.\nShould use the default limit and offset values."
			},
			"response": []
		},
		{
			"name": "XML is not allowed on Save",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<content>\n     <contentType>webPageContent</contentType>\n     <languageId>1</languageId>\n     <title>test content</title>\n     <contentHost>demo.dotcms.com</contentHost>\n     <body>test body</body>\n</content>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/save/1",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"save",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "XML is not allowed on Publish",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<java.util.PriorityQueue serialization=\"custom\">\n  <unserializable-parents/>\n  <java.util.PriorityQueue>\n    <default>\n      <size>2</size>\n      <comparator class=\"org.apache.commons.beanutils.BeanComparator\">\n        <property>databaseMetaData</property>\n        <comparator class=\"java.util.Collections$ReverseComparator\"/>\n      </comparator>\n    </default>\n    <int>3</int>\n    <com.sun.rowset.JdbcRowSetImpl serialization=\"custom\">\n      <javax.sql.rowset.BaseRowSet>\n        <default>\n          <concurrency>1008</concurrency>\n          <escapeProcessing>true</escapeProcessing>\n          <fetchDir>1000</fetchDir>\n          <fetchSize>0</fetchSize>\n          <isolation>2</isolation>\n          <maxFieldSize>0</maxFieldSize>\n          <maxRows>0</maxRows>\n          <queryTimeout>0</queryTimeout>\n          <readOnly>true</readOnly>\n          <rowSetType>1004</rowSetType>\n          <showDeleted>false</showDeleted>\n          <dataSource>jdbc/dotCMSPool</dataSource>\n          <params/>\n        </default>\n      </javax.sql.rowset.BaseRowSet>\n      <com.sun.rowset.JdbcRowSetImpl>\n        <default>\n          <iMatchColumns>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n            <int>-1</int>\n          </iMatchColumns>\n          <strMatchColumns>\n            <string>foo</string>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n            <null/>\n          </strMatchColumns>\n        </default>\n      </com.sun.rowset.JdbcRowSetImpl>\n    </com.sun.rowset.JdbcRowSetImpl>\n    <com.sun.rowset.JdbcRowSetImpl reference=\"../com.sun.rowset.JdbcRowSetImpl\"/>\n  </java.util.PriorityQueue>\n</java.util.PriorityQueue>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{serverURL}}/api/content/publish/1",
					"host": [
						"{{serverURL}}"
					],
					"path": [
						"api",
						"content",
						"publish",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request a Host",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Id check\", function () {",
							"    pm.expect(jsonData.contentlets[0].hostname).to.eql('default');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "admin",
							"type": "string"
						},
						{
							"key": "username",
							"value": "admin@dotcms.com",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/content/render/false/query/+contentType:host +title:default",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"content",
						"render",
						"false",
						"query",
						"+contentType:host +title:default"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "contentTypeId",
			"value": ""
		},
		{
			"key": "fieldId",
			"value": ""
		},
		{
			"key": "contentTypeName",
			"value": ""
		},
		{
			"key": "identifier22756",
			"value": ""
		},
		{
			"key": "fileId",
			"value": ""
		},
		{
			"key": "fileInode",
			"value": ""
		},
		{
			"key": "fileName",
			"value": ""
		}
	]
}