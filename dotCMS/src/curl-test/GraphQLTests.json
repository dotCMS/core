{
	"info": {
		"_postman_id": "0ae9fe3d-4dda-47cd-9245-78e4bf53ca55",
		"name": "GraphQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5403727"
	},
	"item": [
		{
			"name": "Pre-Execution Requests",
			"item": [
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Back Up Existing Image Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Saving existing Image type info in Collection Variable\", function () {",
									"    var entity = pm.response.json().entity;",
									"    pm.collectionVariables.set(\"imageTypeInfo\", JSON.stringify(entity));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/Image",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"Image"
							]
						},
						"description": "Backs up the exiting **Image** type as it conflicts with the test bundles that must be deployed for the GraphQL Tests to run correctly."
					},
					"response": []
				},
				{
					"name": "Back Up Existing Video Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Saving existing Video type info in Collection Variable\", function () {",
									"    var entity = pm.response.json().entity;",
									"    pm.collectionVariables.set(\"videoTypeInfo\", JSON.stringify(entity));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/Video",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"Video"
							]
						},
						"description": "Backs up the exiting **Video** type as it conflicts with the test bundles that must be deployed for the GraphQL Tests to run correctly."
					},
					"response": []
				},
				{
					"name": "Delete Image Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/Image",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"Image"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Video Content Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"HTTP Status code should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype/id/Video",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype",
								"id",
								"Video"
							]
						}
					},
					"response": []
				}
			],
			"description": "Executes requests that are meant to fix or set up specific test conditions for the rest of the requests to run successfully."
		},
		{
			"name": "Page API",
			"item": [
				{
					"name": "pre_ImportBundleWithContext",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"assets.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/assets.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* A piece of content with a tag field without any tags selected"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithPersonas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"personas.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/personas.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithDemoHost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"demo.dotcms.com.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/demo.dotcms.com.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports demo.dotcms.com"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithTestPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"test-page-graphql-render.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/test-page-graphql-render.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n\n*   pp-test page with all the dependencies. pp-test page was created on a demo.dotcms.com site"
					},
					"response": []
				},
				{
					"name": "Switch site to 'demo.dotcms.com'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.entity.hostSwitched).equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/site/switch/48190c8c-42c4-46af-8d1a-0cd5db894797",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site",
								"switch",
								"48190c8c-42c4-46af-8d1a-0cd5db894797"
							]
						}
					},
					"response": []
				},
				{
					"name": "RenderDestinationsCostaRicaPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Response body contains\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"rendered\");",
									"});",
									"",
									"pm.test(\"Response body contains\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"uuid\");",
									"});",
									"",
									"pm.test(\"'page' element includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData[\"entity\"][\"page\"];",
									"    pm.expect(page[\"__icon__\"]).equal(\"pageIcon\");",
									"    pm.expect(page[\"archived\"], 'FAILED:[archived]').equal(false);",
									"    pm.expect(page[\"baseType\"]).equal(\"HTMLPAGE\");",
									"    pm.expect(page[\"cachettl\"]).equal(\"0\");",
									"    pm.expect(page[\"canEdit\"], 'FAILED:[canEdit]').equal(true);",
									"    pm.expect(page[\"canLock\"], 'FAILED:[canLock]').equal(true);",
									"    pm.expect(page[\"canRead\"], 'FAILED:[canRead]').equal(true);",
									"    pm.expect(page[\"deleted\"], 'FAILED:[deleted]').equal(false);",
									"    pm.expect(page[\"description\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"extension\"]).equal(\"page\");",
									"    pm.expect(page[\"folder\"]).equal(\"6c8a2ac4-36a7-4b01-b9c0-c2c1d91ddfdb\");",
									"    pm.expect(page[\"friendlyName\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"hasLiveVersion\"], 'FAILED:[hasLiveVersion]').equal(true);",
									"    pm.expect(page[\"hasTitleImage\"], 'FAILED:[hasTitleImage]').equal(true);",
									"    pm.expect(page[\"host\"]).equal(\"48190c8c-42c4-46af-8d1a-0cd5db894797\");",
									"    pm.expect(page[\"hostName\"]).equal(\"demo.dotcms.com\");",
									"    ////",
									"    pm.expect(page[\"httpsRequired\"], 'FAILED:[httpsRequired]').equal(false);",
									"    pm.expect(page[\"identifier\"]).equal(\"bec7b960-a8bf-4f14-a22b-0d94caf217f0\");",
									"    pm.expect(page[\"image\"]).equal(\"/dA/bec7b960-a8bf-4f14-a22b-0d94caf217f0/image/costa-rica-tree-frog.jpg\");",
									"    pm.expect(page[\"imageContentAsset\"]).equal(\"bec7b960-a8bf-4f14-a22b-0d94caf217f0/image\");",
									"    pm.expect(page[\"inode\"]).not.equal(null)",
									"    pm.expect(page[\"isContentlet\"], 'FAILED:[isContentlet]').equal(true);",
									"    pm.expect(page[\"languageId\"]).equal(1);",
									"    pm.expect(page[\"live\"], 'FAILED:[live]').equal(true);",
									"    pm.expect(page[\"liveInode\"]).not.equal(null)",
									"    pm.expect(page[\"locked\"], 'FAILED:[locked]').equal(false);",
									"    pm.expect(page[\"mimeType\"]).equal(\"application/dotpage\");",
									"    pm.expect(page[\"modDate\"]).not.equal(null)",
									"    ///",
									"    pm.expect(page[\"modUser\"]).equal(\"system\");",
									"    pm.expect(page[\"modUserName\"]).equal(\"system user system user\");",
									"    pm.expect(page[\"name\"]).equal(\"costa-rica\");",
									"    pm.expect(page[\"owner\"]).equal(\"dotcms.org.1\");",
									"    pm.expect(page[\"pageURI\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"pageUrl\"]).equal(\"costa-rica\");",
									"    pm.expect(page[\"path\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"publishDate\"]).not.equal(null)",
									"    pm.expect(page[\"seoTitle\"]).equal(\"Costa Rica Travel Destinations\");",
									"    pm.expect(page[\"seodescription\"]).equal(\"Visit Costa Rica a rugged, rainforested Central American country with coastlines on the Caribbean and Pacific.\");",
									"    pm.expect(page[\"shortDescription\"]).equal(\"Costa Rica is a rugged, rainforested Central American country with coastlines on the Caribbean and Pacific. Costa Rica is known for its beaches, volcanoes, and biodiversity. Roughly a quarter of its area is made up of protected jungle, teeming with wildlife including spider monkeys and quetzal birds.\");",
									"    pm.expect(page[\"shortyLive\"]).not.equal(null)",
									"    //",
									"    pm.expect(page[\"shortyWorking\"]).not.equal(null)",
									"    pm.expect(page[\"sortOrder\"]).equal(0);",
									"    pm.expect(page[\"stInode\"]).equal(\"91812c8b-0441-4139-8d4d-7423cfb0e979\");",
									"    pm.expect(page[\"statusIcons\"]).equal(\"<span class='greyDotIcon' style='opacity:.4'></span><span class='liveIcon'></span>\");",
									"    pm.expect(page[\"tags\"]).equal(\"diving\");",
									"    pm.expect(page[\"template\"]).equal(\"0c556e37-99e0-4458-a2cd-d42cc7a11045\");",
									"    pm.expect(page[\"title\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"titleImage\"]).equal(\"image\");",
									"    pm.expect(page[\"type\"]).equal(\"htmlpage\");",
									"    pm.expect(page[\"url\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"working\"], 'FAILED:[working]').equal(true);",
									"    pm.expect(page[\"workingInode\"]).not.equal(null)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{serverURL}}/api/v1/page/render/destinations/costa-rica?com.dotmarketing.persona.id=792c7c9f-6b6f-427b-80ff-1643376c9999",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"page",
								"render",
								"destinations",
								"costa-rica"
							],
							"query": [
								{
									"key": "com.dotmarketing.persona.id",
									"value": "792c7c9f-6b6f-427b-80ff-1643376c9999"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ShouldReturnExpectedPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'page' element includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.page;",
									"",
									"    pm.expect(page[\"__icon__\"]).equal(\"pageIcon\");",
									"    pm.expect(page[\"archived\"], 'FAILED:[archived]').equal(false);",
									"    pm.expect(page[\"baseType\"]).equal(\"HTMLPAGE\");",
									"    pm.expect(page[\"cachettl\"]).equal(\"0\");",
									"    pm.expect(page[\"canEdit\"], 'FAILED:[canEdit]').equal(true);",
									"    pm.expect(page[\"canLock\"], 'FAILED:[canLock]').equal(true);",
									"    pm.expect(page[\"canRead\"], 'FAILED:[canRead]').equal(true);",
									"    pm.expect(page[\"deleted\"], 'FAILED:[deleted]').equal(false);",
									"    pm.expect(page[\"description\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"extension\"]).equal(\"page\");",
									"    pm.expect(page[\"folder\"].folderId).equal(\"6c8a2ac4-36a7-4b01-b9c0-c2c1d91ddfdb\");",
									"    pm.expect(page[\"folder\"].folderName).equal(\"destinations\");",
									"    pm.expect(page[\"friendlyName\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"hasLiveVersion\"], 'FAILED:[hasLiveVersion]').equal(true);",
									"    pm.expect(page[\"hasTitleImage\"], 'FAILED:[hasTitleImage]').equal(true);",
									"    pm.expect(page[\"host\"].identifier).equal(\"48190c8c-42c4-46af-8d1a-0cd5db894797\");",
									"    pm.expect(page[\"host\"].hostName).equal(\"demo.dotcms.com\");",
									"    ////",
									"    pm.expect(page[\"httpsRequired\"], 'FAILED:[httpsRequired]').equal(false);",
									"    pm.expect(page[\"identifier\"]).equal(\"bec7b960-a8bf-4f14-a22b-0d94caf217f0\");",
									"    pm.expect(page[\"isContentlet\"], 'FAILED:[isContentlet]').equal(true);",
									"    pm.expect(page[\"conLanguage\"].id).equal(1);",
									"    pm.expect(page[\"live\"], 'FAILED:[live]').equal(true);",
									"    pm.expect(page[\"liveInode\"]).not.equal(null)",
									"    pm.expect(page[\"locked\"], 'FAILED:[locked]').equal(false);",
									"    pm.expect(page[\"mimeType\"]).equal(\"application/dotpage\");",
									"    pm.expect(page[\"modDate\"]).not.equal(null)",
									"    ///",
									"    pm.expect(page[\"modUser\"].userId).equal(\"system\");",
									"    pm.expect(page[\"modUser\"].firstName).equal(\"system user\");",
									"    pm.expect(page[\"modUser\"].lastName).equal(\"system user\");",
									"    pm.expect(page[\"name\"]).equal(\"costa-rica\");",
									"    pm.expect(page[\"owner\"].userId).equal(\"dotcms.org.1\");",
									"    pm.expect(page[\"pageURI\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"pageUrl\"]).equal(\"costa-rica\");",
									"    pm.expect(page[\"path\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"publishDate\"]).not.equal(null)",
									"    pm.expect(page[\"seoTitle\"]).equal(\"Costa Rica Travel Destinations\");",
									"    pm.expect(page[\"seodescription\"]).equal(\"Visit Costa Rica a rugged, rainforested Central American country with coastlines on the Caribbean and Pacific.\");",
									"    pm.expect(page[\"shortDescription\"]).equal(\"Costa Rica is a rugged, rainforested Central American country with coastlines on the Caribbean and Pacific. Costa Rica is known for its beaches, volcanoes, and biodiversity. Roughly a quarter of its area is made up of protected jungle, teeming with wildlife including spider monkeys and quetzal birds.\");",
									"    pm.expect(page[\"shortyLive\"]).not.equal(null)",
									"    //",
									"    pm.expect(page[\"shortyWorking\"]).not.equal(null)",
									"    // pm.expect(page[\"sortOrder\"]).equal(0);",
									"    pm.expect(page[\"stInode\"]).equal(\"91812c8b-0441-4139-8d4d-7423cfb0e979\");",
									"    pm.expect(page[\"statusIcons\"]).equal(\"<span class='greyDotIcon' style='opacity:.4'></span><span class='liveIcon'></span>\");",
									"    pm.expect(page[\"tags\"]).equal(\"diving\");",
									"    pm.expect(page[\"title\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"titleImage\"].name).equal(\"costa-rica-tree-frog.jpg\");",
									"    pm.expect(page[\"titleImage\"].versionPath).not.equal(null)",
									"    pm.expect(page[\"type\"]).equal(\"htmlpage\");",
									"    pm.expect(page[\"url\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"working\"], 'FAILED:[working]').equal(true);",
									"    pm.expect(page[\"workingInode\"]).not.equal(null)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url:\"/destinations/costa-rica\") {\n    __icon__\n    archived\n    baseType\n    cachettl\n    canEdit\n    canLock\n    canRead\n    contentType\n    deleted\n    description\n    extension\n    friendlyName\n    folder {\n      folderId\n      folderName\n    }\n    hasLiveVersion\n    hasTitleImage\n    host {\n      identifier\n      hostName\n    }\n    httpsRequired\n    identifier\n    image\n    imageContentAsset\n    imageVersion\n    inode\n    isContentlet\n    conLanguage {\n      id\n    }\n    live\n    liveInode\n    locked\n    mimeType\n    modDate\n    modUser {\n      userId\n      firstName\n      lastName\n    }\n    name\n    owner {\n      userId\n    }\n    pageURI\n    pageUrl\n    path\n    publishDate\n    seoTitle\n    seodescription\n    shortDescription\n    shortyLive\n    shortyWorking\n    sortOrder\n    stInode \n    statusIcons\n    tags\n    title\n    titleImage {\n      name\n      idPath\n      versionPath\n    }\n    type\n    url\n    working\n    workingInode\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_SiteFieldContainsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Site' element includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var host = jsonData.data.page.host;",
									"",
									"    pm.expect(host[\"hostName\"], 'FAILED:[hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(host[\"googleMap\"], 'FAILED:[googleMap]').equal(\"AIzaSyDXvD7JA5Q8S5VgfviI8nDinAq9x5Utmu0\");",
									"    pm.expect(host[\"modDate\"], 'FAILED:[modDate]').to.not.be.null;",
									"    pm.expect(host[\"aliases\"], 'FAILED:[aliases]').equal(\"localhost\\n127.0.0.1\");",
									"    pm.expect(host[\"keywords\"], 'FAILED:[keywords]').equal(\"CMS, Web Content Management, Open Source, Java, J2EE, DXP, NoCode, OSGI, Apache Velocity, Elasticsearch, RESTful Services, REST API, Workflows, Personalization, Multilingual, I18N, L10N, Internationalization, Localization, Docker CMS, Containerized CMS\");",
									"    pm.expect(host[\"description\"], 'FAILED:[description]').equal(\"dotCMS starter site was designed to demonstrate what you can do with dotCMS.\");",
									"    pm.expect(host[\"hostAliases\"], 'FAILED:[hostAliases]').equal(\"localhost\\n127.0.0.1\");",
									"    pm.expect(host[\"title\"], 'FAILED:[title]').equal(\"localhost\\n127.0.0.1\");",
									"    pm.expect(host[\"baseType\"], 'FAILED:[baseType]').equal(\"CONTENT\");",
									"    pm.expect(host[\"archived\"], 'FAILED:[archived]').equal(false);",
									"    pm.expect(host[\"addThis\"], 'FAILED:[addThis]').equal(\"ra-4e02119211875e7b\");",
									"    pm.expect(host[\"working\"], 'FAILED:[working]').equal(true);",
									"    pm.expect(host[\"locked\"], 'FAILED:[locked]').equal(false);",
									"    pm.expect(host[\"contentType\"], 'FAILED:[contentType]').equal(\"Host\");",
									"    pm.expect(host[\"live\"], 'FAILED:[live]').equal(true);",
									"    pm.expect(host[\"owner\"].firstName, 'FAILED:[owner.firstName]').equal(\"Admin\");",
									"    ////",
									"    pm.expect(host[\"identifier\"], 'FAILED:[identifier]').equal(\"48190c8c-42c4-46af-8d1a-0cd5db894797\");",
									"    pm.expect(host[\"hostThumbnail\"].name, 'FAILED:[hostThumbnail.name]').equal(null);",
									"    pm.expect(host[\"runDashboard\"], 'FAILED:[runDashboard]').equal(false);",
									"    pm.expect(host[\"conLanguage\"].languageCode, 'FAILED:[conLanguage.languageCode]').equal(\"en\");",
									"    pm.expect(host[\"hostTagStorage\"], 'FAILED:[hostTagStorage]').equal(\"SYSTEM_HOST\");",
									"    pm.expect(host[\"hostId\"], 'FAILED:[hostId]').equal(\"48190c8c-42c4-46af-8d1a-0cd5db894797\");",
									"    pm.expect(host[\"titleImage\"].name, 'FAILED:[titleImage.name]').equal(null);",
									"    pm.expect(host[\"embeddedDashboard\"], 'FAILED:[embeddedDashboard]').equal(null);",
									"    pm.expect(host[\"urlMap\"], 'FAILED:[urlMap]').equal(null);",
									"    pm.expect(host[\"isDefault\"], 'FAILED:[isDefault]').equal(true)",
									"    ///",
									"    pm.expect(host[\"folder\"].folderName, 'FAILED:[folder.folderName]').equal(\"system folder\");",
									"    pm.expect(host[\"googleAnalytics\"], 'FAILED:[googleAnalytics]').equal(\"UA-9877660-3\");",
									"    pm.expect(host[\"tagStorage\"], 'FAILED:[tagStorage]').equal(\"SYSTEM_HOST\");",
									"    pm.expect(host[\"modUser\"].firstName, 'FAILED:[modUser.firstName]').equal(\"Admin\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url:\"/destinations/costa-rica\") {\n    host {\n      hostName\n      googleMap\n      modDate\n      aliases\n      keywords\n      description\n      hostAliases\n      title\n      baseType\n      inode\n      archived\n      addThis\n      working\n      locked\n      contentType\n      live\n      owner {\n        firstName\n      }\n      identifier\n      hostThumbnail {\n        name\n      }\n      runDashboard\n      conLanguage {\n        languageCode\n      }\n      hostTagStorage\n      hostId\n      titleImage {\n        name\n      }\n      embeddedDashboard\n      urlMap\n      isDefault\n      folder {\n        folderName\n      }\n      googleAnalytics\n      tagStorage\n      modUser {\n        firstName\n      }\n      \n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_TemplateFieldContainsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Site' element includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var template = jsonData.data.page.template;",
									"",
									"    pm.expect(template[\"iDate\"], 'FAILED:[iDate]').to.be.not.null",
									"    pm.expect(template[\"type\"], 'FAILED:[type]').equal(\"template\");",
									"    pm.expect(template[\"owner\"].firstName, 'FAILED:[owner.firstName]').equal(\"system user\");",
									"    pm.expect(template[\"inode\"], 'FAILED:[inode]').equal(\"cfda9246-cce3-4313-8cc3-2080d1935cf9\");",
									"    pm.expect(template[\"identifier\"], 'FAILED:[identifier]').equal(\"0c556e37-99e0-4458-a2cd-d42cc7a11045\");",
									"    pm.expect(template[\"source\"], 'FAILED:[source]').equal(\"DB\");",
									"    pm.expect(template[\"title\"], 'FAILED:[title]').equal(\"anonymous_layout_1579716181795\");",
									"    pm.expect(template[\"friendlyName\"], 'FAILED:[friendlyName]').equal(\"\");",
									"    pm.expect(template[\"modDate\"], 'FAILED:[modDate]').not.to.be.null;",
									"    pm.expect(template[\"modUser\"].firstName, 'FAILED:[modUser.firstName]').equal(\"system user\");",
									"    pm.expect(template[\"modUser\"].userId, 'FAILED:[modUser.userId]').equal(\"system\");",
									"    pm.expect(template[\"sortOrder\"], 'FAILED:[sortOrder]').equal(0);",
									"    pm.expect(template[\"showOnMenu\"], 'FAILED:[showOnMenu]').equal(false);",
									"    pm.expect(template[\"image\"], 'FAILED:[image]').equal(\"\");",
									"    pm.expect(template[\"drawed\"], 'FAILED:[drawed]').equal(true);",
									"    pm.expect(template[\"drawedBody\"], 'FAILED:[drawedBody]').equal(\"{\\\"header\\\":true,\\\"footer\\\":true,\\\"body\\\":{\\\"rows\\\":[{\\\"columns\\\":[{\\\"containers\\\":[{\\\"identifier\\\":\\\"5a07f889-4536-4956-aa6e-e7967969ec3f\\\",\\\"uuid\\\":\\\"1\\\"}],\\\"widthPercent\\\":100,\\\"leftOffset\\\":1,\\\"preview\\\":false,\\\"width\\\":12,\\\"left\\\":0}]},{\\\"columns\\\":[{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"1\\\"}],\\\"widthPercent\\\":50,\\\"leftOffset\\\":1,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":6,\\\"left\\\":0},{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"2\\\"}],\\\"widthPercent\\\":50,\\\"leftOffset\\\":7,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":6,\\\"left\\\":6}]},{\\\"columns\\\":[{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"3\\\"}],\\\"widthPercent\\\":100,\\\"leftOffset\\\":1,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":12,\\\"left\\\":0}]},{\\\"columns\\\":[{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"4\\\"}],\\\"widthPercent\\\":83,\\\"leftOffset\\\":2,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":10,\\\"left\\\":1}]},{\\\"columns\\\":[{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"5\\\"}],\\\"widthPercent\\\":50,\\\"leftOffset\\\":1,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":6,\\\"left\\\":0},{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"6\\\"}],\\\"widthPercent\\\":50,\\\"leftOffset\\\":7,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":6,\\\"left\\\":6}]},{\\\"columns\\\":[{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"7\\\"}],\\\"widthPercent\\\":41,\\\"leftOffset\\\":1,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":5,\\\"left\\\":0},{\\\"containers\\\":[{\\\"identifier\\\":\\\"/application/containers/default/\\\",\\\"uuid\\\":\\\"8\\\"}],\\\"widthPercent\\\":50,\\\"leftOffset\\\":7,\\\"styleClass\\\":\\\"\\\",\\\"preview\\\":false,\\\"width\\\":6,\\\"left\\\":6}]}]},\\\"sidebar\\\":{\\\"containers\\\":[],\\\"location\\\":\\\"\\\",\\\"width\\\":\\\"small\\\",\\\"widthPercent\\\":20,\\\"preview\\\":false}}\");",
									"",
									"    pm.expect(template[\"theme\"], 'FAILED:[theme]').equal(\"d7b0ebc2-37ca-4a5a-b769-e8a3ff187661\");",
									"    pm.expect(template[\"anonymous\"], 'FAILED:[anonymous]').equal(true);",
									"    pm.expect(template[\"template\"], 'FAILED:[template]').equal(false);",
									"    pm.expect(template[\"versionId\"], 'FAILED:[versionId]').equal(\"0c556e37-99e0-4458-a2cd-d42cc7a11045\");",
									"    pm.expect(template[\"versionType\"], 'FAILED:[versionType]').equal(\"template\");",
									"    pm.expect(template[\"deleted\"], 'FAILED:[deleted]').equal(false);",
									"    pm.expect(template[\"working\"], 'FAILED:[working]').equal(true);",
									"    pm.expect(template[\"permissionId\"], 'FAILED:[permissionId]').equal(\"0c556e37-99e0-4458-a2cd-d42cc7a11045\");",
									"    pm.expect(template[\"name\"], 'FAILED:[name]').equal(\"anonymous_layout_1579716181795\");",
									"    pm.expect(template[\"live\"], 'FAILED:[live]').equal(true);",
									"    pm.expect(template[\"archived\"], 'FAILED:[archived]').equal(false);",
									"    pm.expect(template[\"locked\"], 'FAILED:[locked]').equal(false);",
									"    pm.expect(template[\"permissionType\"], 'FAILED:[permissionType]').equal(\"com.dotmarketing.portlets.templates.model.Template\");",
									"    pm.expect(template[\"categoryId\"], 'FAILED:[categoryId]').equal(\"cfda9246-cce3-4313-8cc3-2080d1935cf9\");",
									"    pm.expect(template[\"new\"], 'FAILED:[new]').equal(false);",
									"    pm.expect(template[\"idate\"], 'FAILED:[idate]').to.be.not.null;",
									"    pm.expect(template[\"canEdit\"], 'FAILED:[canEdit]').equal(true);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url:\"/destinations/costa-rica\") {\n    template {\n      iDate\n      type\n      owner {\n        firstName\n      }\n      inode\n      identifier\n      source\n      title\n      friendlyName\n      modDate\n      modUser {\n        firstName\n        lastName\n        userId\n      }\n      sortOrder\n      showOnMenu\n      image\n      drawed\n      drawedBody\n      theme\n      anonymous\n      template\n      versionId\n      versionType\n      deleted\n      working\n      permissionId\n      name\n      live\n      archived\n      locked\n      permissionType\n      categoryId\n      new\n      idate\n      canEdit\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ViewAsFieldContainsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'ViewAs' element includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var viewas = jsonData.data.page.viewAs;",
									"    var visitor = viewas.visitor;",
									"    var language = viewas.language;",
									"    var persona = viewas.persona;",
									"",
									"    // mode",
									"    pm.expect(viewas[\"mode\"], 'FAILED:[mode]').equal(\"LIVE\");",
									"    ",
									"    // language",
									"    pm.expect(language[\"id\"], 'FAILED:[language.id]').equal(1);",
									"    pm.expect(language[\"country\"], 'FAILED:[language.country]').equal(\"United States\");",
									"    pm.expect(language[\"countryCode\"], 'FAILED:[language.countryCode]').equal(\"US\");",
									"    pm.expect(language[\"language\"], 'FAILED:[language.language]').equal(\"English\");",
									"    pm.expect(language[\"languageCode\"], 'FAILED:[language.languageCode]').equal(\"en\");",
									"",
									"    // persona",
									"    pm.expect(persona[\"name\"], 'FAILED:[persona.name]').equal(\"Winter Enthusiast\");",
									"    pm.expect(persona[\"description\"], 'FAILED:[persona.description]').equal(\"People who are passionate about winter sports.\");",
									"    pm.expect(persona[\"photo\"].idPath, 'FAILED:[persona.photo.idPath]').equal(\"/dA/792c7c9f6b/photo/mountain-persona.jpg?language_id=1\");",
									"    pm.expect(persona[\"keyTag\"], 'FAILED:[persona.keyTag]').equal(\"WinterEnthusiast\");",
									"    let expectedPersonTags = [",
									"                        \"snowmobile\",",
									"                        \"snowboarding\",",
									"                        \"skiing\"",
									"                    ];",
									"    pm.expect(checker(expectedPersonTags, persona[\"tags\"]), 'FAILED:[persona.tags]').equal(true);",
									"",
									"    // visitor ",
									"    pm.expect(visitor[\"device\"], 'FAILED:[visitor.device]').equal(\"COMPUTER\");",
									"    pm.expect(visitor[\"isNew\"], 'FAILED:[visitor.isNew]').equal(true);",
									"    pm.expect(visitor[\"device\"], 'FAILED:[visitor.device]').equal(\"COMPUTER\");",
									"",
									"    var visitorPersona = visitor.persona;",
									"    // visitor's persona",
									"    pm.expect(visitorPersona[\"name\"], 'FAILED:[visitorPersona.name]').equal(\"Winter Enthusiast\");",
									"    pm.expect(visitorPersona[\"description\"], 'FAILED:[visitorPersona.description]').equal(\"People who are passionate about winter sports.\");",
									"    pm.expect(visitorPersona[\"photo\"].idPath, 'FAILED:[visitorPersona.photo.idPath]').equal(\"/dA/792c7c9f6b/photo/mountain-persona.jpg?language_id=1\");",
									"    pm.expect(visitorPersona[\"keyTag\"], 'FAILED:[visitorPersona.keyTag]').equal(\"WinterEnthusiast\");",
									"",
									"    let expectedVisitorPersonaTags = [",
									"                        \"snowmobile\",",
									"                        \"snowboarding\",",
									"                        \"skiing\"",
									"                    ];",
									"",
									"    pm.expect(checker(expectedVisitorPersonaTags, visitorPersona[\"tags\"]), 'FAILED:[visitorPersona.tags]').equal(true);",
									"",
									"    // visitor's tags",
									"    pm.expect(JSON.stringify(visitor[\"tags\"])==JSON.stringify([",
									"                        {",
									"                            \"tag\": \"snowmobile\",",
									"                            \"count\": 2",
									"                        },",
									"                        {",
									"                            \"tag\": \"skiing\",",
									"                            \"count\": 2",
									"                        },",
									"                        {",
									"                            \"tag\": \"snowboarding\",",
									"                            \"count\": 2",
									"                        }",
									"                    ]), 'FAILED:[visitorPersona.tags]').equal(true);",
									"",
									"    var userAgent = visitor.userAgent;                ",
									"    pm.expect(userAgent[\"operatingSystem\"], 'FAILED:[userAgent.operatingSystem]').equal(\"MAC_OS_X\");",
									"    pm.expect(userAgent[\"browser\"], 'FAILED:[userAgent.browser]').equal(\"CHROME8\");",
									"    pm.expect(userAgent[\"id\"], 'FAILED:[userAgent.id]').equal(50990853);",
									"",
									"    var browserVersion = userAgent.browserVersion;",
									"    pm.expect(browserVersion[\"version\"], 'FAILED:[browserVersion.version]').equal(\"84.0.4147.125\");",
									"    pm.expect(browserVersion[\"majorVersion\"], 'FAILED:[browserVersion.majorVersion]').equal(\"84\");",
									"    pm.expect(browserVersion[\"minorVersion\"], 'FAILED:[browserVersion.minorVersion]').equal(\"0\");",
									"",
									"    pm.expect(JSON.stringify(visitor[\"personas\"])==JSON.stringify([",
									"                        {",
									"                            \"persona\": \"WinterEnthusiast\",",
									"                            \"count\": 1",
									"                        }",
									"                    ]), 'FAILED:[visitorPersona.tags]').equal(true);",
									"",
									"",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"type": "text",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url:\"/destinations/costa-rica\", pageMode: \"live\", languageId: \"1\", persona:\"WinterEnthusiast\") {\n     viewAs {\n      persona {\n        name\n        description\n        photo {\n          idPath\n        }\n        keyTag\n        tags\n      }\n      visitor {\n        persona {\n          name\n          description\n          photo {\n            idPath\n          }\n          keyTag\n          tags\n        }\n        device\n        isNew\n        tags {\n          tag\n          count\n        }\n        userAgent {\n          operatingSystem\n          browser\n          id\n          browserVersion {\n            version\n            majorVersion\n            minorVersion\n          }\n        }\n        personas {\n          persona \n          count\n        }\n      }\n      mode\n      language {\n        id\n        country\n        countryCode\n        language\n        languageCode\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_PageContainsRenderField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var render = jsonData.data.page.render;",
									"",
									"    // mode",
									"    pm.expect(render, 'FAILED:[rendered]').contains(\"my text content\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"type": "text",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36",
								"type": "text"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url:\"/pp-test\", pageMode: \"live\", languageId: \"1\") {\n     render\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithURLMappedContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"urlmap-bundle.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/urlmap-bundle.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_PageContainsUrlMappedContentField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var urlmappedContent = jsonData.data.page.urlContentMap;",
									"",
									"    pm.expect(urlmappedContent.title, 'FAILED:[urlmappedContent.title]').equal(\"Eagles Nest Outfitters DoubleNest Hammock Patriot\");",
									"    pm.expect(urlmappedContent.identifier, 'FAILED:[urlmappedContent.identifier]').equal(\"46e52dc2-e72a-4641-8925-026abf2adccd\");",
									"    pm.expect(urlmappedContent.urlMap, 'FAILED:[urlmappedContent.urlMap]').equal(\"/store/products/eagles-nest-outfitters-doublenest-hammock-patriot\");",
									"    pm.expect(urlmappedContent.contentType, 'FAILED:[urlmappedContent.contentType]').equal(\"Product\");",
									"    pm.expect(urlmappedContent.productNumber, 'FAILED:[urlmappedContent.productNumber]').equal(\"9315054521506-1280000\");",
									"",
									"    pm.expect(urlmappedContent.image.idPath, 'FAILED:[urlmappedContent.image.idPath]').equal(\"/dA/46e52dc2e7/image/hammock-1.jpg?language_id=1\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/store/products/eagles-nest-outfitters-doublenest-hammock-patriot\") {\n    title\n    urlContentMap {\n      ... on Product {\n        title\n        tags\n        urlTitle\n        identifier\n        urlMap\n        contentType\n        productNumber\n        image {\n          idPath\n        }\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "importDestinationsCostaRicaWithSidebar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"costa-rica-sidebar.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/costa-rica-sidebar.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* HTMLPage /blog/index\n* HTMLPage /blog/destinations/costa-rica\n* Contentlet [Blog] Ecotourism in Costa Rica\n* Blog Detail Page /blog/blog-detail"
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_LayoutFieldContainsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var layout = jsonData.data.page.layout;",
									"",
									"    // layout fields",
									"    // pm.expect(layout.footer, 'FAILED:[layout.footer]').equal(true);",
									"    pm.expect(layout.width, 'FAILED:[layout.width]').equal(null);",
									"    // pm.expect(layout.header, 'FAILED:[layout.header]').equal(true);",
									"    pm.expect(layout.title, 'FAILED:[layout.title]').equal(\"anonymouslayout1598564677000\");",
									"",
									"    // rows fields",
									"    var rows = layout.body.rows;",
									"    pm.expect(rows.length, 'FAILED:[rows.length]').equal(6);",
									"",
									"    var row1 = rows[0];",
									"    pm.expect(row1.styleClass, 'FAILED:[row1.styleClass]').equal(null);",
									"",
									"    var row1Columns = row1.columns;",
									"    pm.expect(row1Columns.length, 'FAILED:[row1Columns.length]').equal(1);",
									"",
									"    var column1 = row1Columns[0];",
									"    pm.expect(column1.preview, 'FAILED:[column1.preview]').equal(false);",
									"    pm.expect(column1.width, 'FAILED:[column1.width]').equal(12);",
									"    pm.expect(column1.widthPercent, 'FAILED:[column1.widthPercent]').equal(100);",
									"    pm.expect(column1.left, 'FAILED:[column1.left]').equal(0);",
									"    pm.expect(column1.leftOffset, 'FAILED:[column1.leftOffset]').equal(1);",
									"    pm.expect(column1.styleClass, 'FAILED:[column1.styleClass]').equal(null);",
									"",
									"    var containers = column1.containers;",
									"    pm.expect(containers.length, 'FAILED:[containers.length]').equal(1);",
									"",
									"    var container1 = containers[0];",
									"    pm.expect(container1.identifier, 'FAILED:[container1.identifier]').equal(\"5a07f889-4536-4956-aa6e-e7967969ec3f\");",
									"    pm.expect(container1.uuid, 'FAILED:[container1.uuid]').equal(\"2\");",
									"",
									"    // sidebar",
									"    var sidebar = layout.sidebar;",
									"    pm.expect(sidebar.preview, 'FAILED:[sidebar.preview]').equal(false);",
									"    pm.expect(sidebar.width, 'FAILED:[sidebar.width]').equal(\"small\");",
									"    pm.expect(sidebar.widthPercent, 'FAILED:[sidebar.widthPercent]').equal(20);",
									"    pm.expect(sidebar.location, 'FAILED:[sidebar.location]').equal(\"left\");",
									"",
									"    var sidebarContainers = sidebar.containers;",
									"    pm.expect(sidebarContainers.length, 'FAILED:[sidebarContainers.length]').equal(2);",
									"",
									"    var sidebarContainer1 = sidebarContainers[0];",
									"    pm.expect(sidebarContainer1.identifier, 'FAILED:[sidebarContainer1.identifier]').equal(\"//demo.dotcms.com/application/containers/default/\");",
									"    pm.expect(sidebarContainer1.uuid, 'FAILED:[sidebarContainers.uuid]').equal(\"1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url:\"/destinations/costa-rica\", pageMode: \"live\", languageId: \"1\") {\n     layout {\n      footer\n      width\n      header\n      title\n      body {\n        rows {\n          styleClass\n          columns {\n            preview\n            width\n            widthPercent\n            left\n            leftOffset\n            styleClass\n            containers {\n              identifier\n              uuid\n            } \n          }\n        } \n      }\n      sidebar {\n        preview\n        width\n        widthPercent\n        location\n        containers {\n            identifier\n            uuid\n          } \n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ContainersFieldContainsFirstLevelFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var containers = jsonData.data.page.containers;",
									"",
									"    var container1 = containers[0];",
									"",
									"    // containers fields",
									"    pm.expect(container1.archived, 'FAILED:[container1.archived]').equal(false);",
									"    pm.expect(container1.categoryId, 'FAILED:[container1.categoryId]').equal(\"ad50ff07-6f7e-4b3c-a1ca-08667fecb28d\");",
									"    pm.expect(container1.deleted, 'FAILED:[container1.deleted]').equal(false);",
									"    pm.expect(container1.friendlyName, 'FAILED:[container1.friendlyName]').equal(\"container\");",
									"    pm.expect(container1.host.hostName, 'FAILED:[container1.host.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(container1.iDate, 'FAILED:[container1.iDate]').not.null;",
									"    pm.expect(container1.idate, 'FAILED:[container1.idate]').not.null;",
									"    pm.expect(container1.identifier, 'FAILED:[container1.identifier]').equal(\"69b3d24d-7e80-4be6-b04a-d352d16493ee\");",
									"    pm.expect(container1.inode, 'FAILED:[container1.inode]').equal(\"ad50ff07-6f7e-4b3c-a1ca-08667fecb28d\");",
									"    pm.expect(container1.languageId, 'FAILED:[container1.languageId]').equal(1);",
									"    pm.expect(container1.live, 'FAILED:[container1.live]').equal(true);",
									"    pm.expect(container1.locked, 'FAILED:[container1.locked]').equal(false);",
									"    pm.expect(container1.maxContentlets, 'FAILED:[container1.maxContentlets]').equal(25);",
									"    pm.expect(container1.modDate, 'FAILED:[container1.modDate]').not.null;",
									"    pm.expect(container1.modUser.userId, 'FAILED:[container1.modUser.userId]').equal(\"system\");",
									"    pm.expect(container1.name, 'FAILED:[container1.name]').equal(\"Default\");",
									"    pm.expect(container1.new, 'FAILED:[container1.new]').equal(false);",
									"    pm.expect(container1.notes, 'FAILED:[container1.notes]').equal(\"New File Container\");",
									"    pm.expect(container1.owner.userId, 'FAILED:[container1.owner.userId]').equal(\"dotcms.org.1\");",
									"    pm.expect(container1.parentPermissionable.hostName, 'FAILED:[container1.parentPermissionable.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(container1.path, 'FAILED:[container1.path]').equal(\"//demo.dotcms.com/application/containers/default/\");",
									"    pm.expect(container1.permissionId, 'FAILED:[container1.permissionId]').equal(\"69b3d24d-7e80-4be6-b04a-d352d16493ee\");",
									"    pm.expect(container1.permissionType, 'FAILED:[container1.permissionType]').equal(\"com.dotmarketing.portlets.containers.model.FileAssetContainer\");",
									"    pm.expect(container1.postLoop, 'FAILED:[container1.postLoop]').equal(\"#dotParse(\\\"//demo.dotcms.com/application/containers/default/postloop.vtl\\\")\");",
									"    pm.expect(container1.preLoop, 'FAILED:[container1.preLoop]').equal(\"#dotParse(\\\"//demo.dotcms.com/application/containers/default/preloop.vtl\\\")\");",
									"    pm.expect(container1.showOnMenu, 'FAILED:[container1.showOnMenu]').equal(false);",
									"    pm.expect(container1.sortOrder, 'FAILED:[container1.sortOrder]').equal(0);",
									"    pm.expect(container1.source, 'FAILED:[container1.source]').equal(\"FILE\");",
									"    pm.expect(container1.staticify, 'FAILED:[container1.staticify]').equal(false);",
									"    pm.expect(container1.title, 'FAILED:[container1.source]').equal(\"Default\");",
									"    pm.expect(container1.type, 'FAILED:[container1.type]').equal(\"containers\");",
									"    pm.expect(container1.useDiv, 'FAILED:[container1.useDiv]').equal(false);",
									"    pm.expect(container1.versionId, 'FAILED:[container1.versionId]').equal(\"69b3d24d-7e80-4be6-b04a-d352d16493ee\");",
									"    pm.expect(container1.versionType, 'FAILED:[container1.versionType]').equal(\"containers\");",
									"    pm.expect(container1.working, 'FAILED:[container1.working]').equal(true);",
									"    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/destinations/costa-rica\", pageMode: \"live\", languageId: \"1\") {\n    containers {\n      archived\n      categoryId\n      deleted\n      friendlyName\n      host {\n        hostName\n      }\n      iDate\n      idate\n      identifier\n      inode\n      languageId\n      live\n      locked\n      maxContentlets\n      modDate\n      modUser {\n        userId\n      }\n      name\n      new\n      notes\n      owner {\n        userId\n      }\n      parentPermissionable {\n        hostName\n      }\n      path\n      permissionId\n      permissionType\n      postLoop\n      preLoop\n      showOnMenu\n      sortOrder\n      source\n      staticify\n      title\n      type\n      useDiv\n      versionId\n      versionType\n      working\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ContainersFieldSuccess_WhenANONUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var containers = jsonData.data.page.containers;",
									"",
									"    var container1 = containers[0];",
									"",
									"    // containers fields",
									"    pm.expect(container1.identifier, 'FAILED:[container1.identifier]').equal(\"69b3d24d-7e80-4be6-b04a-d352d16493ee\");",
									"    pm.expect(container1.modDate, 'FAILED:[container1.rendered]').not.null;",
									"    pm.expect(container1.modDate, 'FAILED:[container1.rendered.render]').not.null;",
									"   });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/destinations/costa-rica\", pageMode: \"live\", languageId: \"1\") {\n    url\n    containers {\n      identifier\n      rendered {\n        uuid\n        render\n      }\n    }\n}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ContainersFieldContainsFirstLevelFields_NoLanguage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var containers = jsonData.data.page.containers;",
									"",
									"    var container1 = containers[0];",
									"",
									"    // containers fields",
									"    pm.expect(container1.archived, 'FAILED:[container1.archived]').equal(false);",
									"    pm.expect(container1.categoryId, 'FAILED:[container1.categoryId]').equal(\"ad50ff07-6f7e-4b3c-a1ca-08667fecb28d\");",
									"    pm.expect(container1.deleted, 'FAILED:[container1.deleted]').equal(false);",
									"    pm.expect(container1.friendlyName, 'FAILED:[container1.friendlyName]').equal(\"container\");",
									"    pm.expect(container1.host.hostName, 'FAILED:[container1.host.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(container1.iDate, 'FAILED:[container1.iDate]').not.null;",
									"    pm.expect(container1.idate, 'FAILED:[container1.idate]').not.null;",
									"    pm.expect(container1.identifier, 'FAILED:[container1.identifier]').equal(\"69b3d24d-7e80-4be6-b04a-d352d16493ee\");",
									"    pm.expect(container1.inode, 'FAILED:[container1.inode]').equal(\"ad50ff07-6f7e-4b3c-a1ca-08667fecb28d\");",
									"    pm.expect(container1.languageId, 'FAILED:[container1.languageId]').equal(1);",
									"    pm.expect(container1.live, 'FAILED:[container1.live]').equal(true);",
									"    pm.expect(container1.locked, 'FAILED:[container1.locked]').equal(false);",
									"    pm.expect(container1.maxContentlets, 'FAILED:[container1.maxContentlets]').equal(25);",
									"    pm.expect(container1.modDate, 'FAILED:[container1.modDate]').not.null;",
									"    pm.expect(container1.modUser.userId, 'FAILED:[container1.modUser.userId]').equal(\"system\");",
									"    pm.expect(container1.name, 'FAILED:[container1.name]').equal(\"Default\");",
									"    pm.expect(container1.new, 'FAILED:[container1.new]').equal(false);",
									"    pm.expect(container1.notes, 'FAILED:[container1.notes]').equal(\"New File Container\");",
									"    pm.expect(container1.owner.userId, 'FAILED:[container1.owner.userId]').equal(\"dotcms.org.1\");",
									"    pm.expect(container1.parentPermissionable.hostName, 'FAILED:[container1.parentPermissionable.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(container1.path, 'FAILED:[container1.path]').equal(\"//demo.dotcms.com/application/containers/default/\");",
									"    pm.expect(container1.permissionId, 'FAILED:[container1.permissionId]').equal(\"69b3d24d-7e80-4be6-b04a-d352d16493ee\");",
									"    pm.expect(container1.permissionType, 'FAILED:[container1.permissionType]').equal(\"com.dotmarketing.portlets.containers.model.FileAssetContainer\");",
									"    pm.expect(container1.postLoop, 'FAILED:[container1.postLoop]').equal(\"#dotParse(\\\"//demo.dotcms.com/application/containers/default/postloop.vtl\\\")\");",
									"    pm.expect(container1.preLoop, 'FAILED:[container1.preLoop]').equal(\"#dotParse(\\\"//demo.dotcms.com/application/containers/default/preloop.vtl\\\")\");",
									"    pm.expect(container1.showOnMenu, 'FAILED:[container1.showOnMenu]').equal(false);",
									"    pm.expect(container1.sortOrder, 'FAILED:[container1.sortOrder]').equal(0);",
									"    pm.expect(container1.source, 'FAILED:[container1.source]').equal(\"FILE\");",
									"    pm.expect(container1.staticify, 'FAILED:[container1.staticify]').equal(false);",
									"    pm.expect(container1.title, 'FAILED:[container1.source]').equal(\"Default\");",
									"    pm.expect(container1.type, 'FAILED:[container1.type]').equal(\"containers\");",
									"    pm.expect(container1.useDiv, 'FAILED:[container1.useDiv]').equal(false);",
									"    pm.expect(container1.versionId, 'FAILED:[container1.versionId]').equal(\"69b3d24d-7e80-4be6-b04a-d352d16493ee\");",
									"    pm.expect(container1.versionType, 'FAILED:[container1.versionType]').equal(\"containers\");",
									"    pm.expect(container1.working, 'FAILED:[container1.working]').equal(true);",
									"    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/destinations/costa-rica\", pageMode: \"live\") {\n    containers {\n      archived\n      categoryId\n      deleted\n      friendlyName\n      host {\n        hostName\n      }\n      iDate\n      idate\n      identifier\n      inode\n      languageId\n      live\n      locked\n      maxContentlets\n      modDate\n      modUser {\n        userId\n      }\n      name\n      new\n      notes\n      owner {\n        userId\n      }\n      parentPermissionable {\n        hostName\n      }\n      path\n      permissionId\n      permissionType\n      postLoop\n      preLoop\n      showOnMenu\n      sortOrder\n      source\n      staticify\n      title\n      type\n      useDiv\n      versionId\n      versionType\n      working\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ContainersFieldContainsRendered",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var containers = jsonData.data.page.containers;",
									"",
									"    pm.expect(containers.length, 'FAILED:[containers.length]').equal(2);",
									"",
									"    var container1rendered = containers[0].rendered;",
									"",
									"    pm.expect(container1rendered.length, 'FAILED:[container1rendered.length]').equal(9);",
									"    // rendered fields",
									"    pm.expect(container1rendered[0].uuid, 'FAILED:[container1rendered[0].uuid]').equal(\"uuid-1\");",
									"    pm.expect(container1rendered[0].render, 'FAILED:[container1rendered[0].render]').equal(\"\\n    <!-- Container Code: /application/containers/activity.vtl -->\\n\\n<a class=\\\"box-info\\\" href=\\\"/activities/hiking\\\">\\n\\t<img class=\\\"box-info-img\\\" src=\\\"/dA/6bbead53-3908-471c-966d-9e76c5dd9eba/image/270w/50q/hiking.jpg\\\" alt=\\\"Hiking\\\" width=\\\"270\\\" height=\\\"270\\\">\\n\\t<div class=\\\"box-info-body\\\">\\n\\t\\t<h4 class=\\\"box-info-title\\\">Hiking</h4>\\n\\t\\t<p class=\\\"box-info-text\\\">Guided hiking tours where our guides use their training as naturalists to point out animals, unique plants and nature ...</p>\\n\\t</div>\\n</a><div></div>\");",
									"",
									"    pm.expect(container1rendered[1].uuid, 'FAILED:[container1rendered[1].uuid]').equal(\"uuid-2\");",
									"    pm.expect(container1rendered[1].render, 'FAILED:[container1rendered[1].render]').equal(\"\\n    <h2>Custom Packages</h2>\\n<p>Are you looking for the ultimate in Costa Rica vacations? Our team oat TravelLux will design your custom vacation package. We do not sell cookie-cutter trips. Instead, we take the time to get to know your unique &ldquo;travel personality&rdquo;. Then we match you with a hand-picked selection of housing, tours &amp; transportation options. The result is a tailor-made Costa Rica journey that will fit you like a glove.</p>\\n<p>We email you a detailed travel itinerary filled with info, pictures and videos. Your TravelLux agent will work with you to adjust your vacation package until you are 100% satisfied. This makes for a seamless, worry-free experience that allows you to relax &amp; enjoy the voyage.</p>\\n<p><a href=\\\"/contact-us/\\\" class=\\\"btn btn-primary\\\">Book Now</a></p>\\n<article class=\\\"thumbnail-classic mb-5\\\">\\n    <a class=\\\"thumbnail-classic-figure\\\" href=\\\"/dA/7b4ba67a-1793-4daf-bed9-f8ce054f1433/ski_holidays.png/1200w\\\" data-lightgallery=\\\"item\\\">\\n        <picture>\\n            <source media=\\\"(min-width: 800px)\\\" srcset=\\\"/dA/7b4ba67a-1793-4daf-bed9-f8ce054f1433/ski_holidays.png/1200w/50q/ski_holidays.png, /dA/7b4ba67a-1793-4daf-bed9-f8ce054f1433/ski_holidays.png/2400w/50q/ski_holidays.png 2x\\\">\\n            <source media=\\\"(min-width: 480px)\\\" srcset=\\\"/dA/7b4ba67a-1793-4daf-bed9-f8ce054f1433/ski_holidays.png/600w/50q/ski_holidays.png, /dA/7b4ba67a-1793-4daf-bed9-f8ce054f1433//1200w/50q/ski_holidays.png 2x\\\">\\n            <img src=\\\"/dA/7b4ba67a-1793-4daf-bed9-f8ce054f1433/ski_holidays.png/480w/50q/ski_holidays.png\\\" alt=\\\"With over 400\\\" of snow fall a year we have the longest season in the Continental US\\\" class=\\\"img-fluid\\\">\\n        </picture>\\n    </a>\\n    <div class=\\\"thumbnail-classic-caption\\\">\\n        <h4 class=\\\"thumbnail-classic-title\\\">Over 400\\\" of snow a year</h4>\\n        <p class=\\\"thumbnail-classic-text\\\">With over 400\\\" of snow fall a year we have the longest season in the Continental US</p>\\n        <a class=\\\"thumbnail-classic-link mdi mdi-plus-circle-outline\\\" href=\\\"/dA/7b4ba67a-1793-4daf-bed9-f8ce054f1433/1200w/50q/ski_holidays.png\\\" data-lightgallery=\\\"item\\\"></a>\\n    </div>    \\n</article>\\n<div></div>\");",
									"",
									"    pm.expect(container1rendered[2].uuid, 'FAILED:[container1rendered[2].uuid]').equal(\"uuid-3\");",
									"    pm.expect(container1rendered[2].render, 'FAILED:[container1rendered[2].render]').equal(\"\\n    <!-- Container Code: /application/containers/video.vtl -->\\n\\n<a class=\\\"video-cover bg-overlay-30 mb-5\\\" data-lightbox=\\\"iframe\\\" href=\\\"https://www.youtube.com/watch?v=1qw4ayRc1t8\\\">\\n  <div class=\\\"video-img\\\" style=\\\"background-image: url(https://i.ytimg.com/vi/1qw4ayRc1t8/hqdefault.jpg);\\\"></div>\\n  <span class=\\\"icon mdi mdi-play video-cover-icon\\\"></span>\\n</a><div></div>\");",
									"    ",
									"    pm.expect(container1rendered[3].uuid, 'FAILED:[container1rendered[3].uuid]').equal(\"uuid-4\");",
									"    pm.expect(container1rendered[3].render, 'FAILED:[container1rendered[3].render]').equal(\"\\n    \\r\\n<h1 class=\\\"text-center\\\">Featured Activities</h1>\\n<div class=\\\"row justify-content-center\\\">\\n    </div>\\n<div></div>\");",
									"",
									"    pm.expect(container1rendered[4].uuid, 'FAILED:[container1rendered[4].uuid]').equal(\"uuid-5\");",
									"    pm.expect(container1rendered[4].render, 'FAILED:[container1rendered[4].render]').equal(\"\\n    <h2>Costa Rica Family Adventure</h2>\\n<p>Tropical rainforests, zip lines, monkey sightings and waterfall swims make for the most unforgettable vacation&mdash;and photos.</p>\\n<p>Abundance abounds in Costa Rica: beautiful beaches, friendly people and endless adventures to embark upon. We dabble in it all with a family-friendly itinerary that will get everyone&rsquo;s heart pumping. Jump right in to adventure life in Costa Rica at Arenal Volcano where we zip along the treetops, get a glimpse of rural Tico life on a local farm, rappel down a canyon waterfall that lies deep in the tropical rainforest, and soak in thermal hot springs.</p>\\n<p>Journey south, crossing Lake Arenal by boat, and dive deep into the Monteverde cloud forest. Your hotel is located in the reserve, home to eight different biological zones and thousands of plants and animals. Keep your eyes peeled for monkeys and quetzals during the day and embark on night walks with your guide to experience a whole different world after dark. Spend a unique day exploring the forest giants from the ground up&mdash;climbing up specially outfitted trees and then exploring the forest on foot with your naturalist guide.</p><div></div>\");",
									"",
									"    pm.expect(container1rendered[5].uuid, 'FAILED:[container1rendered[5].uuid]').equal(\"uuid-6\");",
									"    pm.expect(container1rendered[5].render, 'FAILED:[container1rendered[5].render]').equal(\"\\n    <h3>Adventure travel done right</h3>\\n<p>Wherever you want to go, whatever you want to get into, we&rsquo;ve got a trip that&rsquo;ll make your dream vacation come true. Visit like a local, explore at your own pace, and eat like a king (or a vegan king, if that&rsquo;s more your thing).<strong><br /></strong></p><div></div>\");",
									"",
									"    pm.expect(container1rendered[6].uuid, 'FAILED:[container1rendered[6].uuid]').equal(\"uuid-7\");",
									"    pm.expect(container1rendered[6].render, 'FAILED:[container1rendered[6].render]').equal(\"\\n    <h3>Experience the world with us</h3>\\n<p>We practice Leave No Trace principles on all our trips and work with local people and businesses as often as possible.Our expert guides don&rsquo;t just know these places&mdash;they call them home. Their local knowledge unveils worlds few get to see. Hike, bike, swim and paddle with like-minded travelers who share your passion for adventure and the outdoors.</p><div></div>\");",
									"",
									"    pm.expect(container1rendered[7].uuid, 'FAILED:[container1rendered[7].uuid]').equal(\"uuid-8\");",
									"    pm.expect(container1rendered[7].render, 'FAILED:[container1rendered[7].render]').equal(\"\\n    \\n<article class=\\\"thumbnail-classic mb-5\\\">\\n    <a class=\\\"thumbnail-classic-figure\\\" href=\\\"/dA/bfee8f08-a6d1-4fd7-8f70-476e62663eca/waterfall-costa-rica.jpg/1200w\\\" data-lightgallery=\\\"item\\\">\\n        <picture>\\n            <source media=\\\"(min-width: 800px)\\\" srcset=\\\"/dA/bfee8f08-a6d1-4fd7-8f70-476e62663eca/waterfall-costa-rica.jpg/1200w/50q/waterfall-costa-rica.jpg, /dA/bfee8f08-a6d1-4fd7-8f70-476e62663eca/waterfall-costa-rica.jpg/2400w/50q/waterfall-costa-rica.jpg 2x\\\">\\n            <source media=\\\"(min-width: 480px)\\\" srcset=\\\"/dA/bfee8f08-a6d1-4fd7-8f70-476e62663eca/waterfall-costa-rica.jpg/600w/50q/waterfall-costa-rica.jpg, /dA/bfee8f08-a6d1-4fd7-8f70-476e62663eca//1200w/50q/waterfall-costa-rica.jpg 2x\\\">\\n            <img src=\\\"/dA/bfee8f08-a6d1-4fd7-8f70-476e62663eca/waterfall-costa-rica.jpg/480w/50q/waterfall-costa-rica.jpg\\\" alt=\\\"From breathtaking waterfalls to amazing rain forest, Costa Rica has something for every Eco adventurer.\\\" class=\\\"img-fluid\\\">\\n        </picture>\\n    </a>\\n    <div class=\\\"thumbnail-classic-caption\\\">\\n        <h4 class=\\\"thumbnail-classic-title\\\">Fall into Costa Rica</h4>\\n        <p class=\\\"thumbnail-classic-text\\\">From breathtaking waterfalls to amazing rain forest, Costa Rica has something for every Eco adventurer.</p>\\n        <a class=\\\"thumbnail-classic-link mdi mdi-plus-circle-outline\\\" href=\\\"/dA/bfee8f08-a6d1-4fd7-8f70-476e62663eca/1200w/50q/waterfall-costa-rica.jpg\\\" data-lightgallery=\\\"item\\\"></a>\\n    </div>    \\n</article>\\n<div></div>\");",
									"",
									"    pm.expect(container1rendered[8].uuid, 'FAILED:[container1rendered[8].uuid]').equal(\"uuid-9\");",
									"    pm.expect(container1rendered[8].render, 'FAILED:[container1rendered[8].render]').equal(\"\\n    <div></div>\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/destinations/costa-rica\", pageMode: \"live\", languageId: \"1\") {\n    containers {\n      rendered {\n        uuid\n        render\n      }\n    }\n      \n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ContainersFieldContainsContainerStructure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let contains = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Containers Field' includes all Container Structures\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.data.page.containers.length, 'FAILED:[jsonData.data.page.containers.length]').equal(2);",
									"",
									"    var containerStructuresFirstContainer = jsonData.data.page.containers[0].containerStructures;",
									"",
									"    pm.expect(containerStructuresFirstContainer.length, 'FAILED:[containerStructuresFirstContainer.length]').equal(10);",
									"",
									"    let expectedTypes = [",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/banner.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/blog.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/product.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/activity.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/calendarevent.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/image.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/video.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/calltoaction.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/webpagecontent.vtl\\\")\", ",
									"                        \"#dotParse(\\\"//demo.dotcms.com/application/containers/default/dotasset.vtl\\\")\"                ",
									"    ];",
									"",
									"    // assert all expected content types are included ",
									"    const respondedTypes = containerStructuresFirstContainer.map(structure => structure.code);                 ",
									"    pm.expect(contains(respondedTypes, expectedTypes ), 'FAILED:[expectedTypes]').equal(true);",
									"",
									"    // assert all properties are present ",
									"",
									"    pm.expect(containerStructuresFirstContainer[0].id, 'FAILED:[ontainerStructuresFirstContainer[0].id]').not.undefined;",
									"    pm.expect(containerStructuresFirstContainer[0].id, 'FAILED:[ontainerStructuresFirstContainer[0].id]').not.null;",
									"",
									"    pm.expect(containerStructuresFirstContainer[0].structureId, 'FAILED:[ontainerStructuresFirstContainer[0].structureId]').not.undefined;",
									"    pm.expect(containerStructuresFirstContainer[0].structureId, 'FAILED:[ontainerStructuresFirstContainer[0].structureId]').not.null;",
									"",
									"    pm.expect(containerStructuresFirstContainer[0].containerInode, 'FAILED:[ontainerStructuresFirstContainer[0].containerInode]').not.undefined;",
									"    pm.expect(containerStructuresFirstContainer[0].containerInode, 'FAILED:[ontainerStructuresFirstContainer[0].containerInode]').not.null;",
									"",
									"    pm.expect(containerStructuresFirstContainer[0].containerId, 'FAILED:[ontainerStructuresFirstContainer[0].containerId]').not.undefined;",
									"    pm.expect(containerStructuresFirstContainer[0].containerId, 'FAILED:[ontainerStructuresFirstContainer[0].containerId]').not.null;",
									"",
									"    pm.expect(containerStructuresFirstContainer[0].code, 'FAILED:[ontainerStructuresFirstContainer[0].code]').not.undefined;",
									"    pm.expect(containerStructuresFirstContainer[0].code, 'FAILED:[ontainerStructuresFirstContainer[0].code]').not.null;",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/destinations/costa-rica\", pageMode: \"live\", languageId: \"1\") {\n    containers {\n      containerStructures {\n        id\n        structureId\n        containerInode\n        containerId\n        code\n      }\n    }\n      \n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithContentWithTagsAndCats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"costa-rica-family-cats-tags.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/costa-rica-family-cats-tags.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Content `Costa Rica Family Adventure` with \n`taggie` field with `costa rica` and `winterenthusiast` tags and `cat` field with `All Incluse` and `Tours` categories"
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ContainersFieldContainsContainerContentlets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var containerContentlets = jsonData.data.page.containers[0].containerContentlets;",
									"",
									"    var containerContentlets1 = containerContentlets[0];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets1.uuid, 'FAILED:[containerContentlets1.uuid]').equal(\"uuid-9\");",
									"    pm.expect(containerContentlets1.contentlets[0].identifier, 'FAILED:[containerContentlets1.contentlets[0]].identifier').equal(\"7c9cb3a7-bb68-4fd0-b21d-03ec4be491a7\");",
									"    pm.expect(containerContentlets1.contentlets[0].title, 'FAILED:[containerContentlets1.contentlets[0]].title').equal(\"Costa Rica FAQ\");",
									"",
									"      var containerContentlets2 = containerContentlets[1];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets2.uuid, 'FAILED:[containerContentlets2.uuid]').equal(\"uuid-2\");",
									"    pm.expect(containerContentlets2.contentlets[0].identifier, 'FAILED:[containerContentlets2.contentlets[0]].identifier').equal(\"f827c41a-5689-4733-b4d7-916d3a31c9c6\");",
									"    pm.expect(containerContentlets2.contentlets[0].title, 'FAILED:[containerContentlets2.contentlets[0]].title').equal(\"Costa Rica Intro\");",
									"",
									"    pm.expect(containerContentlets2.contentlets[1].identifier, 'FAILED:[containerContentlets2.contentlets[0]].identifier').equal(\"7b4ba67a-1793-4daf-bed9-f8ce054f1433\");",
									"    pm.expect(containerContentlets2.contentlets[1].title, 'FAILED:[containerContentlets2.contentlets[0]].title').equal(\"Over 400\\\" of snow a year\");",
									"",
									"    var containerContentlets3 = containerContentlets[2];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets3.uuid, 'FAILED:[containerContentlets3.uuid]').equal(\"uuid-1\");",
									"    pm.expect(containerContentlets3.contentlets[0].identifier, 'FAILED:[containerContentlets3.contentlets[0]].identifier').equal(\"6bbead53-3908-471c-966d-9e76c5dd9eba\");",
									"    pm.expect(containerContentlets3.contentlets[0].title, 'FAILED:[containerContentlets3.contentlets[0]].title').equal(\"Hiking\");",
									"",
									"    var containerContentlets4 = containerContentlets[3];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets4.uuid, 'FAILED:[containerContentlets4.uuid]').equal(\"uuid-3\");",
									"    pm.expect(containerContentlets4.contentlets[0].identifier, 'FAILED:[containerContentlets4.contentlets[0]].identifier').equal(\"f40c6030-3532-4e75-9ca8-0d92261264e3\");",
									"    pm.expect(containerContentlets4.contentlets[0].title, 'FAILED:[containerContentlets4.contentlets[0]].title').equal(\"Nat Geo Top Rated Eco Lodge, Episode 2 of 4\");",
									"",
									"    var containerContentlets5 = containerContentlets[4];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets5.uuid, 'FAILED:[containerContentlets5.uuid]').equal(\"uuid-4\");",
									"    pm.expect(containerContentlets5.contentlets[0].identifier, 'FAILED:[containerContentlets5.contentlets[0]].identifier').equal(\"fb6a06da-8c0f-4828-99c5-91b03b17eaf7\");",
									"    pm.expect(containerContentlets5.contentlets[0].title, 'FAILED:[containerContentlets5.contentlets[0]].title').equal(\"Destination Related Activities\");",
									"",
									"    var containerContentlets6 = containerContentlets[5];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets6.uuid, 'FAILED:[containerContentlets6.uuid]').equal(\"uuid-5\");",
									"    pm.expect(containerContentlets6.contentlets[0].identifier, 'FAILED:[containerContentlets6.contentlets[0]].identifier').equal(\"3e6533b7-c3ba-4ec4-8bca-6a88d54cd037\");",
									"    pm.expect(containerContentlets6.contentlets[0].title, 'FAILED:[containerContentlets6.contentlets[0]].title').equal(\"Costa Rica Family Adventure\");",
									"    // tags ",
									"    pm.expect(containerContentlets6.contentlets[0].taggies, 'FAILED:[containerContentlets6.contentlets[0].taggies]').equal(\"costa rica,winterenthusiast:persona\");",
									"    // cats ",
									"    pm.expect(JSON.stringify(containerContentlets6.contentlets[0].cats), 'FAILED:[containerContentlets6.contentlets[0].cats]').equal(JSON.stringify([{\"allInclusive\": \"All Inclusive\"}, {\"tours\": \"Tours\"}]));",
									"",
									"",
									"    var containerContentlets7 = containerContentlets[6];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets7.uuid, 'FAILED:[containerContentlets7.uuid]').equal(\"uuid-6\");",
									"    pm.expect(containerContentlets7.contentlets[0].identifier, 'FAILED:[containerContentlets7.contentlets[0]].identifier').equal(\"57abf7cc-8b91-4cb9-8e5d-bc7f0ff54665\");",
									"    pm.expect(containerContentlets7.contentlets[0].title, 'FAILED:[containerContentlets7.contentlets[0]].title').equal(\"Adventure travel done right\");",
									"",
									"    var containerContentlets8 = containerContentlets[7];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets8.uuid, 'FAILED:[containerContentlets8.uuid]').equal(\"uuid-7\");",
									"    pm.expect(containerContentlets8.contentlets[0].identifier, 'FAILED:[containerContentlets8.contentlets[0]].identifier').equal(\"5a4e4ef3-884f-4258-9009-f8fa83236242\");",
									"    pm.expect(containerContentlets8.contentlets[0].title, 'FAILED:[containerContentlets8.contentlets[0]].title').equal(\"Experience the world with us\");",
									"",
									"    var containerContentlets9 = containerContentlets[8];",
									"    // containerContentlets fields",
									"    pm.expect(containerContentlets9.uuid, 'FAILED:[containerContentlets9.uuid]').equal(\"uuid-8\");",
									"    pm.expect(containerContentlets9.contentlets[0].identifier, 'FAILED:[containerContentlets9.contentlets[0]].identifier').equal(\"bfee8f08-a6d1-4fd7-8f70-476e62663eca\");",
									"    pm.expect(containerContentlets9.contentlets[0].title, 'FAILED:[containerContentlets9.contentlets[0]].title').equal(\"Fall into Costa Rica\");",
									"",
									"  ",
									"    ",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/destinations/costa-rica\", pageMode: \"live\", languageId: \"1\") {\n    containers {\n\t\t\ttitle\n\t\t\tidentifier\n      containerContentlets {\n        uuid\n        contentlets {\n          identifier\n          title\n          taggies: _map(key:\"taggies\") \n          cats: _map(key:\"cats\")\n        }\n      }\n    }\n      \n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithMexicoPageAndRule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"mexico-pageasset.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/mexico-pageasset.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_FireRulesTrue_PREVIEW_MODE_pageRuleShouldFire",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Rule fired\", function () {",
									"    var rulesFired = pm.response.headers.get(\"rulesFired\");",
									"    pm.expect(rulesFired, 'FAILED:[rulesFired').equal(\"true\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/destinations/mexico\", pageMode: \"preview_mode\", languageId: \"1\", fireRules: true) {\n    title\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURLMAP_givenRequestedPersona_shouldRenderUsingPersona",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Persona present\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.page.viewAs.visitor.persona.keyTag, 'FAILED:[jsonData.data.page.viewAs.visitor.persona.keyTag]').equal(\"EcoEnthusiast\");",
									"    pm.expect(jsonData.data.page.viewAs.visitor.persona.identifier, 'FAILED:[jsonData.data.page.viewAs.visitor.persona.identifier]').equal(\"0ed8e71a-47c7-4b30-a6f2-3796aa71ba49\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/store/products/eagles-nest-outfitters-doublenest-hammock-patriot\", fireRules: true, persona: \"EcoEnthusiast\") {\n    viewAs {\n      visitor {\n        device\n        persona {\n          keyTag\n          identifier\n        }\n        tags {\n          tag\n        }\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "This tests that given a persona tag in the parameters of the `page` field, the page rendering needs to take the persona into consideration and return the persona info"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithPageInDifferentSite",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"page-in-another-site.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/page-in-another-site.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_givenASite_shouldReturnExpectedPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"let checker = (arr, target) => target.every(v => arr.includes(v));",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Expected page fetched\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.page.title, 'FAILED:[jsonData.data.page.title]').equal(\"copy-page\");",
									"    pm.expect(jsonData.data.page.url, 'FAILED:[jsonData.data.page.url]').equal(\"/copy-page\");",
									"    pm.expect(jsonData.data.page.host.hostName, 'FAILED:[jsonData.data.page.host.hostName]').equal(\"copy.dotcms.com\");",
									"    ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/copy-page\", fireRules: true, site: \"copy.dotcms.com\") {\n    title\n    url\n    host {\n      hostName\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "This tests that given a persona tag in the parameters of the `page` field, the page rendering needs to take the persona into consideration and return the persona info"
					},
					"response": []
				}
			]
		},
		{
			"name": "Test BaseType fields ",
			"item": [
				{
					"name": "pre_ImportBundleWithPersonas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"personas.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/personas.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithKeyValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"keyvalue.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/keyvalue.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithVanityUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"vanity.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/vanity.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Vanity URL"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithDotAsset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"dotasset.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/dotasset.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* DotAsset"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"page.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/page.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Blog page"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithFileasset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"fileasset.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/fileasset.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Blog page"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithWidget",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"widget.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/widget.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "RequestPageBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'PageBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.PageBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"title\"], 'FAILED:[title]').equal(\"Blogs\");",
									"    pm.expect(page[\"url\"], 'FAILED:[url]').equal(\"/blog/index\");",
									"    pm.expect(page.hostFolder.hostName, 'FAILED:[hostFolder.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(page.hostFolder.folderName, 'FAILED:[hostFolder.folderName]').equal(\"blog\");",
									"    pm.expect(page.template, 'FAILED:[template]').equal(\"64269d16-2710-4919-88ec-3b09c89ea004\");",
									"    pm.expect(page.showOnMenu.length, 'FAILED:[showOnMenu]').to.eql(0);",
									"    pm.expect(page[\"sortOrder\"], 'FAILED:[sortOrder]').equal(0);",
									"    pm.expect(page[\"cachettl\"], 'FAILED:[cachettl]').equal(\"0\");",
									"    pm.expect(page[\"friendlyName\"], 'FAILED:[friendlyName]').equal(\"Blog\");",
									"    pm.expect(page[\"redirecturl\"], 'FAILED:[redirecturl]').equal(null);",
									"    pm.expect(page.httpsreq.length, 'FAILED:[httpsreq]').to.eql(0);",
									"    pm.expect(page[\"seodescription\"], 'FAILED:[seodescription]').equal(\"Help understanding your financial future and hoe Quest Financial and our advisors and help you plan for tomorrow with confidence\");",
									"    pm.expect(page[\"seokeywords\"], 'FAILED:[seokeywords]').equal(\"Financial Blog\");",
									"    pm.expect(page[\"pagemetadata\"], 'FAILED:[pagemetadata]').equal(null); ",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  PageBaseTypeCollection(query:\"+identifier:9c5f42da-31b1-4935-9df6-153f5de1bdf2\") {\n    title\n    url\n    hostFolder {\n      hostName\n      folderName\n    }\n    template\n    showOnMenu\n    sortOrder\n    cachettl\n    friendlyName\n    redirecturl\n    httpsreq\n    seodescription\n    seokeywords\n    pagemetadata\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestPersonaBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'PersonaBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.PersonaBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"name\"], 'FAILED:[name]').equal(\"Ocean Enthusiast\");",
									"    pm.expect(page[\"keyTag\"], 'FAILED:[keyTag]').equal(\"OceanEnthusiast\");",
									"    pm.expect(page.hostFolder.hostName, 'FAILED:[hostFolder.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(page.hostFolder.folderName, 'FAILED:[hostFolder.folderName]').equal(\"system folder\");",
									"    pm.expect(page.tags.length, 'FAILED:[tags]').to.eql(4);",
									"    pm.expect(page[\"description\"], 'FAILED:[description]').equal(\"People who typically vacation around water sports such as surfing, wind surfing, etc.\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  PersonaBaseTypeCollection(query:\"+identifier:d948d85c-3bc8-4d85-b0aa-0e989b9ae235\") {\n    name\n    hostFolder {\n      hostName\n      folderName\n    }\n    keyTag\n    photo {\n      name\n    }\n    tags\n    description\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestFileAssetBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'FileBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.FileBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"title\"], 'FAILED:[title]').equal(\"plugins.css\");",
									"    pm.expect(page.hostFolder.hostName, 'FAILED:[hostFolder.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(page.hostFolder.folderName, 'FAILED:[hostFolder.folderName]').equal(\"plugins\");",
									"    pm.expect(page.fileName, 'FAILED:[fileName]').equal(\"plugins.css\");",
									"    pm.expect(page.fileAsset.name, 'FAILED:[fileAsset.name]').equal(\"plugins.css\");",
									"    pm.expect(hasProperty(page.metaData, \"contentType\", \"text/plain; charset=UTF-8\"), 'FAILED:[page.metaData.contentType]').to.be.true;",
									"    pm.expect(hasProperty(page.metaData, \"fileSize\", \"188560\"), 'FAILED:[page.metaData.fileSize]').to.be.true;",
									"});",
									"",
									"",
									"",
									"function hasProperty(metaData, name, value) {",
									"        var hasProperty = false;",
									"        metaData.forEach(function (item) {",
									"            if(item.key==name && item.value.trim()==value) {",
									"                hasProperty = true;",
									"            }",
									"        });",
									"",
									"        return hasProperty;",
									"    }"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  FileBaseTypeCollection(query:\"+identifier:0e480a8c-48bf-45a9-81b0-c8e2dd8aabd2\") {\n    title\n    hostFolder {\n      hostName\n      folderName\n    }\n    fileName\n    fileAsset {\n      name\n    }\n    metaData {\n      key\n      value\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestKeyValueBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'KeyValueBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.KeyValueBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"key\"], 'FAILED:[key]').equal(\"key1\");",
									"    pm.expect(page[\"value\"], 'FAILED:[key]').equal(\"value1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  KeyValueBaseTypeCollection(query:\"+identifier:7c4be356-0feb-4aa8-9081-c89ceba0212d\") {\n    key\n    value\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestWidgetBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'WidgetBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.WidgetBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"widgetTitle\"], 'FAILED:[widgetTitle]').equal(\"Costa Rica FAQ\");",
									"    pm.expect(page[\"widgetCode\"], 'FAILED:[widgetCode]').equal(\"#dotParse(\\\"/application/vtl/faq/faq-widget.vtl\\\")\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  WidgetBaseTypeCollection(query:\"+identifier:7c9cb3a7-bb68-4fd0-b21d-03ec4be491a7\") {\n    widgetTitle\n    widgetCode\n    \n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestVanityURLBaseType_ReturnsAllFields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'VanityURLBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.VanityURLBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"title\"], 'FAILED:[title]').equal(\"404 Error Page\");",
									"    pm.expect(page[\"site\"].hostName, 'FAILED:[site].hostName').equal(\"demo.dotcms.com\");",
									"    pm.expect(page[\"uri\"], 'FAILED:[uri]').equal(\"/cms404Page\");",
									"    pm.expect(page[\"action\"], 'FAILED:[action]').equal(\"200\");",
									"    pm.expect(page[\"forwardTo\"], 'FAILED:[forwardTo]').equal(\"/404-error\");",
									"    pm.expect(page[\"order\"], 'FAILED:[order]').equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  VanityURLBaseTypeCollection(query:\"+identifier:33eb028c6ae3da766b07e56b132ca11a\") {\n    title\n    site {\n        hostName\n    }\n    uri\n    action\n    forwardTo\n    order\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestDotAssetBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'DotAssetBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.DotAssetBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"asset\"].name, 'FAILED:[asset]').equal(\"james.jpeg\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  DotAssetBaseTypeCollection(query:\"+identifier:875de0bd-8cbb-45fb-8daa-dc82c12c0d57 \") {\n    asset {\n      name\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get content in new Language",
			"item": [
				{
					"name": "Create new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"languageId\", jsonData.entity.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"languageCode\":\"it\",\n\t\"language\":\"Italian\", \n\t\"countryCode\":\"IT\", \n\t\"country\":\"Italy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v2/languages",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v2",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Content in new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"title\":\"Content in Italian\", \n       \"contentHost\":\"demo.dotcms.com\",\n       \"body\":\"This is a content in Italian\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"{{languageId}}\",\n       \"name\":\"whatever\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "indexPolicy",
									"value": "wait_for"
								}
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Get New Language Should Succeed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content in new Language should be retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData)",
									"    var contentIdentifier = pm.collectionVariables.get(\"contentIdentifier\")",
									"    var collectionName = pm.collectionVariables.get(\"contentTypeVariable\")+\"Collection\"",
									"    pm.expect(jsonData.data[collectionName][0].identifier).to.eql(contentIdentifier);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVariable}}Collection(limit: 20) {\n    identifier\n    conLanguage {\n      id\n      languageCode\n      country\n      countryCode\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test GraphQL File/Image Field fields",
			"item": [
				{
					"name": "Create File/Image ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"fileImageContentTypeVariable\", jsonData.entity[0].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"defaultType\": false,\n  \"fixed\": false,\n  \"system\": false,\n  \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableFileAssetContentType\",\n  \"description\": \"\",\n  \"host\": \"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n  \"folder\": \"SYSTEM_FOLDER\",\n  \"name\": \"myFileImageType{{$randomBankAccount}}\",\n  \"systemActionMappings\": {\n    \"NEW\": \"\"\n  },\n  \"workflow\": [\n    \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n  ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
									"",
									"pm.collectionVariables.set(\"imageFieldVariable\", jsonData.entity[0].fields[1].variable);",
									"",
									"pm.collectionVariables.set(\"fileFieldVariable\", jsonData.entity[0].fields[2].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Type {{$randomBankAccount}}\",\n\t\"host\": \"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n\t\"fixed\": false,\n\t\"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 1,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"fixed\": true\n\t\t}, \n        {\n\t\t      \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFileField\",\n\t\t      \"name\": \"myFile\",\n\t\t      \"required\": false,\n\t\t      \"hint\": \"\", \n              \"sortOrder\": 2, \n              \"indexed\": true\n\t    }, \n\t\t{\n              \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableImageField\",\n              \"dataType\": \"TEXT\",\n              \"fieldType\": \"Image\",\n              \"fieldTypeLabel\": \"Image\",\n              \"fieldVariables\": [],\n              \"fixed\": false,\n              \"iDate\": 1585605564000,\n              \"indexed\": true,\n              \"listed\": false,\n              \"modDate\": 1585605564000,\n              \"name\": \"myImage\",\n              \"readOnly\": false,\n              \"required\": false,\n              \"searchable\": false,\n              \"sortOrder\": 3,\n              \"unique\": false\n       }\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create File Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"fileContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json",
									"value": "{\n    \"contentlet\": {\n       \"contentType\":\"{{fileImageContentTypeVariable}}\",\n       \"title\":\"My Image\", \n       \"hostFolder\":\"default\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"showOnMenu\":\"true\",\n       \"sortOrder\":\"2\"\n    }\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/Test_GraphQL_Image_Field_fields/Readme18005.md"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Create Image Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"imageContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json",
									"value": "{\n    \"contentlet\": {\n       \"contentType\":\"{{fileImageContentTypeVariable}}\",\n       \"title\":\"My Image\", \n       \"hostFolder\":\"default\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"showOnMenu\":\"true\",\n       \"sortOrder\":2\n    }\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/Test_GraphQL_Image_Field_fields/tommylee18005.jpeg"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Create Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"name\":\"Content With Image\", \n       \"contentHost\":\"default\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"myFile\":\"{{fileContentIdentifier}}\", \n       \"myImage\":\"{{imageContentIdentifier}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Request content with Image and File fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var jsonData = pm.response.json();",
									"var contentIdentifier = pm.collectionVariables.get(\"contentIdentifier\")",
									"var collectionName = pm.collectionVariables.get(\"contentTypeVariable\")+\"Collection\"",
									"",
									"pm.test(\"Image Field attributes should be present\", function () {",
									"     // image field",
									"    var imageFieldJson = jsonData.data[collectionName][0][\"myImage\"];",
									"    ",
									"    // general attributes",
									"    pm.expect(imageFieldJson.fileName).to.eql(\"tommylee18005.jpeg\");",
									"    ",
									"    // fileAsset",
									"    pm.expect(imageFieldJson.fileAsset.name).to.eql(\"tommylee18005.jpeg\");",
									"    pm.expect(imageFieldJson.fileAsset.size).to.eql(5494);",
									"    pm.expect(imageFieldJson.fileAsset.mime).to.eql(\"image/jpeg\");",
									"    ",
									"    // metaData",
									"    pm.expect(imageFieldJson.metaData.length).to.eql(12);",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"fileSize\", \"5494\"), 'FAILED:[fileSize]').to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"length\", \"5494\"), 'FAILED:[length]').to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"width\", \"139\"), 'FAILED:[width]').to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"contentType\", \"image/jpeg\"), 'FAILED:[contentType]').to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"height\", \"186\"), 'FAILED:[height]').to.be.true;",
									"    pm.expect(metaDataIncludes(imageFieldJson.metaData, \"path\", \"/fileAsset/tommylee18005.jpeg\"), 'FAILED:[path]').to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"sha256\", \"d6b09b7a7d42e6a84e455e7257faf32c4351aa9bb491ceb939f7f3443c2150ae\"), 'FAILED:[sha256]').to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"title\", \"tommylee18005.jpeg\"), 'FAILED:[title]').to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"isImage\", \"true\"), 'FAILED:[isImage]').to.be.true;",
									"    pm.expect(imageFieldJson.metaData.modDate).to.be.not.null;",
									"    ",
									"    ",
									"});",
									"",
									"pm.test(\"File Field attributes should be present\", function () {",
									"     // File field",
									"    var fileFieldJson = jsonData.data[collectionName][0][\"myFile\"];",
									"    ",
									"    // general attributes",
									"    pm.expect(fileFieldJson.fileName, 'FAILED:[fileName]').to.eql(\"Readme18005.md\");",
									"    ",
									"    // fileAsset",
									"    pm.expect(fileFieldJson.fileAsset.name, 'FAILED:[name]').to.eql(\"Readme18005.md\");",
									"    pm.expect(fileFieldJson.fileAsset.size, 'FAILED:[size]').to.eql(14);",
									"    pm.expect(fileFieldJson.fileAsset.mime, 'FAILED:[mime]').to.eql(\"text/plain; charset=ISO-8859-1\");",
									"    ",
									"    pm.expect(fileFieldJson.metaData.length).to.eql(10);",
									"",
									"    // console.log(fileFieldJson.metaData)",
									"    ",
									"    pm.expect(hasProperty(fileFieldJson.metaData, \"fileSize\", \"14\"), 'FAILED:[fileSize]').to.be.true;",
									"    pm.expect(hasProperty(fileFieldJson.metaData, \"length\", \"14\"), 'FAILED:[length]').to.be.true;",
									"    pm.expect(hasProperty(fileFieldJson.metaData, \"contentType\", \"text/plain; charset=ISO-8859-1\"), 'FAILED:[contentType]').to.be.true;",
									"    ",
									"    ",
									"});",
									"",
									"function hasProperty(metaData, name, value) {",
									"    var hasProperty = false;",
									"    metaData.forEach(function (item) {",
									"        if(item.key==name && item.value.trim()==value) {",
									"            hasProperty = true;",
									"        }",
									"    });",
									"",
									"    return hasProperty;",
									"}",
									"",
									"function metaDataIncludes(metaData, name, value) {",
									"    var metaDataIncludes = false;",
									"    metaData.forEach(function (item) {",
									"        if(item.key==name && item.value.trim().includes(value)) {",
									"            metaDataIncludes = true;",
									"        }",
									"    });",
									"",
									"    return metaDataIncludes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVariable}}Collection(limit: 20) {\n    myImage {\n      fileName\n      \n      fileAsset {\n        name\n        size\n        mime\n      }\n      metaData {\n        key\n        value\n      }\n    }\n    \n    myFile {\n      fileName\n      \n      fileAsset {\n        name\n        size\n        mime\n      }\n      metaData {\n        key\n        value\n      }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithContentWithDotasset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"contentWithDotasset.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/contentWithDotasset.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Blog page"
					},
					"response": []
				},
				{
					"name": "Request content with DotAsset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"dotasset Field attributes should be present\", function () {",
									"    var dotasset = jsonData.data[\"TypeWithFileCollection\"][0];    ",
									"    var myFile = dotasset.myFile;",
									"    // general attributes",
									"    pm.expect(myFile.fileName).to.eql(\"Brave.pdf\");",
									"    pm.expect(myFile.description).to.eql(\"Brave.pdf\");",
									"    pm.expect(myFile.sortOrder).to.eql(0);",
									"",
									"    var fileAsset = myFile.fileAsset;",
									"",
									"    pm.expect(fileAsset.path).contains(\"e/a/eab7c291-88d8-4baa-80b4-dc9a035221da/asset/Brave.pdf\");",
									"    pm.expect(fileAsset.height).to.eql(0);",
									"    pm.expect(fileAsset.focalPoint).to.eql('0.0');",
									"    pm.expect(fileAsset.idPath).contains('/dA/5df50887a0/asset/Brave.pdf');",
									"    pm.expect(fileAsset.isImage).to.eql(false);",
									"    pm.expect(fileAsset.mime).to.eql(\"application/pdf\");",
									"    pm.expect(fileAsset.name).to.eql(\"Brave.pdf\");",
									"    pm.expect(fileAsset.sha256).to.eql(\"80cd3681118d30662978d2fa594b3b2fd1bae62d301cd73070e7de1fa7eefd34\");",
									"    pm.expect(fileAsset.size).to.eql(174987);",
									"    pm.expect(fileAsset.title).to.eql(\"Brave\");",
									"    pm.expect(fileAsset.versionPath).to.eql(\"/dA/eab7c29188/asset/Brave.pdf\");",
									"    pm.expect(fileAsset.width).to.eql(0);",
									"",
									"",
									"    ",
									"    // pm.expect(imageFieldJson.sortOrder).to.eql(2);",
									"    // pm.expect(imageFieldJson.showOnMenu[0]).to.eql(\"true\");",
									"    ",
									"    // // fileAsset",
									"    // pm.expect(imageFieldJson.fileAsset.name).to.eql(\"tommylee18005.jpeg\");",
									"    // pm.expect(imageFieldJson.fileAsset.size).to.eql(5494);",
									"    // pm.expect(imageFieldJson.fileAsset.mime).to.eql(\"image/jpeg\");",
									"    ",
									"    var metaData = myFile.metaData;",
									"    // metaData",
									"    pm.expect(hasProperty(metaData, \"path\", \"e/a/eab7c291-88d8-4baa-80b4-dc9a035221da/asset/Brave.pdf\"), 'FAILED:[path]').to.be.true;",
									"    pm.expect(hasProperty(metaData, \"isImage\", \"false\"), 'FAILED:[isImage]').to.be.true;",
									"    pm.expect(hasProperty(metaData, \"sha256\", \"80cd3681118d30662978d2fa594b3b2fd1bae62d301cd73070e7de1fa7eefd34\"), 'FAILED:[sha256]').to.be.true;",
									"    pm.expect(hasProperty(metaData, \"fileSize\", \"174987\"), 'FAILED:[fileSize]').to.be.true;",
									"    pm.expect(hasProperty(metaData, \"length\", \"174987\"), 'FAILED:[length]').to.be.true;",
									"    pm.expect(hasProperty(metaData, \"name\", \"Brave.pdf\"), 'FAILED:[name]').to.be.true;",
									"    pm.expect(hasProperty(metaData, \"title\", \"Brave\"), 'FAILED:[title]').to.be.true;",
									"    pm.expect(hasProperty(metaData, \"contentType\", \"application/pdf\"), 'FAILED:[contentType]').to.be.true;",
									"    ",
									"    ",
									"    ",
									"});",
									"",
									"function hasProperty(metaData, name, value) {",
									"    var hasProperty = false;",
									"    metaData.forEach(function (item) {",
									"        if(item.key==name && item.value.trim()==value) {",
									"            hasProperty = true;",
									"        }",
									"    });",
									"",
									"    return hasProperty;",
									"}",
									"",
									"function metaDataIncludes(metaData, name, value) {",
									"    var metaDataIncludes = false;",
									"    metaData.forEach(function (item) {",
									"        if(item.key==name && item.value.trim().includes(value)) {",
									"            metaDataIncludes = true;",
									"        }",
									"    });",
									"",
									"    return metaDataIncludes;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 5000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  TypeWithFileCollection(query: \"+identifier: 98254e93fc0fa5bd51d73a787935efd9\") \n  {  \n    myFile {\n      fileName\n      description\n      sortOrder\n      showOnMenu\n      fileAsset {\n        path\n        height\n        focalPoint\n        height\n        idPath\n        isImage\n        mime\n        modDate\n        name\n        path\n        sha256\n        size\n        title\n        versionPath\n        width\n\n      }\n      metaData {\n        key\n        value\n      }\n    }\n  }\n\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "This test that the custom type Image contains the expecte fields.\nExpected fields:\n\n* fileName\n* description\n* fileAsset (Composed/Custom Type. see Binary type on our GraphQL doc)\n* metaData (Custom Type. See Key Value type on our GraphQL doc)\n* showOnMenu\n* sortOrder"
		},
		{
			"name": "Related content respects language in query for parent",
			"item": [
				{
					"name": "Create new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"languageId\", jsonData.entity.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"languageCode\":\"it\",\n\t\"language\":\"Italian\", \n\t\"countryCode\":\"IT\", \n\t\"country\":\"Italy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v2/languages",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v2",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Child ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"childContentTypeVariable\", jsonData.entity[0].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Child type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Child Type {{$randomBankAccount}}\",\n\t\"variable\": \"childType{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Parent ContentType with Rel Field to Child",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"parentContentTypeVariable\", jsonData.entity[0].variable);",
									"pm.collectionVariables.set(\"relFieldVariable\", jsonData.entity[0].fields[1].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Parent Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Parent Type {{$randomBankAccount}}\",\n\t\"variable\": \"parentType{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}, \n\t\t{\n\t\t     \"clazz\":\"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n\t\t     \"required\":false,\n\t\t     \"name\":\"rel\",\n\t\t     \"relationships\":{\n\t\t        \"velocityVar\":\"{{childContentTypeVariable}}\",\n\t\t        \"cardinality\":0\n\t\t     },\n\t\t     \"searchable\":false\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Child Content in new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"childContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{childContentTypeVariable}}\",\n       \"title\":\"Child Content in New Language\", \n       \"contentHost\":\"demo.dotcms.com\",\n       \"body\":\"Child Content in New Language\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"{{languageId}}\",\n       \"name\":\"Child Content in New Language\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "indexPolicy",
									"value": "wait_for"
								}
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Save Parent Content with related Child in new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"parentContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{parentContentTypeVariable}}\",\n       \"title\":\"Parent Content in New Language\", \n       \"contentHost\":\"demo.dotcms.com\",\n       \"body\":\"Parent Content in New Language\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"{{languageId}}\",\n       \"name\":\"Parent Content in New Language\",\n       \"{{relFieldVariable}}\":\"{{childContentIdentifier}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "indexPolicy",
									"value": "wait_for"
								}
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Get Related Content should return content in parents Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content parent and child content returned in requested language\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    ",
									"    var parentIdentifier = pm.collectionVariables.get(\"parentContentIdentifier\")",
									"    var childIdentifier = pm.collectionVariables.get(\"childContentIdentifier\")",
									"    var languageId = pm.collectionVariables.get(\"languageId\")",
									"    ",
									"    var collectionName = pm.collectionVariables.get(\"parentContentTypeVariable\")+\"Collection\"",
									"    pm.expect(jsonData.data[collectionName][0].identifier).to.eql(parentIdentifier);",
									"    pm.expect(jsonData.data[collectionName][0].rel[0].identifier).to.eql(childIdentifier);",
									"    pm.expect(jsonData.data[collectionName][0].rel[0].conLanguage.id).to.eql(languageId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{parentContentTypeVariable}}Collection(query:\"+languageId:{{languageId}}\", limit: 20) {\n    identifier\n    {{relFieldVariable}} {\n        identifier\n        conLanguage {\n            id\n            languageCode\n            country\n            countryCode\n        }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Empty Collection",
			"item": [
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
									"",
									"pm.collectionVariables.set(\"imageFieldVariable\", jsonData.entity[0].fields[1].variable);",
									"",
									"pm.collectionVariables.set(\"fileFieldVariable\", jsonData.entity[0].fields[2].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Type {{$randomBankAccount}}\",\n\t\"host\": \"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n\t\"fixed\": false,\n\t\"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 1,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"fixed\": true\n\t\t}, \n\t\t{\n              \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableImageField\",\n              \"dataType\": \"TEXT\",\n              \"fieldType\": \"Image\",\n              \"fieldTypeLabel\": \"Image\",\n              \"fieldVariables\": [],\n              \"fixed\": false,\n              \"iDate\": 1585605564000,\n              \"indexed\": false,\n              \"listed\": false,\n              \"modDate\": 1585605564000,\n              \"name\": \"myImage\",\n              \"readOnly\": false,\n              \"required\": false,\n              \"searchable\": false,\n              \"sortOrder\": 2,\n              \"unique\": false\n       },\n\t   {\n\t\t      \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFileField\",\n\t\t      \"name\": \"myFile\",\n\t\t      \"required\": false,\n\t\t      \"hint\": \"\"\n\t   }\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestEmptyCollection_ShouldReturnEmpty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVariable}}Collection(limit: 20) {\n    title\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Metadata ",
			"item": [
				{
					"name": "pre_ImportBundleWithPersonas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"personas.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/personas.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithVanityUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"vanity.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/vanity.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Vanity URL"
					},
					"response": []
				},
				{
					"name": "RequestCount_ShouldReturnProperCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'QueryMetadata' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var metadata = jsonData.data.QueryMetadata[0];",
									"",
									"    pm.expect(metadata[\"fieldName\"], 'FAILED:[fieldName]').equal(\"PersonaBaseTypeCollection\");",
									"    pm.expect(metadata[\"totalCount\"]>0, 'FAILED:[totalCount]').to.be.true;",
									"",
									"    metadata = jsonData.data.QueryMetadata[1];",
									"",
									"    pm.expect(metadata[\"fieldName\"], 'FAILED:[fieldName]').equal(\"KeyValueBaseTypeCollection\");",
									"    pm.expect(metadata[\"totalCount\"]>0, 'FAILED:[totalCount]').to.be.true;",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  PersonaBaseTypeCollection {\n    title\n  }\n\n  KeyValueBaseTypeCollection {\n    key\n    value\n  }\n\n  QueryMetadata {\n    fieldName\n    totalCount\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Related content with condition / query",
			"item": [
				{
					"name": "pre_ImportBundleWithContext",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"movies-studios-ratings-bundle.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/movies-studios-ratings-bundle.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* HTMLPage /blog/index\n* HTMLPage /blog/destinations/costa-rica\n* Contentlet [Blog] Ecotourism in Costa Rica\n* Blog Detail Page /blog/blog-detail"
					},
					"response": []
				},
				{
					"name": "Get Related Content with condition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Filtered relationship fetched\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.MovieCollection[2].studio[0].name).to.eql(\"Walt Disney Pictures\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  MovieCollection(sortBy: \"Movie.title\") {\n    title\n    studio(query: \"+studio.name:\\\"Walt Disney Pictures\\\"\") {\n      name\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File Metadata",
			"item": [
				{
					"name": "Create FileAsset Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"fileContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotCMS.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json",
									"value": "{\n    \"contentlet\": {\n       \"contentType\":\"FileAsset\",\n       \"title\":\"Legioss\", \n       \"hostFolder\":\"default\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"showOnMenu\":\"true\",\n       \"sortOrder\":\"2\"\n    }\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/Test_GraphQL_Image_Field_fields/actn-legioss.jpg"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Request File Asset metada fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var imageFieldVariable = pm.collectionVariables.get(\"imageFieldVariable\");",
									"var fileFieldVariable = pm.collectionVariables.get(\"fileFieldVariable\");",
									"",
									"var contentIdentifier = pm.collectionVariables.get(\"contentIdentifier\")",
									"",
									"pm.test(\"FileAsset metadata attributes\", function () {",
									"     ",
									"    var metadataFields = jsonData.data[\"FileAssetCollection\"][0][\"fileAsset\"];",
									"    ",
									"    // metadata attributes",
									"    pm.expect(metadataFields.name).to.eql(\"actn-legioss.jpg\");",
									"    pm.expect(metadataFields.title).to.eql(\"actn-legioss.jpg\");",
									"    pm.expect(metadataFields.isImage).to.eql(true);",
									"    pm.expect(metadataFields.modDate).to.be.above(0);",
									"    pm.expect(metadataFields.size).to.eql(215384);",
									"    pm.expect(metadataFields.mime).to.eql(\"image/jpeg\");",
									"    pm.expect(metadataFields.width).to.eql(1200);",
									"    pm.expect(metadataFields.height).to.eql(900);",
									"    pm.expect(metadataFields.sha256).to.eql(\"ffe7157a4b7c8dd772f57dc2de8694ea974b87653b5605f854924a43bbfbb0ce\");",
									"    pm.expect(metadataFields.path).not.eql(null);",
									"    pm.expect(metadataFields.versionPath).not.eql(null);",
									"    pm.expect(metadataFields.focalPoint).to.eql(\"0.0\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  \nFileAssetCollection(limit:20){\n    fileAsset{\n      modDate\n      sha256\n      mime\n      title\n      versionPath\n      mime\n      focalPoint\n      path\n      name\n      versionPath\n      width\n      height\n      size\n      isImage\n    }   \n  }\n\n}\n\n\n\n\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Render Content Fields",
			"item": [
				{
					"name": "pre_ImportBundleWithContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"contentWithRendereableFields.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/contentWithRendereableFields.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Content with renderable fields"
					},
					"response": []
				},
				{
					"name": "Render content fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content field values are rendered and not rendered as requested\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    var contentlet = jsonData.data.TypeWithRedereableFieldsCollection[0];",
									"    ",
									"    pm.expect(contentlet.textField).to.eql(\"401ca578-74ef-463b-9ad0-c863da1724e5\");",
									"    pm.expect(contentlet.textareaField).to.eql(\"401ca578-74ef-463b-9ad0-c863da1724e5\");",
									"    pm.expect(contentlet.wysiwygField).to.eql(\"401ca578-74ef-463b-9ad0-c863da1724e5\");",
									"    pm.expect(contentlet.customField).to.eql(\"401ca578-74ef-463b-9ad0-c863da1724e5\");",
									"    pm.expect(contentlet.constantField).to.eql(\"401ca578-74ef-463b-9ad0-c863da1724e5\");",
									"    pm.expect(contentlet.rawText).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawTextarea).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawWysiwyg).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawCustom).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawConstant).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawText_default).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawTextarea_default).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawWysiwyg_default).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawCustom_default).to.eql(\"$content.identifier\");",
									"    pm.expect(contentlet.rawConstant_default).to.eql(\"$content.identifier\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n \n    TypeWithRedereableFieldsCollection {\n      textField(render: true)\n      textareaField(render: true)\n      wysiwygField(render: true)\n      customField(render: true)\n      constantField(render: true)\n      rawText:textField(render: false)\n      rawTextarea:textareaField(render: false)\n      rawWysiwyg:wysiwygField(render: false)\n      rawCustom:customField(render: false)\n      rawConstant:constantField(render: false)\n      rawText_default:textField\n      rawTextarea_default:textareaField\n      rawWysiwyg_default:wysiwygField\n      rawCustom_default:customField\n      rawConstant_default:constantField\n    }\n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "This tests that: \n* It's possible to request rendered content fields.\n* It's possible to request unrendered content fields. \n* It's possible to request the same field in both rendered and unrendered forms.   \n* If \"render\" argument is not specified, then it defaults to render:false"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithContentWithBadVelocity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"contentWithBadVelocity.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/contentWithBadVelocity.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Content with a body field that can't be velocity-rendered"
					},
					"response": []
				},
				{
					"name": "Render content with field with bad velocity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When error rendering field value then original field value is returned\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    var contentlet = jsonData.data.webPageContentCollection[0];",
									"    ",
									"    pm.expect(contentlet.body).to.eql(\"<p>&lt;p&gt;By default, CSS styles controlling the appearance of form fields reside in the following dotCMS directory:&amp;nbsp;/html/css/content/forms.css. However, redefining the CSS classes controlling the styling of form fields is fairly simple.&lt;/p&gt;\\\\n&lt;p&gt;Setting the &lt;b&gt;$contentFormMacroCSS&lt;/b&gt;&amp;nbsp;velocity variable on the Template, Container, or in a piece of content above the form on the page will over-ride the default CSS controlling form field styling. An example of the set command to a relative path is given below:&lt;/p&gt;\\\\n&lt;p&gt;&lt;b&gt;#set($contentFormMacroCSS = \\\\\\\"/global/css/&lt;span&gt;&lt;font color=\\\\\\\"#3366ff\\\\\\\"&gt;mycustomcssfile.css&lt;/font&gt;&lt;/span&gt;\\\\\\\")&lt;/b&gt;&lt;/p&gt;\\\\n&lt;p&gt;As long as the customized CSS file is read after the default dotCMS file, and before the Form itself, then the styles for the form fields will be over-ridden.&lt;/p&gt;</p>\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n \n    webPageContentCollection(query: \"+identifier:4b70c644-8111-496b-95c3-2cf9a942f20d\") {\n      title\n      body(render: true)\n    }\n  \n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "This tests that: \n* Requesting the field \"body\" with `render:true` returns the original field value when the field value is unable to be rendered."
					},
					"response": []
				}
			]
		},
		{
			"name": "PageAPI_TestMapSpecialField",
			"item": [
				{
					"name": "pre_ImportBundleWithSportsPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"sports-page.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/sports-page.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Sports page with Blog contentlet \"10 New Snow Sports to Try This Winter\""
					},
					"response": []
				},
				{
					"name": "Publish archived content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Correct identifier\", function () {",
									"    pm.expect(pm.response.json().entity.identifier).equal(\"0edfee78-2a75-4f3d-bf20-813aae15d4e9\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/8968555814/fire?identifier=0edfee78-2a75-4f3d-bf20-813aae15d4e9",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"8968555814",
								"fire"
							],
							"query": [
								{
									"key": "identifier",
									"value": "0edfee78-2a75-4f3d-bf20-813aae15d4e9"
								}
							]
						},
						"description": "The /sports page in the bundle below needs this content to be published. At this point of the tests it is archived somehow. Publishing it via workflow"
					},
					"response": []
				},
				{
					"name": "Switch site to 'demo.dotcms.com'",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 \", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"",
									"pm.test(\"Valid response\", function () {",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.entity.hostSwitched).equal(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/site/switch/48190c8c-42c4-46af-8d1a-0cd5db894797",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"site",
								"switch",
								"48190c8c-42c4-46af-8d1a-0cd5db894797"
							]
						}
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_MapWithoutArguments_ShouldReturnDepth0RelatedContentAndUnrenderedFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'Page' includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var map = jsonData.data.page.containers[0].containerContentlets[0].contentlets[0]._map;",
									"",
									"    // scalar values",
									"    pm.expect(map.identifier, 'FAILED:[map.identifier]').equal(\"0edfee78-2a75-4f3d-bf20-813aae15d4e9\");",
									"    pm.expect(map.locked, 'FAILED:[map.locked]').equal(false);",
									"    pm.expect(map.stInode, 'FAILED:[map.stInode]').equal(\"799f176a-d32e-4844-a07c-1b5fcd107578\");",
									"    pm.expect(map.contentType, 'FAILED:[map.contentType]').equal(\"Blog\");",
									"    pm.expect(map.urlTitle, 'FAILED:[map.urlTitle]').equal(\"10-new-snow-sports-to-try-this-winter\");",
									"",
									"    pm.expect(map.tags, 'FAILED:[map.tags]').contains(\"snowboarding\");",
									"    pm.expect(map.tags, 'FAILED:[map.tags]').contains(\"winter\");",
									"    pm.expect(map.tags, 'FAILED:[map.tags]').contains(\"snowmobiling\");",
									"    pm.expect(map.tags, 'FAILED:[map.tags]').contains(\"snow sports\");",
									"    pm.expect(map.tags, 'FAILED:[map.tags]').contains(\"skiing\");",
									"    pm.expect(map.tags, 'FAILED:[map.tags]').contains(\"cross-country skiing\");",
									"",
									"    pm.expect(map.folder, 'FAILED:[map.folder]').equal(\"SYSTEM_FOLDER\");",
									"    pm.expect(map.hostName, 'FAILED:[map.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(map.title, 'FAILED:[map.title]').equal(\"10 New Snow Sports to Try This Winter\");",
									"    pm.expect(map.working, 'FAILED:[map.working]').equal(true);",
									"    pm.expect(map.live, 'FAILED:[map.live]').equal(true);",
									"    pm.expect(map.owner, 'FAILED:[map.owner]').equal(\"dotcms.org.1\");",
									"    pm.expect(map.URL_MAP_FOR_CONTENT, 'FAILED:[map.URL_MAP_FOR_CONTENT]').equal(\"/blog/post/10-new-snow-sports-to-try-this-winter\");",
									"    pm.expect(map.modUserName, 'FAILED:[map.modUserName]').equal(\"Admin User\");",
									"    pm.expect(map.urlMap, 'FAILED:[map.urlMap]').equal(\"/blog/post/10-new-snow-sports-to-try-this-winter\");",
									"    pm.expect(map.modUser, 'FAILED:[map.modUser]').equal(\"dotcms.org.1\");",
									"    pm.expect(map.teaser, 'FAILED:[map.teaser]').equal(\"$date - From the tame to the exotic, these alternative winter sports will keep you outside and in shape until all the snow\");",
									"",
									"    pm.expect(map.body, 'FAILED:[map.body]').contains(\"Curabitur egestas mi eget massa maximus\");",
									"",
									"    // related author",
									"    pm.expect(map.author[0], 'FAILED:[map.body]').equal(\"f851e34a-d128-408e-a75a-4fa1c33201b8\");",
									"",
									"    // assertions for File field",
									"    var file = map.myFile;",
									"    pm.expect(file.identifier, 'FAILED:[file.identifier]').equal(\"8dd88708-c600-4366-8a50-9eec2af9091b\");",
									"    pm.expect(file.extension, 'FAILED:[file.extension]').equal(\"jpg\");",
									"    pm.expect(file.description, 'FAILED:[file.description]').equal(\"isalnds-french-polynesia\");",
									"    pm.expect(file.__icon__, 'FAILED:[file.__icon__]').equal(\"jpgIcon\");",
									"    pm.expect(file.mimeType, 'FAILED:[file.mimeType]').equal(\"image/jpeg\");",
									"    pm.expect(file.statusIcons, 'FAILED:[file.statusIcons]').equal(\"<span class='greyDotIcon' style='opacity:.4'></span><span class='liveIcon'></span>\");",
									"    pm.expect(file.type, 'FAILED:[file.type]').equal(\"file_asset\");",
									"    pm.expect(file.path, 'FAILED:[file.path]').equal(\"/images/blogs/\");",
									"    pm.expect(file.size, 'FAILED:[file.size]').equal(102816);",
									"    pm.expect(file.name, 'FAILED:[file.name]').equal(\"isalnds-french-polynesia.jpg\");",
									"    pm.expect(file.width, 'FAILED:[file.width]').equal(780);",
									"    pm.expect(file.underlyingFileName, 'FAILED:[file.underlyingFileName]').equal(\"isalnds-french-polynesia.jpg\");",
									"    pm.expect(file.height, 'FAILED:[file.height]').equal(520);",
									"",
									"    // assertions for File field metadata",
									"    var fileMetadata = file.metaData;",
									"    pm.expect(fileMetadata.path, 'FAILED:[fileMetadata.path]').contains(\"c/5/c5ad88f9-31b3-458b-87ed-64f2c1cf82b5/fileAsset/isalnds-french-polynesia.jpg\");",
									"    pm.expect(fileMetadata.isImage, 'FAILED:[fileMetadata.isImage]').equal(true);",
									"    pm.expect(fileMetadata.sha256, 'FAILED:[fileMetadata.sha256]').equal(\"6c6658a841c3ae9a60d20143d4de6e320664411a9458b92c787b6201136164e5\");",
									"    pm.expect(fileMetadata.fileSize, 'FAILED:[fileMetadata.fileSize]').equal(102816);",
									"    pm.expect(fileMetadata.length, 'FAILED:[fileMetadata.length]').equal(102816);",
									"    pm.expect(fileMetadata.name, 'FAILED:[fileMetadata.name]').equal(\"isalnds-french-polynesia.jpg\");",
									"    pm.expect(fileMetadata.width, 'FAILED:[fileMetadata.width]').equal(780);",
									"    pm.expect(fileMetadata.title, 'FAILED:[fileMetadata.title]').equal(\"isalnds-french-polynesia.jpg\");",
									"    pm.expect(fileMetadata.contentType, 'FAILED:[fileMetadata.contentType]').equal(\"image/jpeg\");",
									"    pm.expect(fileMetadata.height, 'FAILED:[fileMetadata.height]').equal(520);",
									"",
									"    // assertions for Language field",
									"    var language = map.language;",
									"    pm.expect(language.languageId, 'FAILED:[language.identifier]').equal(1);",
									"    pm.expect(language.language, 'FAILED:[language.language]').equal(\"English\");",
									"    pm.expect(language.languageCode, 'FAILED:[language.languageCode]').equal(\"en\");",
									"    pm.expect(language.country, 'FAILED:[language.country]').equal(\"United States\");",
									"    pm.expect(language.countryCode, 'FAILED:[language.countryCode]').equal(\"US\");",
									"    pm.expect(language.languageFlag, 'FAILED:[language.languageFlag]').equal(\"en_US\");",
									"     pm.expect(language.isoCode, 'FAILED:[language.isoCode]').equal(\"en-us\");",
									"",
									"",
									"",
									"    // // rows fields",
									"    // var rows = layout.body.rows;",
									"    // pm.expect(rows.length, 'FAILED:[rows.length]').equal(6);",
									"",
									"    // var row1 = rows[0];",
									"    // pm.expect(row1.styleClass, 'FAILED:[row1.styleClass]').equal(null);",
									"",
									"    // var row1Columns = row1.columns;",
									"    // pm.expect(row1Columns.length, 'FAILED:[row1Columns.length]').equal(1);",
									"",
									"    // var column1 = row1Columns[0];",
									"    // pm.expect(column1.preview, 'FAILED:[column1.preview]').equal(false);",
									"    // pm.expect(column1.width, 'FAILED:[column1.width]').equal(12);",
									"    // pm.expect(column1.widthPercent, 'FAILED:[column1.widthPercent]').equal(100);",
									"    // pm.expect(column1.left, 'FAILED:[column1.left]').equal(0);",
									"    // pm.expect(column1.leftOffset, 'FAILED:[column1.leftOffset]').equal(1);",
									"    // pm.expect(column1.styleClass, 'FAILED:[column1.styleClass]').equal(null);",
									"",
									"    // var containers = column1.containers;",
									"    // pm.expect(containers.length, 'FAILED:[containers.length]').equal(1);",
									"",
									"    // var container1 = containers[0];",
									"    // pm.expect(container1.identifier, 'FAILED:[container1.identifier]').equal(\"5a07f889-4536-4956-aa6e-e7967969ec3f\");",
									"    // pm.expect(container1.uuid, 'FAILED:[container1.uuid]').equal(\"2\");",
									"",
									"    // // sidebar",
									"    // var sidebar = layout.sidebar;",
									"    // pm.expect(sidebar.preview, 'FAILED:[sidebar.preview]').equal(false);",
									"    // pm.expect(sidebar.width, 'FAILED:[sidebar.width]').equal(\"small\");",
									"    // pm.expect(sidebar.widthPercent, 'FAILED:[sidebar.widthPercent]').equal(20);",
									"    // pm.expect(sidebar.location, 'FAILED:[sidebar.location]').equal(\"left\");",
									"",
									"    // var sidebarContainers = sidebar.containers;",
									"    // pm.expect(sidebarContainers.length, 'FAILED:[sidebarContainers.length]').equal(2);",
									"",
									"    // var sidebarContainer1 = sidebarContainers[0];",
									"    // pm.expect(sidebarContainer1.identifier, 'FAILED:[sidebarContainer1.identifier]').equal(\"//demo.dotcms.com/application/containers/default/\");",
									"    // pm.expect(sidebarContainer1.uuid, 'FAILED:[sidebarContainers.uuid]').equal(\"1\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"user-agent": true
						}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "JSESSIONID=1DF38761AD8B360EF1AD42C4AF07EC35",
								"disabled": true
							},
							{
								"key": "User-Agent",
								"type": "text",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url: \"/sports\", pageMode: \"live\", languageId: \"1\") {\n    containers {\n      containerContentlets {\n        uuid\n        contentlets {\n          _map\n        }\n      }\n    }\n  }\n}\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "* Given scenario: given a request to a page by URI, and requesting the special \"_map\" field of the contentlet of the page, without passing any arguments to the \"_map\" field\n\n* Expected result: it should return all map fields, with the proper transformations/expansions for certain field types like file, image, binaries. No field should be rendered and only the identifiers of the related content should be returned (depth: 0)"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "No value for tag field should return empty list",
					"item": [
						{
							"name": "pre_ImportBundleWithContext",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bundle uploaded sucessfully\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"",
											"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"contentWithTags2807.tar.gz\");",
											"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/octet-stream"
									},
									{
										"key": "Content-Disposition",
										"type": "text",
										"value": "attachment"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "resources/GraphQL/contentWithTags2807.tar.gz"
										}
									]
								},
								"url": {
									"raw": "{{serverURL}}/api/bundle?sync=true",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"bundle"
									],
									"query": [
										{
											"key": "sync",
											"value": "true"
										},
										{
											"key": "AUTH_TOKEN",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Imports a Bundle that includes:\n* HTMLPage /sports\nThe page includes the Blog contentlet \"10 New Snow Sports to Try This Winter\""
							},
							"response": []
						},
						{
							"name": "Get Content without tags Should return empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content tag field should be empty list\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[\"ContentWithTags2807Collection\"][0].mytags).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 3000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  ContentWithTags2807Collection(query: \"+identifier: a9ce0b50-4ae8-4bbd-baa6-99f34ba28731\") {\n    title\n    mytags\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/graphql",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"graphql"
									]
								},
								"description": "Given scenario: a piece of content with a tag field but no value for the field\nExpected result: requesting the content should return an empty tag field without errors"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Cats",
			"item": [
				{
					"name": "No value for cats field should return empty list Copy",
					"item": [
						{
							"name": "pre_ImportBundleWithContext",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Bundle uploaded sucessfully\", function () {",
											"    pm.response.to.have.status(200);",
											"",
											"    var jsonData = pm.response.json();",
											"    console.log(jsonData);",
											"",
											"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"contentWithCats2807.tar.gz\");",
											"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "admin@dotcms.com",
											"type": "string"
										},
										{
											"key": "password",
											"value": "admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/octet-stream"
									},
									{
										"key": "Content-Disposition",
										"type": "text",
										"value": "attachment"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "resources/GraphQL/contentWithCats2807.tar.gz"
										}
									]
								},
								"url": {
									"raw": "{{serverURL}}/api/bundle?sync=true",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"bundle"
									],
									"query": [
										{
											"key": "sync",
											"value": "true"
										},
										{
											"key": "AUTH_TOKEN",
											"value": "",
											"disabled": true
										}
									]
								},
								"description": "Imports a Bundle that includes:\n* HTMLPage /sports\nThe page includes the Blog contentlet \"10 New Snow Sports to Try This Winter\""
							},
							"response": []
						},
						{
							"name": "Get Content without cats Should return empty list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Content tag field should be empty list\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.data[\"ContentWithCats2807Collection\"][0].mycats).to.eql([]);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 2000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  ContentWithCats2807Collection(query: \"+identifier: ca55a070-e1b2-4f18-872f-87794fdfbf51\") {\n    title\n    mycats {\n        name\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{serverURL}}/api/v1/graphql",
									"host": [
										"{{serverURL}}"
									],
									"path": [
										"api",
										"v1",
										"graphql"
									]
								},
								"description": "Given scenario: a piece of content with a tag field but no value for the field\nExpected result: requesting the content should return an empty tag field without errors"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Query Cache",
			"item": [
				{
					"name": "dotcachettl",
					"item": [
						{
							"name": "As query param",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										}
									},
									"response": []
								},
								{
									"name": "Save Content v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\",\n       \"name\":\"content v1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Saving new piece of content to test"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: 30s - Return v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=30",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											],
											"query": [
												{
													"key": "dotcachettl",
													"value": "30"
												}
											]
										},
										"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Update Content v1 to v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v2\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"identifier\": \"{{contentIdentifier}}\",\n       \"name\":\"content v2\",\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Updating the content"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: 0 - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=0",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											],
											"query": [
												{
													"key": "dotcachettl",
													"value": "0"
												}
											]
										},
										"description": "* Given scenario: getting the content with dotcachettl=0\n* Expected result: should bypass cache and get content v2"
									},
									"response": []
								},
								{
									"name": "Get Content - No Cache Param - Return v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: getting the content with no cache param\n* Expected result: should hit cache and get content v1"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: -1 - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=-1",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											],
											"query": [
												{
													"key": "dotcachettl",
													"value": "-1"
												}
											]
										},
										"description": "* Given scenario: getting content with dotcachettl=-1\n* Expected result: should bypass cache and get content v2 AND also remove the entry from cache"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: 30s - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=30",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											],
											"query": [
												{
													"key": "dotcachettl",
													"value": "30"
												}
											]
										},
										"description": "* Given scenario: get the content with dotcachettl=30\n* Expected result: get content v2 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Update Content v2 to v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v3\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"identifier\": \"{{contentIdentifier}}\",\n       \"name\":\"content v3\",\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Updates content v2 to v3"
									},
									"response": []
								},
								{
									"name": "Wait Until Expire, Get Content - No Cache Param - Return v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v3\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [40000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: waits until content v2 in cache expires, gets content with no cache param\n* Expected result: should get content v3"
									},
									"response": []
								}
							]
						},
						{
							"name": "As request header",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										}
									},
									"response": []
								},
								{
									"name": "Save Content v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\",\n       \"name\":\"content v1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Saving new piece of content to test"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: 30s - Return v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachettl",
												"value": "30",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Update Content v1 to v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v2\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"identifier\": \"{{contentIdentifier}}\",\n       \"name\":\"content v2\",\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Updating the content"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: 0 - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachettl",
												"value": "0",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: getting the content with dotcachettl=0\n* Expected result: should bypass cache and get content v2"
									},
									"response": []
								},
								{
									"name": "Get Content - No Cache Param - Return v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: getting the content with no cache param\n* Expected result: should hit cache and get content v1"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: -1 - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachettl",
												"value": "-1",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: getting content with dotcachettl=-1\n* Expected result: should bypass cache and get content v2 AND also remove the entry from cache"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: 30s - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachettl",
												"value": "30",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: get the content with dotcachettl=30\n* Expected result: get content v2 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Update Content v2 to v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v3\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"identifier\": \"{{contentIdentifier}}\",\n       \"name\":\"content v3\",\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Updates content v2 to v3"
									},
									"response": []
								},
								{
									"name": "Wait Until Expire, Get Content - No Cache Param - Return v3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v3\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [40000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: waits until content v2 in cache expires, gets content with no cache param\n* Expected result: should get content v3"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "dotcachekey",
					"item": [
						{
							"name": "As query param",
							"item": [
								{
									"name": "As query param",
									"item": [
										{
											"name": "Create ContentType",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();",
															"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "admin",
															"type": "string"
														},
														{
															"key": "username",
															"value": "admin@dotcms.com",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/contenttype",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"contenttype"
													]
												}
											},
											"response": []
										},
										{
											"name": "Save Content v1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Content created properly\", function () {",
															"    pm.expect(jsonData.entity.name).to.eql(\"content v1\");",
															"});",
															"",
															"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\",\n       \"name\":\"content v1\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"workflow",
														"actions",
														"default",
														"fire",
														"PUBLISH"
													],
													"query": [
														{
															"key": "indexPolicy",
															"value": "wait_for"
														}
													]
												},
												"description": "Saving new piece of content to test"
											},
											"response": []
										},
										{
											"name": "Get Content - Cache: 30s with Custom Key - Return v1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get content v1\", function () {",
															"    var jsonData = pm.response.json();",
															"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
															"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=30&dotcachekey=mykeyQP",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"graphql"
													],
													"query": [
														{
															"key": "dotcachettl",
															"value": "30"
														},
														{
															"key": "dotcachekey",
															"value": "mykeyQP"
														}
													]
												},
												"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
											},
											"response": []
										},
										{
											"name": "Update Content v1 to v2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Content created properly\", function () {",
															"    pm.expect(jsonData.entity.name).to.eql(\"content v2\");",
															"});",
															"",
															"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"contentlet\": {\n       \"identifier\": \"{{contentIdentifier}}\",\n       \"name\":\"content v2\",\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\"\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"workflow",
														"actions",
														"default",
														"fire",
														"PUBLISH"
													],
													"query": [
														{
															"key": "indexPolicy",
															"value": "wait_for"
														}
													]
												},
												"description": "Updating the content"
											},
											"response": []
										},
										{
											"name": "Get Content - No Cache Param - Return v2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get content v1\", function () {",
															"    var jsonData = pm.response.json();",
															"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
															"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/graphql",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"graphql"
													]
												},
												"description": "* Given scenario: getting the content with no cache param\n* Expected result: should hit cache and get content v1"
											},
											"response": []
										},
										{
											"name": "Get Content - Only Custom Key - Return v1",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get content v1\", function () {",
															"    var jsonData = pm.response.json();",
															"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
															"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/graphql?dotcachekey=mykeyQP",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"graphql"
													],
													"query": [
														{
															"key": "dotcachekey",
															"value": "mykeyQP"
														}
													]
												},
												"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
											},
											"response": []
										},
										{
											"name": "Get Content - Cache: -1 with Custom Key - Return v2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get content v1\", function () {",
															"    var jsonData = pm.response.json();",
															"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
															"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=-1&dotcachekey=mykeyQP",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"graphql"
													],
													"query": [
														{
															"key": "dotcachettl",
															"value": "-1"
														},
														{
															"key": "dotcachekey",
															"value": "mykeyQP"
														}
													]
												},
												"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
											},
											"response": []
										},
										{
											"name": "Get Content - Only Custom Key - Return v2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Get content v1\", function () {",
															"    var jsonData = pm.response.json();",
															"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
															"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "graphql",
													"graphql": {
														"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
														"variables": ""
													}
												},
												"url": {
													"raw": "{{serverURL}}/api/v1/graphql?dotcachekey=mykeyQP",
													"host": [
														"{{serverURL}}"
													],
													"path": [
														"api",
														"v1",
														"graphql"
													],
													"query": [
														{
															"key": "dotcachekey",
															"value": "mykeyQP"
														}
													]
												},
												"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "As request header",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										}
									},
									"response": []
								},
								{
									"name": "Save Content v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\",\n       \"name\":\"content v1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Saving new piece of content to test"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: 30s with Custom Key - Return v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    console.info(contentTypeVar)",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachettl",
												"value": "30",
												"type": "text"
											},
											{
												"key": "dotcachekey",
												"value": "mykeyRH",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Update Content v1 to v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v2\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"identifier\": \"{{contentIdentifier}}\",\n       \"name\":\"content v2\",\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Updating the content"
									},
									"response": []
								},
								{
									"name": "Get Content - No Cache Param - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: getting the content with no cache param\n* Expected result: should hit cache and get content v1"
									},
									"response": []
								},
								{
									"name": "Get Content - Only Custom Key - Return v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachekey",
												"value": "mykeyRH",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: -1 with Custom Key - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachettl",
												"value": "-1",
												"type": "text"
											},
											{
												"key": "dotcachekey",
												"value": "mykeyRH",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Get Content - Only Custom Key - Return v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "dotcachekey",
												"value": "mykeyRH",
												"type": "text"
											}
										],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											]
										},
										"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "dotcacherefresh",
					"item": [
						{
							"name": "As query param",
							"item": [
								{
									"name": "Create ContentType",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "admin",
													"type": "string"
												},
												{
													"key": "username",
													"value": "admin@dotcms.com",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/contenttype",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"contenttype"
											]
										}
									},
									"response": []
								},
								{
									"name": "Save Content v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v1\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\",\n       \"name\":\"content v1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Saving new piece of content to test"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: TTL 60s - Return v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=60",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											],
											"query": [
												{
													"key": "dotcachettl",
													"value": "60"
												}
											]
										},
										"description": "* Given scenario: get content passing dotcachettl=30\n* Expected result: should fetch content v1 and put it into cache for 30 seconds"
									},
									"response": []
								},
								{
									"name": "Update Content v1 to v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Content created properly\", function () {",
													"    pm.expect(jsonData.entity.name).to.eql(\"content v2\");",
													"});",
													"",
													"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"contentlet\": {\n       \"identifier\": \"{{contentIdentifier}}\",\n       \"name\":\"content v2\",\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"contentHost\":\"demo.dotcms.com\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"1\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"workflow",
												"actions",
												"default",
												"fire",
												"PUBLISH"
											],
											"query": [
												{
													"key": "indexPolicy",
													"value": "wait_for"
												}
											]
										},
										"description": "Updating the content"
									},
									"response": []
								},
								{
									"name": "Get Content - Cache: TTL 60s & Return true - v1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v1\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v1\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [70000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=60&dotcacherefresh=true",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											],
											"query": [
												{
													"key": "dotcachettl",
													"value": "60"
												},
												{
													"key": "dotcacherefresh",
													"value": "true"
												}
											]
										},
										"description": "* Given scenario: getting the content with dotcachettl=0\n* Expected result: should bypass cache and get content v2"
									},
									"response": []
								},
								{
									"name": "Wait 10s - Get Content - Cache: TTL 60s & Return true - v2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Get content v2\", function () {",
													"    var jsonData = pm.response.json();",
													"    var contentTypeVar = pm.collectionVariables.get(\"contentTypeVariable\")",
													"    pm.expect(jsonData.data[contentTypeVar+\"Collection\"][0].name).to.eql(\"content v2\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"setTimeout(function(){}, [10000]);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "graphql",
											"graphql": {
												"query": "{\n  {{contentTypeVariable}}Collection(query: \"+identifier: {{contentIdentifier}}\") {\n    name\n  }\n}",
												"variables": ""
											}
										},
										"url": {
											"raw": "{{serverURL}}/api/v1/graphql?dotcachettl=60",
											"host": [
												"{{serverURL}}"
											],
											"path": [
												"api",
												"v1",
												"graphql"
											],
											"query": [
												{
													"key": "dotcachettl",
													"value": "60"
												}
											]
										},
										"description": "* Given scenario: getting the content with dotcachettl=0\n* Expected result: should bypass cache and get content v2"
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Tests For New StoryBlockField",
			"item": [
				{
					"name": "Create ContentType with StoryBlockField Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var contentType = jsonData.entity[0];",
									"pm.collectionVariables.set(\"contentTypeIdWithStoryBlock\", contentType.id);",
									"pm.collectionVariables.set(\"contentTypeVarNameWithStoryBlock\", contentType.variable);",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Content Type should have 2 fields\", function() {",
									"    pm.expect(contentType.fields.length).to.eql(2);",
									"});",
									"pm.test(\"Content Type has a Story_block_field\", function() {",
									"    pm.expect(contentType.fields[1].fieldType).to.eql(\"Story-Block\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"defaultType\":false,\n    \"fixed\":false,\n    \"system\":false,\n    \"clazz\":\"com.dotcms.contenttype.model.type.ImmutableSimpleContentType\",\n    \"description\":\"\",\n    \"host\": \"SYSTEM_HOST\",\n    \"folder\":\"SYSTEM_FOLDER\",\n    \"name\":\"TestContentTypeWithStoryBlockField\",\n    \"systemActionMappings\":{\"NEW\":\"\"},\n    \"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n    \"fields\" : [\n        {\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"title\",\n\t\t\t\"variable\": \"title\",\n\t\t\t\"fixed\": true\n\t\t},\n        {\n            \"clazz\":\"com.dotcms.contenttype.model.field.ImmutableStoryBlockField\",\n            \"required\":false,\n            \"name\":\"block\",\n            \"defaultValue\":\"\",\n            \"hint\":\"\",\n            \"searchable\":true\n            }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						},
						"description": "Creates a contentType with 2 fields:\n- A text field named Title\n- A story block field named block"
					},
					"response": []
				},
				{
					"name": "Create contentlet with StoryBlockField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Contentlet StoryBlock has value\", function() {",
									"    pm.expect(jsonData.entity.block.content[0].content[0].text).contains(\"Wow, this editor instance exports its content as JSON\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n        \"contentType\": \"{{contentTypeIdWithStoryBlock}}\",\n        \"name\": \"test with data block field\",\n        \"title\": \"test with data block field\",\n        \"block\": \"{\\\"type\\\": \\\"doc\\\",\\\"content\\\": [{\\\"type\\\": \\\"paragraph\\\",\\\"content\\\": [{\\\"type\\\": \\\"text\\\",\\\"text\\\": \\\"Wow, this editor instance exports its content as JSON.\\\"}]}]}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Content With StoryBlock via GraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"var collectionName = pm.collectionVariables.get(\"contentTypeVarNameWithStoryBlock\")+\"Collection\"",
									"",
									"pm.test(\"Content has the correct value at the json property\", function () {",
									"    pm.expect(jsonData.data[collectionName][0].block.json).to.not.eql(undefined);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVarNameWithStoryBlock}}Collection(limit: 20) {\n    identifier\n    title\n    block{\n        json\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "checks if the correct values were pulled via GraphQL.\n- Render should bring html code\n- Json should not bring render code."
					},
					"response": []
				},
				{
					"name": "Create contentlet with Empty StoryBlockField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.test(\"Status code should be 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Contentlet StoryBlock has no value\", function() {",
									"    console.log(jsonData.entity);",
									"    pm.expect(jsonData.entity.block).equals(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "saveHelperData",
									"type": "any"
								},
								{
									"key": "showPassword",
									"value": false,
									"type": "boolean"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n        \"contentType\": \"{{contentTypeIdWithStoryBlock}}\",\n        \"name\": \"test with data block field\",\n        \"title\": \"test with data block field\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Content With Empty StoryBlock via GraphQL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"var collectionName = pm.collectionVariables.get(\"contentTypeVarNameWithStoryBlock\")+\"Collection\"",
									"",
									"pm.test(\"Content has the correct value at the json property\", function () {",
									"    pm.expect(jsonData.data[collectionName][0].block.json).to.be.eql({});",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVarNameWithStoryBlock}}Collection(limit: 20) {\n    identifier\n    title\n    block{\n        json\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "checks if the correct values were pulled via GraphQL.\n- Render should bring html code\n- Json should not bring render code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Disallow Introspection Query",
			"item": [
				{
					"name": "Introspection Query Authenticated User request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has Multiple validation errors \", function () {",
									"    const jsonData = pm.response.json();    ",
									"    console.log(jsonData.errors);  ",
									"    pm.expect(jsonData.errors).eqls(undefined);",
									"     pm.expect(jsonData.data).not.eqls(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query IntrospectionQuery {\n      __schema {\n\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n\n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n\n\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "In this request again we send the IntrospectionQuery paired with valid authentication credentials. In both cases the response is a 200 but this time. It comes back with data and no errors are reported."
					},
					"response": []
				},
				{
					"name": "invalidateSession",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{serverURL}}/api/v1/logout",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"logout"
							]
						},
						"description": "We need to logout to validate the Anonymous request."
					},
					"response": []
				},
				{
					"name": "Introspection Query Anonymous Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has Multiple validation errors \", function () {",
									"    const jsonData = pm.response.json();    ",
									"    console.log(jsonData.errors);  ",
									"    pm.expect(jsonData.errors.length).greaterThan(0);",
									"     pm.expect(jsonData.data).eqls(null);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query IntrospectionQuery {\n      __schema {\n\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          description\n\n          locations\n          args {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      description\n\n      fields(includeDeprecated: true) {\n        name\n        description\n        args {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        description\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      description\n      type { ...TypeRef }\n      defaultValue\n\n\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Given JSONField should return as JSON",
			"item": [
				{
					"name": "pre_ImportBundleWithContent",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"contentWithJSON.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/contentWithJSON.tar.gz"
								}
							]
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n\n*   A piece of content with a JSONField"
					},
					"response": []
				},
				{
					"name": "Get Content With JSONField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Content has the correct value at the json property\", function () {",
									"    pm.expect(jsonData.data.ExperimentCollection[0].trafficProportion.type).to.be.eql(\"SPLIT_EVENLY\");",
									"    pm.expect(jsonData.data.ExperimentCollection[0].trafficProportion.variants[0].name).to.be.eql(\"default\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 3000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n   ExperimentCollection {\n\t\tname\n\t\tdescription\n\t\ttrafficAllocation\n\t\ttrafficProportion\n\t\t\n\t}\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						},
						"description": "checks if the correct values were pulled via GraphQL.\n- Render should bring html code\n- Json should not bring render code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "languageId",
			"value": ""
		},
		{
			"key": "contentTypeVariable",
			"value": ""
		},
		{
			"key": "contentIdentifier",
			"value": ""
		},
		{
			"key": "imageTypeInfo",
			"value": ""
		},
		{
			"key": "videoTypeInfo",
			"value": ""
		},
		{
			"key": "fileImageContentTypeVariable",
			"value": ""
		},
		{
			"key": "imageFieldVariable",
			"value": ""
		},
		{
			"key": "fileFieldVariable",
			"value": ""
		},
		{
			"key": "fileContentIdentifier",
			"value": ""
		},
		{
			"key": "imageContentIdentifier",
			"value": ""
		},
		{
			"key": "childContentTypeVariable",
			"value": ""
		},
		{
			"key": "parentContentTypeVariable",
			"value": ""
		},
		{
			"key": "relFieldVariable",
			"value": ""
		},
		{
			"key": "childContentIdentifier",
			"value": ""
		},
		{
			"key": "parentContentIdentifier",
			"value": ""
		},
		{
			"key": "contentTypeIdWithStoryBlock",
			"value": ""
		},
		{
			"key": "contentTypeVarNameWithStoryBlock",
			"value": ""
		}
	]
}