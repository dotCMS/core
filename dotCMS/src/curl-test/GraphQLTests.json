{
	"info": {
		"_postman_id": "8ebdc33c-110c-4f94-adf0-6d4844cc5ee1",
		"name": "GraphQL",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Page API",
			"item": [
				{
					"name": "pre_ImportBundleWithContext",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7ce458d-7749-4ce1-9655-c3d9c0ae5cf0",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"assets.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/assets.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* HTMLPage /blog/index\n* HTMLPage /blog/destinations/costa-rica\n* Contentlet [Blog] Ecotourism in Costa Rica\n* Blog Detail Page /blog/blog-detail"
					},
					"response": []
				},
				{
					"name": "GivenRequestByURI_ShouldReturnExpectedPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74c6a123-8fe9-4477-ae63-877b1183abb7",
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"'page' element includes all properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.page;",
									"",
									"    pm.expect(page[\"__icon__\"]).equal(\"pageIcon\");",
									"    pm.expect(page[\"archived\"], 'FAILED:[archived]').equal(false);",
									"    pm.expect(page[\"baseType\"]).equal(\"HTMLPAGE\");",
									"    pm.expect(page[\"cachettl\"]).equal(\"0\");",
									"    pm.expect(page[\"canEdit\"], 'FAILED:[canEdit]').equal(true);",
									"    pm.expect(page[\"canLock\"], 'FAILED:[canLock]').equal(true);",
									"    pm.expect(page[\"canRead\"], 'FAILED:[canRead]').equal(true);",
									"    pm.expect(page[\"deleted\"], 'FAILED:[deleted]').equal(false);",
									"    pm.expect(page[\"description\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"extension\"]).equal(\"page\");",
									"    pm.expect(page[\"folder\"].folderId).equal(\"6c8a2ac4-36a7-4b01-b9c0-c2c1d91ddfdb\");",
									"    pm.expect(page[\"folder\"].folderName).equal(\"destinations\");",
									"    pm.expect(page[\"friendlyName\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"hasLiveVersion\"], 'FAILED:[hasLiveVersion]').equal(true);",
									"    pm.expect(page[\"hasTitleImage\"], 'FAILED:[hasTitleImage]').equal(true);",
									"    pm.expect(page[\"host\"].identifier).equal(\"48190c8c-42c4-46af-8d1a-0cd5db894797\");",
									"    pm.expect(page[\"host\"].hostName).equal(\"demo.dotcms.com\");",
									"    ////",
									"    pm.expect(page[\"httpsRequired\"], 'FAILED:[httpsRequired]').equal(false);",
									"    pm.expect(page[\"identifier\"]).equal(\"bec7b960-a8bf-4f14-a22b-0d94caf217f0\");",
									"    pm.expect(page[\"isContentlet\"], 'FAILED:[isContentlet]').equal(true);",
									"    pm.expect(page[\"conLanguage\"].id).equal(1);",
									"    pm.expect(page[\"live\"], 'FAILED:[live]').equal(true);",
									"    pm.expect(page[\"liveInode\"]).not.equal(null)",
									"    pm.expect(page[\"locked\"], 'FAILED:[locked]').equal(false);",
									"    pm.expect(page[\"mimeType\"]).equal(\"application/dotpage\");",
									"    pm.expect(page[\"modDate\"]).not.equal(null)",
									"    ///",
									"    pm.expect(page[\"modUser\"].userId).equal(\"system\");",
									"    pm.expect(page[\"modUser\"].firstName).equal(\"system user\");",
									"    pm.expect(page[\"modUser\"].lastName).equal(\"system user\");",
									"    pm.expect(page[\"name\"]).equal(\"costa-rica\");",
									"    pm.expect(page[\"owner\"].userId).equal(\"dotcms.org.1\");",
									"    pm.expect(page[\"pageURI\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"pageUrl\"]).equal(\"costa-rica\");",
									"    pm.expect(page[\"path\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"publishDate\"]).not.equal(null)",
									"    pm.expect(page[\"seoTitle\"]).equal(\"Costa Rica Travel Destinations\");",
									"    pm.expect(page[\"seodescription\"]).equal(\"Visit Costa Rica a rugged, rainforested Central American country with coastlines on the Caribbean and Pacific.\");",
									"    pm.expect(page[\"shortDescription\"]).equal(\"Costa Rica is a rugged, rainforested Central American country with coastlines on the Caribbean and Pacific. Costa Rica is known for its beaches, volcanoes, and biodiversity. Roughly a quarter of its area is made up of protected jungle, teeming with wildlife including spider monkeys and quetzal birds.\");",
									"    pm.expect(page[\"shortyLive\"]).not.equal(null)",
									"    //",
									"    pm.expect(page[\"shortyWorking\"]).not.equal(null)",
									"    // pm.expect(page[\"sortOrder\"]).equal(0);",
									"    pm.expect(page[\"stInode\"]).equal(\"91812c8b-0441-4139-8d4d-7423cfb0e979\");",
									"    pm.expect(page[\"statusIcons\"]).equal(\"<span class='greyDotIcon' style='opacity:.4'></span><span class='liveIcon'></span>\");",
									"    pm.expect(page[\"tags\"]).equal(\"diving\");",
									"    pm.expect(page[\"template\"]).equal(\"0c556e37-99e0-4458-a2cd-d42cc7a11045\");",
									"    pm.expect(page[\"title\"]).equal(\"Costa Rica Rain Forest\");",
									"    pm.expect(page[\"titleImage\"].name).equal(\"costa-rica-tree-frog.jpg\");",
									"    pm.expect(page[\"titleImage\"].versionPath).not.equal(null)",
									"    pm.expect(page[\"type\"]).equal(\"htmlpage\");",
									"    pm.expect(page[\"url\"]).equal(\"/destinations/costa-rica\");",
									"    pm.expect(page[\"working\"], 'FAILED:[working]').equal(true);",
									"    pm.expect(page[\"workingInode\"]).not.equal(null)",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  page(url:\"/destinations/costa-rica\") {\n    __icon__\n    archived\n    baseType\n    cachettl\n    canEdit\n    canLock\n    canRead\n    contentType\n    deleted\n    description\n    extension\n    friendlyName\n    folder {\n      folderId\n      folderName\n    }\n    hasLiveVersion\n    hasTitleImage\n    host {\n      identifier\n      hostName\n    }\n    httpsRequired\n    identifier\n    image\n    imageContentAsset\n    imageVersion\n    inode\n    isContentlet\n    conLanguage {\n      id\n    }\n    live\n    liveInode\n    locked\n    mimeType\n    modDate\n    modUser {\n      userId\n      firstName\n      lastName\n    }\n    name\n    owner {\n      userId\n    }\n    pageURI\n    pageUrl\n    path\n    publishDate\n    seoTitle\n    seodescription\n    shortDescription\n    shortyLive\n    shortyWorking\n    sortOrder\n    stInode \n    statusIcons\n    tags\n    template\n    title\n    titleImage {\n      name\n      idPath\n      versionPath\n    }\n    type\n    url\n    working\n    workingInode\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test BaseType fields ",
			"item": [
				{
					"name": "pre_ImportBundleWithPersonas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f53bc11-d480-4feb-a011-4e10b9cffd0e",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"personas.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/personas.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithKeyValue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80116f04-0625-4544-a952-180cd5e78c3a",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"keyvalue.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/keyvalue.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithVanityUrl",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c12b9f4d-6f4c-4068-b38e-1ad8d2b64710",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"vanity.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/vanity.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Vanity URL"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithDotAsset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6b19625f-015c-40ef-8c6e-ae65895ba6aa",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"dotasset.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/dotasset.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* DotAsset"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d28d0656-61ee-41fe-b14a-95e0909c23b6",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"fileasset.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/fileasset.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Blog page"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithFileasset",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51028aad-acb6-4543-96a4-dc95881bb850",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"page.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/fileasset.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Blog page"
					},
					"response": []
				},
				{
					"name": "pre_ImportBundleWithWidget",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1526eba-52b6-47f5-9b9b-c54a9d03245d",
								"exec": [
									"pm.test(\"Bundle uploaded sucessfully\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData);",
									"",
									"    pm.expect(jsonData[\"bundleName\"]).to.eql(\"widget.tar.gz\");",
									"    pm.expect(jsonData[\"status\"]).to.eql(\"SUCCESS\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/octet-stream"
							},
							{
								"key": "Content-Disposition",
								"type": "text",
								"value": "attachment"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/widget.tar.gz"
								}
							],
							"options": {
								"formdata": {}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/bundle?sync=true",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"bundle"
							],
							"query": [
								{
									"key": "sync",
									"value": "true"
								},
								{
									"key": "AUTH_TOKEN",
									"value": "",
									"disabled": true
								}
							]
						},
						"description": "Imports a Bundle that includes:\n* Imports personas"
					},
					"response": []
				},
				{
					"name": "RequestPageBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fff3e00-260e-4748-992c-e351ae010266",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'PageBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.PageBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"title\"], 'FAILED:[title]').equal(\"Blogs\");",
									"    pm.expect(page[\"url\"], 'FAILED:[url]').equal(\"/blog/index\");",
									"    pm.expect(page.hostFolder.hostName, 'FAILED:[hostFolder.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(page.hostFolder.folderName, 'FAILED:[hostFolder.folderName]').equal(\"blog\");",
									"    pm.expect(page.template, 'FAILED:[template]').equal(\"64269d16-2710-4919-88ec-3b09c89ea004\");",
									"    pm.expect(page.showOnMenu.length, 'FAILED:[showOnMenu]').to.eql(0);",
									"    pm.expect(page[\"sortOrder\"], 'FAILED:[sortOrder]').equal(0);",
									"    pm.expect(page[\"cachettl\"], 'FAILED:[cachettl]').equal(\"0\");",
									"    pm.expect(page[\"friendlyName\"], 'FAILED:[friendlyName]').equal(\"Blog\");",
									"    pm.expect(page[\"redirecturl\"], 'FAILED:[redirecturl]').equal(null);",
									"    pm.expect(page.httpsreq.length, 'FAILED:[httpsreq]').to.eql(0);",
									"    pm.expect(page[\"seodescription\"], 'FAILED:[seodescription]').equal(\"Help understanding your financial future and hoe Quest Financial and our advisors and help you plan for tomorrow with confidence\");",
									"    pm.expect(page[\"seokeywords\"], 'FAILED:[seokeywords]').equal(\"Financial Blog\");",
									"    pm.expect(page[\"pagemetadata\"], 'FAILED:[pagemetadata]').equal(null); ",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  PageBaseTypeCollection(query:\"+identifier:9c5f42da-31b1-4935-9df6-153f5de1bdf2\") {\n    title\n    url\n    hostFolder {\n      hostName\n      folderName\n    }\n    template\n    showOnMenu\n    sortOrder\n    cachettl\n    friendlyName\n    redirecturl\n    httpsreq\n    seodescription\n    seokeywords\n    pagemetadata\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestPersonaBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "31904990-e291-44ae-9ade-478858cc2979",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'PersonaBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.PersonaBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"name\"], 'FAILED:[name]').equal(\"Ocean Enthusiast\");",
									"    pm.expect(page[\"keyTag\"], 'FAILED:[keyTag]').equal(\"OceanEnthusiast\");",
									"    pm.expect(page.hostFolder.hostName, 'FAILED:[hostFolder.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(page.hostFolder.folderName, 'FAILED:[hostFolder.folderName]').equal(\"system folder\");",
									"    pm.expect(page.tags.length, 'FAILED:[tags]').to.eql(4);",
									"    pm.expect(page[\"description\"], 'FAILED:[description]').equal(\"People who typically vacation around water sports such as surfing, wind surfing, etc.\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  PersonaBaseTypeCollection(query:\"+identifier:d948d85c-3bc8-4d85-b0aa-0e989b9ae235\") {\n    name\n    hostFolder {\n      hostName\n      folderName\n    }\n    keyTag\n    photo {\n      name\n    }\n    tags\n    description\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestFileAssetBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e1cd8656-c620-48c2-8f18-4872da53526d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'FileBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.FileBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"title\"], 'FAILED:[title]').equal(\"plugins.css\");",
									"    pm.expect(page.hostFolder.hostName, 'FAILED:[hostFolder.hostName]').equal(\"demo.dotcms.com\");",
									"    pm.expect(page.hostFolder.folderName, 'FAILED:[hostFolder.folderName]').equal(\"plugins\");",
									"    pm.expect(page.fileName, 'FAILED:[fileName]').equal(\"plugins.css\");",
									"    pm.expect(page.fileAsset.name, 'FAILED:[fileAsset.name]').equal(\"plugins.css\");",
									"    pm.expect(page.metaData[0].key, 'FAILED:[metaData.key]').equal(\"content\");",
									"    pm.expect(page.metaData[0].value, 'FAILED:[metaData.value]').equal(\"/*!\\n * Bootstrap v4.1.0 (https://getbootstrap.com/)\\n * Copyright 2011-2018 The Bootstrap Authors\\n * Copyright 2011-2018 Twitter, Inc.\\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\\n */:root{--blue: #007bff;--indigo: #6610f2;--purple: #6f42c1;--pink: #e83e8c;--red: #dc3545;--orange: #fd7e14;--yellow: #ffc107;--green: #28a745;--teal: #20c997;--cyan: #17a2b8;--white: #fff;--gray: #6c757d;--gray-dark: #343a40;--primary: #007bff;--secondary: #6c757d;--success: #28a745;--info: #17a2b8;--warning: #ffc107;--danger: #dc3545;--light: #f8f9fa;--dark: #343a40;--breakpoint-xs: 0;--breakpoint-sm: 576px;--breakpoint-md: 768px;--breakpoint-lg: 992px;--breakpoint-xl: 1200px;--font-family-sans-serif: -apple-system, BlinkMacSystemFont, \\\"Segoe UI\\\", Roboto, \\\"Helvetica Neue\\\", Arial, sans-serif, \\\"Apple Color Emoji\\\", \\\"Segoe UI Emoji\\\", \\\"Segoe UI Symbol\\\";--font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, \\\"Liberation Mono\\\", \\\"Courier New\\\", monospace}*,*::before,*::after{box-sizing:border-box}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:rgba(0,0,0,0)}@-ms-viewport{width:device-width}article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,\\\"Segoe UI\\\",Roboto,\\\"Helvetica Neue\\\",Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\",\\\"Segoe UI Symbol\\\";font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}[tabindex=\\\"-1\\\"]:focus{outline:0 !important}hr{box-sizing:content-box;height:0;overflow:visible}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}abbr[title],abbr[data-original-title]{text-decoration:underline;text-decoration:underline dotted;cursor:help;border-bottom:0}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul,dl{margin-top:0;margin-bottom:1rem}ol ol,ul ul,ol ul,ul ol{margin-bottom:0}dt{font-weight:700}dd{margin-bottom:.5rem;margin-left:0}blockquote{margin:0 0 1rem}dfn{font-style:italic}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{position:relative;font-size:75%;line-height:0;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}a{color:#007bff;text-decoration:none;background-color:transparent;-webkit-text-decoration-skip:objects}a:hover{color:#0056b3;text-decoration:underline}a:not([href]):not([tabindex]){color:inherit;text-decoration:none}a:not([href]):not([tabindex]):hover,a:not([href]):not([tabindex]):focus{color:inherit;text-decoration:none}a:not([href]):not([tabindex]):focus{outline:0}pre,code,kbd,samp{font-family:monospace,monospace;font-size:1em}pre{margin-top:0;margin-bottom:1rem;overflow:auto;-ms-overflow-style:scrollbar}figure{margin:0 0 1rem}img{vertical-align:middle;border-style:none}svg:not(:root){overflow:hidden}table{border-collapse:collapse}caption{padding-top:.75rem;padding-bottom:.75rem;color:#6c757d;text-align:left;caption-side:bottom}th{text-align:inherit}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}button:focus{outline:1px dotted;outline:5px auto -webkit-focus-ring-color}input,button,select,optgroup,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}button,html [type=button],[type=reset],[type=submit]{-webkit-appearance:button}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{padding:0;border-style:none}input[type=radio],input[type=checkbox]{box-sizing:border-box;padding:0}input[type=date],input[type=time],input[type=datetime-local],input[type=month]{-webkit-appearance:listbox}textarea{overflow:auto;resize:vertical}fieldset{min-width:0;padding:0;margin:0;border:0}legend{display:block;width:100%;max-width:100%;padding:0;margin-bottom:.5rem;font-size:1.5rem;line-height:inherit;color:inherit;white-space:normal}progress{vertical-align:baseline}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px;-webkit-appearance:none}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{font:inherit;-webkit-appearance:button}output{display:inline-block}summary{display:list-item;cursor:pointer}template{display:none}[hidden]{display:none !important}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{margin-bottom:.5rem;font-family:inherit;font-weight:500;line-height:1.2;color:inherit}h1,.h1{font-size:2.5rem}h2,.h2{font-size:2rem}h3,.h3{font-size:1.75rem}h4,.h4{font-size:1.5rem}h5,.h5{font-size:1.25rem}h6,.h6{font-size:1rem}.lead{font-size:1.25rem;font-weight:300}.display-1{font-size:6rem;font-weight:300;line-height:1.2}.display-2{font-size:5.5rem;font-weight:300;line-height:1.2}.display-3{font-size:4.5rem;font-weight:300;line-height:1.2}.display-4{font-size:3.5rem;font-weight:300;line-height:1.2}hr{margin-top:1rem;margin-bottom:1rem;border:0;border-top:1px solid rg\");",
									"    pm.expect(page.showOnMenu.length, 'FAILED:[showOnMenu]').to.eql(0);",
									"    pm.expect(page.sortOrder, 'FAILED:[sortOrder]').to.eql(0);",
									"    pm.expect(page.description, 'FAILED:[description]').to.eql(\"plugins\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  FileBaseTypeCollection(query:\"+identifier:0e480a8c-48bf-45a9-81b0-c8e2dd8aabd2\") {\n    title\n    hostFolder {\n      hostName\n      folderName\n    }\n    fileName\n    fileAsset {\n      name\n    }\n    metaData {\n      key\n      value\n    }\n    showOnMenu\n    sortOrder\n    description\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestKeyValueBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bfea9fd-07c6-4449-8991-56451e38eb0a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'KeyValueBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.KeyValueBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"key\"], 'FAILED:[key]').equal(\"key1\");",
									"    pm.expect(page[\"value\"], 'FAILED:[key]').equal(\"value1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  KeyValueBaseTypeCollection(query:\"+identifier:7c4be356-0feb-4aa8-9081-c89ceba0212d\") {\n    key\n    value\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestWidgetBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d47a71d5-c7dd-4cfd-a83c-45566f580cb5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'WidgetBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.WidgetBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"widgetTitle\"], 'FAILED:[widgetTitle]').equal(\"Costa Rica FAQ\");",
									"    pm.expect(page[\"widgetCode\"], 'FAILED:[widgetCode]').equal(\"#dotParse(\\\"/application/vtl/faq/faq-widget.vtl\\\")\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  WidgetBaseTypeCollection(query:\"+identifier:7c9cb3a7-bb68-4fd0-b21d-03ec4be491a7\") {\n    widgetTitle\n    widgetCode\n    \n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestVanityURLBaseType_ReturnsAllFields Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a47cc911-35c1-403e-a4bf-f0a539ab8cc2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'VanityURLBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.VanityURLBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"title\"], 'FAILED:[title]').equal(\"404 Error Page\");",
									"    pm.expect(page[\"site\"], 'FAILED:[site]').equal(\"48190c8c-42c4-46af-8d1a-0cd5db894797\");",
									"    pm.expect(page[\"uri\"], 'FAILED:[uri]').equal(\"/cms404Page\");",
									"    pm.expect(page[\"action\"], 'FAILED:[action]').equal(\"200\");",
									"    pm.expect(page[\"forwardTo\"], 'FAILED:[forwardTo]').equal(\"/404-error\");",
									"    pm.expect(page[\"order\"], 'FAILED:[order]').equal(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  VanityURLBaseTypeCollection(query:\"+identifier:651a4dc8-2124-45d8-8bd2-d8e68ad358a8\") {\n    title\n    site\n    uri\n    action\n    forwardTo\n    order\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestDotAssetBaseType_ReturnsAllFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "435a011a-3dfe-4848-94fa-c303673badc5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"'DotAssetBaseTypeCollection' includes all fields\", function () {",
									"    var jsonData = pm.response.json();",
									"    var page = jsonData.data.DotAssetBaseTypeCollection[0];",
									"",
									"    pm.expect(page[\"asset\"].name, 'FAILED:[asset]').equal(\"james.jpeg\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  DotAssetBaseTypeCollection(query:\"+identifier:875de0bd-8cbb-45fb-8daa-dc82c12c0d57 \") {\n    asset {\n      name\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Get content in new Language",
			"item": [
				{
					"name": "Create new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b0d7f45a-38fa-4230-9b5b-e370cad0a87a",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"languageId\", jsonData.entity.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"languageCode\":\"it\",\n\t\"language\":\"Italian\", \n\t\"countryCode\":\"IT\", \n\t\"country\":\"Italy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v2/languages",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v2",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11cff9ca-b5d7-44d0-a36d-f4a1d9613a4c",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Structure\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Structure {{$randomBankAccount}}\",\n\t\"variable\": \"myStructure{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Content in new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d93b684a-c5a6-4794-8c5d-9d3faa57ea2d",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"title\":\"Content in Italian\", \n       \"contentHost\":\"demo.dotcms.com\",\n       \"body\":\"This is a content in Italian\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"{{languageId}}\",\n       \"name\":\"whatever\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "indexPolicy",
									"value": "wait_for"
								}
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Get New Language Should Succeed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0ccfb65-eed7-4957-b0cf-509296b1cfbb",
								"exec": [
									"pm.test(\"Content in new Language should be retrieved\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(jsonData)",
									"    var contentIdentifier = pm.collectionVariables.get(\"contentIdentifier\")",
									"    var collectionName = pm.collectionVariables.get(\"contentTypeVariable\")+\"Collection\"",
									"    pm.expect(jsonData.data[collectionName][0].identifier).to.eql(contentIdentifier);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVariable}}Collection(limit: 20) {\n    identifier\n    conLanguage {\n      id\n      languageCode\n      country\n      countryCode\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Test GraphQL Image Field fields ",
			"item": [
				{
					"name": "Create Image ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "88c92ddb-bd41-4abb-bd39-314c0c2d95dd",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"imageContentTypeVariable\", jsonData.entity[0].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"defaultType\": false,\n  \"fixed\": false,\n  \"system\": false,\n  \"clazz\": \"com.dotcms.contenttype.model.type.ImmutableFileAssetContentType\",\n  \"description\": \"\",\n  \"host\": \"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n  \"folder\": \"SYSTEM_FOLDER\",\n  \"name\": \"myImageType{{$randomBankAccount}}\",\n  \"systemActionMappings\": {\n    \"NEW\": \"\"\n  },\n  \"workflow\": [\n    \"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"\n  ]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f2d75aa1-040b-4f5e-8e76-2858ce83563d",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
									"",
									"pm.collectionVariables.set(\"imageFieldVariable\", jsonData.entity[0].fields[1].variable);",
									"",
									"pm.collectionVariables.set(\"fileFieldVariable\", jsonData.entity[0].fields[2].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Type {{$randomBankAccount}}\",\n\t\"host\": \"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n\t\"fixed\": false,\n\t\"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 1,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"fixed\": true\n\t\t}, \n\t\t{\n              \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableImageField\",\n              \"dataType\": \"TEXT\",\n              \"fieldType\": \"Image\",\n              \"fieldTypeLabel\": \"Image\",\n              \"fieldVariables\": [],\n              \"fixed\": false,\n              \"iDate\": 1585605564000,\n              \"indexed\": false,\n              \"listed\": false,\n              \"modDate\": 1585605564000,\n              \"name\": \"myImage\",\n              \"readOnly\": false,\n              \"required\": false,\n              \"searchable\": false,\n              \"sortOrder\": 2,\n              \"unique\": false\n       },\n\t   {\n\t\t      \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFileField\",\n\t\t      \"name\": \"myFile\",\n\t\t      \"required\": false,\n\t\t      \"hint\": \"\"\n\t   }\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Image Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59ef896e-c8d5-494d-aff9-973197df63ca",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"imageContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "141f88b9-e401-4a7c-a477-96b173f13642",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json",
									"value": "{\n    \"contentlet\": {\n       \"contentType\":\"{{imageContentTypeVariable}}\",\n       \"title\":\"My Image\", \n       \"hostFolder\":\"default\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"showOnMenu\":\"true\",\n       \"sortOrder\":2\n    }\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/Test_GraphQL_Image_Field_fields/tommylee18005.jpeg"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Create File Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "974446be-0beb-4bed-af7a-db9195f0bc86",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"fileContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "json",
									"value": "{\n    \"contentlet\": {\n       \"contentType\":\"{{imageContentTypeVariable}}\",\n       \"title\":\"My Image\", \n       \"hostFolder\":\"default\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"showOnMenu\":\"true\",\n       \"sortOrder\":\"2\"\n    }\n}",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "resources/GraphQL/Test_GraphQL_Image_Field_fields/Readme18005.md"
								}
							],
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Create Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c9e38ef-0ed8-4b2b-a354-dfd2e823c32f",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"contentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{contentTypeVariable}}\",\n       \"name\":\"Content With Image\", \n       \"contentHost\":\"default\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"{{imageFieldVariable}}\":\"{{imageContentIdentifier}}\",\n       \"{{fileFieldVariable}}\":\"{{fileContentIdentifier}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Request content with Image field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e6ec58b-9957-48c6-a96c-a7eb2efb7a04",
								"exec": [
									"var jsonData = pm.response.json();",
									"var imageFieldVariable = pm.collectionVariables.get(\"imageFieldVariable\");",
									"var fileFieldVariable = pm.collectionVariables.get(\"fileFieldVariable\");",
									"var jsonData = pm.response.json();",
									"var contentIdentifier = pm.collectionVariables.get(\"contentIdentifier\")",
									"var collectionName = pm.collectionVariables.get(\"contentTypeVariable\")+\"Collection\"",
									"",
									"pm.test(\"Image Field attributes should be present\", function () {",
									"     // image field",
									"    var imageFieldJson = jsonData.data[collectionName][0][imageFieldVariable];",
									"    ",
									"    // general attributes",
									"    pm.expect(imageFieldJson.fileName).to.eql(\"tommylee18005.jpeg\");",
									"    pm.expect(imageFieldJson.description).to.eql(\"tommylee18005\");",
									"    pm.expect(imageFieldJson.sortOrder).to.eql(2);",
									"    pm.expect(imageFieldJson.showOnMenu[0]).to.eql(\"true\");",
									"    ",
									"    // fileAsset",
									"    pm.expect(imageFieldJson.fileAsset.name).to.eql(\"tommylee18005.jpeg\");",
									"    pm.expect(imageFieldJson.fileAsset.size).to.eql(5494);",
									"    pm.expect(imageFieldJson.fileAsset.mime).to.eql(\"image/jpeg\");",
									"    ",
									"    // metaData",
									"    pm.expect(imageFieldJson.metaData.length).to.eql(6);",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"fileSize\", \"5494\")).to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"length\", \"5494\")).to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"width\", \"139\")).to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"contentType\", \"image/jpeg\")).to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"content\", \"\")).to.be.true;",
									"    pm.expect(hasProperty(imageFieldJson.metaData, \"height\", \"186\")).to.be.true;",
									"",
									"    ",
									"    ",
									"});",
									"",
									"pm.test(\"File Field attributes should be present\", function () {",
									"     // File field",
									"    var fileFieldJson = jsonData.data[collectionName][0][fileFieldVariable];",
									"    ",
									"    // general attributes",
									"    pm.expect(fileFieldJson.fileName).to.eql(\"Readme18005.md\");",
									"    pm.expect(fileFieldJson.description).to.eql(\"Readme18005\");",
									"    pm.expect(fileFieldJson.sortOrder).to.eql(2);",
									"    pm.expect(fileFieldJson.showOnMenu[0]).to.eql(\"true\");",
									"    ",
									"    // fileAsset",
									"    pm.expect(fileFieldJson.fileAsset.name).to.eql(\"Readme18005.md\");",
									"    pm.expect(fileFieldJson.fileAsset.size).to.eql(14);",
									"    pm.expect(fileFieldJson.fileAsset.mime).to.be.null;",
									"    ",
									"    pm.expect(fileFieldJson.metaData.length).to.eql(4);",
									"",
									"    // console.log(fileFieldJson.metaData)",
									"    ",
									"    pm.expect(hasProperty(fileFieldJson.metaData, \"fileSize\", \"14\")).to.be.true;",
									"    pm.expect(hasProperty(fileFieldJson.metaData, \"length\", \"14\")).to.be.true;",
									"    pm.expect(hasProperty(fileFieldJson.metaData, \"contentType\", \"text/plain; charset=ISO-8859-1\")).to.be.true;",
									"    pm.expect(hasProperty(fileFieldJson.metaData, \"content\", \"This is a test\")).to.be.true;",
									"    ",
									"});",
									"",
									"function hasProperty(metaData, name, value) {",
									"        var hasProperty = false;",
									"        metaData.forEach(function (item) {",
									"            if(item.key==name && item.value.trim()==value) {",
									"                hasProperty = true;",
									"            }",
									"        });",
									"",
									"        return hasProperty;",
									"    }",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVariable}}Collection(limit: 20) {\n    myImage {\n      fileName\n      description\n      sortOrder\n      showOnMenu\n      \n      fileAsset {\n        name\n        size\n        mime\n      }\n      metaData {\n        key\n        value\n      }\n      description\n    }\n    \n    myFile {\n      fileName\n      description\n      sortOrder\n      showOnMenu\n      \n      fileAsset {\n        name\n        size\n        mime\n      }\n      metaData {\n        key\n        value\n      }\n      description\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"description": "This test that the custom type Image contains the expecte fields.\nExpected fields:\n\n* fileName\n* description\n* fileAsset (Composed/Custom Type. see Binary type on our GraphQL doc)\n* metaData (Custom Type. See Key Value type on our GraphQL doc)\n* showOnMenu\n* sortOrder",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Related content respects language in query for parent",
			"item": [
				{
					"name": "Create new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46e91aba-8d25-44d1-86c3-dbc8287ce600",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"languageId\", jsonData.entity.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								},
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"languageCode\":\"it\",\n\t\"language\":\"Italian\", \n\t\"countryCode\":\"IT\", \n\t\"country\":\"Italy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v2/languages",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v2",
								"languages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Child ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "33d07a12-5450-4f75-9b79-74cfdce51d40",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"childContentTypeVariable\", jsonData.entity[0].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"Child type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Child Type {{$randomBankAccount}}\",\n\t\"variable\": \"childType{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Parent ContentType with Rel Field to Child",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "efb2bbf5-73e3-4a3d-8a6f-a89df40bd3bd",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"parentContentTypeVariable\", jsonData.entity[0].variable);",
									"pm.collectionVariables.set(\"relFieldVariable\", jsonData.entity[0].fields[1].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Parent Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Parent Type {{$randomBankAccount}}\",\n\t\"variable\": \"parentType{{$randomBankAccount}}\",\n\t\"host\": \"SYSTEM_HOST\",\n\t\"fixed\": false,\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 2,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"variable\": \"name\",\n\t\t\t\"fixed\": true\n\t\t}, \n\t\t{\n\t\t     \"clazz\":\"com.dotcms.contenttype.model.field.ImmutableRelationshipField\",\n\t\t     \"required\":false,\n\t\t     \"name\":\"rel\",\n\t\t     \"relationships\":{\n\t\t        \"velocityVar\":\"{{childContentTypeVariable}}\",\n\t\t        \"cardinality\":0\n\t\t     },\n\t\t     \"searchable\":false\n\t\t}\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Child Content in new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55b8d053-9d63-4c0c-813c-4f26ec31f2a1",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"childContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{childContentTypeVariable}}\",\n       \"title\":\"Child Content in New Language\", \n       \"contentHost\":\"demo.dotcms.com\",\n       \"body\":\"Child Content in New Language\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"{{languageId}}\",\n       \"name\":\"Child Content in New Language\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "indexPolicy",
									"value": "wait_for"
								}
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Save Parent Content with related Child in new Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab0baa96-788c-46ca-9974-a89af8227466",
								"exec": [
									"var jsonData = pm.response.json();",
									"pm.collectionVariables.set(\"parentContentIdentifier\", jsonData.entity.identifier);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"contentlet\": {\n       \"contentType\":\"{{parentContentTypeVariable}}\",\n       \"title\":\"Parent Content in New Language\", \n       \"contentHost\":\"demo.dotcms.com\",\n       \"body\":\"Parent Content in New Language\",\n       \"indexPolicy\":\"WAIT_FOR\",\n       \"languageId\":\"{{languageId}}\",\n       \"name\":\"Parent Content in New Language\",\n       \"{{relFieldVariable}}\":\"{{childContentIdentifier}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/workflow/actions/default/fire/PUBLISH?indexPolicy=wait_for",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"workflow",
								"actions",
								"default",
								"fire",
								"PUBLISH"
							],
							"query": [
								{
									"key": "indexPolicy",
									"value": "wait_for"
								}
							]
						},
						"description": "This is to fire the added default action\n\nhttp://localhost:8080/api/v1/workflow/actions/default/fire/PUBLISH\n\nIn this case I'm using the \"test\" content type that just have a name filed (text)"
					},
					"response": []
				},
				{
					"name": "Get Related Content should return content in parents Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9141c398-72ef-4683-b385-0159820a21a5",
								"exec": [
									"pm.test(\"Content parent and child content returned in requested language\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    ",
									"    var parentIdentifier = pm.collectionVariables.get(\"parentContentIdentifier\")",
									"    var childIdentifier = pm.collectionVariables.get(\"childContentIdentifier\")",
									"    var languageId = pm.collectionVariables.get(\"languageId\")",
									"    ",
									"    var collectionName = pm.collectionVariables.get(\"parentContentTypeVariable\")+\"Collection\"",
									"    pm.expect(jsonData.data[collectionName][0].identifier).to.eql(parentIdentifier);",
									"    pm.expect(jsonData.data[collectionName][0].rel[0].identifier).to.eql(childIdentifier);",
									"    pm.expect(jsonData.data[collectionName][0].rel[0].conLanguage.id).to.eql(languageId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{parentContentTypeVariable}}Collection(query:\"+languageId:{{languageId}}\", limit: 20) {\n    identifier\n    {{relFieldVariable}} {\n        identifier\n        conLanguage {\n            id\n            languageCode\n            country\n            countryCode\n        }\n    }\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Empty Collection",
			"item": [
				{
					"name": "Create ContentType",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3fbe595a-e5f3-4320-aa86-f2a23496ba64",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"contentTypeVariable\", jsonData.entity[0].variable);",
									"",
									"pm.collectionVariables.set(\"imageFieldVariable\", jsonData.entity[0].fields[1].variable);",
									"",
									"pm.collectionVariables.set(\"fileFieldVariable\", jsonData.entity[0].fields[2].variable);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "admin",
									"type": "string"
								},
								{
									"key": "username",
									"value": "admin@dotcms.com",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"clazz\": \"com.dotcms.contenttype.model.type.SimpleContentType\",\n\t\"description\": \"My Type\",\n\t\"defaultType\": false,\n\t\"system\": false,\n\t\"folder\": \"SYSTEM_FOLDER\",\n\t\"name\": \"My Custom Type {{$randomBankAccount}}\",\n\t\"host\": \"8a7d5e23-da1e-420a-b4f0-471e7da8ea2d\",\n\t\"fixed\": false,\n\t\"workflow\":[\"d61a59e1-a49c-46f2-a929-db2b4bfa88b2\"],\n\t\"fields\": [\n\t\t{\n\t\t\t\"clazz\": \"com.dotcms.contenttype.model.field.TextField\",\n\t\t\t\"indexed\": true,\n\t\t\t\"dataType\": \"TEXT\",\n\t\t\t\"readOnly\": false,\n\t\t\t\"required\": true,\n\t\t\t\"searchable\": true,\n\t\t\t\"listed\": true,\n\t\t\t\"sortOrder\": 1,\n\t\t\t\"unique\": false,\n\t\t\t\"name\": \"Name\",\n\t\t\t\"fixed\": true\n\t\t}, \n\t\t{\n              \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableImageField\",\n              \"dataType\": \"TEXT\",\n              \"fieldType\": \"Image\",\n              \"fieldTypeLabel\": \"Image\",\n              \"fieldVariables\": [],\n              \"fixed\": false,\n              \"iDate\": 1585605564000,\n              \"indexed\": false,\n              \"listed\": false,\n              \"modDate\": 1585605564000,\n              \"name\": \"myImage\",\n              \"readOnly\": false,\n              \"required\": false,\n              \"searchable\": false,\n              \"sortOrder\": 2,\n              \"unique\": false\n       },\n\t   {\n\t\t      \"clazz\": \"com.dotcms.contenttype.model.field.ImmutableFileField\",\n\t\t      \"name\": \"myFile\",\n\t\t      \"required\": false,\n\t\t      \"hint\": \"\"\n\t   }\n\t]\n}"
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/contenttype",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"contenttype"
							]
						}
					},
					"response": []
				},
				{
					"name": "RequestEmptyCollection_ShouldReturnEmpty",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba29446d-4c81-4e34-b7e5-a013783f8ed1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n  {{contentTypeVariable}}Collection(limit: 20) {\n    title\n  }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{serverURL}}/api/v1/graphql",
							"host": [
								"{{serverURL}}"
							],
							"path": [
								"api",
								"v1",
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"variable": [
		{
			"id": "8398c504-3783-45cc-b272-2af426cabb8f",
			"key": "languageId",
			"value": 1592433023079
		},
		{
			"id": "ddd14bf5-130a-40d1-9813-d871bb50bc40",
			"key": "contentId",
			"value": null
		},
		{
			"id": "cc484d34-4f94-4a9f-9811-9141c7dfa94b",
			"key": "contentTypeVariable",
			"value": "MyCustomType53380831"
		},
		{
			"id": "4f768673-cc0d-4278-b6de-5588e5b26194",
			"key": "contentIdentifier",
			"value": "78a7fd09-e804-4d6d-96e9-ca4165ab29ec"
		},
		{
			"id": "07d89ab9-f5a5-4f94-9594-71d58ee1b7a0",
			"key": "structureVariable",
			"value": "myStructure94983807"
		},
		{
			"id": "6b5af533-d5bc-4862-abbb-0afab42c2169",
			"key": "imageContentTypeVariable",
			"value": "MyImageType22920449"
		},
		{
			"id": "ed4bfdef-14bd-4a1a-a4c2-4e23866a38ef",
			"key": "imageContentIdentifier",
			"value": "f1bde8d3-0502-482e-932b-88f7ef470a31"
		},
		{
			"id": "f8f1cbe1-2ae4-4b1a-8290-3d5fa5124b8d",
			"key": "imageFieldVariable",
			"value": "myImage"
		},
		{
			"id": "bf9810b6-de8d-47cd-8c6a-85307daf60fe",
			"key": "showOnMenu",
			"value": true
		},
		{
			"id": "8bda995a-a42c-4a52-a11d-dc9f5b5f3f20",
			"key": "sortOrder",
			"value": 2
		},
		{
			"id": "4021d532-e144-470d-9907-99b015b4be41",
			"key": "fileFieldVariable",
			"value": "myFile"
		},
		{
			"id": "4dd27935-54c1-4adf-bcd1-30ade268ac93",
			"key": "fileContentIdentifier",
			"value": "b3e1f5ca-b6ac-4138-990d-9a96fff815cb"
		},
		{
			"id": "84558ef3-5cb5-44eb-89a7-c68c83b9b57e",
			"key": "childContentTypeVariable",
			"value": "childType23553509"
		},
		{
			"id": "aded4210-2b1c-4665-ab4e-a1e5127d4141",
			"key": "parentContentTypeVariable",
			"value": "parentType65070125"
		},
		{
			"id": "517535c7-7a3d-47d4-86cd-6d35691a60a1",
			"key": "relFieldVariable",
			"value": "rel"
		},
		{
			"id": "b2e9455e-ad4b-4b64-bddd-a27b9d820a12",
			"key": "childContentIdentifier",
			"value": "6a0d1ea2-a282-45d1-a838-88816ad62ac6"
		},
		{
			"id": "f8b7154d-c77a-488f-b746-5dc8cfc88c8d",
			"key": "parentContentIdentifier",
			"value": "2921b23c-2a96-4de9-afee-832aa01500db"
		}
	],
	"protocolProfileBehavior": {}
}