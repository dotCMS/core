# Health Check Configuration Example
# This file serves as documentation and example for health check configuration.
# Copy relevant sections to dotmarketing-config.properties as needed or override in environment
# by the standard of converting . and - to _ making upper case and adding DOT_ on the start
# DO NOT include this file in production - it's for documentation only.

# ====================================================================
# GLOBAL HEALTH SYSTEM SETTINGS
# ====================================================================
# These settings control the overall health check system behavior

# How often to run health checks (in seconds)
# Consider increasing for production (60-120s) to reduce overhead
health.interval-seconds=30

# Thread pool size for background health checks
health.thread-pool-size=2

# Global framework timeout for all health checks (default: 30 seconds)
health.framework.timeout-ms=30000

# ====================================================================
# STARTUP PHASE CONFIGURATION
# ====================================================================
# Settings that control behavior during application startup

# How long to consider the system "starting up" for logging context
# Reduce this for faster operational transition (default: 5 minutes)
health.startup.grace.period.minutes=5

# Number of successful checks required to consider the system stable
# Reduce this for faster operational transition (default: 3)
health.stable.operation.threshold=3

# Minimum startup time before allowing early exit due to stability
# Prevents premature operational transition during very fast startups
health.startup.minimum.seconds=30

# ====================================================================
# FAILURE TOLERANCE CONFIGURATION
# ====================================================================
# Settings that control how the system handles transient failures

# Whether to enable failure tolerance for health checks
# When true, allows some failures before marking a check as failed
health.tolerance.enabled=true

# How long to tolerate failures in readiness checks
# Default: 30 seconds (optimized for production responsiveness)
health.tolerance.readiness.seconds=30
# Alternatively, can be configured in minutes
health.tolerance.readiness.minutes=1

# How long to tolerate failures in liveness checks (in minutes)
# Default: 2 minutes (optimized for production responsiveness)
health.tolerance.liveness.minutes=2

# Maximum number of consecutive failures allowed before failing
# Default: 3 (optimized for production responsiveness)
health.tolerance.max.consecutive.failures=3

# Quick failure thresholds for specific checks (faster escalation)
# Database quick fail threshold (default: 15 seconds)
health.tolerance.database.quick.fail.seconds=15
# Cache quick fail threshold (default: 30 seconds)
health.tolerance.cache.quick.fail.seconds=30
# Global quick fail threshold (default: 60 seconds)
health.tolerance.quick.fail.seconds=60

# ====================================================================
# HEALTH CHECK MODES
# ====================================================================
# Control the behavior of individual health checks

# Critical infrastructure checks (always in PRODUCTION mode)
health.check.servlet-container.mode=PRODUCTION
health.check.application.mode=PRODUCTION

# Database and cache checks (MONITOR_MODE for safe deployment)
health.check.database.mode=MONITOR_MODE
health.check.cache.mode=MONITOR_MODE
health.check.elasticsearch.mode=MONITOR_MODE
health.check.garbage-collection.mode=MONITOR_MODE

# ====================================================================
# INDIVIDUAL HEALTH CHECK CONFIGURATION
# ====================================================================

# Database Health Check
health.check.database.timeout-ms=2000
health.check.database.retry-count=2
health.check.database.validation-timeout-ms=500
# Framework timeout for database health check (overrides global)
health.check.database.framework-timeout-ms=10000
# Database-specific tolerance settings
health.check.database.readiness.tolerance.minutes=1
health.check.database.liveness.tolerance.minutes=3
health.check.database.max.consecutive.failures=2
health.check.database.tolerance.enabled=true

# Cache Health Check
health.check.cache.timeout-ms=2000
health.check.cache.test-group=health.check

# Elasticsearch Health Check
health.check.elasticsearch.timeout-ms=2000
health.check.elasticsearch.ping-timeout-ms=1000

# Thread Health Check
health.check.threads.deadlock-detection=true
health.check.threads.pool-threshold-multiplier=4

# Garbage Collection Health Check
health.check.garbage-collection.time-threshold-percent=50
health.check.garbage-collection.frequency-threshold=10
health.check.garbage-collection.startup-time-threshold-percent=80
health.check.garbage-collection.startup-frequency-threshold=20

# System Health Check
health.check.system.skip-disk-check=false
health.check.system.disk-check-interval-seconds=300

# CDI Initialization Health Check
health.check.cdi.initialization-timeout-ms=30000
health.check.cdi.retry-interval-ms=1000

# ====================================================================
# EVENT-DRIVEN MONITORING CONFIGURATION
# ====================================================================

# Database Event-Driven Monitoring
health.check.database.event-driven.enabled=true
health.check.database.pool.monitoring.interval.seconds=5
health.check.database.pool.failure.threshold=3
health.check.database.validation.timeout.seconds=2
health.check.database.recovery.timeout.ms=3000

# Elasticsearch Event-Driven Monitoring
health.check.elasticsearch.event-driven.enabled=true
health.check.elasticsearch.ping.interval.seconds=30
health.check.elasticsearch.ping.failure.threshold=2
health.check.elasticsearch.ping.timeout.ms=3000
health.check.elasticsearch.recovery.timeout.ms=5000

# ====================================================================
# COMMON CONFIGURATION PATTERNS
# ====================================================================
# These are example configurations - uncomment and modify as needed

# 1. FAST FAILURE DETECTION (production-optimized defaults)
# health.tolerance.readiness.seconds=30
# health.tolerance.liveness.minutes=2
# health.tolerance.max.consecutive.failures=3
# health.tolerance.database.quick.fail.seconds=15
# health.check.database.framework-timeout-ms=10000

# 2. IMMEDIATE FAILURE (no tolerance)
# health.tolerance.enabled=false
# health.check.database.framework-timeout-ms=5000

# 3. SAFE DEPLOYMENT (never fail probes)
# health.check.database.mode=MONITOR_MODE
# health.check.cache.mode=MONITOR_MODE
# health.check.elasticsearch.mode=MONITOR_MODE
# health.tolerance.enabled=true

# 4. DISABLE PROBLEMATIC CHECKS DURING DEPLOYMENT
# health.check.database.mode=DISABLED
# health.check.elasticsearch.mode=DISABLED

# 5. PRODUCTION HARDENING (fail fast, no safety conversions)
# health.check.database.mode=PRODUCTION
# health.check.cache.mode=PRODUCTION
# health.check.elasticsearch.mode=PRODUCTION

# 6. PERFORMANCE OPTIMIZATION (reduce health check overhead)
# health.interval-seconds=60
# health.check.servlet-container.operational-self-check=false
# health.check.garbage-collection.mode=MONITOR_MODE

# ====================================================================
# KUBERNETES PROBE CONFIGURATION EXAMPLES
# ====================================================================

# Liveness probe configuration
# - Initial delay: 60s (allow startup)
# - Period: 10s (frequent checks)
# - Timeout: 5s (generous timeout)
# - Failure threshold: 3 (fail after 30s of issues)
# - Success threshold: 1 (single success clears failure)

# Readiness probe configuration
# - Initial delay: 30s (faster than liveness)
# - Period: 5s (very frequent checks)
# - Timeout: 3s (shorter timeout)
# - Failure threshold: 3 (fail after 15s of issues)
# - Success threshold: 1 (single success clears failure) 