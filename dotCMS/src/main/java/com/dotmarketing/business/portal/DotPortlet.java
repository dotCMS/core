package com.dotmarketing.business.portal;

import com.dotcms.annotations.SkipNulls;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.*;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
import com.liferay.portal.model.Portlet;
import org.immutables.value.Value;
import org.immutables.value.Value.Style.*;

import javax.xml.bind.annotation.*;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * This interface represents a DotPortlet, which is an immutable representation of a Portlet.
 * It uses the Immutables framework for generating the implementation class and builder.
 * Jackson annotations are used for JSON and XML serialization/deserialization.
 */
@Value.Immutable
@Value.Style(
        overshadowImplementation = true,
        typeBuilder = "*Builder",
        depluralize = true,
        visibility = ImplementationVisibility.PACKAGE,
        builderVisibility = BuilderVisibility.PACKAGE,
        implementationNestedInBuilder = true,
        deepImmutablesDetection = true,
        jdkOnly = true
)
@JsonSerialize(as = DotPortlet.class)
@JsonDeserialize(builder = DotPortlet.Builder.class)
@JsonIgnoreProperties(ignoreUnknown = false)
@XmlRootElement(name = "portlet")
@XmlAccessorType(XmlAccessType.FIELD)
public interface DotPortlet extends XMLSerializable {

    /**
     * Returns the portlet ID.
     * @return The portlet ID as a String.
     */
    @XmlElement(name = "portlet-name")
    @JsonProperty("portlet-name")
    String getPortletId();

    /**
     * Returns the fully qualified class name of the portlet.
     * @return The portlet class name as a String.
     */
    @XmlElement(name = "portlet-class")
    @JsonProperty("portlet-class")
    String getPortletClass();

    /**
     * Returns a list of initialization parameters for the portlet.
     * This method converts the internal Map representation to a List of InitParam objects.
     * @return A List of InitParam objects.
     */
    @XmlElement(name = "init-param")
    @JsonGetter("init-param")
    @JacksonXmlElementWrapper(useWrapping = false, localName = "init-params")
    default List<InitParam> getInitParams() {
        return initParams().entrySet().stream()
                .map(e -> InitParam.of(e.getKey(), e.getValue()))
                .collect(Collectors.toList());
    }

    /**
     * Returns the internal Map representation of initialization parameters.
     * This method is ignored in JSON/XML serialization.
     * @return A Map of initialization parameter names to values.
     */
    @JsonIgnore
    @XmlTransient
    @SkipNulls
    Map<String,String> initParams();

    /**
     * Creates a DotPortlet instance from a Portlet object.
     * @param portlet The Portlet object to convert.
     * @return A new DotPortlet instance.
     */
    static DotPortlet from(Portlet portlet) {
        return DotPortlet.builder()
                .portletId(portlet.getPortletId())
                .portletClass(portlet.getPortletClass())
                .initParams(portlet.getInitParams())
                .build();
    }

    /**
     * Converts this DotPortlet instance to a Portlet object.
     * @return A new Portlet instance.
     */
    default Portlet toPortlet() {
        return new Portlet(getPortletId(), getPortletClass(), initParams());
    }

    /**
     * Builder class for DotPortlet.
     * This class is generated by the Immutables framework and extended here for custom functionality.
     */
    class Builder extends DotPortletBuilder implements XMLEnabledBuilder<DotPortlet> {

        /**
         * Adds a list of InitParam objects to the builder.
         * This method converts the List<InitParam> to the internal Map representation.
         * @param initParams A List of InitParam objects.
         * @return This Builder instance for method chaining.
         */
        @XmlElement(name = "init-param")
        @JsonSetter("init-param")
        @JacksonXmlElementWrapper(useWrapping = false, localName = "init-params")
        public Builder addAllInitParams(List<InitParam> initParams) {
            putAllInitParams(initParams.stream()
                    .collect(Collectors.toMap(InitParam::getName, InitParam::getValue)));
            return this;
        }

        /**
         * Creates a Builder instance from a Portlet object.
         * @param portlet The Portlet object to convert.
         * @return This Builder instance for method chaining.
         */
        public Builder from(Portlet portlet) {
            return portletId(portlet.getPortletId())
                    .portletClass(portlet.getPortletClass())
                    .initParams(portlet.getInitParams());
        }
    }

    /**
     * Creates a new Builder instance for DotPortlet.
     * @return A new Builder instance.
     */
    static Builder builder() {
        return new Builder();
    }
}