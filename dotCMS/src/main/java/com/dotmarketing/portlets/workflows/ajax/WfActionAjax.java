package com.dotmarketing.portlets.workflows.ajax;

import com.dotcms.exception.ExceptionUtil;
import com.dotcms.workflow.form.WorkflowActionForm;
import com.dotcms.workflow.form.WorkflowReorderBean;
import com.dotcms.workflow.helper.WorkflowHelper;
import com.dotmarketing.business.web.UserWebAPI;
import com.dotmarketing.business.web.WebAPILocator;
import com.dotmarketing.portlets.workflows.model.WorkflowAction;
import com.dotmarketing.portlets.workflows.model.WorkflowState;
import com.dotmarketing.portlets.workflows.model.WorkflowStep;
import com.dotmarketing.util.Logger;
import com.dotmarketing.util.UtilMethods;
import com.liferay.portal.model.User;
import com.liferay.util.StringPool;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Set;

/**
 * This class is responsible for handling all CRUD requests related to Workflow Actions generated by
 * DWR requests.
 *
 * @deprecated Classes related to the DWR framework will be removed in the near future.
 * @author root
 * @since Mar 22nd, 2012
 */
@Deprecated(forRemoval = true)
public class WfActionAjax extends WfBaseAction {

    private final WorkflowHelper workflowHelper = WorkflowHelper.getInstance();
	private final UserWebAPI     userWebAPI     = WebAPILocator.getUserWebAPI();

    public void action(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// do nothing
	}

    public void reorder(final HttpServletRequest request,
                         final HttpServletResponse response) throws ServletException, IOException {

		final String actionId   = request.getParameter(ACTION_ID_PARAM);
		final String stepId     = request.getParameter(STEP_ID_PARAM);
		final String orderParam = request.getParameter(ORDER_PARAM);

		try {

			this.workflowHelper.reorderAction(new WorkflowReorderBean.Builder()
						.actionId(actionId).stepId(stepId)
						.order(Integer.parseInt(orderParam)).build(),
											  this.userWebAPI.getUser(request));
		} catch (Exception e) {
			Logger.error(this.getClass(), e.getMessage(), e);
			writeError(response, e.getMessage());
		}
	} // reorder.

	/**
	 * Deletes just the action associated to the step, but the action still alive as part of the scheme.
	 * @param request
	 * @param response
	 * @throws IOException
	 */
	public void deleteActionForStep(final HttpServletRequest request,
					   final HttpServletResponse response) throws IOException {

		final String actionId = request.getParameter(ACTION_ID_PARAM);
		final String stepId   = request.getParameter(STEP_ID_PARAM);
		WorkflowStep workflowStep;

		try {

			Logger.debug(this, "Deleting the action: " + actionId +
							", for the step: " + stepId);
			final User user = this.userWebAPI.getUser(request);
			workflowStep    = this.workflowHelper.deleteAction
					(actionId, stepId, user);
			writeSuccess(response, workflowStep.getSchemeId() );
		} catch (Exception e) {
			Logger.error(this.getClass(), e.getMessage(), e);
			writeError(response, e.getMessage());
		}
	} // delete.

	/**
	 * This method deletes the action associated to the scheme and all references to the steps.
	 * @param request  HttpServletRequest
	 * @param response HttpServletResponse
	 * @throws ServletException
	 * @throws IOException
	 */
	public void delete(final HttpServletRequest request,
                       final HttpServletResponse response) throws ServletException, IOException {

		final String actionId = request.getParameter(ACTION_ID_PARAM);

		try {

			Logger.debug(this, "Deleting the action: " + actionId);
			this.workflowHelper.deleteAction(actionId, this.userWebAPI.getUser(request));


			writeSuccess(response, StringPool.BLANK);
		} catch (Exception e) {
			Logger.error(this.getClass(), e.getMessage(), e);
			writeError(response, e.getMessage());
		}
	} // delete.

	/**
	 * Save or updates a Workflow Action.
	 *
	 * @param request  The current instance of the {@link HttpServletRequest} class.
	 * @param response The current instance of the {@link HttpServletResponse} class.
	 *
	 * @throws IOException An error occurred when writing either a successful or failure response
	 */
	public void save(final HttpServletRequest request,
					 final HttpServletResponse response) throws IOException {
		final String actionId = request.getParameter(ACTION_ID_PARAM);
		final String actionName = request.getParameter(ACTION_NAME_PARAM);
        final WorkflowActionForm.Builder builder = new WorkflowActionForm.Builder();
		if (!WorkflowAction.SEPARATOR.equalsIgnoreCase(actionId)) {
			builder.actionName(actionName)
					.actionId(actionId)
					.schemeId(request.getParameter(SCHEME_ID_PARAM))
					.stepId(request.getParameter(STEP_ID_PARAM))
					.actionIcon(request.getParameter(ACTION_ICON_SELECT_PARAM))
					.actionAssignable(request.getParameter(ACTION_ASSIGNABLE_PARAM) != null)
					.actionCommentable(request.getParameter(ACTION_COMMENTABLE_PARAM) != null)
					.requiresCheckout(false)
					.actionRoleHierarchyForAssign(request.getParameter(ACTION_ROLE_HIERARCHY_FOR_ASSIGN_PARAM) != null)
					.actionNextStep(request.getParameter(ACTION_NEXT_STEP_PARAM))
					.actionNextAssign(request.getParameter(ACTION_ASSIGN_TO_SELECT_PARAM))
					.actionCondition(request.getParameter(ACTION_CONDITION_PARAM))
					.showOn(WorkflowState.toSet(request.getParameterValues(SHOW_ON_PARAM)));
		} else {
			builder.separator(request.getParameter(SCHEME_ID_PARAM), request.getParameter(STEP_ID_PARAM));
		}
		final String whoCanUseTmp = UtilMethods.isSet(request.getParameter(WHO_CAN_USE_PARAM))
				? request.getParameter(WHO_CAN_USE_PARAM)
				: StringPool.BLANK;
		final List<String> whoCanUse = Arrays.asList(whoCanUseTmp.split(StringPool.COMMA));
		builder.whoCanUse(whoCanUse);

        WorkflowAction newAction;
		final User user      = this.userWebAPI.getUser(request);

        try {
            newAction  = this.workflowHelper.saveAction(builder.build(), user);
            response.getWriter().println("SUCCESS:" + newAction.getId());
        } catch (final Exception e) {
			Logger.error(this.getClass(), String.format("An error occurred when saving Workflow " +
					"Action '%s' [ %s ]: %s", actionName, actionId,
					ExceptionUtil.getErrorMessage(e)), e);
			writeError(response, ExceptionUtil.getErrorMessage(e));
        }
    } // save.

	/**
	 * Security check demanded by Sonar
	 * We register all the allowed methods down here
	 *
	 * @return allowed method names
	 */
	@Override
	protected Set<String> getAllowedCommands() {
		return Set.of( "action", "reorder", "delete", "add", "save", "deleteActionForStep" );
	}

}
