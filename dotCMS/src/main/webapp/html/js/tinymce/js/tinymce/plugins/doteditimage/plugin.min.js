dojo.require("dotcms.dijit.image.ImageEditor");
tinymce.PluginManager.add("doteditimage", function (editor) {
	function addButtons() {
		editor.addButton("editimage", {
			icon: "editimage",
			text: editor.settings.dotLanguageStrings["edit_image"],
			onclick: function () {
				const imgNode = editor.selection.getNode().nodeName === "IMG" ?
								editor.selection.getNode() :
								editor.selection.getNode().querySelector("img")

				const attrs = {
					fieldName: imgNode.dataset.fieldName,
					inode: imgNode.dataset.inode,
					identifier: imgNode.dataset.identifier,
					saveAs: imgNode.dataset.saveas,
				};

				const ImageEditor = new dotcms.dijit.image.ImageEditor({
					editImageText: "",
					fieldName: attrs.fieldName,
					binaryFieldId: attrs.identifier,
					fieldContentletId: attrs.identifier,
					saveAsFileName: attrs.saveAs,
					inode: attrs.inode,
					activeEditor: editor,
					currentNode: editor.selection.getNode()
				});

				ImageEditor.execute();
			},
		});

		editor.addButton("imageProperties", {
			text: editor.settings.dotLanguageStrings["propertiesLabel"],
			onclick: function () {
				tinymce.activeEditor.execCommand('mceImage');
			},
		});
	}

	function addEvents() {
		editor.on("click", function (e) {
			if (lastSelectedImage && lastSelectedImage.src != e.element.src) {
				lastSelectedImage = undefined;
			}
			if (isEditableImage(e.element)) {
				lastSelectedImage = e.element;
			}
		});
	}

	function isEditableImage(img) {
		const selectorMatched = editor.dom.is( img, "img:not([data-mce-object],[data-mce-placeholder])")
			|| editor.dom.is(img, "figure.image") ;
		return selectorMatched;
	}

	function addToolbars() {
		var toolbarItems = "alignleft aligncenter alignright | imageProperties";
		if (dotCMSHasLicense) {
			toolbarItems = "alignleft aligncenter alignright | editimage | imageProperties";
		}
		editor.addContextToolbar(isEditableImage, toolbarItems);
	}
	addToolbars();
	addButtons();
});
