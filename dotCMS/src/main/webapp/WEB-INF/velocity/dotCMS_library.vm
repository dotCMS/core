## Because DOTCM-274 task we change the name of the parameter in the pull content
## to avoid the problen of not evaluation of the query variable when the macro is
## called more that one time in the same page

#macro(pullContent $pullquery $limit $sortBy)
	## needed so we can parse dynamic variables
	#set($query = $render.eval($pullquery))

	#set($language= '')
	#if(!$UtilMethods.contains($query,'languageId'))
		#if($request.session.getAttribute("com.dotmarketing.htmlpage.language"))
			#set($language= ' +languageId:'+$request.session.getAttribute("com.dotmarketing.htmlpage.language")+' ')
			#set($query=$UtilMethods.concat($query,$language))
		#end
	#end

  	#if(!( $UtilMethods.contains($query,'live:') || $UtilMethods.contains($query,'working:') ))
		#set($query=$UtilMethods.concat($query,' +live:true '))
	#end


  	#if(!$UtilMethods.contains($query,'deleted:'))
		#set($query=$UtilMethods.concat($query,' +deleted:false '))
	#end
	#set($list = ${contents.getEmptyList()})

	#set($_inodeList = $contents.pullContent($query,$limit,$sortBy,$EDIT_MODE))

	#if(!$UtilMethods.isSet($_inodeList.size()))
		$!_inodeList
	#else
		#foreach($_inode in $_inodeList)
		    #getContentMapDetail($_inode)
			#set($_dummy = $!list.add($content))
		#end
		#if($sortBy == 'random')
		   #set($list = $contents.randomizeList($list, $limit) )
		#end
		#if($list && $list.size() > 0)
			#set ($content = $list.get(0))
		#end
	#end
#end



#macro (pageRelatedContent $relationship $contId $numToPull $sortBy $numPerPageString $currentPageString)
    #pullRelatedContent("$relationship","$contId","$numToPull","$sortBy")

    ##Set our results to resemble what would be passed with the regular paginated content pull so they are interchangable.
    #*
    <!--<p>
    $totalResults: total number of contents<br />
    $totalPages: total number of pages<br />
    $firstPageRecord: first record number of the current page<br />
    $lastPageRecord: last record number of the current page<br />

    $hasNextPage: true if has a next page<br />
    $hasPreviousPage: true if has a previous page
    </p>-->
    *#

    #set($numPerPage = $webapi.parseLong($numPerPageString))
    #set($currentPage = $webapi.parseLong($currentPageString))

    #set($totalResults = $list.size())
    #set($totalPages = $list.size() / $numPerPage)
    #if(($list.size() % $numPerPage) > 0)
        #set($totalPages = $totalPages + 1)
    #end
    #set($pageLong = $webapi.parseLong($currentPage))
    #set($firstPageRecord = ($pageLong - 1) * $numPerPage + 1)
    #set($lastPageRecord = ($pageLong) * $numPerPage)
    #if($list.size() <= $numPerPage * $pageLong)
        #set($hasNextPage = false)
    #else
        #set($hasNextPage = true)
    #end
    #if($pageLong == 1)
        #set($hasPreviousPage = false)
    #else
        #set($hasPreviousPage = true)
    #end

    #set($tempList = $!{contents.getEmptyList()})
    #foreach($content in $list)
        #if($velocityCount >= $firstPageRecord && $velocityCount <= $lastPageRecord)
            #set($_dummy = $tempList.add($content))
        #end
        #if($velocityCount > $lastPageRecord)
            #break
        #end
    #end

    #set($list = $tempList)
#end

## Get pageContent Pagination
## params $query the lucene query
## E.G.
##			+text1:test text2:you
## params $orderBy the field(s) name you want sort by.
## E.G.
##			text1 asc
## params $perPage number of contents showed per page
## params $currentPageNumber number of the page currently displayed
#macro(pageContent $pullquery $sortBy $perPage $currentPageNumber)
	## needed so we can parse dynamic variables
	#set($query = $render.eval($pullquery))

	#if(!$UtilMethods.contains($query,'languageId'))
		#if($request.session.getAttribute("com.dotmarketing.htmlpage.language"))
			#set($language= ' +languageId:'+$request.session.getAttribute("com.dotmarketing.htmlpage.language")+' ')
			#set($query=$UtilMethods.concat($query,$language))
		#end
	#end

	#if(!( $UtilMethods.contains($query,'live:') || $UtilMethods.contains($query,'working:') ))
		#set($query=$UtilMethods.concat($query,' +live:true '))
	#end

	#if(!$UtilMethods.contains($query,'deleted:'))
		#set($query=$UtilMethods.concat($query,' +deleted:false '))
	#end

	#set($list = ${contents.getEmptyList()})

	#set($results = $contents.pageContent($query,$sortBy,$perPage,$currentPageNumber))
	#set($_inodeList = $results.get("_inodeList"))

	#set($totalResults = $math.toInteger($results.get("_total")))
	#set($firstPageRecord = $math.add($math.mul($math.sub($currentPageNumber, 1), $perPage),1))
	#set($lastPageRecord = $math.sub($math.add($firstPageRecord, $perPage), 1))
	#set($hasNextPage = true)
	#if($UtilMethods.isSet($lastPageRecord) && $lastPageRecord >= $math.toInteger($totalResults))
		#set($lastPageRecord = $math.toInteger($totalResults))
		#set($hasNextPage = false)
	#end
	#if($UtilMethods.isSet($firstPageRecord) && $firstPageRecord > 1)
		#set($hasPreviousPage = true)
	#else
		#set($hasPreviousPage = false)
	#end
	#set($totalPages = $math.ceil($math.div($totalResults, $perPage)))

	#if($math.abs($totalPages) < $totalPages)
		#set($totalPages = $math.add($math.abs($totalPages), 1))
	#end

	#foreach($_inode in $_inodeList)
	    #getContentMapDetail($_inode)
		##$_inode.inode - $_inode.identifier - $content
		$!list.add(${math.sub($velocityCount,1)}, $content)
        #set($content = "")
	#end

#end

##Get related contentlets from relationships
## params $relationshipName The name of the relationship as you can find it in the structures portlet
## params $identifier The contentlet identifier
## params $limit The max number of results to pull if 0 is specified no limit will be used
## params $orderBy the field(s) name you want sort by.
## E.G.
##           imageTitle
##           imageTile desc, longDescription asc
#macro(pullRelatedContent $relationshipName $identifier $limit $orderBy)
    #set($x = "")
    #set($x = $webapi.getIdentifierInode($identifier))
    #if(!$UtilMethods.isSet($x))
       #set($x = $inode)
    #end

	#set($relationshipNameQ = $relationshipName)

	#set($relationship = $contents.getRelationshipByName($relationshipName))

	#if($relationship.parentStructureInode == $relationship.childStructureInode)
		#if($pullParents)
			#set($relationshipNameQ = "${relationshipName.trim()}-child")
		#else
			#set($relationshipNameQ = "${relationshipName.trim()}-parent")
		#end
	#end

	#set($language= '')
	#if($request.session.getAttribute("com.dotmarketing.htmlpage.language"))
		#set($language= " +languageId:${request.session.getAttribute('com.dotmarketing.htmlpage.language')} ")
	#end

	#set($pullquery = "+type:content +live:true +deleted:false $language +${relationshipNameQ}:${x}")

	#if($!{condition})
           #set($pullquery = "$!{pullquery} $!{condition}")
	#end

	#if($orderBy == "")
		#set($orderByQ = "${relationshipName}-${x}-order")
	#else
		#set($orderByQ = "$orderBy")
	#end
	#pullContent($pullquery $limit $orderByQ)
	#set($x = 0)
#end



#macro(comment $commentContentInode)
	#set($_commentContentInode = $commentContentInode)
	#set ($commentsOptions = {})
	#set($dummy = $commentsOptions.put('contentInode', $!commentContentInode))
	#set($dummy = $commentsOptions.put('commentAutoPublish', $!commentAutoPublish))
	#set($dummy = $commentsOptions.put('commentStripHtml', $!commentStripHtml))
	#set($dummy = $commentsOptions.put('commentTitle', $!commentTitle))
	#set($dummy = $commentsOptions.put('emailTemplate', $!emailTemplate))
	#set($dummy = $commentsOptions.put('commentsModeration', $!commentsModeration))

	#if(!$UtilMethods.isSet($commentReferer))
	  	#if($URLMapContent)
		    #set($commentReferer =  $contents.getUrlMapForContentlet($URLMapContent.identifier))
	  	#else
		    #set($commentReferer =  "${VTLSERVLET_URI}?$!{request.getQueryString()}")
	  	#end
	#end

	#set($dummy = $commentsOptions.put('referrer', $!commentReferer))
	$session.setAttribute("commentsOptions", $commentsOptions)

	#if(!$UtilMethods.isSet("$!maxDepth") || $maxDepth < 1)
		#set($maxDepth = 1)
	#end
	#if($commentSourceCode)
		#dotParse($commentSourceCode)
	#else
		$velutil.mergeTemplate('/static/comments/listcomments.html')
	#end
#end




#*
Creates a div'ed login form that can be dropped in on any page to authenticate the user
*#
#macro(loginForm)
	#set($prefixVars = "_login")
	#if($UtilMethods.isSet($loginFormSourceCode))
		#dotParse($loginFormSourceCode)
	#else
		$velutil.mergeTemplate('/static/login/login_macro.vtl')
	#end
#end

#*
 Macro to submit content from frontend
*#
#macro(submitContent $structureNameAux)
   #set($action = '')
   #set($structureName = $structureNameAux)
   #if ($UtilMethods.isSet($submitContentSrc))
      #dotParse($submitContentSrc)
   #else
      $velutil.mergeTemplate('/static/content/content_form_macro.vtl')
   #end
#end


#*
 Macro to Edit submit content from frontend
*#
#macro(submitContentEdit $contentletInode)
   #set($action = 'editContent')
   #set($contentletInode = $contentletInode)
   #if ($UtilMethods.isSet($submitContentSrc))
      #dotParse($submitContentSrc)
   #else
      $velutil.mergeTemplate('/static/content/content_form_macro.vtl')

   #end
#end
