<script type="application/javascript">
(function() {
    'use strict';

    // Configuration
    const CONFIG = {
        DEBUG_MODE: false, // Set to true for development
        PAGE_SIZE: 15,
        SEARCH_DELAY: 300,
        FILTER_SELECT_WIDTH: '350px',
        TEMPLATE_THUMBNAIL_WIDTH: '250w',
        USE_BUTTON_STYLE_PAGINATION: true, // Set to true for button-style pagination
        ENABLE_LOADING_ANIMATION: true // Set to true to show loading animation
    };

// Global Constants
const hostId = "$request.getSession().getAttribute('CMS_SELECTED_HOST_ID')";
    const defaultTemplateName = '$config.getStringProperty("DEFAULT_TEMPLATE_NAME", "System Template")';

    // Global State
    let templateStore;
    let templateSelect;

    // Utility Functions
    const Logger = {
        log: function(message, ...args) {
            if (CONFIG.DEBUG_MODE) {
                console.log(`[TemplateCustomField] ${message}`, ...args);
            }
        },

        error: function(message, error) {
            console.error(`[TemplateCustomField] ${message}`, error);
        },

        warn: function(message, ...args) {
            console.warn(`[TemplateCustomField] ${message}`, ...args);
        }
    };

    const ValidationUtils = {
        isValidHostId: function(hostId) {
            return hostId &&
                   hostId !== 'null' &&
                   hostId !== 'undefined' &&
                   hostId !== '*' &&
                   hostId.trim() !== '';
        },

        isValidTemplateId: function(templateId) {
            return templateId && templateId !== "0" && templateId.trim() !== '';
        },

        isInodeSet: function(imageInode) {
            return imageInode && imageInode.trim() !== '';
        }
    };

    const DOMUtils = {
        getElement: function(id) {
            const element = dojo.byId(id);
            if (!element) {
                Logger.error(`Element with id '${id}' not found`);
            }
            return element;
        },

        getWidget: function(id) {
            const widget = dijit.byId(id);
            if (!widget) {
                Logger.error(`Widget with id '${id}' not found`);
            }
            return widget;
        },

        setElementValue: function(id, value) {
            const element = this.getElement(id);
            if (element) {
                element.value = value || '';
            }
        },

        getElementValue: function(id) {
            const element = this.getElement(id);
            return element ? element.value : '';
        }
    };

    // UI Enhancement Functions
    const UIEnhancements = {
        /**
         * Enhanced styling for pagination items
         */
        enhancePaginationItems: function() {
            try {
                // Apply button-style class if enabled
                if (CONFIG.USE_BUTTON_STYLE_PAGINATION) {
                    const menu = dojo.query('.dijitComboBoxMenu')[0];
                    if (menu) {
                        dojo.addClass(menu, 'dijitComboBoxMenu-button-style');
                    }
                }

                // Add custom attributes to help identify pagination items
                setTimeout(() => {
                    const previousButtons = dojo.query('.dijitComboBoxMenu .dijitMenuPreviousButton');
                    const nextButtons = dojo.query('.dijitComboBoxMenu .dijitMenuNextButton');

                    previousButtons.forEach(button => {
                        dojo.attr(button, 'data-pagination-type', 'previous');
                        Logger.log('Enhanced Previous button:', button);
                    });

                    nextButtons.forEach(button => {
                        dojo.attr(button, 'data-pagination-type', 'next');
                        Logger.log('Enhanced Next button:', button);
                    });
                }, 100);

            } catch (error) {
                Logger.error('Error enhancing pagination items:', error);
            }
        },

        /**
         * Check if an item is a pagination item
         */
        isPaginationItem: function(element) {
            if (!element) return false;

            // Check by class names
            if (dojo.hasClass(element, 'dijitMenuPreviousButton') ||
                dojo.hasClass(element, 'dijitMenuNextButton')) {
                return true;
            }

            // Fallback: check by text content
            const text = element.textContent || element.innerText || '';
            const paginationTexts = [
                'more choices', 'previous choices', 'más opciones', 'opciones anteriores',
                'more', 'previous', 'next', 'load more', 'cargar más'
            ];
            return paginationTexts.some(pText =>
                text.toLowerCase().includes(pText.toLowerCase())
            );
        },

        /**
         * Add loading animation to pagination items when clicked
         */
        addLoadingAnimation: function(item) {
            if (!CONFIG.ENABLE_LOADING_ANIMATION) return;

            try {
                dojo.addClass(item, 'loading');

                // Remove loading class after a short delay
                setTimeout(() => {
                    dojo.removeClass(item, 'loading');
                }, 1500);
            } catch (error) {
                Logger.error('Error adding loading animation:', error);
            }
        },

        /**
         * Setup enhanced click handlers for pagination items
         */
        setupPaginationHandlers: function() {
            try {
                // Use event delegation to handle dynamically created menu items
                dojo.connect(document, 'click', function(event) {
                    const target = event.target;
                    const menuItem = dojo.query(target).closest('.dijitComboBoxMenu .dijitMenuItem')[0];

                    if (menuItem && UIEnhancements.isPaginationItem(menuItem)) {
                        Logger.log('Pagination item clicked:', menuItem.textContent);
                        UIEnhancements.addLoadingAnimation(menuItem);

                        // Add visual feedback
                        dojo.addClass(menuItem, 'clicked');
                        setTimeout(() => {
                            dojo.removeClass(menuItem, 'clicked');
                        }, 200);
                    }
                });
            } catch (error) {
                Logger.error('Error setting up pagination handlers:', error);
            }
        }
    };

    // Template Management Functions
    const TemplateManager = {
        /**
         * Normalizes the key of a template
         */
        normalizeKey: function(template) {
            if (!template || !template.fullTitle || !template.hostName) {
                Logger.warn('Invalid template object for normalizeKey:', template);
                return '';
            }
            return template.fullTitle
                .replace(new RegExp("\\(" + template.hostName + "\\)"), '')
                .replace(/\s+/g, '')
                .toLowerCase();
        },

/**
* Returns a map of templates by name and by id
         */
        getTemplatesMaps: function(templates) {
            if (!Array.isArray(templates)) {
                Logger.error('Templates parameter must be an array');
                return { mapByName: {}, mapById: {} };
            }

            const mapByName = templates.reduce((map, template) => {
                try {
                    const key = this.normalizeKey(template);
                    if (key && !map[key]) {
            map[key] = template;
        }
                } catch (error) {
                    Logger.error('Error processing template for mapByName:', error);
                }
        return map;
    }, {});

            const mapById = templates.reduce((map, template) => {
                try {
                    if (template && template.identifier) {
        map[template.identifier] = template;
                    }
                } catch (error) {
                    Logger.error('Error processing template for mapById:', error);
                }
        return map;
    }, {});

            return { mapByName, mapById };
        },

/**
* Fetches the template image from the server
         */
        fetchTemplateImage: function(templateId) {
            if (!ValidationUtils.isValidTemplateId(templateId)) {
                Logger.warn('Invalid templateId for fetchTemplateImage:', templateId);
                this.resetTemplateImage();
                return;
            }

            Logger.log('Fetching template image for:', templateId);

    fetch("/api/v1/templates/image", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
                body: JSON.stringify({ templateId })
            })
            .then(async (response) => {
        if (response.ok) {
            const result = await response.json();
                    this.handleTemplateImageResponse(result);
        } else {
                    throw new Error(`HTTP error! status: ${response.status}`);
        }
    })
    .catch((error) => {
                Logger.error('Error fetching template image:', error);
                this.resetTemplateImage();
            });
        },

        /**
         * Handles the template image response
         */
        handleTemplateImageResponse: function(data) {
            try {
                const imageInode = data.identifier;
                const imageEl = DOMUtils.getElement("templateThumbnailHolder");

                if (!imageEl) return;

                if (ValidationUtils.isInodeSet(imageInode)) {
                    imageEl.src = `/dA/${imageInode}/${CONFIG.TEMPLATE_THUMBNAIL_WIDTH}`;
                    imageEl.style.border = '1px solid #B6CBEB';
                    imageEl.style.marginTop = '1rem';
                } else {
                    this.resetTemplateImage();
                }
            } catch (error) {
                Logger.error('Error handling template image response:', error);
                this.resetTemplateImage();
            }
        },

        /**
         * Resets the template image to default
         */
        resetTemplateImage: function() {
            const imageEl = DOMUtils.getElement("templateThumbnailHolder");
            if (imageEl) {
        imageEl.src = "/html/images/shim.gif";
                imageEl.style.border = '0px';
                imageEl.style.marginTop = '';
            }
        },

        /**
         * Resets the template selection
         */
        resetTemplateSelection: function() {
            Logger.log('Resetting template selection');

            const templateSel = DOMUtils.getWidget("templateSel");
            if (templateSel) {
                templateSel.set("value", "");
            }

            DOMUtils.setElementValue("template", '');
            DOMUtils.setElementValue("templateSel", "");
            DOMUtils.setElementValue("currentTemplateId", "");

            this.resetTemplateImage();
        },

        /**
         * Sets the selected template
         */
        setSelectedTemplate: function(template) {
            if (!template) {
                Logger.warn('No template provided to setSelectedTemplate');
        return;
    }

            try {
    const { identifier, fullTitle } = template;

                // Set values directly to avoid triggering additional load operations
                DOMUtils.setElementValue("currentTemplateId", identifier);
                DOMUtils.setElementValue("template", identifier);

                const templateSel = DOMUtils.getWidget('templateSel');
    if (templateSel) {
                    templateSel.set("displayedValue", fullTitle);
                }

                this.fetchTemplateImage(identifier);
            } catch (error) {
                Logger.error('Error setting selected template:', error);
            }
        }
    };

    // Event Handlers
    const EventHandlers = {
        /**
         * Handles template fetch completion
         */
        onTemplateFetchComplete: function(templates, currentRequest) {
            try {
                Logger.log('Template fetch completed with', templates ? templates.length : 0, 'templates');

                if (!templates || templates.length === 0) {
                    Logger.warn('No templates received');
                    return;
                }

                const templateId = DOMUtils.getElementValue("template");
                const isTemplateValid = ValidationUtils.isValidTemplateId(templateId);

                const { mapById, mapByName } = TemplateManager.getTemplatesMaps(templates);
                const normalizedName = defaultTemplateName.replace(/\s+/g, '').toLowerCase();
                const template = isTemplateValid ? mapById[templateId] : mapByName[normalizedName];

                if (template) {
                    TemplateManager.setSelectedTemplate(template);
                } else {
                    Logger.warn('No matching template found for current selection');
                }

                // Enhance pagination items after templates are loaded
                UIEnhancements.enhancePaginationItems();

            } catch (error) {
                Logger.error('Error in onTemplateFetchComplete:', error);
            }
        },

        /**
         * Handles template selection changes
         */
        onTemplateChanged: function(newValue) {
            try {
                Logger.log('Template changed to:', newValue);

                const templateSel = DOMUtils.getWidget("templateSel");
                const value = newValue || (templateSel ? templateSel.get('value') : '');

                if (!value) {
                    TemplateManager.resetTemplateSelection();
                    return;
                }

                if (value === "0") {
                    Logger.log('User selected "All Sites" option');
                    this.handleAllSiteSelection();
                    return;
                }

                DOMUtils.setElementValue("template", value);
                TemplateManager.fetchTemplateImage(value);
            } catch (error) {
                Logger.error('Error in onTemplateChanged:', error);
            }
        },

        /**
         * Handles "All Sites" selection
         */
        handleAllSiteSelection: function() {
            try {
                Logger.log('Switching to all sites view');

                if (templateStore) {
        templateStore.hostId = "*";
        templateStore.allSiteLabel = false;
                }

                TemplateManager.resetTemplateSelection();

        // Force a new fetch to get templates from all sites
        const allSitesFetchParams = {
                    query: { fullTitle: '' },
            queryOptions: {},
            start: 0,
                    count: CONFIG.PAGE_SIZE,
            sort: [],
            onComplete: function(templates, request) {
                        Logger.log('All sites templates loaded:', templates ? templates.length : 0);

                // Force the FilteringSelect to refresh its dropdown
                        const templateSel = DOMUtils.getWidget("templateSel");
                        if (templateSel && templateSel.loadDropDown) {
                    templateSel._announceOption = function() {}; // Prevent announcements
                    templateSel.loadDropDown(function() {
                                Logger.log('FilteringSelect dropdown refreshed with all sites data');
                                // Enhance pagination items after refresh
                                UIEnhancements.enhancePaginationItems();
                    });
                }
            }
        };

                if (templateStore) {
        templateStore.fetch(allSitesFetchParams);
    }
            } catch (error) {
                Logger.error('Error handling all site selection:', error);
            }
        }
    };

    // Initialization Functions
    const Initialization = {
        /**
         * Processes and validates the host ID
         */
        processHostId: function() {
            Logger.log('Processing hostId from session:', hostId);

            if (ValidationUtils.isValidHostId(hostId)) {
                Logger.log('Using specific site hostId:', hostId);
                return hostId;
            } else {
                Logger.log('No specific site selected, will show all sites. hostId was:', hostId);
                return '';
            }
        },

        /**
         * Creates the template store
         */
        createTemplateStore: function(actualHostId, templateId) {
            try {
                return new dotcms.dojo.data.TemplateReadStore({
                    hostId: actualHostId,
                    templateSelected: templateId,
                    allSiteLabel: actualHostId === '', // Only show "All Sites" option if no specific site
                    debug: CONFIG.DEBUG_MODE
                });
            } catch (error) {
                Logger.error('Error creating template store:', error);
                throw error;
            }
        },

        /**
         * Creates the template select widget
         */
        createTemplateSelect: function(templateId) {
            try {
                const widget = new dijit.form.FilteringSelect({
                    id: "templateSel",
                    name: "templateSel",
                    style: `width:${CONFIG.FILTER_SELECT_WIDTH};`,
                    onChange: EventHandlers.onTemplateChanged.bind(EventHandlers),
                    store: templateStore,
                    searchDelay: CONFIG.SEARCH_DELAY,
                    pageSize: CONFIG.PAGE_SIZE,
                    autoComplete: false,
                    ignoreCase: true,
                    labelType: "html",
                    searchType: "html",
                    labelAttr: "htmlTitle",
                    searchAttr: "fullTitle",
                    value: templateId,
                    invalidMessage: '$text.get("Invalid-option-selected")',
                    queryExpr: "${0}*",
                    hasDownArrow: true
                }, "templateHolder");

                // Connect to dropdown open event to enhance pagination items
                dojo.connect(widget, '_openDropDown', function() {
                    setTimeout(() => {
                        UIEnhancements.enhancePaginationItems();
                    }, 50);
                });

                return widget;
            } catch (error) {
                Logger.error('Error creating template select:', error);
                throw error;
            }
        },

        /**
         * Performs initial template fetch
         */
        performInitialFetch: function() {
            const templateFetchParams = {
                query: { fullTitle: '' },
                queryOptions: {},
                start: 0,
                count: CONFIG.PAGE_SIZE,
                sort: [],
                onComplete: EventHandlers.onTemplateFetchComplete.bind(EventHandlers)
            };

            try {
                templateStore.fetch(templateFetchParams);
            } catch (error) {
                Logger.error('Error performing initial fetch:', error);
            }
        },

        /**
         * Main initialization function
         */
        initialize: function() {
            try {
                Logger.log('Starting template custom field initialization');

                // Require necessary dependencies
                dojo.require("dotcms.dojo.data.TemplateReadStore");

                const templateId = DOMUtils.getElementValue("template");
                const isTemplateValid = ValidationUtils.isValidTemplateId(templateId);

                // Set current template ID
                DOMUtils.setElementValue("currentTemplateId", templateId);

                // Process host ID
                const actualHostId = this.processHostId();

                // Create template store
                templateStore = this.createTemplateStore(actualHostId, templateId);

                // Create template select widget
                templateSelect = this.createTemplateSelect(templateId);

                // Setup UI enhancements
                UIEnhancements.setupPaginationHandlers();

                // Load template image if valid template is selected
                if (isTemplateValid) {
                    TemplateManager.fetchTemplateImage(templateId);

                    const templateSel = DOMUtils.getWidget("templateSel");
                    if (templateSel) {
                        templateSel.set("value", templateId);
                    }
                }

                // Perform initial fetch
                this.performInitialFetch();

                Logger.log('Template custom field initialization completed');

            } catch (error) {
                Logger.error('Error during initialization:', error);
            }
        }
    };

    // Initialize when DOM is ready
    dojo.ready(function() {
        try {
            Initialization.initialize();
        } catch (error) {
            console.error('[TemplateCustomField] Critical initialization error:', error);
        }
    });

    // Expose necessary functions globally for backwards compatibility
    window.templateChanged = EventHandlers.onTemplateChanged.bind(EventHandlers);
    window.resetTemplateSelection = TemplateManager.resetTemplateSelection.bind(TemplateManager);
    window.getTemplateCallBack = TemplateManager.handleTemplateImageResponse.bind(TemplateManager);
    window.isInodeSet = ValidationUtils.isInodeSet;

})();
</script>

<div id="templateHolder"></div>
<input id="currentTemplateId" type="hidden" name="currentTemplateId" value=""/>
<div>
    <img id="templateThumbnailHolder" src="/html/images/shim.gif" alt="Template Thumbnail"/>
</div>

