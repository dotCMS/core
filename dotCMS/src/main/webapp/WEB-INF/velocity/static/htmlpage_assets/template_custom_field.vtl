<script type="application/javascript">
// Global Constants
const hostId = "$request.getSession().getAttribute('CMS_SELECTED_HOST_ID')";
const defaultTemplateName = '$config.getStringProperty("DEFAULT_TEMPLATE_NAME", "System Template")'; // try to preload the default template.

dojo.require("dotcms.dojo.data.TemplateReadStore");

// UTILS

/**
* Normalizes the key of a template
*
*/
const normalizeKey = function (template) {
    return template.fullTitle.replace(new RegExp("\\("+template.hostName+"\\)"), '').replace(/\s+/g,'').toLowerCase();
}

/**
* Returns a map of templates by name and by id
*
*/
const getTemplatesMaps = (templates) => {
    const mapByName = templates.reduce(function(map, template) {
        const key = normalizeKey(template);
        if (!map[key]) {
            map[key] = template;
        }

        return map;
    }, {});

    const mapById = templates.reduce(function(map, template) {
        map[template.identifier] = template;
        return map;
    }, {});


    return {
        mapByName,
        mapById
    }
}

// UTILS END
/**
* Fetches the template image from the server
*
*/
function fetchTemplateImage(templateId) {
    fetch("/api/v1/templates/image", {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ templateId})
    }).then(async (response) => {
        // The ok value represents the result of the response status 200 codes
        if (response.ok) {
            const result = await response.json();

            getTemplateCallBack(result); // here we pass the result of the json response to the callback function
        } else {
            throw new Error("Error fetching template image");
        }
    })
    .catch((error) => {
        const imageEl = dojo.byId("templateThumbnailHolder");
        imageEl.src = "/html/images/shim.gif";
        imageEl.style.border = "0px";
    });
};

/**
* Callback function to handle the template fetch
*
*/
const onTemplateFetchComplete = function(templates, currentRequest){
    const templateId = dojo.byId("template").value;
    const isTemplateValid  = templateId && templateId != "0";

    console.log("templateId", templateId);

    if(!templates || templates.length === 0){
        return;
    }

    const { mapById, mapByName } = getTemplatesMaps(templates);
    const normalizedName = defaultTemplateName.replace(/\s+/g,'').toLowerCase();
    const template = isTemplateValid ? mapById[templateId]:mapByName[normalizedName];

    if(!template){
        return;
    }

    const { identifier, fullTitle } = template;
    // We set the values directly into the components because setting it direcrtly into`templateSel` fires another load operation.
    dojo.byId("currentTemplateId").value = identifier;
    dojo.byId("template").value = identifier;
    dijit.byId('templateSel').set("displayedValue", fullTitle);
    fetchTemplateImage(identifier);
};

/**
* Handles the template change event
*
*/
function templateChanged() {
    const templateSel=dijit.byId("templateSel");
    const value=templateSel.get('value');

    if(!value) {
        return;
    }

    if(value == "0") {
        templateSel.set("value","");
        templateSel.filter();

        return;
    }

    dojo.byId("template").value=value;
    fetchTemplateImage(value);
}

/**
* Get the template callback
*
*/
function getTemplateCallBack(data) {
    const imageInode = data.identifier;
    const imageExtension = data.extension;
    const imageEl=dojo.byId("templateThumbnailHolder");

    if (isInodeSet(imageInode)) {
    	imageEl.src = "/dA/" + imageInode + "/250w";
        imageEl.style.border = '1px solid #B6CBEB';
        imageEl.style.marginTop = '1rem';
    } else {
        imageEl.src  = "/html/images/shim.gif";
        imageEl.style.border = '0px';
    }
    
}

dojo.ready(function(){
    const templateId = dojo.byId("template").value;
    const isTemplateValid  = templateId && templateId != "0";

    const currentTemplateIdElement = dojo.byId("currentTemplateId");
    currentTemplateIdElement.value = templateId;

    const templateStore = new dotcms.dojo.data.TemplateReadStore({
        hostId: hostId,
        templateSelected: templateId
    });

    const templateSelect=new dijit.form.FilteringSelect({
        id:"templateSel",
        name:"templateSel",
        style:"width:350px;",
        onChange: templateChanged,
        store: templateStore,
        searchDelay: 300,
        pageSize: 15,
        autoComplete: false,
        ignoreCase: true,
        labelType:"html",
        searchType:"html",
        labelAttr: "htmlTitle",
        searchAttr: "fullTitle",
        value: templateId,
        invalidMessage: '$text.get("Invalid-option-selected")'
    },"templateHolder");

    if (isTemplateValid){
       fetchTemplateImage(templateId);

        const templateSel = dijit.byId("templateSel");
        templateSel.set("value", templateId);
    }

    const templateFetchParams = {
        query: {
            fullTitle: '*',
            hostId: hostId
        },
        queryOptions: {},
        start: 0,
        count: 1000,
        sort: [],
        onComplete: onTemplateFetchComplete
    };

    templateStore.fetch(templateFetchParams);
});
</script>

<div id="templateHolder"></div>
<input id="currentTemplateId" type="hidden" name="currentTemplateId" value=""/>
<div>
    <img id="templateThumbnailHolder" src="/html/images/shim.gif" alt="Template Thumbnail"/>
</div>

