openapi: 3.0.1
info:
  title: dotCMS REST API
  version: "3"
servers:
- description: dotCMS Server
  url: /
tags:
- externalDocs:
    description: Additional Authentication API information
    url: https://www.dotcms.com/docs/latest/rest-api-authentication
  name: Authentication
- description: Web accessibility checking and compliance
  name: Accessibility Checker
- description: System administration and management tools
  name: Administration
- description: AI-powered content generation and analysis endpoints
  name: AI
- description: System announcements and notifications
  name: Announcements
- description: API token management and authentication
  externalDocs:
    description: Additional API token information
    url: https://www.dotcms.com/docs/latest/rest-api-authentication#APIToken
  name: API Token
- description: Third-party application integration and configuration
  name: Apps
- description: File and folder browser tree operations
  name: Browser Tree
- description: Content bundle management and deployment
  name: Bundle
- description: Cache provider management and operations
  name: Cache Management
- description: Content categorization and taxonomy
  name: Categories
- description: Cluster nodes and distributed system management
  name: Cluster Management
- description: Container templates and management
  name: Containers
- description: Endpoints for managing content and contentlets
  name: Content
- description: Content performance analytics and reporting
  name: Content Analytics
- description: Content delivery and rendering
  name: Content Delivery
- description: Content reporting and analytics
  name: Content Report
- description: Content type definitions and schema management
  externalDocs:
    description: Additional Content Type API information
    url: https://www.dotcms.com/docs/latest/content-type-api
  name: Content Type
- description: Content type field definitions and configuration
  name: Content Type Field
- description: Data integrity checking and conflict resolution
  name: Data Integrity
- description: Publishing environment management and configuration
  name: Environment
- description: A/B testing and experimentation management
  name: Experiments
- description: File asset management and download operations
  name: File Assets
- description: Folder structure and organization
  name: Folders
- description: Form management and processing
  name: Forms
- description: System health monitoring and diagnostics
  name: Health
- description: Language management and localization
  name: Internationalization
- description: JavaScript execution and server-side scripting
  name: JavaScript
- description: Background job management and monitoring
  name: Job Queue
- description: License management and validation
  name: License
- description: System maintenance and administration operations
  name: Maintenance
- description: Site navigation and menu management
  name: Navigation
- description: User notifications and alerts management
  name: Notifications
- description: OSGi plugin management and dynamic deployment
  name: OSGi Plugins
- description: Endpoints that operate on pages
  externalDocs:
    description: Additional Page API information
    url: https://www.dotcms.com/docs/latest/page-rest-api-layout-as-a-service-laas
  name: Page
- description: Permission management and access control
  name: Permissions
- description: Content persona management and targeting
  name: Personas
- description: Content personalization and persona management
  name: Personalization
- description: Portlet management and administration
  name: Portlets
- description: Content publishing and deployment operations
  name: Publishing
- description: Remote content publishing and synchronization
  name: Push Publishing
- description: Content relationship management
  name: Relationships
- description: User role and permission management
  name: Roles
- description: Business rules and conditional logic management
  name: Rules Engine
- description: SAML SSO authentication and integration
  name: SAML Authentication
- description: Content search and query operations
  name: Search
- description: Search index management and operations
  name: Search Index
- description: Multi-site management and configuration
  name: Sites
- description: System-level operations and Redis management
  name: System
- description: System configuration and company settings
  name: System Configuration
- description: System logging configuration and management
  name: System Logging
- description: System monitoring and health checks
  name: System Monitoring
- description: Storage providers and data replication management
  name: System Storage
- description: Server log file monitoring and real-time viewing
  name: TailLog
- description: Content tagging and labeling
  name: Tags
- description: Template design and management
  name: Templates
- description: Temporary file upload and management operations
  name: Temporary Files
- description: Testing utilities and development endpoints
  name: Testing
- description: Theme design and management
  name: Themes
- description: Administrative tool group management
  name: Tool Groups
- description: User account management and administration
  name: Users
- description: Content variant management and personalization
  name: Variants
- description: Version control and content archiving
  name: Versionables
- description: Velocity Template Language execution and rendering
  name: VTL
- description: Web asset management and operations
  name: Web Assets
- description: Widget development and rendering
  name: Widgets
- description: Endpoints that perform operations related to workflows.
  externalDocs:
    description: Additional Workflow API information
    url: https://www.dotcms.com/docs/latest/workflow-rest-api
  name: Workflow
paths:
  /auditPublishing/get/{bundleId}:
    get:
      description: Retrieves the publishing audit status for a specific bundle by
        its ID. Returns the serialized status information in XML format.
      operationId: get_2
      parameters:
      - description: Bundle ID to get audit status for
        in: path
        name: bundleId
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/xml: {}
          description: Publish audit status retrieved successfully
        "404":
          content:
            text/xml: {}
          description: Bundle not found or no audit status available
        "500":
          content:
            text/xml: {}
          description: Internal server error retrieving audit status
      summary: Get publish audit status
      tags:
      - Publishing
  /bundle:
    post:
      description: Uploads and processes a bundle file asynchronously
      operationId: uploadBundleAsync
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Bundle file to upload
        required: true
      responses:
        "200":
          description: Bundle upload started successfully (no body)
        "400":
          content:
            application/json: {}
          description: Invalid file format or upload error
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Upload bundle asynchronously
      tags:
      - Bundle
  /bundle/_download/{bundleId}:
    get:
      description: Downloads a generated bundle file as a tar.gz archive
      operationId: downloadBundle
      parameters:
      - description: Bundle identifier
        in: path
        name: bundleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Bundle downloaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "404":
          content:
            application/json: {}
          description: Bundle not found or not generated
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Download bundle
      tags:
      - Bundle
  /bundle/_generate:
    post:
      description: Generates a bundle file asynchronously for the specified bundle
        ID and operation
      operationId: generateBundle
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateBundleForm"
        description: Bundle generation parameters
        required: true
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Bundle generation started successfully
        "400":
          content:
            application/json: {}
          description: Invalid request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "404":
          content:
            application/json: {}
          description: Bundle not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Generate bundle
      tags:
      - Bundle
  /bundle/all:
    delete:
      description: Deletes all failed and succeeded bundles. The response will be
        notified by socket message.
      operationId: deleteAll
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Bundle deletion process started successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete all bundles
      tags:
      - Bundle
  /bundle/all/fail:
    delete:
      description: Deletes all failed bundles. The response will be notified by socket
        message.
      operationId: deleteAllFail
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Failed bundle deletion process started successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete all failed bundles
      tags:
      - Bundle
  /bundle/all/success:
    delete:
      description: Deletes all successful bundles. The response will be notified by
        socket message.
      operationId: deleteAllSuccess
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Successful bundle deletion process started successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete all successful bundles
      tags:
      - Bundle
  /bundle/deleteenvironmentpushhistory/{params}:
    get:
      description: Deletes push history for a specific environment
      operationId: deleteEnvironmentPushHistory
      parameters:
      - description: URL parameters containing environmentid
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Environment push history deleted successfully
        "400":
          content:
            application/json: {}
          description: Invalid environment ID
        "401":
          content:
            application/json: {}
          description: Unauthorized access
      summary: Delete environment push history
      tags:
      - Bundle
  /bundle/deletepushhistory/{params}:
    get:
      description: Deletes push history for a specific asset
      operationId: deletePushHistory
      parameters:
      - description: URL parameters containing assetid
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Push history deleted successfully
        "400":
          content:
            application/json: {}
          description: Invalid asset ID
        "401":
          content:
            application/json: {}
          description: Unauthorized access
      summary: Delete push history
      tags:
      - Bundle
  /bundle/getunsendbundles/{params}:
    get:
      description: "Returns a list of bundles that haven't been sent to any environment,\
        \ filtered by owner and name"
      operationId: getUnsendBundles
      parameters:
      - description: "URL parameters containing userid, name, start, and count filters"
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: JSON object containing bundle information and pagination
                  data
          description: Unsent bundles retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access
      summary: Get unsent bundles
      tags:
      - Bundle
  /bundle/ids:
    delete:
      description: Deletes multiple bundles by their identifiers. The response will
        be notified by socket message.
      operationId: deleteBundlesByIdentifiers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBundlesByIdentifierForm"
        description: Bundle identifiers to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Bundle deletion process started successfully
        "400":
          content:
            application/json: {}
          description: Invalid request body or bundle identifiers
        "401":
          content:
            application/json: {}
          description: Unauthorized access
      summary: Delete bundles by identifiers
      tags:
      - Bundle
  /bundle/olderthan/{olderThan}:
    delete:
      description: Deletes bundles older than a specified date. Unsent bundles will
        not be deleted. The response will be notified by socket message.
      operationId: deleteBundlesOlderThan
      parameters:
      - description: ISO date string - bundles older than this date will be deleted
        in: path
        name: olderThan
        required: true
        schema:
          type: string
          format: date-time
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Bundle deletion process started successfully
        "400":
          content:
            application/json: {}
          description: Invalid date format or date is in the future
        "401":
          content:
            application/json: {}
          description: Unauthorized access
      summary: Delete bundles older than date
      tags:
      - Bundle
  /bundle/sync:
    post:
      description: Uploads and processes a bundle file synchronously
      operationId: uploadBundleSync
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Bundle file to upload
        required: true
      responses:
        "200":
          description: Bundle uploaded and processed successfully (no body)
        "400":
          content:
            application/json: {}
          description: Invalid file format or upload error
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Upload bundle synchronously
      tags:
      - Bundle
  /bundle/updatebundle/{params}:
    get:
      description: Updates the name of an existing bundle
      operationId: updateBundle
      parameters:
      - description: URL parameters containing bundleid and bundleName
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Bundle updated successfully
        "400":
          content:
            application/json: {}
          description: Invalid bundle ID or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "404":
          content:
            application/json: {}
          description: Bundle not found
      summary: Update bundle
      tags:
      - Bundle
  /bundle/{bundleId}/assets:
    get:
      description: Retrieves all assets (publish queue elements) associated with a
        specific bundle
      operationId: getPublishQueueElements
      parameters:
      - description: Bundle identifier
        in: path
        name: bundleId
        required: true
        schema:
          type: string
      - description: Maximum number of assets to return
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Assets retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid bundle ID or request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "404":
          content:
            application/json: {}
          description: Bundle not found
      summary: Get bundle assets
      tags:
      - Bundle
  /bundle/{bundleId}/manifest:
    get:
      description: Downloads the manifest file for a specific bundle as a CSV file
      operationId: downloadManifest
      parameters:
      - description: Bundle identifier
        in: path
        name: bundleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Manifest downloaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "404":
          content:
            application/json: {}
          description: Bundle or manifest not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Download bundle manifest
      tags:
      - Bundle
  /bundlePublisher/publish:
    post:
      description: Receives a content bundle from another dotCMS instance and publishes
        it. Validates authentication tokens and adds the bundle to the publish thread
        for processing. Requires Enterprise license.
      operationId: publish
      parameters:
      - description: Response type for the operation
        in: query
        name: type
        schema:
          type: string
      - description: Response callback for the operation
        in: query
        name: callback
        schema:
          type: string
      - description: Whether to force push everything regardless of filters
        in: query
        name: FORCE_PUSH
        schema:
          type: boolean
      - description: ID of the Push Publishing Filter used to generate the bundle
        in: query
        name: filterkey
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bundle"
          description: Bundle published successfully
        "400":
          content:
            application/json: {}
          description: Bad request - bundle expected in request body
        "401":
          content:
            application/json: {}
          description: Unauthorized - invalid or missing authentication token
        "403":
          content:
            application/json: {}
          description: Forbidden - community license or insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error during bundle publishing
      summary: Publish content bundle
      tags:
      - Bundle
  /cluster/getESConfigProperties/{params}:
    get:
      description: "Returns Elasticsearch cluster configuration properties including\
        \ bind address, cache port, and Elasticsearch transport TCP port for the current\
        \ server."
      operationId: getESConfigProperties
      parameters:
      - description: URL parameters for the ES configuration request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Elasticsearch configuration properties retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving ES configuration
      summary: Get Elasticsearch configuration properties
      tags:
      - Cluster Management
  /cluster/getNodesStatus/{params}:
    get:
      description: Returns a map of cache cluster nodes status including server health
        information and cluster state. Validates cache transport across all cluster
        members.
      operationId: getNodesInfo
      parameters:
      - description: URL parameters for the cluster status request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Cluster nodes status retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving cluster status
      summary: Get cluster nodes status
      tags:
      - Cluster Management
  /cluster/licenseRepoStatus:
    get:
      description: Returns the current status of the license repository including
        total licenses and available license count.
      operationId: getLicenseRepoStatus
      parameters:
      - description: URL parameters for the license repository status request
        in: path
        name: params
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: License repository status retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving license repository status
      summary: Get license repository status
      tags:
      - Cluster Management
  /cluster/remove/{params}:
    post:
      description: Removes a specified server from the cluster table. This operation
        permanently removes the server from the cluster configuration.
      operationId: removeFromCluster
      parameters:
      - description: URL parameters including serverid to remove from cluster
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          description: Server removed from cluster successfully (no content)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error removing server from cluster
      summary: Remove server from cluster
      tags:
      - Cluster Management
  /cluster/test:
    get:
      description: Sends a cluster ping that is recorded in the logs to test cluster
        connectivity and validate that all cluster nodes are communicating properly.
      operationId: testCluster
      responses:
        "200":
          description: Cluster test completed successfully (no content)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
      summary: Test cluster connectivity
      tags:
      - Cluster Management
  /config/deleteEndpoint:
    post:
      deprecated: true
      description: Deletes a publishing endpoint. This endpoint is deprecated - use
        EndpointResource.delete instead.
      operationId: deleteEndpoint
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                callback:
                  type: string
                  description: Callback parameter for the operation
                endPoint:
                  type: string
                  description: Endpoint ID to delete
                password:
                  type: string
                  description: Password for authentication
                type:
                  type: string
                  description: Type parameter for the operation
                user:
                  type: string
                  description: Username for authentication
              required:
              - endPoint
              - password
              - user
      responses:
        "200":
          content:
            application/json: {}
          description: Endpoint deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing endpoint parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error deleting endpoint
      summary: Delete endpoint (deprecated)
      tags:
      - System Configuration
  /config/deleteEnvironment:
    post:
      description: Deletes a publishing environment and removes it from the user session
        if it was selected. This operation permanently removes the environment from
        the system.
      operationId: deleteEnvironment
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                callback:
                  type: string
                  description: Callback parameter for the operation
                environment:
                  type: string
                  description: Environment ID to delete
                password:
                  type: string
                  description: Password for authentication
                type:
                  type: string
                  description: Type parameter for the operation
                user:
                  type: string
                  description: Username for authentication
              required:
              - environment
              - password
              - user
      responses:
        "200":
          content:
            application/json: {}
          description: Environment deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing environment parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error deleting environment
      summary: Delete environment
      tags:
      - System Configuration
  /config/regenerateKey:
    post:
      description: Regenerates the company's key digest. This creates a new security
        key for the company and returns the new key digest.
      operationId: regenerateKey
      responses:
        "200":
          content:
            application/json: {}
          description: Company key regenerated successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error regenerating key
      summary: Regenerate company key
      tags:
      - System Configuration
  /config/saveCompanyAuthTypeInfo:
    post:
      description: "Updates the authentication type for the company. This controls\
        \ how users authenticate to the system (e.g., local authentication, LDAP,\
        \ etc.)."
      operationId: saveCompanyAuthTypeInfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                authType:
                  type: string
                  description: "Authentication type for the company (e.g., 'id', 'emailAddress')"
                password:
                  type: string
                  description: Password for authentication
                user:
                  type: string
                  description: Username for authentication
              required:
              - authType
              - password
              - user
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Simple response object with success status and message
          description: Company authentication type saved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing or invalid authentication type parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error saving authentication type
      summary: Save company authentication type
      tags:
      - System Configuration
  /config/saveCompanyBasicInfo:
    post:
      description: "Updates basic company information including URLs, email settings,\
        \ colors, and logos. This endpoint is called from the CMS Config portlet to\
        \ configure company branding and settings."
      operationId: saveCompanyBasicInfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                city:
                  type: string
                  description: Login logo asset path
                emailAddress:
                  type: string
                  description: Company email address
                homeURL:
                  type: string
                  description: Home URL for the company
                mx:
                  type: string
                  description: Mail exchange server
                password:
                  type: string
                  description: Password for authentication
                portalURL:
                  type: string
                  description: Portal URL for the company
                size:
                  type: string
                  description: Background color for the company theme
                state:
                  type: string
                  description: Navigation bar logo asset path (Enterprise only)
                street:
                  type: string
                  description: Secondary color for the company theme
                type:
                  type: string
                  description: Primary color for the company theme
                user:
                  type: string
                  description: Username for authentication
              required:
              - emailAddress
              - password
              - portalURL
              - size
              - street
              - type
              - user
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Simple response object with success status and message
          description: Company basic information saved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing or invalid required parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error saving company information
      summary: Save company basic information
      tags:
      - System Configuration
  /config/saveCompanyLocaleInfo:
    post:
      description: Updates company locale settings including language and timezone
        information. This affects the default locale settings for users in the system.
      operationId: saveCompanyLocaleInfo
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                languageId:
                  type: string
                  description: Language ID for the company locale
                password:
                  type: string
                  description: Password for authentication
                timeZoneId:
                  type: string
                  description: Timezone ID for the company locale
                user:
                  type: string
                  description: Username for authentication
              required:
              - languageId
              - password
              - timeZoneId
              - user
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Simple response object with success status and message
          description: Company locale information saved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing or invalid timezone/language parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error saving locale information
      summary: Save company locale information
      tags:
      - System Configuration
  /config/saveCompanyLogo:
    post:
      deprecated: true
      description: Updates the company logo. This endpoint is deprecated - use saveCompanyBasicInfo
        instead for logo management.
      operationId: saveCompanyLogo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logoFile:
                  $ref: "#/components/schemas/FormDataContentDisposition"
                password:
                  type: string
                  description: Password for authentication
                user:
                  type: string
                  description: Username for authentication
              required:
              - logoFile
              - password
              - user
      responses:
        "200":
          content:
            text/html: {}
          description: Company logo saved successfully
        "400":
          content:
            text/html: {}
          description: Bad request - missing logo file
        "401":
          content:
            text/html: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            text/html: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            text/html: {}
          description: Internal server error saving company logo
      summary: Save company logo (deprecated)
      tags:
      - System Configuration
  /content/_search:
    post:
      description: "Performs a comprehensive content search using Lucene query syntax.\
        \ Supports filtering, sorting, pagination, and depth-based relationship loading.\
        \ Returns structured JSON with search metadata and contentlet results."
      operationId: search
      parameters:
      - description: Store query in session for Query Tool portlet
        in: query
        name: rememberQuery
        schema:
          type: boolean
          default: false
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchForm"
        description: "Search criteria including query, sort, pagination and filters"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySearchView"
          description: Search completed successfully
        "400":
          content:
            application/json: {}
          description: Invalid search parameters or malformed query
        "401":
          content:
            application/json: {}
          description: Authentication required
        "403":
          content:
            application/json: {}
          description: Insufficient permissions to access content
        "500":
          content:
            application/json: {}
          description: Internal server error during search
      summary: Search content with advanced parameters
      tags:
      - Content Delivery
  /content/canLock/{params}:
    put:
      deprecated: true
      description: Legacy endpoint for checking lock status of content. This endpoint
        is deprecated and will be removed in future versions. Use the versioned v1
        content API instead.
      operationId: canLockContent
      parameters:
      - description: URL parameters containing content ID or inode
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json: {}
          description: Lock status checked successfully (deprecated endpoint)
        "403":
          content:
            application/json: {}
          description: Insufficient permissions or security error
        "404":
          content:
            application/json: {}
          description: Content not found
      summary: Check if content can be locked (deprecated)
      tags:
      - Content Delivery
  /content/indexcount/{query}:
    get:
      description: Returns the total count of contentlets matching the specified Lucene
        query. This is useful for pagination calculations and understanding result
        set sizes without retrieving the actual content data.
      operationId: indexCount_1
      parameters:
      - description: Lucene query string to count matching contentlets
        in: path
        name: query
        required: true
        schema:
          type: string
      - description: Response format type (optional)
        in: query
        name: type
        schema:
          type: string
      - description: JSONP callback function name (optional)
        in: query
        name: callback
        schema:
          type: string
      responses:
        "200":
          content:
            text/plain: {}
          description: Count retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid query syntax
        "401":
          content:
            application/json: {}
          description: Authentication required
        "403":
          content:
            application/json: {}
          description: Insufficient permissions to query content
        "500":
          content:
            application/json: {}
          description: Internal server error during count operation
      summary: Count content matching query
      tags:
      - Content Delivery
  /content/indexsearch/{query}/sortby/{sortby}/limit/{limit}/offset/{offset}:
    get:
      description: Performs a direct Elasticsearch index search using Lucene query
        syntax. Returns a simplified JSON array containing only inode and identifier
        for each matching contentlet. This is a lighter-weight alternative to the
        POST search endpoint.
      operationId: indexSearch
      parameters:
      - description: "Lucene query string (e.g., '+structurename:webpagecontent +live:true')"
        in: path
        name: query
        required: true
        schema:
          type: string
      - description: "Field to sort results by (e.g., 'modDate', 'title')"
        in: path
        name: sortby
        required: true
        schema:
          type: string
      - description: Maximum number of results to return
        in: path
        name: limit
        required: true
        schema:
          type: integer
          format: int32
      - description: Number of results to skip for pagination
        in: path
        name: offset
        required: true
        schema:
          type: integer
          format: int32
      - description: Response format type (optional)
        in: query
        name: type
        schema:
          type: string
      - description: JSONP callback function name (optional)
        in: query
        name: callback
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Index search completed successfully
        "400":
          content:
            application/json: {}
          description: Invalid query syntax or parameters
        "401":
          content:
            application/json: {}
          description: Authentication required
        "403":
          content:
            application/json: {}
          description: Insufficient permissions to search index
        "500":
          content:
            application/json: {}
          description: Internal server error during index search
      summary: Search content index with URL parameters
      tags:
      - Content Delivery
  /content/lock/{params}:
    put:
      deprecated: true
      description: Legacy endpoint for locking content. This endpoint is deprecated
        and will be removed in future versions. Use the versioned v1 content API instead.
      operationId: lockContent
      parameters:
      - description: URL parameters containing content ID or inode
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json: {}
          description: Content locked successfully (deprecated endpoint)
        "403":
          content:
            application/json: {}
          description: Insufficient permissions or security error
        "404":
          content:
            application/json: {}
          description: Content not found
      summary: Lock content (deprecated)
      tags:
      - Content Delivery
  /content/unlock/{params}:
    put:
      deprecated: true
      description: Legacy endpoint for unlocking content. This endpoint is deprecated
        and will be removed in future versions. Use the versioned v1 content API instead.
      operationId: unlockContent
      parameters:
      - description: URL parameters containing content ID or inode
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json: {}
          description: Content unlocked successfully (deprecated endpoint)
        "403":
          content:
            application/json: {}
          description: Insufficient permissions or security error
        "404":
          content:
            application/json: {}
          description: Content not found
      summary: Unlock content (deprecated)
      tags:
      - Content Delivery
  /content/{params}:
    get:
      description: "Retrieves contentlets using flexible URL parameters. Supports\
        \ content lookup by identifier, inode, or Lucene query. Includes depth-based\
        \ relationship loading (0-3 levels) and supports both JSON and XML output\
        \ formats. This is a legacy endpoint - prefer using the versioned v1 content\
        \ API for new implementations."
      operationId: getContent
      parameters:
      - description: "URL parameters in key/value format (e.g., 'id/abc123' or 'query/+structurename:News/limit/10')"
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json: {}
          description: Content retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid parameters or malformed query
        "401":
          content:
            application/json: {}
          description: Authentication required
        "403":
          content:
            application/json: {}
          description: Insufficient permissions to access content
        "404":
          content:
            application/json: {}
          description: Content not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: "Get content by ID, inode, or query"
      tags:
      - Content Delivery
    post:
      deprecated: true
      description: "Legacy endpoint for creating content using JSON, XML, or form-encoded\
        \ data. This endpoint is deprecated and will be removed in future versions.\
        \ Use the WorkflowResource#fireActionDefault instead."
      operationId: singlePOST
      parameters:
      - description: URL parameters for content creation
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: string
          application/xml:
            schema:
              type: string
        description: "Content data in JSON, XML, or form format"
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Content created successfully (deprecated endpoint)
        "400":
          content:
            application/json: {}
          description: Invalid request data or parameters
        "403":
          content:
            application/json: {}
          description: Insufficient permissions or security error
      summary: Create content with JSON/XML/form data (deprecated)
      tags:
      - Content Delivery
    put:
      deprecated: true
      description: "Legacy endpoint for updating content using JSON, XML, or form-encoded\
        \ data. This endpoint is deprecated and will be removed in future versions.\
        \ Use the WorkflowResource#fireActionDefault instead."
      operationId: singlePUT
      parameters:
      - description: URL parameters for content update
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/x-www-form-urlencoded:
            schema:
              type: string
          application/xml:
            schema:
              type: string
        description: "Content data in JSON, XML, or form format"
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Content updated successfully (deprecated endpoint)
        "400":
          content:
            application/json: {}
          description: Invalid request data or parameters
        "403":
          content:
            application/json: {}
          description: Insufficient permissions or security error
      summary: Update content with JSON/XML/form data (deprecated)
      tags:
      - Content Delivery
  /environment:
    get:
      description: Retrieves a list of all available publishing environments with
        their configurations and associated servers.
      operationId: loadAllEnvironments
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEnvironmentsView"
          description: Collection of environments.
      summary: Returns the environments
      tags:
      - Environment
    post:
      description: Creates a new publishing environment with the specified configuration.
        The environment can be used for content publishing to target servers.
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentForm"
        description: Environment configuration data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEnvironmentView"
          description: If creation is successfully.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: If the environment already exits
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
          description: "If the user is not an admin or access to the configuration\
            \ layout or does have permission, it will return a 403."
      summary: Creates an environment
      tags:
      - Environment
  /environment/loadenvironments/{params}:
    get:
      description: Returns a JSON representation of the environments (with servers)
        that a specific role can push to. Each environment node contains ID and name
        information.
      operationId: loadEnvironments
      parameters:
      - description: URL parameters including roleid to load environments for
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: JSON array of environment objects with id and name properties
          description: Environments loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or security error
        "500":
          content:
            application/json: {}
          description: Internal server error loading environments
      summary: Load environments for role
      tags:
      - Environment
  /environment/{id}:
    delete:
      description: Deletes a publishing environment and all its associated configurations.
        This action cannot be undone.
      operationId: delete_4
      parameters:
      - description: Environment identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: If deletion is successfully environment.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
          description: "If the user is not an admin or access to the configuration\
            \ layout or does have permission, it will return a 403."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoesNotExistException"
          description: If the environment does not exits
      summary: Deletes an environment
      tags:
      - Environment
    put:
      description: Updates the configuration of an existing publishing environment.
        This allows modification of environment settings and server configurations.
      operationId: update_1
      parameters:
      - description: Environment identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnvironmentForm"
        description: Environment configuration data to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEnvironmentView"
          description: If update is success.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: If the environment already exits
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
          description: "If the user is not an admin or access to the configuration\
            \ layout or does have permission, it will return a 403."
      summary: Updates an environment
      tags:
      - Environment
  /es/layout/{params}:
    get:
      description: Renders the Elasticsearch portlet layout component for the dotCMS
        backend interface. Used for displaying the Elasticsearch administration UI
        within the admin interface.
      operationId: getLayout_3
      parameters:
      - description: Layout parameters (portletId/jspName)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/html: {}
          description: Elasticsearch layout loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access Elasticsearch
            admin
        "500":
          content:
            application/json: {}
          description: Internal server error loading layout
      summary: Load Elasticsearch layout component
      tags:
      - Search
  /es/raw:
    get:
      description: Executes a raw Elasticsearch query via GET method and returns the
        raw Elasticsearch response without dotCMS processing or transformation.
      operationId: searchRawGet
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Raw Elasticsearch query response as JSON object
          description: Raw search executed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during raw search execution
      summary: Execute raw Elasticsearch query (GET)
      tags:
      - Search
    post:
      description: Executes a raw Elasticsearch query via POST method. Accepts the
        query from the request input stream and returns the raw Elasticsearch response
        without dotCMS processing or transformation.
      operationId: searchRaw
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Raw Elasticsearch query response as JSON object
          description: Raw search executed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during raw search execution
      summary: Execute raw Elasticsearch query (POST)
      tags:
      - Search
  /es/search:
    get:
      description: Executes a content search using Elasticsearch query syntax. Returns
        contentlets with optional relationship depth and category information. Supports
        both anonymous and authenticated access with appropriate permission filtering.
      operationId: search_2
      parameters:
      - description: "Relationship depth (0-3): 0=identifiers only, 1=related content,\
          \ 2=nested identifiers, 3=nested content, null=no relationships"
        in: query
        name: depth
        schema:
          type: string
      - description: Whether to return only live content
        in: query
        name: live
        schema:
          type: boolean
      - description: "Whether to return all category fields (name, key, description)\
          \ or just names"
        in: query
        name: allCategoriesInfo
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              type: string
        description: Elasticsearch query string in JSON format
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Search results containing contentlets array and elasticsearch
                  response metadata
          description: Search executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid Elasticsearch query or depth parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during search execution
      summary: Search content using Elasticsearch
      tags:
      - Search
    post:
      description: Executes a content search using Elasticsearch query syntax via
        POST method. Accepts JSON query in request body. Returns contentlets with
        optional relationship depth and category information.
      operationId: searchPost
      parameters:
      - description: "Relationship depth (0-3): 0=identifiers only, 1=related content,\
          \ 2=nested identifiers, 3=nested content, null=no relationships"
        in: query
        name: depth
        schema:
          type: string
      - description: Whether to return only live content
        in: query
        name: live
        schema:
          type: boolean
      - description: "Whether to return all category fields (name, key, description)\
          \ or just names"
        in: query
        name: allCategoriesInfo
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Elasticsearch query in JSON format
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Search results containing contentlets array and elasticsearch
                  response metadata
          description: Search executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid Elasticsearch query or depth parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during search execution
      summary: Search content using Elasticsearch (POST)
      tags:
      - Search
  /integrity/_fixconflictsfromremote:
    post:
      description: Processes conflict resolution data received from a remote endpoint.
        This endpoint receives multipart data containing the conflicts to fix and
        the type of objects being processed.
      operationId: fixConflictsFromRemote
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                DATA_TO_FIX:
                  type: object
                TYPE:
                  type: string
                  description: "Type of integrity conflicts to fix (e.g., HTMLPAGES,\
                    \ CONTENTLETS)"
              required:
              - TYPE
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Conflicts fixed successfully in remote endpoint
        "401":
          content:
            text/plain: {}
          description: Unauthorized - invalid or missing authentication token
        "403":
          content:
            text/plain: {}
          description: Forbidden - community license or insufficient permissions
        "500":
          content:
            text/plain: {}
          description: Internal server error fixing conflicts from remote
      summary: Fix conflicts from remote endpoint
      tags:
      - Data Integrity
  /integrity/_generateintegritydata:
    post:
      description: Generates integrity data for checking content conflicts between
        servers. This endpoint triggers the IntegrityDataGenerationJob to create verification
        data that can be used for integrity checking.
      operationId: generateIntegrityData
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Integrity data generation started successfully
        "401":
          content:
            text/plain: {}
          description: Unauthorized - invalid or missing authentication token
        "403":
          content:
            text/plain: {}
          description: Forbidden - community license or insufficient permissions
        "409":
          content:
            text/plain: {}
          description: Conflict - integrity job already running
        "500":
          content:
            text/plain: {}
          description: Internal server error during data generation
      summary: Generate integrity data
      tags:
      - Data Integrity
  /integrity/checkIntegrityProcessStatus/{params}:
    get:
      description: "Verifies the status of an integrity check process for a given\
        \ endpoint. Returns current status: processing, finished, no conflicts, or\
        \ error."
      operationId: checkIntegrityProcessStatus
      parameters:
      - description: URL parameters including the endpoint ID to check status for
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "JSON response containing process status (processing,\
                  \ finished, noConflicts, error) and relevant messages"
          description: Process status retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing required endpoint parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or security error
        "500":
          content:
            application/json: {}
          description: Internal server error checking process status
      summary: Check integrity process status
      tags:
      - Data Integrity
  /integrity/checkintegrity/{params}:
    get:
      description: Initiates an integrity check process between local and remote servers
        to identify data conflicts. This is the main entry point for the Integrity
        Checker process that compares local data with selected endpoint data.
      operationId: checkIntegrity
      parameters:
      - description: URL parameters including the endpoint ID for integrity checking
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: JSON response with success status and initialization
                  message
          description: Integrity check process initiated successfully
        "400":
          content:
            text/plain: {}
          description: Bad request - missing required endpoint parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or security error
        "500":
          content:
            application/json: {}
          description: Internal server error during integrity check initialization
      summary: Check data integrity
      tags:
      - Data Integrity
  /integrity/discardconflicts/{params}:
    get:
      description: Discards the conflicts between local node and given endpoint for
        a specific object type. This clears the temporary conflict data without making
        any changes to the actual content.
      operationId: discardConflicts
      parameters:
      - description: URL parameters including endpoint ID and type of conflicts to
          discard
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: JSON response confirming successful discard of conflicts
                  for the specified type
          description: Conflicts discarded successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing required endpoint or type parameters
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or security error
        "500":
          content:
            application/json: {}
          description: Internal server error discarding conflicts
      summary: Discard integrity conflicts
      tags:
      - Data Integrity
  /integrity/fixconflicts/{params}:
    get:
      description: Fixes data conflicts between local and remote servers. Can fix
        conflicts either locally or remotely based on the whereToFix parameter. This
        resolves integrity conflicts by replacing conflicting data.
      operationId: fixConflicts
      parameters:
      - description: "URL parameters including endpoint ID, type, and whereToFix (local/remote)"
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: JSON response with success status and message indicating
                  conflicts were fixed locally or remotely
          description: Conflicts fixed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - missing required parameters (endpoint, type,\
            \ or whereToFix)"
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or security error
        "500":
          content:
            application/json: {}
          description: Internal server error fixing conflicts
      summary: Fix data conflicts
      tags:
      - Data Integrity
  /integrity/getIntegrityResult/{params}:
    get:
      description: "Generates and returns the detailed integrity check results for\
        \ a given endpoint, grouped by object type (HTML Pages, Content Types, etc.)."
      operationId: getIntegrityResult
      parameters:
      - description: URL parameters including the endpoint ID to get results for
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "JSON response containing integrity conflict results\
                  \ grouped by object type (htmlpages, contentlets, folders, etc.)\
                  \ with detailed conflict information"
          description: Integrity results retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing required endpoint parameter
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or security error
        "500":
          content:
            application/json: {}
          description: Internal server error generating integrity results
      summary: Get integrity check results
      tags:
      - Data Integrity
  /integrity/{requestId}/integrityData:
    get:
      description: "Retrieves the generated integrity data as a ZIP file if the generation\
        \ process is complete. Returns status codes to indicate if the process is\
        \ still running, complete, or has encountered errors."
      operationId: getIntegrityData
      parameters:
      - description: Request ID returned from the integrity data generation process
        in: path
        name: requestId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/zip:
              schema:
                type: string
                format: binary
          description: Integrity data ZIP file ready for download
        "202":
          content:
            application/json: {}
          description: Accepted - integrity data generation still processing
        "401":
          content:
            application/json: {}
          description: Unauthorized - invalid authentication or request ID mismatch
        "500":
          content:
            text/plain: {}
          description: Internal server error during integrity data generation
      summary: Get integrity data file
      tags:
      - Data Integrity
  /js/dynamic:
    get:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property without additional path parameters.
      operationId: dynamicGet
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic GET JavaScript with inline code (no path)
      tags:
      - JavaScript
    post:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property via POST method without additional path parameters.
      operationId: dynamicPost
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic POST JavaScript with inline code (no path)
      tags:
      - JavaScript
    put:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property via PUT method without additional path parameters.
      operationId: dynamicPut
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic PUT JavaScript with inline code (no path)
      tags:
      - JavaScript
  /js/dynamic/{pathParam}:
    delete:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property via DELETE method. Allows for dynamic JavaScript
        execution with data deletion capabilities.
      operationId: dynamicDelete
      parameters:
      - description: Path parameters for the dynamic JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic DELETE JavaScript with inline code
      tags:
      - JavaScript
    get:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property. This allows for dynamic JavaScript execution without
        requiring pre-deployed script files.
      operationId: dynamicGet_1
      parameters:
      - description: Path parameters for the dynamic JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic GET JavaScript with inline code
      tags:
      - JavaScript
    patch:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property via PATCH method. Allows for dynamic JavaScript
        execution with partial data update capabilities.
      operationId: dynamicPatch
      parameters:
      - description: Path parameters for the dynamic JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic PATCH JavaScript with inline code
      tags:
      - JavaScript
    post:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property via POST method. Allows for dynamic JavaScript execution
        with data modification capabilities.
      operationId: dynamicPost_1
      parameters:
      - description: Path parameters for the dynamic JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic POST JavaScript with inline code
      tags:
      - JavaScript
    put:
      description: Executes JavaScript code sent inline in the request body under
        the 'javascript' property via PUT method. Allows for dynamic JavaScript execution
        with data update capabilities.
      operationId: dynamicPut_1
      parameters:
      - description: Path parameters for the dynamic JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string containing JavaScript code in 'javascript' property
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Dynamic JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript code or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute dynamic PUT JavaScript with inline code
      tags:
      - JavaScript
  /js/{folder}:
    delete:
      description: Executes a convention-based 'delete.js' file located under the
        specified folder without additional path parameters.
      operationId: delete_1
      parameters:
      - description: Folder name containing the delete.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        description: JSON data to pass to the JavaScript execution
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or request body
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute DELETE JavaScript by folder
      tags:
      - JavaScript
    get:
      description: Executes a convention-based 'get.js' file located under the specified
        folder without additional path parameters.
      operationId: get
      parameters:
      - description: Folder name containing the get.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        description: JSON data to pass to the JavaScript execution
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute GET JavaScript by folder
      tags:
      - JavaScript
    patch:
      description: "Executes a convention-based 'patch.js' file with multipart form\
        \ data support, located under the specified folder without additional path\
        \ parameters."
      operationId: patchMultipart
      parameters:
      - description: Folder name containing the patch.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data including files and form fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully with multipart data
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or multipart data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute PATCH JavaScript with multipart data by folder
      tags:
      - JavaScript
    post:
      description: "Executes a convention-based 'post.js' file with multipart form\
        \ data support, located under the specified folder without additional path\
        \ parameters."
      operationId: postMultipart
      parameters:
      - description: Folder name containing the post.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data including files and form fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully with multipart data
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or multipart data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute POST JavaScript with multipart data by folder
      tags:
      - JavaScript
    put:
      description: "Executes a convention-based 'put.js' file with multipart form\
        \ data support, located under the specified folder without additional path\
        \ parameters."
      operationId: putMultipart
      parameters:
      - description: Folder name containing the put.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data including files and form fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully with multipart data
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or multipart data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute PUT JavaScript with multipart data by folder
      tags:
      - JavaScript
  /js/{folder}/{pathParam}:
    delete:
      description: Executes a convention-based 'delete.js' file located under the
        specified folder with additional path parameters. The JavaScript code processes
        the request body and determines the response format.
      operationId: delete_2
      parameters:
      - description: Folder name containing the delete.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      - description: Additional path parameters for the JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        description: JSON data to pass to the JavaScript execution
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or request body
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute DELETE JavaScript by folder and path
      tags:
      - JavaScript
    get:
      description: "Executes a convention-based 'get.js' file located under the specified\
        \ folder with additional path parameters. The JavaScript code determines the\
        \ response format (JSON, XML, or plain text)."
      operationId: get_1
      parameters:
      - description: Folder name containing the get.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      - description: Additional path parameters for the JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        description: JSON data to pass to the JavaScript execution
      responses:
        "200":
          content:
            application/json: {}
          description: JavaScript executed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute GET JavaScript by folder and path
      tags:
      - JavaScript
    patch:
      description: "Executes a convention-based 'patch.js' file with multipart form\
        \ data support, located under the specified folder with additional path parameters.\
        \ Supports file uploads and form data."
      operationId: patchMultipart_1
      parameters:
      - description: Additional path parameters for the JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      - description: Folder name containing the patch.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data including files and form fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully with multipart data
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or multipart data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute PATCH JavaScript with multipart data by folder and path
      tags:
      - JavaScript
    post:
      description: "Executes a convention-based 'post.js' file with multipart form\
        \ data support, located under the specified folder with additional path parameters.\
        \ Supports file uploads and form data."
      operationId: postMultipart_1
      parameters:
      - description: Additional path parameters for the JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      - description: Folder name containing the post.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data including files and form fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully with multipart data
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or multipart data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute POST JavaScript with multipart data by folder and path
      tags:
      - JavaScript
    put:
      description: "Executes a convention-based 'put.js' file with multipart form\
        \ data support, located under the specified folder with additional path parameters.\
        \ Supports file uploads and form data."
      operationId: putMultipart_1
      parameters:
      - description: Additional path parameters for the JavaScript execution
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      - description: Folder name containing the put.js file
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data including files and form fields
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: JavaScript executed successfully with multipart data
        "400":
          content:
            application/json: {}
          description: Bad request - invalid JavaScript or multipart data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: JavaScript file not found
        "500":
          content:
            application/json: {}
          description: Internal server error during JavaScript execution
      summary: Execute PUT JavaScript with multipart data by folder and path
      tags:
      - JavaScript
  /license/all/{params}:
    get:
      description: "Retrieves all licenses from the license repository with details\
        \ including server ID, expiration, license level, and ping status."
      operationId: getAll
      parameters:
      - description: URL parameters for the request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                description: "Array of license objects containing license details\
                  \ including serverId, serial, level, dates, and ping status"
          description: Licenses retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving licenses
      summary: Get all licenses
      tags:
      - License
  /license/applyLicense:
    post:
      description: Applies a license from provided license text. Validates and installs
        the license text obtained from the licensing system.
      operationId: applyLicense
      parameters:
      - description: URL parameters for the license application
        in: path
        name: params
        required: true
        schema:
          type: string
      - description: License text to apply to the system
        in: query
        name: licenseText
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: License applied successfully or license validation error message
        "400":
          content:
            application/json: {}
          description: Bad request - missing license text parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during license application
      summary: Apply license text
      tags:
      - License
  /license/delete/{params}:
    delete:
      description: Deletes a specific license from the license repository by ID. This
        operation permanently removes the license entry from the repository.
      operationId: delete_5
      parameters:
      - description: URL parameters including the license ID to delete
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          description: License deleted successfully (no body)
        "400":
          content:
            text/plain: {}
          description: Bad request - no license ID provided
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during license deletion
      summary: Delete license from repository
      tags:
      - License
  /license/free/{params}:
    post:
      description: Releases a license from a specific server in the cluster. Can target
        remote servers via server actions or free the local server license. Supports
        cluster-wide license management.
      operationId: freeLicense
      parameters:
      - description: URL parameters including optional serverid and serial for remote
          license freeing
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          description: License freed successfully (no body)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during license freeing or timeout
      summary: Free license from server
      tags:
      - License
  /license/pick/{params}:
    post:
      description: Selects and activates a specific license from the repository by
        serial number. This operation switches the current active license if the user
        has appropriate permissions.
      operationId: pickLicense
      parameters:
      - description: URL parameters including the license serial number to pick
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          description: License picked successfully (no body)
        "304":
          content:
            application/json: {}
          description: Not modified - license already selected or community level
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during license selection
      summary: Pick license from repository
      tags:
      - License
  /license/requestCode/{params}:
    post:
      description: Generates a request code for obtaining a new license. Requires
        license type (trial/dev/prod) and license level parameters. Used in the license
        acquisition workflow.
      operationId: requestLicense
      parameters:
      - description: URL parameters for the license request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json: {}
          description: License request code generated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing required parameters (licenseType or licenseLevel)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during license request processing
      summary: Request license code
      tags:
      - License
  /license/resetLicense/{params}:
    post:
      description: Resets the current license back to community level. This operation
        frees the current license and reverts to the default community license.
      operationId: resetLicense
      parameters:
      - description: URL parameters for the license reset operation
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json: {}
          description: License reset to community successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during license reset
      summary: Reset license to community
      tags:
      - License
  /license/upload/{params}:
    post:
      description: Uploads a license repository ZIP file to the server. The uploaded
        file is processed and added to the license repository for distribution across
        cluster nodes.
      operationId: putZipFile
      parameters:
      - description: URL parameters for the request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  $ref: "#/components/schemas/FormDataContentDisposition"
                return:
                  type: string
      responses:
        "200":
          description: License file uploaded successfully (no body)
        "400":
          content:
            text/plain: {}
          description: Bad request - no file provided or invalid file format
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access configuration
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during license upload
      summary: Upload license repository file
      tags:
      - License
  /osgi:
    post:
      deprecated: true
      description: Uploads multiple JAR files to the OSGi environment. Files are validated
        and copied to the Felix upload folder. This endpoint is deprecated - use v1
        OSGIResource instead.
      operationId: updateBundles
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing JAR files to upload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySetStringView"
          description: Bundles uploaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - cannot access upload folder or insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error during upload
      summary: Upload OSGi bundles (deprecated)
      tags:
      - OSGi Plugins
  /osgi/_processExports/{bundle}:
    get:
      deprecated: true
      description: Processes exports for a specific OSGi bundle. This endpoint is
        deprecated - use v1 OSGIResource instead.
      operationId: processBundle
      parameters:
      - description: Bundle identifier or name to process exports for
        in: path
        name: bundle
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Bundle export processing result with operation status
          description: Bundle exports processed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access dynamic-plugins
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error during bundle processing
      summary: Process bundle exports (deprecated)
      tags:
      - OSGi Plugins
  /osgi/getInstalledBundles/{params}:
    get:
      deprecated: true
      description: Returns a list of all bundles installed in the OSGi environment.
        Supports filtering to exclude system bundles. This endpoint is deprecated
        - use v1 OSGIResource instead.
      operationId: getInstalledBundles
      parameters:
      - description: URL parameters including ignoresystembundles=true/false
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Collection of OSGi bundles with metadata and status information
          description: Installed bundles retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access dynamic-plugins
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get installed OSGi bundles (deprecated)
      tags:
      - OSGi Plugins
  /personas/layout/{params}:
    get:
      description: Renders the Personas portlet layout component for the dotCMS backend
        interface. Used for displaying the persona management UI within the admin
        interface.
      operationId: getLayout_4
      parameters:
      - description: Layout parameters (portletId/jspName)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/html: {}
          description: Personas layout loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access Personas
        "500":
          content:
            application/json: {}
          description: Internal server error loading layout
      summary: Load Personas layout component
      tags:
      - Personalization
  /personas/sites/{id}:
    get:
      description: Returns a JSON object containing all personas configured for the
        specified site/host. Personas are used for content personalization and targeting.
      operationId: list_15
      parameters:
      - description: Site ID to get personas for
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Map of persona objects keyed by identifier
          description: Personas retrieved successfully (not implemented)
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving personas
      summary: List personas by site
      tags:
      - Personalization
  /portlet/layout/{params}:
    get:
      description: Renders the JSP portlet layout component for the dotCMS backend
        interface. This is the standard layout endpoint that follows the BaseRestPortlet
        pattern.
      operationId: getLayout
      parameters:
      - description: Layout parameters (portletId/jspName)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/html: {}
          description: JSP layout loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access JSP portlet
        "500":
          content:
            application/json: {}
          description: Internal server error loading layout
      summary: Load JSP portlet layout component
      tags:
      - Portlets
  /portlet/{params}:
    get:
      description: "Renders a JSP portlet layout using GET method. Looks for render.jsp\
        \ under /WEB-INF/jsp/{portlet-id}/ directory. This is a legacy portlet rendering\
        \ mechanism."
      operationId: layoutGet
      parameters:
      - description: Portlet parameters and path information
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/html: {}
          description: Portlet layout rendered successfully
        "401":
          content:
            text/html: {}
          description: Unauthorized access
        "403":
          content:
            text/html: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            text/html: {}
          description: Portlet JSP not found
        "500":
          content:
            text/html: {}
          description: Internal server error during portlet rendering
      summary: Render portlet layout (GET)
      tags:
      - Portlets
    post:
      description: "Renders a JSP portlet layout using POST method. Handles form submissions\
        \ and looks for render.jsp under /WEB-INF/jsp/{portlet-id}/ directory. This\
        \ is a legacy portlet rendering mechanism."
      operationId: layoutPost
      parameters:
      - description: Portlet parameters and path information
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/html: {}
          description: Portlet layout rendered successfully
        "401":
          content:
            text/html: {}
          description: Unauthorized access
        "403":
          content:
            text/html: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            text/html: {}
          description: Portlet JSP not found
        "500":
          content:
            text/html: {}
          description: Internal server error during portlet rendering
      summary: Render portlet layout (POST)
      tags:
      - Portlets
  /restexample/layout/{params}:
    get:
      description: Renders the RestExample portlet layout component for the dotCMS
        backend interface. This is the standard layout endpoint for the example REST
        portlet.
      operationId: getLayout_1
      parameters:
      - description: Layout parameters (portletId/jspName)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/html: {}
          description: RestExample layout loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access RestExample
        "500":
          content:
            application/json: {}
          description: Internal server error loading layout
      summary: Load RestExample layout component
      tags:
      - Administration
  /restexample/test/{params}:
    get:
      description: Returns a simple test JSON response. This is an example endpoint
        for testing REST functionality.
      operationId: loadJson
      parameters:
      - description: URL parameters for the test request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Test JSON object with a simple test property
          description: Test JSON returned successfully
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Load test JSON
      tags:
      - Administration
  /role/loadbyid/{params}:
    get:
      deprecated: true
      description: Returns detailed role information including all role properties.
        Used for loading complete role details in admin UI. This endpoint is deprecated.
      operationId: loadById
      parameters:
      - description: URL parameters including role ID (id=roleId)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "Role details including DBFQN, FQN, description, permissions,\
                  \ id, name, and other role properties"
          description: Role loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Load role by ID (deprecated)
      tags:
      - Roles
  /role/loadbyname/{params}:
    get:
      deprecated: true
      description: Returns a filtered role tree structure where leaf nodes contain
        the specified name. Used for role filtering in admin UI. This endpoint is
        deprecated.
      operationId: loadByName
      parameters:
      - description: URL parameters including name filter (name=filterText)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "Filtered role tree structure with identifier, label,\
                  \ and items containing matching roles"
          description: Filtered roles loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Load roles by name filter (deprecated)
      tags:
      - Roles
  /role/loadchildren/{params}:
    get:
      deprecated: true
      description: "Returns role hierarchy with first-level children for lazy-loading\
        \ role tree in admin UI. If no ID provided, returns root roles. This endpoint\
        \ is deprecated."
      operationId: loadChildren
      parameters:
      - description: URL parameters including role ID (id=roleId or empty for root
          roles)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "Role hierarchy tree with child roles containing id,\
                  \ name, locked, and children properties"
          description: Role children loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Load role children (deprecated)
      tags:
      - Roles
  /rulesengine/layout/{params}:
    get:
      description: Renders the Rules Engine portlet layout component for the dotCMS
        backend interface. Used for displaying the rules management UI within the
        admin interface.
      operationId: getLayout_2
      parameters:
      - description: Layout parameters (portletId/jspName)
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/html: {}
          description: Rules Engine layout loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access Rules Engine
        "500":
          content:
            application/json: {}
          description: Internal server error loading layout
      summary: Load Rules Engine layout component
      tags:
      - Rules Engine
  /structure/{path}:
    get:
      deprecated: true
      description: "Retrieves content structures that contain WYSIWYG fields. Supports\
        \ filtering by inode, name, and range-based pagination. This endpoint is deprecated\
        \ - use modern ContentType API instead."
      operationId: getStructuresWithWYSIWYGFields
      parameters:
      - description: URL path for structure filtering (optional)
        in: path
        name: path
        required: true
        schema:
          type: string
          pattern: .*
      - description: Name filter for structures (supports wildcard with *)
        in: query
        name: name
        schema:
          type: string
      - description: Type parameter for response formatting
        in: path
        name: type
        required: true
        schema:
          type: string
      - description: Callback function name for JSONP
        in: path
        name: callback
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "JSON response containing structure list with id and\
                  \ name properties, or individual structure object for specific inode\
                  \ requests"
          description: Structures retrieved successfully
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get structures with WYSIWYG fields (deprecated)
      tags:
      - Content Type
  /testResource/testGet/{params}:
    get:
      description: "Example method that handles a GET operation for testing purposes.\
        \ Supports JSON, XML, and JSONP response formats. This endpoint is disabled\
        \ in production."
      operationId: getDocumentCount
      parameters:
      - description: URL parameters including user/password/param1/param2 and optional
          type/callback
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "Test response containing success status, message, and\
                  \ echoed parameters (param1, param2)"
          description: Test operation completed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - missing required parameters (param1, param2)"
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during test operation
      summary: Test GET operation
      tags:
      - Testing
  /testResource/testPost:
    post:
      description: "Example method that handles a POST operation for testing purposes.\
        \ Supports JSON, XML, and JSONP response formats. This endpoint is disabled\
        \ in production."
      operationId: saveTest
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                callback:
                  type: string
                  description: Callback function name for JSONP
                param1:
                  type: string
                  description: First test parameter
                param2:
                  type: string
                  description: Second test parameter
                password:
                  type: string
                  description: Password for authentication
                type:
                  type: string
                  description: "Response type (json, xml, jsonp)"
                user:
                  type: string
                  description: Username for authentication
              required:
              - param1
              - param2
              - password
              - user
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "Test POST response containing success status, message,\
                  \ and echoed parameters (param1, param2)"
          description: Test POST operation completed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - missing required parameters (param1, param2)"
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during test operation
      summary: Test POST operation
      tags:
      - Testing
  /user/getloggedinuser/{params}:
    get:
      deprecated: true
      description: "Returns a JSON representation of the currently logged in user\
        \ including userId, emailAddress, firstName, lastName, and roleId. This endpoint\
        \ is deprecated - use v1 UserResource instead."
      operationId: getLoggedInUser
      parameters:
      - description: URL parameters for the request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "User information containing userId, emailAddress, firstName,\
                  \ lastName, and roleId"
          description: User information retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get logged in user (deprecated)
      tags:
      - Users
  /util/encodeQueryParamValue/{params}:
    get:
      description: "Returns a JSON representation of the currently logged in user\
        \ including userId, firstName, lastName, and roleId. Returns empty object\
        \ if no user is logged in."
      operationId: getLoggedInUser_1
      parameters:
      - description: URL parameters for the request
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "User information object with userId, firstName, lastName,\
                  \ and roleId properties"
          description: User information retrieved successfully
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get logged in user
      tags:
      - Administration
  /v1/achecker/_validate:
    post:
      description: Validates the given content against the one or more Accessibility
        Guidelines.
      operationId: postValidateContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccessibilityForm"
        description: Accessibility validation form containing content and guidelines
        required: true
      responses:
        "200":
          content:
            application/json:
              example: |-
                {
                    "entity": {
                        "errors": [
                            {
                                "check": {
                                    "check_id": 98,
                                    "confidence": 2,
                                    "confidenceEnum": "POTENTIAL",
                                    "decision_fail": "Not all abbreviations are marked with the <code>abbr</code> element.",
                                    "decision_pass": "All abbreviations are marked with the <code>abbr</code> element.",
                                    "description": "If <code>body</code> element content is greater than 10 characters (English) this error will be generated.",
                                    "err": "Abbreviations may not be marked with <code>abbr</code> element.",
                                    "func": "return (BasicFunctions::getPlainTextLength() <= 10);",
                                    "how_to_repair": "",
                                    "html_tag": "body",
                                    "lang": "en",
                                    "long_description": null,
                                    "name": "Abbreviations must be marked with <code>abbr</code> element.",
                                    "note": "",
                                    "open_to_public": 1,
                                    "question": "Are there any abbreviations in the document that are not marked with the <code>abbr</code> element?",
                                    "rationale": "_RATIONALE_98",
                                    "repair_example": "",
                                    "search_str": null,
                                    "test_expected_result": "1. All abbreviations are expected to be marked with a valid <code>abbr</code> element.",
                                    "test_failed_result": "1. Mark all abbreviations with a valid <code>abbr</code> element.",
                                    "test_procedure": "1. Check the document for any text abbreviations.\\n2. If an abbreviation is found, check if it is properly marked with the <code>abbr</code> element.",
                                    "user_id": 0
                                },
                                "col_number": 110,
                                "cssCode": null,
                                "htmlCode": "<body> Adventure travel done right  Wherever you want to go, whatever you want to get into, we’ve go...",
                                "image": null,
                                "imageAlt": null,
                                "line_number": 0,
                                "success": false
                            },
                            ...
                            ...
                        ],
                        "lang": "en",
                        "results": [
                            {
                                "check": {
                                    "check_id": 29,
                                    "confidence": 0,
                                    "confidenceEnum": "KNOWN",
                                    "decision_fail": "",
                                    "decision_pass": "",
                                    "description": "Each document must contain a valid <code>doctype</code> declaration.",
                                    "err": "<code>doctype</code> declaration missing.",
                                    "func": "return (BasicFunctions::getNumOfTagInWholeContent(\\\"doctype\\\") > 0);",
                                    "how_to_repair": "Add a valid <code>doctype</code> declaration to the document.",
                                    "html_tag": "html",
                                    "lang": "en",
                                    "long_description": null,
                                    "name": "HTML content has a valid <code>doctype</code> declaration.",
                                    "note": "",
                                    "open_to_public": 1,
                                    "question": "",
                                    "rationale": "",
                                    "repair_example": "",
                                    "search_str": null,
                                    "test_expected_result": "1. HTML content has a valid <code>doctype</code> declaration.",
                                    "test_failed_result": "1. Add a valid <code>doctype</code> declaration to the document.",
                                    "test_procedure": "1. Check for the presence of a <code>doctype</code> declaration at the start of the document.\\n2. Check the content of the <code>doctype</code> declaration.",
                                    "user_id": 0
                                },
                                "col_number": 110,
                                "cssCode": null,
                                "htmlCode": "<html lang=\"en\" xml:lang=\"en\">     <body> Adventure travel done right  Wherever you want to go, what...",
                                "image": null,
                                "imageAlt": null,
                                "line_number": 0,
                                "success": true
                            },
                            ...
                            ...
                        ]
                    },
                    "errors": [],
                    "i18nMessagesMap": {},
                    "messages": [],
                    "pagination": null,
                    "permissions": []
                }
              schema:
                $ref: "#/components/schemas/ResponseACheckerEntityView"
          description: Content validated successfully
        "400":
          description: Bad Request
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Validates content
      tags:
      - Accessibility Checker
  /v1/achecker/guidelines:
    get:
      description: Returns the list of available Accessibility Guidelines that are
        used to validate content.
      operationId: getAccessibilityGuidelines
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityAccessibilityGuidelinesView"
          description: Guideline list retrieved successfully
        "500":
          description: Internal Server Error
      summary: Retrieves Accessibility Guidelines
      tags:
      - Accessibility Checker
  /v1/ai/completions:
    post:
      description: Creates AI-powered content summaries and completions based on provided
        prompts. Supports both streaming and non-streaming responses.
      operationId: summarizeFromContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletionsForm"
        description: Completion form with prompt and configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI completion response containing generated text and
                  metadata
          description: Completion generated successfully
        "400":
          description: Bad request - Missing or invalid prompt
        "401":
          description: Unauthorized - User not authenticated
        "500":
          description: Internal server error
      summary: Generate AI completions from content
      tags:
      - AI
  /v1/ai/completions/config:
    get:
      description: "Retrieves the current AI service configuration including available\
        \ models, API settings, and host-specific configurations."
      operationId: getAiConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI service configuration with available models and settings
          description: Configuration retrieved successfully
        "401":
          description: Unauthorized - User not authenticated
        "500":
          description: Internal server error
      summary: Get AI service configuration
      tags:
      - AI
  /v1/ai/completions/rawPrompt:
    post:
      description: Processes raw prompts directly through the AI service without content
        preprocessing. Supports both streaming and non-streaming responses.
      operationId: rawPrompt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletionsForm"
        description: Completion form with raw prompt and configuration
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI completion response containing generated text and
                  metadata
          description: Raw completion generated successfully
        "400":
          description: Bad request - Missing or invalid prompt
        "401":
          description: Unauthorized - User not authenticated
        "500":
          description: Internal server error
      summary: Generate AI completions from raw prompt
      tags:
      - AI
  /v1/ai/embeddings:
    delete:
      description: "Deletes embeddings based on provided criteria such as query, identifier,\
        \ inode, or content type"
      operationId: delete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: "Deletion criteria including query, identifier, inode,\
                \ or content type"
        description: "JSON object containing deletion criteria such as query, identifier,\
          \ inode, or content type"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Deletion result containing count of deleted items
          description: Embeddings deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
      summary: Delete AI embeddings
      tags:
      - AI
    post:
      description: "Creates embeddings for content based on the provided form data,\
        \ processing up to 10,000 content items"
      operationId: embed
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmbeddingsForm"
        description: "Embeddings form containing query, limit, offset, indexName,\
          \ model, velocityTemplate, and fields"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Embeddings operation result containing timing and count
                  information
          description: Embeddings created successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error during embeddings creation
      summary: Create AI embeddings
      tags:
      - AI
  /v1/ai/embeddings/count:
    get:
      description: "Counts embeddings based on provided query parameters such as site,\
        \ content type, index name, etc."
      operationId: count_1
      parameters:
      - description: Site identifier
        in: query
        name: site
        schema:
          type: string
      - description: Content type
        in: query
        name: contentType
        schema:
          type: string
      - description: Index name
        in: query
        name: indexName
        schema:
          type: string
      - description: Language identifier
        in: query
        name: language
        schema:
          type: string
      - description: Content identifier
        in: query
        name: identifier
        schema:
          type: string
      - description: Content inode
        in: query
        name: inode
        schema:
          type: string
      - description: Field variable name
        in: query
        name: fieldVar
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Count results containing embedding statistics
          description: JSON object containing embeddingsCount key
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
      summary: Count embeddings (GET)
      tags:
      - AI
    post:
      description: Counts embeddings based on provided form data containing search
        criteria
      operationId: count
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletionsForm"
        description: Completion form containing search criteria for counting embeddings
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Count results containing embedding statistics
          description: JSON object containing embeddingsCount key
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
      summary: Count embeddings (POST)
      tags:
      - AI
  /v1/ai/embeddings/db:
    delete:
      description: Drops and recreates the embeddings database tables. Requires CMS
        Administrator role.
      operationId: dropAndRecreateTables
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Empty JSON object for triggering table recreation
        description: Empty JSON object to trigger table recreation
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Table creation result status
          description: Tables dropped and recreated successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
      summary: Drop and recreate embeddings tables
      tags:
      - AI
  /v1/ai/embeddings/indexCount:
    get:
      description: Returns count of embeddings grouped by index name. Requires CMS
        Administrator role.
      operationId: indexCount
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Count results containing index statistics grouped by
                  index name
          description: JSON Object containing indexCount key
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
      summary: Count embeddings by index
      tags:
      - AI
  /v1/ai/embeddings/test:
    get:
      description: Returns a test response to verify the AI embeddings service is
        operational
      operationId: textResource
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Simple key-value map indicating embeddings service type
          description: Test response returned successfully
      summary: Test AI embeddings service
      tags:
      - AI
  /v1/ai/image/generate:
    get:
      description: Generates AI-powered images based on the provided prompt using
        GET request with query parameter
      operationId: indexByInode_1
      parameters:
      - description: The prompt to generate images from
        in: query
        name: prompt
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI image generation response containing image URLs and
                  metadata
          description: Images generated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - prompt is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error - app config missing or AI service error
      summary: Generate images using AI
      tags:
      - AI
    post:
      description: Generates AI-powered images based on the provided AIImageRequestDTO
        with detailed configuration options
      operationId: handleImageRequest
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: "JSON object with image generation form data including\
                \ prompt, size, and style parameters"
        description: Image generation request containing prompt and configuration
          options
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI image generation response containing image URLs and
                  metadata
          description: Images generated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - prompt is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error - app config missing or AI service error
      summary: Generate images using AI (POST)
      tags:
      - AI
  /v1/ai/image/test:
    get:
      description: Returns a test response to verify the AI image service is operational
      operationId: indexByInode
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Simple key-value map indicating image service type
          description: Test response returned successfully
      summary: Test AI image service
      tags:
      - AI
  /v1/ai/search:
    get:
      description: Searches content using AI-powered semantic search with various
        filtering and configuration options
      operationId: searchByGet
      parameters:
      - description: Search query text
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: Maximum number of search results to return
        example: 1000
        in: query
        name: searchLimit
        schema:
          type: integer
          format: int32
          default: 1000
      - description: Number of results to skip for pagination
        example: 0
        in: query
        name: searchOffset
        schema:
          type: integer
          format: int32
          default: 0
      - description: Site identifier to limit search scope
        in: query
        name: site
        schema:
          type: string
      - description: Content type to filter search results
        in: query
        name: contentType
        schema:
          type: string
      - description: Name of the search index to use
        example: default
        in: query
        name: indexName
        schema:
          type: string
          default: default
      - description: Similarity threshold for search results
        example: 0.5
        in: query
        name: threshold
        schema:
          type: number
          format: float
          default: 0.5
      - description: Whether to stream the response
        example: false
        in: query
        name: stream
        schema:
          type: boolean
          default: false
      - description: Maximum length of response in tokens
        example: 1024
        in: query
        name: responseLength
        schema:
          type: integer
          format: int32
          default: 1024
      - description: Search operator to use
        example: <=>
        in: query
        name: operator
        schema:
          type: string
          default: <=>
      - description: Language identifier for search
        in: query
        name: language
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI search results containing matching contentlets and
                  text fragments
          description: Search results returned successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Search content using AI
      tags:
      - AI
    post:
      description: Searches content using AI-powered semantic search with form data
        containing search parameters
      operationId: searchByPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletionsForm"
        description: Form data containing search query and configuration options
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI search results containing matching contentlets and
                  text fragments
          description: Search results returned successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Search content using AI (POST)
      tags:
      - AI
  /v1/ai/search/related:
    get:
      description: Finds content related to a specific content item using AI-powered
        semantic similarity
      operationId: relatedByGet
      parameters:
      - description: Language ID for content lookup
        in: query
        name: language
        required: true
        schema:
          type: integer
          format: int64
      - description: Content identifier
        in: query
        name: identifier
        schema:
          type: string
      - description: Content inode
        in: query
        name: inode
        schema:
          type: string
      - description: Index name to search in
        in: query
        name: indexName
        schema:
          type: string
      - description: Field variable name to use for content extraction
        in: query
        name: fieldVar
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Related content results containing array of content items
                  with similarity scores and matching text fragments
          description: Related content found successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Content not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Find related content using AI
      tags:
      - AI
    post:
      description: Finds content related to a specific content item using AI-powered
        semantic similarity with JSON data
      operationId: relatedByPost
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: "JSON object containing content identifier, inode, language,\
                \ indexName, and fieldVar for finding related content"
        description: "JSON object containing content identifier, inode, language,\
          \ indexName, and fieldVar"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Simple key-value map indicating search service type
          description: Related content found successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Content not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Find related content using AI (POST)
      tags:
      - AI
  /v1/ai/search/test:
    get:
      description: Returns a test response to verify the AI search service is operational
      operationId: testResponse
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Simple key-value map indicating search service type
          description: Test response returned successfully
      summary: Test AI search service
      tags:
      - AI
  /v1/ai/text/generate:
    get:
      description: Generates AI-powered text content based on the provided prompt
        using GET request with query parameter
      operationId: doGet
      parameters:
      - description: The text prompt to generate AI content from
        in: query
        name: prompt
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI text generation response with generated content and
                  metadata
          description: Text generated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - prompt is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Generate text using AI
      tags:
      - AI
    post:
      description: Generates AI-powered text content based on the provided prompt
        and configuration using POST request with form data
      operationId: doPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompletionsForm"
        description: Form data containing the prompt and AI configuration options
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: AI text generation response with generated content and
                  metadata
          description: Text generated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - prompt is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Generate text using AI (POST)
      tags:
      - AI
  /v1/analytics/content:
    post:
      description: "Returns information of specific dotCMS objects whose health and\
        \ engagement data is tracked, using Path Parameters instead of a CubeJS JSON\
        \ query. This helps abstract the complexity of the underlying JSON format\
        \ for users that need an easier way to query for specific data."
      operationId: postContentAnalyticsSimpleQuery
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Map of query parameters
        description: Form parameters for simplified query
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                measures: request.count request.totalSessions
                dimensions: request.host request.whatAmI request.url
                timeDimensions: request.createdAt:day:Last month
                filters: "request.totalRequest gt 0:request.whatAmI contains PAGE,FILE"
                order: request.count asc:request.createdAt asc
                limit: 15
                offset: 0
              schema:
                $ref: "#/components/schemas/ReportResponseEntityView"
          description: Content Analytics data being queried
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          description: Unauthorized
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Returns Content Analytics data
      tags:
      - Content Analytics
  /v1/analytics/content/_query:
    post:
      description: Returns information of specific dotCMS objects whose health and
        engagement data is tracked. This method takes a specific less verbose JSON
        format to query the data.
      operationId: postContentAnalyticsQuery
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryForm"
        description: Query form with analytics parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                query:
                  measures:
                  - request.count
                  order: request.count DESC
                  dimensions:
                  - request.url
                  - request.pageId
                  - request.pageTitle
                  filters: "request.whatAmI = ['PAGE']"
                  limit: 100
                  offset: 1
              schema:
                $ref: "#/components/schemas/ReportResponseEntityView"
          description: Content Analytics data being queried
        "400":
          content:
            application/json: {}
          description: Bad Request
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Retrieve Content Analytics data
      tags:
      - Content Analytics
  /v1/analytics/content/_query/cube:
    post:
      description: "Returns information of specific dotCMS objects whose health and\
        \ engagement data is tracked, using a CubeJS JSON query."
      operationId: postContentAnalyticsCubeQuery
      requestBody:
        content:
          application/json:
            schema:
              type: string
              description: CubeJS query in JSON format
        description: CubeJS query JSON string
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                dimensions:
                - Events.experiment
                - Events.variant
              schema:
                $ref: "#/components/schemas/ReportResponseEntityView"
          description: Content Analytics data being queried
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          description: Unauthorized
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Retrieve Content Analytics data with CubeJS query
      tags:
      - Content Analytics
  /v1/analytics/content/event:
    post:
      description: receives a custom event payload and fires the event to the collectors
      operationId: fireUserCustomEvent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Event payload map
        description: User event payload
        required: true
      responses:
        "200":
          content:
            application/json:
              example: TBD
              schema:
                $ref: "#/components/schemas/AnalyticsEventsResult"
          description: If the event was created successfully
        "400":
          content:
            application/json: {}
          description: Bad Request
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire an user custom event.
      tags:
      - Content Analytics
  /v1/analytics/content/sitekey/generate/{siteId}:
    get:
      description: Generates and returns a Site Key that must be used by the client-side
        JS code to send custom Content Analytics Events
      operationId: generateSiteKey
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                description: Site key for analytics events
          description: The Site key was generated and returned successfully
        "400":
          content:
            application/json: {}
          description: Bad Request
        "401":
          content:
            application/json: {}
          description: Unauthorized
        "403":
          content:
            application/json: {}
          description: Forbidden
        "404":
          content:
            application/json: {}
          description: Site ID in path is not found or incorrect path
        "500":
          content:
            application/json: {}
          description: Internal Server Error
      summary: Generate Site Key
      tags:
      - Content Analytics
  /v1/announcements:
    get:
      description: Retrieves system announcements from the remote dotCMS instance.
        Acts as a proxy to the announcement service with optional cache refresh and
        result limiting.
      operationId: announcements
      parameters:
      - description: "Whether to refresh the cache before retrieving announcements\
          \ (default: false)"
        in: query
        name: refreshCache
        schema:
          type: boolean
      - description: "Maximum number of announcements to return (default: no limit)"
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityAnnouncementListView"
          description: Announcements retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get system announcements
      tags:
      - Announcements
  /v1/apitoken:
    post:
      description: |-
        Issues an API token to an authorized user account.

        Returns an object representing the issued token.
      operationId: postIssueApiToken
      requestBody:
        content:
          application/json:
            example:
              userId: string
              expirationSeconds: 0
              network: string
              claims:
                label: string
              shouldBeAdmin: false
            schema:
              $ref: "#/components/schemas/ApiTokenForm"
        description: |
          This method requires a POST body of a JSON object containing the following properties.

          | Property        | Value     | Description                                   |
          |-----------------|-----------|-----------------------------------------------|
          | `userId`             | String    | **Required.** ID of user attempting receiving |
          | `expirationSeconds`  | Integer    | **Required.** TTL of token in seconds. |
          | `network`            | String    | Network mask in which token is valid. Defaults to `0.0.0.0/0`, or any local network.  |
          | `claims`             | Object    | Contains `label` property. |
          | `claims.label`       | String    | Sets a user-defined name for token. |
          | `shouldBeAdmin`      | Boolean   | If `true`, the call only succeeds if the token is being issued to an admin account. Defaults to `false` if omitted. |
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  jwt: string
                  token:
                    allowNetwork: 0.0.0.0/0
                    claims:
                      label: string
                    expired: false
                    expiresDate: 0
                    id: string
                    issueDate: 0
                    issuer: string
                    modificationDate: 0
                    notBeforeDate: false
                    requestingIp: string
                    requestingUserId: string
                    revoked: false
                    revokedDate: 0
                    subject: string
                    tokenType: string
                    userId: string
                    valid: true
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityApiTokenWithJwtView"
          description: Token successfully issued to user
        "400":
          description: Bad request
        "401":
          description: Invalid user
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: Unexpected server error
      summary: Issues an API token
      tags:
      - API Token
  /v1/apitoken/remote:
    put:
      description: |-
        This endpoint takes as part of its payload authentication credentials for a user account on a remote dotCMS instance. It returns a token object that can be used to permit remote operation according to the role and permissions of the authenticated account.

        This is used, for example, in configuring a [push publishing](https://www.dotcms.com/docs/latest/push-publishing) endpoint.

        Usable only by administrators.
      operationId: putGetRemoteToken
      requestBody:
        content:
          application/json:
            example:
              token:
                network: 0.0.0.0/0
                expirationSeconds: "1000"
                claims:
                  label: Example
              remote:
                host: dotcms-receiver.local
                port: "8082"
                protocol: http
              auth:
                login: admin@dotcms.com
                password: YWRtaW4=
            schema:
              $ref: "#/components/schemas/RemoteAPITokenForm"
        description: |
          PUT body consists of a JSON object containing three properties: `token`, concerning the token's direct properties; `remote`, defining the remote host, and `auth`, specifying remote user authentication.

          Each of these three top-level properties is itself an object containing further properties, listed fully below:

          | Properties                 | Value   | Description                                                            |
          |----------------------------|---------|------------------------------------------------------------------------|
          | `token.network`            | String  | Network mask in which the token is active.                             |
          | `token.expirationSeconds`  | String  | Seconds until the token expires.                                       |
          | `token.claims`             | Object  | Object containing the property `label`, defined below.                 |
          | `token.claims.label`       | String  | The name of the token generated.                                       |
          |             |   |  |
          | `remote.host`              | String  | Remote host for which to generate a token.                             |
          | `remote.port`              | String  | Port number for the remote host.                                       |
          | `remote.protocol`          | String  | Web protocol used to connect to the remote host.                       |
          |             |   |  |
          | `auth.login`               | String  | Email of account from which the remote token will derive permissions.  |
          | `auth.password`            | String  | A string representing a base64-encoded password.                       |
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  jwt: string
                  token:
                    allowNetwork: 0.0.0.0/0
                    claims:
                      label: string
                    expired: false
                    expiresDate: 0
                    id: string
                    issueDate: 0
                    issuer: string
                    modificationDate: 0
                    notBeforeDate: false
                    requestingIp: string
                    requestingUserId: string
                    revoked: false
                    revokedDate: 0
                    subject: string
                    tokenType: string
                    userId: string
                    valid: true
                errors: []
                i18nMessagesMap: {}
                messages: []
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityApiTokenWithJwtView"
          description: Remote token generated successfully
        "400":
          description: Bad request
        "401":
          description: Invalid user
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: Unexpected server error
      summary: Generates a remote API token
      tags:
      - API Token
  /v1/apitoken/{tokenId}:
    delete:
      description: |-
        Deletes an API token by identifier. May be performed on either active, expired, or revoked.

        Returned entity contains the property `deleted`, the value of which is the deleted token object.
      operationId: deleteApiTokenById
      parameters:
      - description: Identifier of API token to be deleted.
        in: path
        name: tokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  deleted:
                    allowNetwork: null
                    claims:
                      label: string
                    expired: false
                    expiresDate: 1822623941000
                    id: string
                    issueDate: 1728061510000
                    issuer: string
                    modificationDate: 1728069870000
                    notBeforeDate: false
                    requestingIp: string
                    requestingUserId: string
                    revoked: true
                    revokedDate: 1728069870000
                    subject: string
                    tokenType: string
                    userId: string
                    valid: false
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Token successfully deleted
        "400":
          description: Bad request
        "401":
          description: Invalid user
        "404":
          description: Token not found
        "500":
          description: Unexpected server error
      summary: Deletes an API token
      tags:
      - API Token
  /v1/apitoken/{tokenId}/jwt:
    get:
      description: Returns a JSON web token. This overwrites the JWT value associated
        with the specified token object.
      operationId: getGetJwtFromApiToken
      parameters:
      - description: Identifier of API token to receive a new JWT.
        in: path
        name: tokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  jwt: string
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityJwtView"
          description: JSON web token successfully created
        "400":
          description: Bad request
        "401":
          description: Invalid user
        "403":
          description: Forbidden
        "404":
          description: Token not found
        "500":
          description: Unexpected server error
      summary: Generates a new JWT for an existing token
      tags:
      - API Token
  /v1/apitoken/{tokenId}/revoke:
    put:
      description: |-
        Revokes a token by its identifier.

         Returned entity contains the property `revoked`, whose value is an object representing the revoked token.
      operationId: putRevokeTokenById
      parameters:
      - description: Identifier of API token to be revoked
        in: path
        name: tokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  revoked:
                    allowNetwork: null
                    claims:
                      label: string
                    expired: false
                    expiresDate: 1822623941000
                    id: string
                    issueDate: 1728061510000
                    issuer: string
                    modificationDate: 1728069870000
                    notBeforeDate: false
                    requestingIp: string
                    requestingUserId: string
                    revoked: true
                    revokedDate: 1728069870000
                    subject: string
                    tokenType: string
                    userId: string
                    valid: false
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Token revoked successfully
        "400":
          description: Bad request
        "401":
          description: Invalid user
        "403":
          description: Forbidden
        "404":
          description: Token not found
        "500":
          description: Unexpected server error
      summary: Revokes an API token
      tags:
      - API Token
  /v1/apitoken/{userId}/tokens:
    get:
      description: |+
        Accepts a user identifier and returns a list of API tokens associated with that user.

        The returned list may optionally include or exclude tokens that have been revoked.

      operationId: getApiTokensByUserId
      parameters:
      - description: Identifier of user to check for tokens.
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: Determines whether revoked tokens are shown. Defaults to `false`
          if omitted.
        in: query
        name: showRevoked
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  tokens:
                  - allowNetwork: null
                    claims:
                      label: string
                    expired: false
                    expiresDate: 1822623941000
                    id: string
                    issueDate: 1728061510000
                    issuer: string
                    modificationDate: 1728061510000
                    notBeforeDate: false
                    requestingIp: string
                    requestingUserId: string
                    revoked: false
                    revokedDate: null
                    subject: string
                    tokenType: string
                    userId: string
                    valid: true
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: User's API tokens successfully retrieved
        "400":
          description: Bad request
        "401":
          description: Invalid user
        "403":
          description: Forbidden
        "404":
          description: Invalid user
        "500":
          description: Unexpected server error
      summary: Retrieves API tokens based on a user ID
      tags:
      - API Token
  /v1/appconfiguration:
    get:
      description: "Returns system properties that are useful to the dotCMS Angular\
        \ UI, including configuration parameters and menu items for logged in users"
      operationId: list_7
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Configuration data retrieved successfully (no body if k8s probe)
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get application configuration
      tags:
      - System Configuration
  /v1/apps:
    delete:
      description: Deletes specific secret values from an app configuration. Removes
        individual secret keys while preserving other app configurations and secrets.
      operationId: deleteIndividualAppSecret
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteSecretForm"
        description: Delete secret form specifying which secrets to remove
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: App secret deleted successfully
        "400":
          description: Bad request - invalid delete secret form data
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to delete app secrets
        "404":
          description: App or secret not found
        "500":
          description: Internal server error deleting app secret
      summary: Delete individual app secret
      tags:
      - Apps
    get:
      description: Retrieves a list of all third-party applications available for
        integration with the system. Supports optional filtering to search for specific
        apps.
      operationId: listAvailableApps
      parameters:
      - description: Filter text to search apps by name or description
        in: query
        name: filter
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityAppListView"
          description: Apps retrieved successfully
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to list apps
        "500":
          description: Internal server error retrieving apps
      summary: List available apps
      tags:
      - Apps
    post:
      description: Creates a new third-party application integration by uploading
        the app configuration and metadata. Accepts multipart form data containing
        the app descriptor and resources.
      operationId: createApp
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing app configuration files and metadata
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityAppListView"
          description: App created successfully
        "400":
          description: Bad request - invalid app configuration or missing required
            fields
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to create apps
        "409":
          description: Conflict - app with same key already exists
        "500":
          description: Internal server error creating app
      summary: Create new app
      tags:
      - Apps
  /v1/apps/export:
    post:
      description: Exports app secret configurations to a downloadable file. Allows
        backup and migration of app configurations between environments. Returns a
        binary export file.
      operationId: exportSecrets
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportSecretForm"
        description: Export configuration specifying which secrets to export
        required: true
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Secrets exported successfully as file download (binary stream
            - no JSON schema)
        "400":
          content:
            application/json: {}
          description: Bad request - invalid export form data
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to export secrets
        "500":
          content:
            application/json: {}
          description: Internal server error exporting secrets
      summary: Export app secrets
      tags:
      - Apps
  /v1/apps/import:
    post:
      description: Imports app secret configurations from an uploaded export file.
        Allows restoration and migration of app configurations from other environments.
        Accepts multipart form data with the export file.
      operationId: importSecrets
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing the secrets export file to import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Secrets imported successfully
        "400":
          description: Bad request - invalid import file or missing form data
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to import secrets
        "409":
          description: Conflict - import would overwrite existing configurations
        "500":
          description: Internal server error importing secrets
      summary: Import app secrets
      tags:
      - Apps
  /v1/apps/{key}:
    delete:
      description: "Removes an entire app integration including all configurations,\
        \ secrets, and optionally the app descriptor. This is a destructive operation\
        \ that removes all app-related data across all sites."
      operationId: deleteApp
      parameters:
      - description: Unique identifier of the app to delete
        in: path
        name: key
        required: true
        schema:
          type: string
      - description: Whether to also remove the app descriptor definition
        in: query
        name: removeDescriptor
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: App deleted successfully
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to delete apps
        "404":
          description: App not found
        "500":
          description: Internal server error deleting app
      summary: Delete app completely
      tags:
      - Apps
    get:
      description: Retrieves detailed information about a specific app identified
        by its unique key. Includes configuration settings and site-specific settings
        with pagination support.
      operationId: getAppByKey
      parameters:
      - description: Unique identifier of the app to retrieve
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityAppView"
          description: App details retrieved successfully
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to access app
        "404":
          description: App not found
        "500":
          description: Internal server error retrieving app details
      summary: Get app by key
      tags:
      - Apps
  /v1/apps/{key}/{siteId}:
    delete:
      description: Removes all secret configurations for a specific app and site combination.
        This clears all stored secrets while preserving the app definition and site
        configuration structure.
      operationId: deleteAllAppSecrets
      parameters:
      - description: Unique identifier of the app
        in: path
        name: key
        required: true
        schema:
          type: string
      - description: Site identifier where secrets are stored
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: All app secrets deleted successfully
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to delete app secrets
        "404":
          description: App or site not found
        "500":
          description: Internal server error deleting app secrets
      summary: Delete all app secrets
      tags:
      - Apps
    get:
      description: Retrieves detailed configuration and settings for a specific app
        within a particular site. Returns site-specific app configurations and secret
        values.
      operationId: getAppDetail
      parameters:
      - description: Unique identifier of the app
        in: path
        name: key
        required: true
        schema:
          type: string
      - description: Site identifier to get app details for
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityAppView"
          description: App detail retrieved successfully
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to access app details
        "404":
          description: App or site not found
        "500":
          description: Internal server error retrieving app details
      summary: Get app detail for specific site
      tags:
      - Apps
    post:
      description: Creates or updates secret values for a specific app configuration
        within a site. Secrets are encrypted values used for secure integration with
        third-party services.
      operationId: createAppSecrets
      parameters:
      - description: Unique identifier of the app
        in: path
        name: key
        required: true
        schema:
          type: string
      - description: Site identifier where secrets will be stored
        in: path
        name: siteId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretForm"
        description: Secret form containing key-value pairs for app configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: App secrets created successfully
        "400":
          description: Bad request - invalid secret form data
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to manage app secrets
        "404":
          description: App or site not found
        "500":
          description: Internal server error creating app secrets
      summary: Create app secrets
      tags:
      - Apps
    put:
      description: Updates specific secret values for an app configuration within
        a site. Allows for partial updates of existing secret configurations without
        affecting other secrets.
      operationId: updateAppIndividualSecret
      parameters:
      - description: Unique identifier of the app
        in: path
        name: key
        required: true
        schema:
          type: string
      - description: Site identifier where secret is stored
        in: path
        name: siteId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretForm"
        description: Secret form containing updated key-value pairs
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: App secret updated successfully
        "400":
          description: Bad request - invalid secret form data
        "401":
          description: Unauthorized - backend user authentication required
        "403":
          description: Forbidden - insufficient permissions to update app secrets
        "404":
          description: "App, site, or secret not found"
        "500":
          description: Internal server error updating app secret
      summary: Update individual app secret
      tags:
      - Apps
  /v1/assets:
    post:
      description: "Retrieves metadata and information about assets (files and folders)\
        \ at the specified path. Returns detailed asset information including permissions,\
        \ modification dates, and size."
      operationId: getAssetsInfo
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInfoRequestForm"
        description: Asset information request form containing the asset path to query
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebAssetEntityView"
          description: Asset information retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid asset path or request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access asset
        "404":
          content:
            application/json: {}
          description: Asset not found at the specified path
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get asset information
      tags:
      - Web Assets
    put:
      description: Uploads a new asset or updates an existing asset at the specified
        path. Supports file uploads via multipart form data with metadata and binary
        content.
      operationId: saveUpdateAsset
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                assetPath:
                  type: string
                detail:
                  $ref: "#/components/schemas/FileUploadDetail"
                file:
                  $ref: "#/components/schemas/FormDataContentDisposition"
      responses:
        "200":
          content:
            application/json: {}
          description: Asset uploaded/updated successfully
        "400":
          content:
            application/json: {}
          description: Invalid request data or file upload parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to upload/update asset
        "500":
          content:
            application/json: {}
          description: Internal server error during upload
      summary: Upload or update an asset
      tags:
      - Web Assets
  /v1/assets/_archive:
    post:
      description: Archives an asset (file) at the specified path. Archived assets
        are moved to a non-published state but remain accessible for restoration.
      operationId: archiveAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInfoRequestForm"
        description: Asset archive request form containing the asset path to archive
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Asset archived successfully
        "400":
          content:
            application/json: {}
          description: Invalid asset path or request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to archive asset
        "404":
          content:
            application/json: {}
          description: Asset not found at the specified path
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Archive an asset
      tags:
      - Web Assets
  /v1/assets/_delete:
    post:
      description: Permanently deletes an asset (file) at the specified path. This
        operation cannot be undone.
      operationId: deleteAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInfoRequestForm"
        description: Asset deletion request form containing the asset path to delete
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Asset deleted successfully
        "400":
          content:
            application/json: {}
          description: Invalid asset path or request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to delete asset
        "404":
          content:
            application/json: {}
          description: Asset not found at the specified path
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete an asset
      tags:
      - Web Assets
  /v1/assets/_download:
    post:
      description: "Downloads the binary content of an asset (file) by path, language\
        \ and version. Returns the file as an octet stream with appropriate content\
        \ disposition headers for download."
      operationId: download
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetsRequestForm"
        description: Asset download request form containing the asset path and optional
          version information
        required: true
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Asset downloaded successfully
        "400":
          content:
            application/json: {}
          description: Invalid asset path or request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access asset
        "404":
          content:
            application/json: {}
          description: Asset not found at the specified path
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Download asset content
      tags:
      - Web Assets
  /v1/assets/folders/_delete:
    post:
      description: Permanently deletes a folder at the specified path. This operation
        will also delete all assets and subfolders contained within the folder. This
        operation cannot be undone.
      operationId: deleteFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssetInfoRequestForm"
        description: Folder deletion request form containing the folder path to delete
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Folder deleted successfully
        "400":
          content:
            application/json: {}
          description: Invalid folder path or request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to delete folder
        "404":
          content:
            application/json: {}
          description: Folder not found at the specified path
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete a folder
      tags:
      - Web Assets
  /v1/authentication:
    post:
      description: |+
        Takes a user's login ID and password and checks them against the user rolls.

        If the user is found and authenticated, a session is created.

        Otherwise the system will return an 'authentication failed' message.

      operationId: postAuthentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationForm"
        description: |
          This method takes a user's credentials and language preferences to authenticate them.

          Requires a POST body consisting of a JSON object containing the following properties:

          | **Property** | **Value** | **Description**                               |
          |--------------|-----------|-----------------------------------------------|
          | `userId`     | String    | **Required.** ID of user attempting to log in |
          | `password`   | String    | User password                                 |
          | `language`   | String    | Preferred language for user                   |
          | `country`    | String    | Country where user is located                 |
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapMapView"
          description: User authentication successful
        "401":
          description: User not authenticated
        "403":
          description: Forbidden request
        "415":
          description: Unsupported Media Type
        "500":
          description: Unexpected error
      summary: Verifies user or application authentication
      tags:
      - Authentication
  /v1/authentication/logInUser:
    get:
      description: |+
        Provides information about any users that are currently in a session.

        This retrieved data will be formatted into a JSON response body.

      operationId: getLogInUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: User data successfully collected
        "400":
          description: Bad request
        "401":
          description: Unauthorized request
        "404":
          description: User not found
      summary: Retrieves user data
      tags:
      - Authentication
  /v1/browser:
    post:
      description: "Retrieves folder contents with extensive filtering options. Can\
        \ get host or specific folder contents, including archived/working content,\
        \ folders, pages, files, and dotAssets. Supports filtering by extensions,\
        \ MIME types, and various content states."
      operationId: getFolderContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrowserQueryForm"
        description: Browser query form with filtering and pagination options
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Folder content retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid query parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Folder not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get folder content
      tags:
      - Browser Tree
  /v1/browser/selectedfolder:
    get:
      description: "Retrieves the currently selected folder from the site browser\
        \ session. Returns the folder information if one is selected, otherwise returns\
        \ 404."
      operationId: getSelectFolder
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFolderView"
          description: Selected folder retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: No folder currently selected in session
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get selected folder
      tags:
      - Browser Tree
    put:
      description: "Sets the selected folder in the site browser session. Next time\
        \ the site browser is opened, it will expand to this selected folder."
      operationId: selectFolder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OpenFolderForm"
        description: Folder selection form with path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Folder selection updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid folder path
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Set selected folder
      tags:
      - Browser Tree
  /v1/browsertree/sitename/{sitename}/uri:
    get:
      deprecated: true
      description: Loads all treeable assets under the root directory of a specified
        site. This method is deprecated - use BrowserResource.getFolderContent instead.
      operationId: loadAssetsUnder
      parameters:
      - description: Name of the site to load assets from
        in: path
        name: sitename
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Assets loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Load assets under site root (deprecated)
      tags:
      - Browser Tree
  /v1/browsertree/sitename/{sitename}/uri/{uri}:
    get:
      deprecated: true
      description: Loads all treeable assets under a specific URI path within a site.
        This method is deprecated - use BrowserResource.getFolderContent instead.
      operationId: loadAssetsUnder_1
      parameters:
      - description: Name of the site to load assets from
        in: path
        name: sitename
        required: true
        schema:
          type: string
      - description: URI path within the site to load assets from
        in: path
        name: uri
        required: true
        schema:
          type: string
          pattern: .+
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Assets loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Load assets under specific URI (deprecated)
      tags:
      - Browser Tree
  /v1/caches/provider/{provider}/flush:
    delete:
      description: Deletes all objects for a provider (will clean all groups and generate
        a new key)
      operationId: flushAll
      parameters:
      - description: Cache provider name
        in: path
        name: provider
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: All cache for provider flushed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Flush all cache for provider
      tags:
      - Cache Management
  /v1/caches/provider/{provider}/flush/{group}:
    delete:
      description: Flush all objects for a provider and group
      operationId: flushGroup
      parameters:
      - description: Cache provider name
        in: path
        name: provider
        required: true
        schema:
          type: string
          pattern: .*
      - description: Cache group
        in: path
        name: group
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Cache group flushed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Flush cache group
      tags:
      - Cache Management
  /v1/caches/provider/{provider}/flush/{group}/{id}:
    delete:
      description: Deletes a specific object for a provider and group
      operationId: flushObject
      parameters:
      - description: Cache provider name
        in: path
        name: provider
        required: true
        schema:
          type: string
          pattern: .*
      - description: Cache group
        in: path
        name: group
        required: true
        schema:
          type: string
          pattern: .*
      - description: Object ID
        in: path
        name: id
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Cache object flushed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Flush cache object
      tags:
      - Cache Management
  /v1/caches/provider/{provider}/keys/{group}:
    get:
      description: Get keys for a provider and group
      operationId: getKeys
      parameters:
      - description: Cache provider name
        in: path
        name: provider
        required: true
        schema:
          type: string
          pattern: .*
      - description: Cache group
        in: path
        name: group
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySetStringView"
          description: Cache keys retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Get cache keys
      tags:
      - Cache Management
  /v1/caches/provider/{provider}/object/{group}/{id}:
    get:
      description: Shows a specific object by id in cache provider and group
      operationId: showObject
      parameters:
      - description: Cache provider name
        in: path
        name: provider
        required: true
        schema:
          type: string
          pattern: .*
      - description: Cache group
        in: path
        name: group
        required: true
        schema:
          type: string
          pattern: .*
      - description: Object ID
        in: path
        name: id
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCacheObjectView"
          description: Cache object retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Show cache object
      tags:
      - Cache Management
  /v1/caches/provider/{provider}/objects/{group}:
    get:
      description: Show all objects for a provider and group
      operationId: showObjects
      parameters:
      - description: Cache provider name
        in: path
        name: provider
        required: true
        schema:
          type: string
          pattern: .*
      - description: Cache group
        in: path
        name: group
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Cache objects retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Show all cache objects
      tags:
      - Cache Management
  /v1/caches/provider/{provider}/{group}:
    get:
      description: Returns the provider associated to a group
      operationId: showProviders_1
      parameters:
      - description: Cache provider name
        in: path
        name: provider
        required: true
        schema:
          type: string
          pattern: .*
      - description: Cache group
        in: path
        name: group
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCacheProviderView"
          description: Cache provider retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Show specific cache provider
      tags:
      - Cache Management
  /v1/caches/providers/{group}:
    get:
      description: Returns the providers associated to a group
      operationId: showProviders
      parameters:
      - description: Cache group
        in: path
        name: group
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListCacheProviderView"
          description: Cache providers retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance portlet access required
      summary: Show cache providers for group
      tags:
      - Cache Management
  /v1/categories:
    delete:
      description: Deletes multiple categories by their inodes. Deletes both parent
        categories and their children. User needs Edit permissions on categories to
        delete them successfully.
      operationId: delete_7
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of category inodes to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Categories deleted successfully (may include partial failures)
        "400":
          description: Bad request - missing category inodes
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to delete categories
        "500":
          description: Internal server error deleting categories
      summary: Delete categories
      tags:
      - Categories
    get:
      description: "Retrieves a paginated list of categories with optional filtering,\
        \ sorting, and children count information. Supports hierarchical category\
        \ navigation and management."
      operationId: getCategories
      parameters:
      - description: Filter text to search categories
        in: query
        name: filter
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
      - description: Field to order results by
        in: query
        name: orderby
        schema:
          type: string
          default: category_name
      - description: Sort direction (ASC or DESC)
        in: query
        name: direction
        schema:
          type: string
          default: ASC
      - description: Whether to include children count for each category
        in: query
        name: showChildrenCount
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Categories retrieved successfully
        "401":
          description: Unauthorized - user authentication required
        "500":
          description: Internal server error retrieving categories
      summary: Get categories with pagination
      tags:
      - Categories
    post:
      description: "Creates a new category with the specified properties. The category\
        \ name is required, and optionally can be associated with a specific site."
      operationId: saveNew
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryForm"
        description: Category form with name and properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Category created successfully
        "400":
          description: Bad request - missing category name or invalid form data
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to create categories
        "500":
          description: Internal server error creating category
      summary: Create new category
      tags:
      - Categories
    put:
      description: "Updates an existing category identified by its inode. All category\
        \ properties can be modified including name, description, and hierarchy placement."
      operationId: save_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryForm"
        description: Category form with updated properties including inode
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Category updated successfully
        "400":
          description: Bad request - missing inode or invalid form data
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to update categories
        "404":
          description: Category not found
        "500":
          description: Internal server error updating category
      summary: Update existing category
      tags:
      - Categories
  /v1/categories/_export:
    get:
      description: Exports categories to a CSV file format. Can filter by category
        name pattern and specify a context category inode. Returns a downloadable
        CSV file.
      operationId: export
      parameters:
      - description: Context category inode to export from
        in: query
        name: contextInode
        schema:
          type: string
      - description: Filter pattern to match category names
        in: query
        name: filter
        schema:
          type: string
      responses:
        "200":
          content:
            text/csv: {}
          description: Categories exported successfully as CSV file
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to export categories
        "404":
          description: Context category not found
        "500":
          description: Internal server error exporting categories
      summary: Export categories to CSV
      tags:
      - Categories
  /v1/categories/_import:
    post:
      description: Imports categories from an uploaded CSV file. Supports 'replace'
        mode to replace existing categories or 'append' mode to add to existing categories.
        Can specify a context category and filter options.
      operationId: importCategories
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing file and import parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Categories imported successfully
        "400":
          description: Bad request - invalid file format or missing required parameters
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to import categories
        "500":
          description: Internal server error importing categories
      summary: Import categories from CSV file
      tags:
      - Categories
  /v1/categories/_sort:
    put:
      description: Updates the sort order of categories. The request must contain
        category inode and sortOrder pairs. Can update multiple categories at once
        within a parent category.
      operationId: save
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryEditForm"
        description: Category edit form with category data and sort order information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Category sort order updated successfully
        "400":
          description: Bad request - missing category data or invalid sort order
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to update categories
        "404":
          description: Parent category not found
        "500":
          description: Internal server error updating sort order
      summary: Update category sort order
      tags:
      - Categories
  /v1/categories/children:
    get:
      description: Retrieves child categories of a specified parent category with
        pagination and filtering options. Can include all nested levels and parent
        hierarchy information.
      operationId: getChildren
      parameters:
      - description: Filter text to search child categories
        in: query
        name: filter
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
      - description: Field to order results by
        in: query
        name: orderby
        schema:
          type: string
          default: category_name
      - description: Sort direction (ASC or DESC)
        in: query
        name: direction
        schema:
          type: string
          default: ASC
      - description: Parent category inode to get children for
        in: query
        name: inode
        schema:
          type: string
      - description: Whether to include children count for each category
        in: query
        name: showChildrenCount
        schema:
          type: boolean
      - description: Whether to include all nested levels
        in: query
        name: allLevels
        schema:
          type: boolean
      - description: Whether to include parent list hierarchy
        in: query
        name: parentList
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Child categories retrieved successfully
        "401":
          description: Unauthorized - user authentication required
        "404":
          description: Parent category not found
        "500":
          description: Internal server error retrieving child categories
      summary: Get category children
      tags:
      - Categories
  /v1/categories/hierarchy:
    post:
      description: "Retrieves the parent hierarchy for a set of categories specified\
        \ by their keys. Returns parent lists for each category, starting from the\
        \ top-level parent down to the direct parent. Categories that don't exist\
        \ are ignored."
      operationId: getHierarchy
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryKeysForm"
        description: Category keys form containing array of category keys
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HierarchyShortCategoriesResponseView"
          description: Category hierarchies retrieved successfully
        "400":
          description: Bad request - invalid category keys form
        "401":
          description: Unauthorized - user authentication required
        "500":
          description: Internal server error retrieving hierarchies
      summary: Get category hierarchy for multiple categories
      tags:
      - Categories
  /v1/categories/{idOrKey}:
    get:
      description: Retrieves a specific category by its unique identifier (inode)
        or key. Can optionally include child count information.
      operationId: getCategoryByIdOrKey
      parameters:
      - description: Category ID (inode) or key
        in: path
        name: idOrKey
        required: true
        schema:
          type: string
      - description: Whether to include children count
        in: query
        name: showChildrenCount
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCategoryView"
          description: Category retrieved successfully
        "401":
          description: Unauthorized - user authentication required
        "404":
          description: Category not found
        "500":
          description: Internal server error retrieving category
      summary: Get category by ID or key
      tags:
      - Categories
  /v1/changePassword:
    post:
      description: Resets a user's password using a valid token received via email
        or other secure channel
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordForm"
        description: Reset password form containing token and new password
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPasswordResetView"
          description: Password reset successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid login, token, or password"
        "403":
          content:
            application/json: {}
          description: Forbidden - token expired or invalid
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Reset user password
      tags:
      - Authentication
  /v1/configuration:
    get:
      description: Returns the list of system properties that are set through the
        dotCMS configuration files
      operationId: list_8
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Configuration properties retrieved successfully
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List configuration properties
      tags:
      - System Configuration
    put:
      description: Set values to configuration properties at runtime
      operationId: set
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Map of configuration properties to set
        required: true
      responses:
        "200":
          description: Configuration properties set successfully (no body)
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role and maintenance portlet
            access required
      summary: Set configuration properties
      tags:
      - System Configuration
  /v1/configuration/_validateCompanyEmail:
    post:
      description: Send a validation email to verify the company email configuration
      operationId: validateEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompanyEmailForm"
        description: Company email form data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Validation email sent successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role and maintenance portlet
            access required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Validate company email
      tags:
      - System Configuration
  /v1/configuration/config:
    get:
      description: Retrieve specific configuration keys from dotCMS (allowed on WHITE_LIST
        and not restricted by BLACK_LIST)
      operationId: getConfigVariables
      parameters:
      - description: Comma-separated list of configuration keys to retrieve
        in: query
        name: keys
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Configuration variables retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - backend user required
      summary: Get configuration variables
      tags:
      - System Configuration
  /v1/containers:
    delete:
      description: Permanently deletes a container. This is a destructive operation
        that cannot be undone. The user must have edit permissions on the container.
      operationId: delete_8
      parameters:
      - description: Container identifier to delete
        in: query
        name: containerId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Container deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - container ID is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to delete container
        "404":
          content:
            application/json: {}
          description: Container not found
        "500":
          content:
            application/json: {}
          description: Internal server error during container deletion
      summary: Delete container
      tags:
      - Containers
    get:
      description: Returns a list of Container objects based on filtering and pagination
        parameters. Containers are layout components that define how content is displayed
        on pages.
      operationId: getContainers
      parameters:
      - description: Filter containers by title pattern
        in: query
        name: filter
        schema:
          type: string
      - description: Page number for pagination (starting from 1)
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
      - description: Field to order results by
        in: query
        name: orderby
        schema:
          type: string
          default: title
      - description: "Sort direction: ASC or DESC"
        in: query
        name: direction
        schema:
          type: string
          default: ASC
      - description: Filter containers by host ID
        in: query
        name: host
        schema:
          type: string
      - description: Include system containers in results
        in: query
        name: system
        schema:
          type: boolean
      - description: Include archived containers in results
        in: query
        name: archive
        schema:
          type: boolean
      - description: Filter containers by content type ID or variable name
        in: query
        name: content_type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityContainerView"
          description: Containers retrieved successfully
        "400":
          description: Bad request - Invalid parameters
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "500":
          description: Internal server error
      summary: Retrieves a paginated list of Containers
      tags:
      - Containers
    post:
      description: Creates and publishes a new container with the provided configuration.
        The container will be saved as both working and live versions.
      operationId: saveContainer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContainerForm"
        description: "Container configuration data including title, code, content\
          \ type structures, and display settings"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Container created successfully
        "400":
          description: Bad request - Invalid container data
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks create permissions
        "500":
          description: Internal server error
      summary: Creates a new container
      tags:
      - Containers
    put:
      description: Updates a container's working version with the provided configuration.
        The container must exist and the user must have edit permissions.
      operationId: updateContainer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContainerForm"
        description: Updated container configuration data including identifier and
          modified properties
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Container updated successfully
        "400":
          description: Bad request - Invalid container data
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks edit permissions
        "404":
          description: Container not found
        "500":
          description: Internal server error
      summary: Updates an existing container
      tags:
      - Containers
  /v1/containers/_archive:
    put:
      description: Archives a container by moving it to an archived state. Archived
        containers are no longer available for use but are preserved for historical
        purposes.
      operationId: archive
      parameters:
      - description: Container identifier to archive
        in: query
        name: containerId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Container archived successfully
        "400":
          content:
            application/json: {}
          description: Bad request - container ID is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to archive container
        "404":
          content:
            application/json: {}
          description: Container not found
        "500":
          content:
            application/json: {}
          description: Internal server error during container archiving
      summary: Archive container
      tags:
      - Containers
  /v1/containers/_bulkarchive:
    put:
      description: Archives multiple containers in a single operation. Archived containers
        are removed from active use but preserved for potential restoration. Returns
        a summary of successful archives and any failures.
      operationId: bulkArchive
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of container identifiers to archive
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Bulk archiving completed with results
        "400":
          description: Bad request - invalid container identifiers or empty request
            body
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to archive containers
        "500":
          description: Internal server error during bulk archiving
      summary: Bulk archive containers
      tags:
      - Containers
  /v1/containers/_bulkdelete:
    delete:
      description: Deletes multiple containers in a single operation. Returns a summary
        of successful deletions and any failures that occurred during the process.
      operationId: bulkDelete
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of container identifiers to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Bulk deletion completed with results
        "400":
          description: Bad request - invalid container identifiers or empty request
            body
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to delete containers
        "500":
          description: Internal server error during bulk deletion
      summary: Bulk delete containers
      tags:
      - Containers
  /v1/containers/_bulkpublish:
    put:
      description: Publishes multiple containers in a single operation. Makes the
        containers available on live environments. Returns a summary of successful
        publications and any failures.
      operationId: bulkPublish
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of container identifiers to publish
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Bulk publication completed with results
        "400":
          description: Bad request - invalid container identifiers or empty request
            body
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to publish containers
        "500":
          description: Internal server error during bulk publication
      summary: Bulk publish containers
      tags:
      - Containers
  /v1/containers/_bulkunarchive:
    put:
      description: Unarchives multiple containers in a single operation. Restores
        archived containers back to active working state for editing and use. Returns
        a summary of successful unarchives and any failures.
      operationId: bulkUnarchive
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of container identifiers to unarchive
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Bulk unarchiving completed with results
        "400":
          description: Bad request - invalid container identifiers or empty request
            body
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to unarchive containers
        "500":
          description: Internal server error during bulk unarchiving
      summary: Bulk unarchive containers
      tags:
      - Containers
  /v1/containers/_bulkunpublish:
    put:
      description: Unpublishes multiple containers in a single operation. Removes
        the containers from live environments while keeping them in working state.
        Returns a summary of successful unpublications and any failures.
      operationId: bulkUnpublish
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of container identifiers to unpublish
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Bulk unpublication completed with results
        "400":
          description: Bad request - invalid container identifiers or empty request
            body
        "401":
          description: Unauthorized - user authentication required
        "403":
          description: Forbidden - insufficient permissions to unpublish containers
        "500":
          description: Internal server error during bulk unpublication
      summary: Bulk unpublish containers
      tags:
      - Containers
  /v1/containers/_publish:
    put:
      description: Makes a container live by publishing it. The container must exist
        and the user must have publish permissions.
      operationId: publishContainer
      parameters:
      - description: Container identifier to publish
        in: query
        name: containerId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Container published successfully
        "400":
          description: Bad request - Container ID is required
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks publish permissions
        "404":
          description: Container not found
        "500":
          description: Internal server error
      summary: Publishes a container
      tags:
      - Containers
  /v1/containers/_unarchive:
    put:
      description: "Unarchives a previously archived container, restoring it to an\
        \ active state where it can be used again for content display."
      operationId: unarchive
      parameters:
      - description: Container identifier to unarchive
        in: query
        name: containerId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Container unarchived successfully
        "400":
          content:
            application/json: {}
          description: Bad request - container ID is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to unarchive container
        "404":
          content:
            application/json: {}
          description: Container not found
        "500":
          content:
            application/json: {}
          description: Internal server error during container unarchiving
      summary: Unarchive container
      tags:
      - Containers
  /v1/containers/_unpublish:
    put:
      description: Removes a container from live status by unpublishing it. The container
        must exist and the user must have unpublish permissions.
      operationId: unpublishContainer
      parameters:
      - description: Container identifier to unpublish
        in: query
        name: containerId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Container unpublished successfully
        "400":
          description: Bad request - Container ID is required
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks unpublish permissions
        "404":
          description: Container not found
        "500":
          description: Internal server error
      summary: Unpublishes a container
      tags:
      - Containers
  /v1/containers/containerContent/{params}:
    get:
      description: Retrieves and renders content within a container using Velocity
        templating. Returns the rendered content as it would appear when displayed
        through the specified container.
      operationId: containerContents
      parameters:
      - description: Container identifier
        in: query
        name: containerId
        required: true
        schema:
          type: string
      - description: Content inode
        in: query
        name: contentInode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Rendered container content with template output
          description: Container contents retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access container or
            content
        "404":
          content:
            application/json: {}
          description: Container or content not found
        "500":
          content:
            application/json: {}
          description: Internal server error during content retrieval
      summary: Get container contents
      tags:
      - Containers
  /v1/containers/content/{contentletId}:
    get:
      description: "Renders HTML content for a specific contentlet within a container,\
        \ where the container ID is passed as a query parameter. This is useful for\
        \ File Asset Containers where the container ID is a path that cannot be used\
        \ in the URL path."
      operationId: containerContentByQueryParam
      parameters:
      - description: Container identifier or path
        in: query
        name: containerId
        required: true
        schema:
          type: string
      - description: Page inode for context
        in: query
        name: pageInode
        schema:
          type: string
      - description: Contentlet identifier
        in: path
        name: contentletId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringStringView"
          description: Container content rendered successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access content
        "404":
          content:
            application/json: {}
          description: Container or contentlet not found
        "500":
          content:
            application/json: {}
          description: Internal server error during content rendering
      summary: Render container content by query parameter
      tags:
      - Containers
  /v1/containers/delete/{containerId}/content/{contentletId}/uid/{uid}:
    delete:
      description: Removes a specific contentlet from a container at a particular
        position. This affects the container's content layout and rendering.
      operationId: removeContentletFromContainer
      parameters:
      - description: Container identifier
        in: path
        name: containerId
        required: true
        schema:
          type: string
      - description: Contentlet identifier
        in: path
        name: contentletId
        required: true
        schema:
          type: string
      - description: Order position of the content
        in: query
        name: order
        schema:
          type: integer
          format: int64
      - description: Unique identifier for the content instance
        in: path
        name: uid
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityContainerView"
          description: Content removed successfully
        "400":
          description: Bad request - Invalid parameters
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "404":
          description: "Container, content, or UID not found"
        "500":
          description: Internal server error
      summary: Removes content from a container
      tags:
      - Containers
  /v1/containers/form/{formId}:
    get:
      description: "Renders a form within a specific container, where the container\
        \ ID is passed as a query parameter. This is useful for File Asset Containers\
        \ where the container ID is a path that cannot be used in the URL path."
      operationId: containerFormByQueryParam
      parameters:
      - description: Container identifier or path
        in: query
        name: containerId
        required: true
        schema:
          type: string
      - description: Form identifier
        in: path
        name: formId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityContainerObjectMapView"
          description: Container form rendered successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access form
        "404":
          content:
            application/json: {}
          description: Container or form not found
        "500":
          content:
            application/json: {}
          description: Internal server error during form rendering
      summary: Render container form by query parameter
      tags:
      - Containers
  /v1/containers/live:
    get:
      description: Returns the live (published) version of a container. Optionally
        includes associated content type information.
      operationId: getLiveContainer
      parameters:
      - description: Container identifier
        in: query
        name: containerId
        schema:
          type: string
      - description: Include associated content type information
        in: query
        name: includeContentType
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Live container retrieved successfully
        "400":
          description: Bad request - Invalid container ID
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "404":
          description: Live container not found
        "500":
          description: Internal server error
      summary: Retrieves a live container by ID
      tags:
      - Containers
  /v1/containers/working:
    get:
      description: Returns the working (draft) version of a container. Optionally
        includes associated content type information.
      operationId: getWorkingContainer
      parameters:
      - description: Container identifier
        in: query
        name: containerId
        schema:
          type: string
      - description: Include associated content type information
        in: query
        name: includeContentType
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleContainerView"
          description: Working container retrieved successfully
        "400":
          description: Bad request - Invalid container ID
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "404":
          description: Working container not found
        "500":
          description: Internal server error
      summary: Retrieves a working container by ID
      tags:
      - Containers
  /v1/containers/{containerId}/content/{contentletId}:
    get:
      description: Renders HTML content for a specific contentlet within a container.
        Returns the rendered HTML markup that would be displayed when the contentlet
        is viewed through the specified container.
      operationId: containerContent
      parameters:
      - description: Container identifier or path
        in: path
        name: containerId
        required: true
        schema:
          type: string
      - description: Contentlet identifier
        in: path
        name: contentletId
        required: true
        schema:
          type: string
      - description: Page inode for context
        in: query
        name: pageInode
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringStringView"
          description: Container content rendered successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access content
        "404":
          content:
            application/json: {}
          description: Container or contentlet not found
        "500":
          content:
            application/json: {}
          description: Internal server error during content rendering
      summary: Render container content
      tags:
      - Containers
  /v1/containers/{containerId}/form/{formId}:
    get:
      description: Returns HTML content for a form rendered within the specified container.
        This is used to display forms with container styling and layout.
      operationId: containerForm
      parameters:
      - description: Container identifier (UUID or path)
        in: path
        name: containerId
        required: true
        schema:
          type: string
      - description: Form identifier
        in: path
        name: formId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityContainerObjectMapView"
          description: Form rendered successfully
        "400":
          description: Bad request - Invalid container or form ID
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "404":
          description: Container or form not found
        "500":
          description: Internal server error
      summary: Renders a form within a container
      tags:
      - Containers
  /v1/containers/{id}/_copy:
    post:
      description: Creates a copy of an existing container. The copied container will
        have the same structure and properties as the source container but with a
        new identifier. Requires backend user authentication.
      operationId: copy
      parameters:
      - description: Container identifier to copy
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityContainerView"
          description: Container copied successfully
        "400":
          content:
            application/json: {}
          description: Bad request - container ID is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to copy container
        "404":
          content:
            application/json: {}
          description: Source container not found
        "500":
          content:
            application/json: {}
          description: Internal server error during container copying
      summary: Copy container
      tags:
      - Containers
  /v1/content/_canlock/{inodeOrIdentifier}:
    get:
      description: Checks if the contentlet specified by its inode or identifier can
        be locked by the current user.
      operationId: canLockContent_1
      parameters:
      - description: Contentlet inode or identifier
        in: path
        name: inodeOrIdentifier
        required: true
        schema:
          type: string
      - in: query
        name: language
        schema:
          type: string
          default: "-1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Successfully retrieved lock status
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "500":
          description: Internal Server Error
      summary: Check if a contentlet can be locked
      tags:
      - Content
  /v1/content/_draft:
    put:
      description: Creates or updates a draft version of a contentlet without triggering
        workflow. Drafts allow content editors to save work in progress without publishing.
      operationId: saveDraft
      parameters:
      - description: Content inode for existing content
        in: query
        name: inode
        schema:
          type: string
      - description: Content identifier for existing content
        in: query
        name: identifier
        schema:
          type: string
      - description: "Index policy (DEFER_UNTIL_PUBLISH, FORCE, WAIT_FOR)"
        in: query
        name: indexPolicy
        schema:
          type: string
      - description: Language ID for content localization
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentForm"
        description: Content data and field values
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Draft saved successfully
        "400":
          description: Bad request - Invalid content data
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks write permissions
        "404":
          description: Content not found
        "500":
          description: Internal server error
      summary: Saves a content draft
      tags:
      - Content
  /v1/content/_import:
    get:
      description: Fetches a paginated list of all content import jobs regardless
        of state. Results can be paginated using query parameters.
      operationId: getContentImportJobs
      parameters:
      - description: Page number to retrieve (1-based indexing).
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: Number of records per page.
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successfully retrieved the paginated list of content import
            jobs.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions to view\
            \ jobs."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving jobs."
      summary: Retrieves content import jobs
      tags:
      - Content Import
      - Content
    post:
      description: Creates and enqueues a new content import job. Requires a CSV file
        and a JSON string representing import parameters.
      operationId: importContent
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ContentImportParamsSchema"
        description: |-
          This endpoint accepts a `multipart/form-data` request with two fields:

          | **Field** | **Type** | **Required** | **Description** |
          |-----------|----------|--------------|-----------------|
          | `file`    | File     | ✅ Yes        | The CSV file to import. Must contain content rows and match the expected structure for the content type. |
          | `form`    | String   | ✅ Yes        | A JSON string containing the import parameters. See structure below. |

          **`form` field structure:**

          | **Property**         | **Type**   | **Required** | **Default** | **Description** |
          |----------------------|------------|--------------|-------------|-----------------|
          | `contentType`        | String     | ✅ Yes        | –           | Content Type variable or ID to import data into. |
          | `language`           | String     | ❌ No         | Default language | Language code (e.g., `en-US`) or language ID. |
          | `workflowActionId`   | String     | ✅ Yes        | –           | Workflow Action UUID to apply to imported content. |
          | `fields`             | String[]   | ❌ No         | –           | List of field variables or IDs used as keys for content updates. |
          | `stopOnError`        | Boolean    | ❌ No         | `false`     | Whether to stop import on first validation error. |
          | `commitGranularity`  | Integer    | ❌ No         | `100`       | Number of rows to commit in each transaction batch. |

          **Example `form` value:**

          ```json
          {
            "contentType": "webPageContent",
            "language": "en-US",
            "workflowActionId": "b9d89c80-3d88-4311-8365-187323c96436",
            "fields": ["title"],
            "stopOnError": false,
            "commitGranularity": 100
          }
          ```
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobStatusView"
          description: Content import job successfully created and enqueued.
        "400":
          description: "Bad Request: Invalid parameters or malformed request (e.g.,\
            \ missing file, invalid JSON in 'form', file not CSV)."
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions for content\
            \ import or workflow action."
        "404":
          description: "Not Found: Specified Content Type or Language could not be\
            \ found."
        "500":
          description: "Internal Server Error: An unexpected error occurred during\
            \ job creation or processing."
      summary: Imports content from a CSV file
      tags:
      - Content Import
      - Content
  /v1/content/_import/_validate:
    post:
      description: "Creates and enqueues a content import job in preview mode. This\
        \ validates the CSV data against the specified Content Type, language, and\
        \ workflow action without actually importing content."
      operationId: validateContentImport
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ContentImportParamsSchema"
        description: |-
          This endpoint accepts a `multipart/form-data` request with two fields:

          | **Field** | **Type** | **Required** | **Description** |
          |-----------|----------|--------------|-----------------|
          | `file`    | File     | ✅ Yes        | The CSV file to import. Must contain content rows and match the expected structure for the content type. |
          | `form`    | String   | ✅ Yes        | A JSON string containing the import parameters. See structure below. |

          **`form` field structure:**

          | **Property**         | **Type**   | **Required** | **Default** | **Description** |
          |----------------------|------------|--------------|-------------|-----------------|
          | `contentType`        | String     | ✅ Yes        | –           | Content Type variable or ID to import data into. |
          | `language`           | String     | ❌ No         | Default language | Language code (e.g., `en-US`) or language ID. |
          | `workflowActionId`   | String     | ✅ Yes        | –           | Workflow Action UUID to apply to imported content. |
          | `fields`             | String[]   | ❌ No         | –           | List of field variables or IDs used as keys for content updates. |
          | `stopOnError`        | Boolean    | ❌ No         | `false`     | Whether to stop import on first validation error. |
          | `commitGranularity`  | Integer    | ❌ No         | `100`       | Number of rows to commit in each transaction batch. |

          **Example `form` value:**

          ```json
          {
            "contentType": "webPageContent",
            "language": "en-US",
            "workflowActionId": "b9d89c80-3d88-4311-8365-187323c96436",
            "fields": ["title"],
            "stopOnError": false,
            "commitGranularity": 100
          }
          ```
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  jobId: e6d9bae8-657b-4e2f-8524-c0222db66355
                  statusUrl: http://localhost:8080/api/v1/_import/e6d9bae8-657b-4e2f-8524-c0222db66355
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityJobStatusView"
          description: Content import validation job successfully created and enqueued.
        "400":
          description: "Bad Request: Invalid parameters or malformed request (e.g.,\
            \ missing file, invalid JSON in 'form', file not CSV)."
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions for validation\
            \ or workflow action."
        "404":
          description: "Not Found: Specified Content Type or Language could not be\
            \ found."
        "500":
          description: "Internal Server Error: An unexpected error occurred during\
            \ job creation or processing."
      summary: Validates content import from a CSV file
      tags:
      - Content Import
      - Content
  /v1/content/_import/abandoned:
    get:
      description: Fetches a paginated list of abandoned content import jobs (jobs
        with state ABANDONED). Results can be paginated using query parameters.
      operationId: getAbandonedContentImportJobs
      parameters:
      - description: Page number to retrieve (1-based indexing).
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: Number of records per page.
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successfully retrieved the paginated list of abandoned content
            import jobs.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions to view\
            \ jobs."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving jobs."
      summary: Retrieves abandoned content import jobs
      tags:
      - Content Import
      - Content
  /v1/content/_import/active:
    get:
      description: "Fetches a paginated list of active content import jobs (jobs with\
        \ state NEW, PROCESSING, or WAITING). Results can be paginated using query\
        \ parameters."
      operationId: getActiveContentImportJobs
      parameters:
      - description: Page number to retrieve (1-based indexing).
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: Number of records per page.
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successfully retrieved the paginated list of active content
            import jobs.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions to view\
            \ jobs."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving jobs."
      summary: Retrieves active content import jobs
      tags:
      - Content Import
      - Content
  /v1/content/_import/canceled:
    get:
      description: Fetches a paginated list of canceled content import jobs (jobs
        with state CANCELED). Results can be paginated using query parameters.
      operationId: getCanceledContentImportJobs
      parameters:
      - description: Page number to retrieve (1-based indexing).
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: Number of records per page.
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successfully retrieved the paginated list of canceled content
            import jobs.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions to view\
            \ jobs."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving jobs."
      summary: Retrieves canceled content import jobs
      tags:
      - Content Import
      - Content
  /v1/content/_import/completed:
    get:
      description: Fetches a paginated list of completed content import jobs (jobs
        with state COMPLETED). Results can be paginated using query parameters.
      operationId: getCompletedContentImportJobs
      parameters:
      - description: Page number to retrieve (1-based indexing).
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: Number of records per page.
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successfully retrieved the paginated list of completed content
            import jobs.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions to view\
            \ jobs."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving jobs."
      summary: Retrieves completed content import jobs
      tags:
      - Content Import
      - Content
  /v1/content/_import/failed:
    get:
      description: Fetches a paginated list of failed content import jobs (jobs with
        state FAILED). Results can be paginated using query parameters.
      operationId: getFailedContentImportJobs
      parameters:
      - description: Page number to retrieve (1-based indexing).
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: Number of records per page.
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successfully retrieved the paginated list of failed content
            import jobs.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions to view\
            \ jobs."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving jobs."
      summary: Retrieves failed content import jobs
      tags:
      - Content Import
      - Content
  /v1/content/_import/successful:
    get:
      description: Fetches a paginated list of successful content import jobs (jobs
        with state COMPLETED and successful result). Results can be paginated using
        query parameters.
      operationId: getSuccessfulContentImportJobs
      parameters:
      - description: Page number to retrieve (1-based indexing).
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: Number of records per page.
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successfully retrieved the paginated list of successful content
            import jobs.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have necessary permissions to view\
            \ jobs."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving jobs."
      summary: Retrieves successful content import jobs
      tags:
      - Content Import
      - Content
  /v1/content/_import/{jobId}:
    get:
      description: Fetches the detailed current status of a specific content import
        job identified by its ID.
      operationId: getJobStatus
      parameters:
      - description: The unique identifier (UUID) of the job whose status is to be
          retrieved.
        in: path
        name: jobId
        required: true
        schema:
          type: string
          format: uuid
          example: e6d9bae8-657b-4e2f-8524-c0222db66355
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobView"
          description: Successfully retrieved job status. The entity contains detailed
            information about the job.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have permissions to view the specified\
            \ job."
        "404":
          description: "Not Found: Job with the specified ID could not be found."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ retrieving the job status."
      summary: Retrieves the status of a content import job
      tags:
      - Content Import
      - Content
  /v1/content/_import/{jobId}/cancel:
    post:
      description: Requests cancellation of a specific content import job identified
        by its ID. Note that cancellation is asynchronous and may not be immediate.
      operationId: cancelContentImportJob
      parameters:
      - description: The unique identifier (UUID) of the job to be cancelled.
        in: path
        name: jobId
        required: true
        schema:
          type: string
          format: uuid
          example: e6d9bae8-657b-4e2f-8524-c0222db66355
      responses:
        "200":
          content:
            application/json:
              example:
                entity: Cancellation request successfully sent to job e6d9bae8-657b-4e2f-8524-c0222db66355
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Cancellation request successfully sent to the job.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have permissions to cancel the specified\
            \ job."
        "404":
          description: "Not Found: Job with the specified ID could not be found or\
            \ is already completed/cancelled."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ attempting to cancel the job."
      summary: Cancel a content import job
      tags:
      - Content Import
      - Content
  /v1/content/_import/{jobId}/monitor:
    get:
      description: "Establishes a Server-Sent Events (SSE) connection to monitor the\
        \ progress of a specific content import job in real-time. This endpoint will\
        \ continuously send updates as the job progresses, including status changes\
        \ and completion information."
      operationId: monitorContentImportJobs
      parameters:
      - description: The unique identifier (UUID) of the job whose status is to be
          retrieved.
        in: path
        name: jobId
        required: true
        schema:
          type: string
          format: uuid
          example: e6d9bae8-657b-4e2f-8524-c0222db66355
      responses:
        "200":
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/EventOutput"
          description: Server-Sent Events stream established successfully. Events
            will be sent as the job progresses.
        "401":
          description: "Unauthorized: Invalid or missing user authentication."
        "403":
          description: "Forbidden: User does not have permissions to monitor the specified\
            \ job."
        "404":
          description: "Not Found: Job with the specified ID could not be found."
        "500":
          description: "Internal Server Error: An unexpected error occurred while\
            \ establishing the monitoring connection."
      summary: Monitor a content import job in real-time
      tags:
      - Content Import
      - Content
  /v1/content/_lock/{inodeOrIdentifier}:
    put:
      description: "If the user is allowed to lock the contentlet specified by its\
        \ inode or identifier, the contentlet will be locked."
      operationId: lockContent_1
      parameters:
      - description: Contentlet inode or identifier
        in: path
        name: inodeOrIdentifier
        required: true
        schema:
          type: string
      - in: query
        name: language
        schema:
          type: string
          default: "-1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Successfully locked contentlet
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "500":
          description: Internal Server Error
      summary: Lock a given contentlet by the current user
      tags:
      - Content
  /v1/content/_unlock/{inodeOrIdentifier}:
    put:
      description: "If the user is allowed to unlock the contentlet specified by its\
        \ inode or identifier, the contentlet will be unlocked."
      operationId: unlockContent_1
      parameters:
      - description: Contentlet inode or identifier
        in: path
        name: inodeOrIdentifier
        required: true
        schema:
          type: string
      - in: query
        name: language
        schema:
          type: string
          default: "-1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Successfully unlocked contentlet
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "500":
          description: Internal Server Error
      summary: Unlock a given contentlet by the current user
      tags:
      - Content
  /v1/content/fileassets/{inode}/resourcelink:
    get:
      description: "Builds and returns a resource link for a file asset given its\
        \ inode. The inode must belong to a file asset or an exception will be thrown.\
        \ Includes href, text, and MIME type information."
      operationId: findResourceLink_1
      parameters:
      - description: Inode of the file asset
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Resource link generated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing or invalid inode parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or resource link restricted
        "404":
          content:
            application/json: {}
          description: File asset not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get file asset resource link
      tags:
      - File Assets
  /v1/content/related:
    post:
      description: Retrieves related content for a contentlet based on relationship
        field configuration and query conditions
      operationId: pullRelated
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PullRelatedForm"
        description: Pull related content request parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Related content retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - contentlet does not have a relationship field
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Not found - contentlet not found
      summary: Pull Related Content
      tags:
      - Content
  /v1/content/resourcelinks:
    get:
      description: Retrieves resource links for all binary fields of a contentlet
        identified by inode or identifier
      operationId: findResourceLinks
      parameters:
      - description: Content inode
        in: query
        name: inode
        schema:
          type: string
      - description: Content identifier
        in: query
        name: identifier
        schema:
          type: string
      - description: Language ID
        example: 1
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Resource links retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing inode/identifier parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - download restricted
      summary: Get all resource links for contentlet
      tags:
      - Content
  /v1/content/resourcelinks/field/{field}:
    get:
      description: Retrieves a resource link for a specific field of a contentlet
        identified by inode or identifier
      operationId: findResourceLink
      parameters:
      - description: Field variable name
        in: path
        name: field
        required: true
        schema:
          type: string
      - description: Content inode
        in: query
        name: inode
        schema:
          type: string
      - description: Content identifier
        in: query
        name: identifier
        schema:
          type: string
      - description: Language ID
        example: 1
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Resource link retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing inode/identifier parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - download restricted
        "404":
          content:
            application/json: {}
          description: Not found - contentlet or field not found
      summary: Get resource link for specific field
      tags:
      - Content
  /v1/content/search:
    post:
      description: "Abstracts the generation of the required Lucene query to look\
        \ for user searchable fields in a Content Type, and returns the expected results."
      operationId: search_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContentSearchForm"
        description: Content search parameters
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchView"
          description: The query has been executed. It's possible that no contents
            matched the search criteria.
        "400":
          description: Bad request. Malformed JSON body
        "401":
          description: "Invalid User, or not logged in"
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Retrieves content from the dotCMS repository
      tags:
      - Content
  /v1/content/versions:
    get:
      description: "Retrieves all versions for content by identifier or inodes, with\
        \ optional grouping by language"
      operationId: findVersions
      parameters:
      - description: Comma-separated list of content inodes
        in: query
        name: inodes
        schema:
          type: string
      - description: Content identifier (takes precedence over inodes)
        in: query
        name: identifier
        schema:
          type: string
      - description: Group results by language (true/1 or false/0)
        example: false
        in: query
        name: groupByLang
        schema:
          type: string
      - description: "Maximum number of results (min: 20, max: 100)"
        example: 20
        in: query
        name: limit
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Content versions retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing identifier/inodes or invalid parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Not found - content not found
      summary: Find content versions
      tags:
      - Content
  /v1/content/versions/{inode}:
    get:
      description: Retrieves a specific content version by its inode
      operationId: findByInode
      parameters:
      - description: Content inode
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Content found successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid inode format
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Not found - content with inode not found
      summary: Find content by inode
      tags:
      - Content
  /v1/content/{identifier}/languages:
    get:
      description: Retrieves all available languages for a contentlet and indicates
        which languages have content versions
      operationId: checkContentLanguageVersions
      parameters:
      - description: Content identifier
        in: path
        name: identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Language versions retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Not found - contentlet identifier not found
      summary: Check content language versions
      tags:
      - Content
  /v1/content/{identifier}/references/count:
    get:
      description: Retrieves the total number of references to a specific contentlet
        by its identifier
      operationId: getAllContentletReferencesCount
      parameters:
      - description: Content identifier
        in: path
        name: identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityCountView"
          description: References count retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Not found - contentlet with identifier not found
      summary: Get contentlet references count
      tags:
      - Content
  /v1/content/{inodeOrIdentifier}:
    get:
      description: "Returns a single contentlet based on its identifier or inode.\
        \ This is the primary endpoint for fetching content data with support for\
        \ language, variants, and relationship depth."
      operationId: getContent_2
      parameters:
      - description: Contentlet identifier or inode
        in: path
        name: inodeOrIdentifier
        required: true
        schema:
          type: string
      - description: Language ID for content localization
        in: query
        name: language
        schema:
          type: string
          default: ""
      - description: Variant name for A/B testing
        in: query
        name: variantName
        schema:
          type: string
          default: DEFAULT
      - description: Relationship depth to include (-1 for no relationships)
        in: query
        name: depth
        schema:
          type: integer
          format: int32
          default: -1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Contentlet retrieved successfully
        "400":
          description: Bad request - Invalid identifier format
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks read permissions
        "404":
          description: Contentlet not found
        "500":
          description: Internal server error
      summary: Retrieves a contentlet by identifier or inode
      tags:
      - Content
  /v1/content/{inodeOrIdentifier}/references:
    get:
      description: "Retrieves all references to a specific contentlet, including pages,\
        \ containers, and personas that reference it"
      operationId: getContentletReferences
      parameters:
      - description: Content inode or identifier
        in: path
        name: inodeOrIdentifier
        required: true
        schema:
          type: string
      - description: Language ID for content localization
        example: 1
        in: query
        name: language
        schema:
          type: string
          default: ""
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityContentReferenceListView"
          description: References retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Not found - contentlet not found
      summary: Get contentlet references
      tags:
      - Content
  /v1/contentrelationships/{params}:
    get:
      deprecated: true
      description: "Retrieves content with relationships based on query parameters,\
        \ identifier, or inode. This endpoint is deprecated - use /v1/content with\
        \ depth parameter instead."
      operationId: getContent_1
      parameters:
      - description: "Query parameters, identifier, or inode for content lookup"
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Content with relationships in JSON format including contentlets
                  and their related content
          description: Content with relationships retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get content with relationships (deprecated)
      tags:
      - Content
  /v1/contentreport/folder/{folder}:
    get:
      description: Generates a detailed report of the different Content Types living
        under a Folder and the number of content items for each type. Supports both
        folder ID and folder path (requires site parameter).
      operationId: getFolderContentReport
      parameters:
      - description: Folder ID or path to generate the report for
        in: path
        name: folder
        required: true
        schema:
          type: string
          pattern: .*
      - in: query
        name: site
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
          format: int32
      - in: query
        name: per_page
        schema:
          type: integer
          format: int32
      - in: query
        name: orderby
        schema:
          type: string
          default: upper(name)
      - in: query
        name: direction
        schema:
          type: string
          default: ASC
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentReportView"
          description: "Content Report for the specified Folder ID/path, or an empty\
            \ list if either the Folder doesn't exist, or no content is found."
      summary: Generate folder content report
      tags:
      - Content Report
  /v1/contentreport/site/{site}:
    get:
      description: Generates a detailed report of the different Content Types living
        under a Site and the number of content items for each type. Useful for data
        analysis and deletion planning.
      operationId: getSiteContentReport
      parameters:
      - description: Site ID or key to generate the report for
        in: path
        name: site
        required: true
        schema:
          type: string
      - in: query
        name: page
        schema:
          type: integer
          format: int32
      - in: query
        name: per_page
        schema:
          type: integer
          format: int32
      - in: query
        name: orderby
        schema:
          type: string
          default: upper(name)
      - in: query
        name: direction
        schema:
          type: string
          default: ASC
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSiteVariablesEntityView"
          description: "Content Report for the specified Site ID/Key, or an empty\
            \ list if either the Site doesn't exist, or no content is found."
      summary: Generate site content report
      tags:
      - Content Report
  /v1/contenttype:
    get:
      description: Returns a list of content type objects based on the filtering criteria.
      operationId: getContentType
      parameters:
      - description: String to filter/search for specific content types; leave blank
          to return all.
        in: query
        name: filter
        schema:
          type: string
      - description: |-
          Page number in response pagination.

          Default: `1`
        in: query
        name: page
        schema:
          type: integer
          format: int64
      - description: |-
          Number of results per page for pagination.

          Default: `10`
        in: query
        name: per_page
        schema:
          type: integer
          format: int64
      - description: |-
          Column(s) to sort the results. Multiple columns can be combined in a comma-separated list. Column names can also be set within a SQL string function, such as `upper()`.

          Some possible values:

          `name`, `velocity_var_name`, `mod_date`, `sort_order`

          `description`, `structuretype`, `category`, `inode`
        in: query
        name: orderby
        schema:
          type: string
          default: upper(name)
      - description: "Sort direction: choose between ascending or descending."
        in: query
        name: direction
        schema:
          type: string
          default: ASC
          enum:
          - ASC
          - DESC
      - description: "Variable name of [base content type](https://www.dotcms.com/docs/latest/base-content-types)."
        in: query
        name: type
        schema:
          type: string
          enum:
          - ANY
          - CONTENT
          - WIDGET
          - FORM
          - FILEASSET
          - HTMLPAGE
          - PERSONA
          - VANITY_URL
          - KEY_VALUE
          - DOTASSET
      - description: Filter by site identifier.
        in: query
        name: host
        schema:
          type: string
      - description: "Multi-site filter: Takes comma-separated list of site identifiers\
          \ or keys."
        in: query
        name: sites
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                - baseType: string
                  clazz: string
                  defaultType: true
                  description: string
                  fixed: true
                  folder: string
                  folderPath: string
                  host: string
                  iDate: 0
                  icon: string
                  id: string
                  layout: []
                  metadata: {}
                  modDate: 0
                  multilingualable: true
                  nEntries: 0
                  name: string
                  siteName: string
                  sortOrder: 0
                  system: true
                  variable: string
                  versionable: true
                  workflows: []
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination:
                  currentPage: 0
                  perPage: 0
                  totalEntries: 0
                permissions: []
          description: Content types retrieved successfully
        "403":
          description: Forbidden
        "500":
          description: Internal Server Error
      summary: Retrieves a list of content types
      tags:
      - Content Type
    post:
      description: |-
        Creates one or more content types specified in the JSON payload.

         Returns a list entity containing the created content type objects.
      operationId: postContentTypeCreate
      requestBody:
        content:
          application/json:
            example:
            - clazz: com.dotcms.contenttype.model.type.ImmutableSimpleContentType
              defaultType: false
              name: The Content Type 1
              description: THE DESCRIPTION
              host: 48190c8c-42c4-46af-8d1a-0cd5db894797
              owner: dotcms.org.1
              variable: TheContentType1
              fixed: false
              system: false
              folder: SYSTEM_FOLDER
              systemActionMappings:
                NEW: ceca71a0-deee-4999-bd47-b01baa1bcfc8
                PUBLISH: ceca71a0-deee-4999-bd47-b01baa1bcfc8
              workflow:
              - d61a59e1-a49c-46f2-a929-db2b4bfa88b2
            - clazz: com.dotcms.contenttype.model.type.ImmutableSimpleContentType
              defaultType: false
              name: The Content Type 2
              description: THE DESCRIPTION
              host: 48190c8c-42c4-46af-8d1a-0cd5db894797
              owner: dotcms.org.1
              variable: TheContentType2
              fixed: false
              system: false
              folder: SYSTEM_FOLDER
              workflow:
              - d61a59e1-a49c-46f2-a929-db2b4bfa88b2
            schema:
              $ref: "#/components/schemas/ContentTypeForm"
        description: |-
          Payload may consist of a single content type JSON object, or a list containing multiple content type objects.

          Objects require `clazz` and `name` properties at minimum.

          May optionally include the following special properties:

          | Property | Value | Description |
          |-|-|-|
          | `systemActionMappings` | JSON Object | Maps [Default Workflow Actions](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions) (as keys) to workflow action identifiers (as values) for this content type.|
          | `workflow` | List of Strings | A list of identifiers of workflow schemes to be associated with the content type.
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                - baseType: string
                  clazz: string
                  defaultType: true
                  description: string
                  fields: []
                  fixed: true
                  folder: string
                  folderPath: string
                  host: string
                  iDate: 0
                  icon: string
                  id: string
                  layout: []
                  metadata: {}
                  modDate: 0
                  multilingualable: true
                  name: string
                  owner: string
                  siteName: string
                  sortOrder: 0
                  system: true
                  systemActionMappings: {}
                  variable: string
                  versionable: true
                  workflows: []
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Content type(s) created successfully
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Creates one or more content types
      tags:
      - Content Type
  /v1/contenttype/_filter:
    post:
      description: "Returns the list of content type objects that match the specified\
        \ filter, with optional pagination criteria."
      operationId: postContentTypeFilter
      requestBody:
        content:
          application/json:
            example:
              filter:
                query: ""
                types: "Blog,Activity"
              page: 1
              perPage: 10
              orderBy: name
              direction: ASC
            schema:
              $ref: "#/components/schemas/FilteredContentTypesForm"
        description: |-
          Requires POST body consisting of a JSON object with the following properties:

          | Property |  Type  | Description |
          |----------|--------|-------------|
          | `filter`   | JSON Object | Contains two properties: <table><tr><td>`query`</td><td>A simple query returning full or partial matches.</td></tr><tr><td>`types`</td><td>A comma-separated list of specific content type variables.</td></tr></table> |
          | `page` | Integer | Which page of results to show. Defaults to `1`. |
          | `perPage`   | Integer | Number of results to display per page. Defaults to `10`. |
          | `orderBy`   | String | Sorting parameter: `name` (default), `velocity_var_name`, `mod_date`, or `sort_order`. |
          | `direction`   | String | `ASC` (default) or `DESC` for ascending or descending. |
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                - baseType: string
                  clazz: string
                  defaultType: true
                  description: string
                  fixed: false
                  folder: string
                  folderPath: string
                  host: string
                  iDate: 0
                  icon: string
                  id: string
                  layout: []
                  metadata: {}
                  modDate: 0
                  multilingualable: true
                  nEntries: 0
                  name: string
                  siteName: string
                  sortOrder: 0
                  system: true
                  variable: string
                  versionable: true
                  workflows: []
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination:
                  currentPage: 0
                  perPage: 0
                  totalEntries: 0
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityListContentTypeView"
          description: Content types filtered successfully
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Filters content types
      tags:
      - Content Type
  /v1/contenttype/basetypes:
    get:
      description: Returns a list of base content types.
      operationId: getContentTypeBaseTypes
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                - label: string
                  name: string
                  types: null
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityBaseContentTypesView"
          description: Base content types retrieved successfully
        "500":
          description: Internal Server Error
      summary: Retrieves base content types
      tags:
      - Content Type
  /v1/contenttype/id/{idOrVar}:
    delete:
      description: |-
        Deletes the content type based on the provided ID or Velocity variable name.

        Returns JSON string containing the identifier of the deleted content type.
      operationId: deleteContentType
      parameters:
      - description: The ID or Velocity variable name of the content type to delete.
        in: path
        name: idOrVar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                entity: "{\"deleted\":\"string\"}"
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityContentTypeJsonView"
          description: Content type deleted successfully
        "403":
          description: Forbidden
        "404":
          description: Content type not found
        "500":
          description: Internal Server Error
      summary: Deletes a content type
      tags:
      - Content Type
    get:
      description: Returns one content type based on the provided ID or Velocity variable
        name.
      operationId: getContentTypeIdVar
      parameters:
      - description: |-
          The ID or Velocity variable name of the content type to retrieve.

          Example: `htmlpageasset` (Default page content type)
        in: path
        name: idOrVar
        required: true
        schema:
          type: string
      - description: The language ID for localization.
        in: query
        name: languageId
        schema:
          type: integer
          format: int64
      - description: Determines whether live versions of language variables are used
          in the returned object.
        in: query
        name: live
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                - baseType: string
                  clazz: string
                  defaultType: true
                  description: string
                  fields: []
                  fixed: false
                  folder: string
                  folderPath: string
                  host: string
                  iDate: 0
                  icon: string
                  id: string
                  layout: []
                  metadata: {}
                  modDate: 0
                  multilingualable: true
                  name: string
                  siteName: string
                  sortOrder: 0
                  system: true
                  variable: string
                  systemActionMappings: {}
                  versionable: true
                  workflows: []
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination:
                  currentPage: 0
                  perPage: 0
                  totalEntries: 0
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityContentTypeDetailView"
          description: Content type retrieved successfully
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Retrieves a single content type
      tags:
      - Content Type
    put:
      description: |-
        Updates the content type based on the given ID or Velocity variable name.

        Returns a copy of the updated content type object.

        > **Caution:** When updating a content type, any editable fields omitted from the request body will be removed from the content type. To update selected properties without deleting others,submit the full JSON entity with the desired items edited.
      operationId: putContentTypeUpdate
      parameters:
      - description: |-
          The ID or Velocity variable name of the content type to update.

          Example value: `htmlpageasset` (Default page content type)
        in: path
        name: idOrVar
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              clazz: com.dotcms.contenttype.model.type.ImmutableSimpleContentType
              defaultType: false
              id: 39fecdb0-46cc-40a9-a056-f2e1a80ea78c
              name: The Content Type 2
              description: THE DESCRIPTION 2
              host: 48190c8c-42c4-46af-8d1a-0cd5db894797
              owner: dotcms.org.1
              variable: TheContentType1
              fixed: false
              system: false
              folder: SYSTEM_FOLDER
              workflow:
              - d61a59e1-a49c-46f2-a929-db2b4bfa88b2
            schema:
              $ref: "#/components/schemas/ContentTypeForm"
        description: |-
          The minimum required properties for a successful update are `clazz`, `id`, and `name`.

          May also optionally include the following special properties:

          | Property | Value | Description |
          |-|-|-|
          | `systemActionMappings` | JSON Object | Maps [Default Workflow Actions](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions) (as keys) to workflow action identifiers (as values) for this content type.|
          | `workflow` | List of Strings | A list of identifiers of workflow schemes to be associated with the content type.
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  baseType: string
                  clazz: string
                  defaultType: true
                  fields: []
                  fixed: true
                  folder: string
                  folderPath: string
                  host: string
                  iDate: 0
                  icon: string
                  id: string
                  layout: []
                  metadata: {}
                  modDate: 0
                  multilingualable: true
                  name: string
                  siteName: string
                  sortOrder: 0
                  system: true
                  systemActionMappings: {}
                  variable: string
                  versionable: true
                  workflows: []
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityContentTypeDetailView"
          description: Content type updated successfully
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Updates a content type
      tags:
      - Content Type
  /v1/contenttype/{baseVariableName}/_copy:
    post:
      description: |-
        Creates a new content type by copying an existing one.

        Returns resulting content type.
      operationId: postContentTypeCopy
      parameters:
      - description: |-
          The variable name of the content type to copy.

          Example value: `htmlpageasset` (Default page content type)
        in: path
        name: baseVariableName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              name: Copied Content Type Name
              variable: copiedContentTypeVar
              folder: SYSTEM_FOLDER
              host: 8a7d5e23-da1e-420a-b4f0-471e7da8ea2d
              icon: event_note
            schema:
              $ref: "#/components/schemas/CopyContentTypeForm"
        description: |-
          Requires POST body consisting of a JSON object with the following properties:

          | Property |  Type  | Description |
          |----------|--------|-------------|
          | `name`   | String | **Required.** Name of new content type |
          | `variable` | String | System variable of new content type |
          | `folder`   | String | Folder in which new content type will live |
          | `host`   | String | Site or host to which the new content type will belong |
          | `icon`   | String | System icon to represent content type |

          Values not specified default to values of the original content type.
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                errors:
                - errorCode: string
                  message: string
                  fieldName: string
                entity:
                  baseType: string
                  clazz: string
                  defaultType: true
                  description: string
                  fields: []
                  fixed: true
                  folder: string
                  folderPath: string
                  host: string
                  iDate: 0
                  icon: string
                  id: string
                  layout: []
                  metadata: {}
                  modDate: 0
                  multilingualable: true
                  name: string1
                  siteName: string
                  sortOrder: 0
                  system: true
                  systemActionMappings: {}
                  variable: string
                  versionable: true
                  workflows: []
                messages:
                - message: string
                i18nMessagesMap:
                  additionalProp1: string
                  additionalProp2: string
                  additionalProp3: string
                permissions:
                - string
                pagination:
                  currentPage: 0
                  perPage: 0
                  totalEntries: 0
              schema:
                $ref: "#/components/schemas/ResponseEntityContentTypeOperationView"
          description: Content type copied successfully
        "400":
          description: Bad Request
        "403":
          description: Forbidden
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Copies a content type
      tags:
      - Content Type
  /v1/contenttype/{typeId}/fields:
    delete:
      deprecated: true
      description: Deletes multiple fields from a content type by their field IDs.
        Use v2 API instead for new implementations.
      operationId: deleteFields
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: Array of field IDs to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fields deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field IDs
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type or one or more fields not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete multiple fields (deprecated)
      tags:
      - Content Type Field
    get:
      deprecated: true
      description: Retrieves all fields for a specific content type. Use v2 API instead
        for new implementations.
      operationId: getContentTypeFields
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Fields retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get content type fields (deprecated)
      tags:
      - Content Type Field
    post:
      deprecated: true
      description: Creates a new field for a content type. Use v2 API instead.
      operationId: createContentTypeField
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field JSON data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Field created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - content type not found
      summary: Create content type field (deprecated)
      tags:
      - Content Type Field
    put:
      deprecated: true
      description: Updates multiple fields for a content type. Use v2 API instead.
      operationId: updateFields
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Fields JSON data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Fields updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - content type not found
      summary: Update content type fields (deprecated)
      tags:
      - Content Type Field
  /v1/contenttype/{typeId}/fields/id/{fieldId}:
    delete:
      deprecated: true
      description: Deletes a specific field from a content type by its field ID. Use
        v2 API instead for new implementations.
      operationId: deleteContentTypeFieldById
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID to delete
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Field deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type or field not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete content type field by ID (deprecated)
      tags:
      - Content Type Field
    get:
      deprecated: true
      description: Retrieves a specific field from a content type by its unique field
        ID. Use v2 API instead for new implementations.
      operationId: getContentTypeFieldById
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Field retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type or field not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get content type field by ID (deprecated)
      tags:
      - Content Type Field
    put:
      deprecated: true
      description: Updates a specific field in a content type by its field ID. Use
        v2 API instead for new implementations.
      operationId: updateContentTypeFieldById
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID to update
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field JSON data with updates
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Field updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field data or missing field ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type or field not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update content type field by ID (deprecated)
      tags:
      - Content Type Field
  /v1/contenttype/{typeId}/fields/id/{fieldId}/variables:
    get:
      description: Retrieves all field variables for a specific field identified by
        its ID
      operationId: getFieldVariablesByFieldId
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Field variables retrieved successfully
        "404":
          content:
            application/json: {}
          description: Not found - field not found
      summary: Get field variables by field ID
      tags:
      - Content Type Field
    post:
      description: Creates a new field variable for a specific field identified by
        its ID
      operationId: createFieldVariableByFieldId
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field variable data
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field variable data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - field not found
      summary: Create field variable by field ID
      tags:
      - Content Type Field
  /v1/contenttype/{typeId}/fields/id/{fieldId}/variables/id/{fieldVarId}:
    delete:
      description: Deletes a specific field variable for a field identified by its
        ID
      operationId: deleteFieldVariableByFieldId
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      - description: Field variable ID
        in: path
        name: fieldVarId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - field or field variable not found
      summary: Delete field variable by field ID
      tags:
      - Content Type Field
    get:
      description: Retrieves a specific field variable by field ID and variable ID
      operationId: getFieldVariableByFieldId
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      - description: Field variable ID
        in: path
        name: fieldVarId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable retrieved successfully
        "404":
          content:
            application/json: {}
          description: Not found - field or field variable not found
      summary: Get specific field variable by field ID
      tags:
      - Content Type Field
    put:
      description: Updates an existing field variable for a specific field identified
        by its ID
      operationId: updateFieldVariableByFieldId
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field ID
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      - description: Field variable ID
        in: path
        name: fieldVarId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Updated field variable data
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field variable data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - field or field variable not found
      summary: Update field variable by field ID
      tags:
      - Content Type Field
  /v1/contenttype/{typeId}/fields/var/{fieldVar}:
    delete:
      deprecated: true
      description: Deletes a specific field from a content type by its variable name.
        Use v2 API instead for new implementations.
      operationId: deleteContentTypeFieldByVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field variable name to delete
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Field deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type or field not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete content type field by variable name (deprecated)
      tags:
      - Content Type Field
    get:
      deprecated: true
      description: Retrieves a specific field from a content type by its variable
        name. Use v2 API instead for new implementations.
      operationId: getContentTypeFieldByVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field variable name
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Field retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type or field not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get content type field by variable name (deprecated)
      tags:
      - Content Type Field
    put:
      deprecated: true
      description: Updates a specific field in a content type by its variable name.
        Use v2 API instead for new implementations.
      operationId: updateContentTypeFieldByVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field variable name to update
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field JSON data with updates
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Field updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type or field not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update content type field by variable name (deprecated)
      tags:
      - Content Type Field
  /v1/contenttype/{typeId}/fields/var/{fieldVar}/variables:
    get:
      description: Retrieves all field variables for a specific field identified by
        its velocity variable name
      operationId: getFieldVariablesByFieldVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field velocity variable name
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Field variables retrieved successfully
        "404":
          content:
            application/json: {}
          description: Not found - field not found
      summary: Get field variables by field variable name
      tags:
      - Content Type Field
    post:
      description: Creates a new field variable for a specific field identified by
        its velocity variable name
      operationId: createFieldVariableByFieldVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field velocity variable name
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field variable data
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field variable data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - field not found
      summary: Create field variable by field variable name
      tags:
      - Content Type Field
  /v1/contenttype/{typeId}/fields/var/{fieldVar}/variables/id/{fieldVarId}:
    delete:
      description: Deletes a specific field variable for a field identified by its
        velocity variable name
      operationId: deleteFieldVariableByFieldVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field velocity variable name
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      - description: Field variable ID
        in: path
        name: fieldVarId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - field or field variable not found
      summary: Delete field variable by field variable name
      tags:
      - Content Type Field
    get:
      description: Retrieves a specific field variable by field velocity variable
        name and variable ID
      operationId: getFieldVariableByFieldVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field velocity variable name
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      - description: Field variable ID
        in: path
        name: fieldVarId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable retrieved successfully
        "404":
          content:
            application/json: {}
          description: Not found - field or field variable not found
      summary: Get specific field variable by field variable name
      tags:
      - Content Type Field
    put:
      description: Updates an existing field variable for a specific field identified
        by its velocity variable name
      operationId: updateFieldVariableByFieldVar
      parameters:
      - description: Content type ID
        in: path
        name: typeId
        required: true
        schema:
          type: string
      - description: Field velocity variable name
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      - description: Field variable ID
        in: path
        name: fieldVarId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Updated field variable data
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Field variable updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid field variable data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Not found - field or field variable not found
      summary: Update field variable by field variable name
      tags:
      - Content Type Field
  /v1/ema:
    get:
      description: Returns the Enterprise Mobile Application (EMA) configuration for
        the current site. Retrieves app secrets and configuration from the dotema-config-v2
        app.
      operationId: getDetails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEmaConfigurationView"
          description: EMA configuration retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: EMA configuration not found for current site
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get EMA configuration details
      tags:
      - Apps
  /v1/environments/endpoints:
    get:
      description: "Returns all publishing endpoints available to the current user.\
        \ Admin users see all endpoints, while regular users only see endpoints they\
        \ have access to."
      operationId: getEndpoints
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEndpointsView"
          description: Endpoints retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get all endpoints
      tags:
      - Environment
    post:
      description: Creates a new publishing endpoint with the provided configuration
        data. Only admin users or users with configuration portlet access can create
        endpoints.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndpointForm"
        description: Endpoint configuration data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEndpointView"
          description: If creation is successfully.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: If the endpoint already exits
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
          description: "If the user is not an admin or access to the configuration\
            \ layout or does have permission, it will return a 403."
      summary: Create endpoint
      tags:
      - Environment
  /v1/environments/endpoints/environment/{environmentId}:
    get:
      description: Returns all publishing endpoints for a specific environment identified
        by environmentId.
      operationId: getEndpointsByEnvironmentId
      parameters:
      - description: Environment identifier
        in: path
        name: environmentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEndpointsView"
          description: Endpoints retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get endpoints by environment
      tags:
      - Environment
  /v1/environments/endpoints/{endpointId}:
    get:
      description: Returns a specific publishing endpoint identified by its unique
        ID.
      operationId: getEndpoint
      parameters:
      - description: Endpoint identifier
        in: path
        name: endpointId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEndpointView"
          description: Endpoint retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user required
        "404":
          content:
            application/json: {}
          description: Endpoint not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get endpoint by ID
      tags:
      - Environment
  /v1/environments/endpoints/{id}:
    delete:
      description: Deletes an existing publishing endpoint by its ID. Only admin users
        or users with configuration portlet access can delete endpoints.
      operationId: delete_3
      parameters:
      - description: Endpoint identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: If deletion is successfully endpoint.
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
          description: "If the user is not an admin or access to the configuration\
            \ layout or does have permission, it will return a 403."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DoesNotExistException"
          description: If the endpoint does not exits
      summary: Delete endpoint
      tags:
      - Environment
    put:
      description: Updates an existing publishing endpoint with the provided configuration
        data. Only admin users or users with configuration portlet access can update
        endpoints.
      operationId: update
      parameters:
      - description: Endpoint identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EndpointForm"
        description: Updated endpoint configuration data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityEndpointView"
          description: If update is success.
        "400":
          content:
            application/json:
              schema:
                type: string
          description: If the environment already exits
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForbiddenException"
          description: "If the user is not an admin or access to the configuration\
            \ layout or does have permission, it will return a 403."
      summary: Update endpoint
      tags:
      - Environment
  /v1/esindex:
    get:
      description: "Retrieves the status information for all Elasticsearch indices\
        \ including their state, document count, and health information. Requires\
        \ CMS Administrator role."
      operationId: getIndexStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Index status retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving index status
      summary: Get Elasticsearch index status
      tags:
      - Search Index
  /v1/esindex/activate/{params}:
    put:
      deprecated: true
      description: "Activates an Elasticsearch index by name. This endpoint is deprecated\
        \ - use PUT /api/v1/esindex/{indexName}?action=activate instead. Requires\
        \ CMS Administrator role."
      operationId: activateIndex
      parameters:
      - description: Index activation parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Activate index (deprecated)
      tags:
      - Search Index
  /v1/esindex/active/{params}:
    get:
      deprecated: true
      description: Retrieves the name of the active Elasticsearch index for a given
        type. This endpoint is deprecated - use the modern index status endpoints
        instead. Requires CMS Administrator role.
      operationId: getActive
      parameters:
      - description: Active index query parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            text/plain: {}
          description: default response
      summary: Get active index (deprecated)
      tags:
      - Search Index
  /v1/esindex/cache:
    delete:
      description: Flushes the cache for all dotCMS Elasticsearch indices to ensure
        data consistency. Returns the number of successful and failed shard operations.
        Requires CMS Administrator role.
      operationId: flushIndiciesCache
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityIndexOperationView"
          description: Index cache flushed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error during cache flush
      summary: Flush Elasticsearch indices cache
      tags:
      - Search Index
  /v1/esindex/clear/{params}:
    put:
      deprecated: true
      description: "Clears an Elasticsearch index by name. This endpoint is deprecated\
        \ - use PUT /api/v1/esindex/{indexName}?action=clear instead. Requires CMS\
        \ Administrator role."
      operationId: clearIndex
      parameters:
      - description: Index clearing parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Clear index (deprecated)
      tags:
      - Search Index
  /v1/esindex/close/{params}:
    put:
      deprecated: true
      description: "Closes an Elasticsearch index by name. This endpoint is deprecated\
        \ - use PUT /api/v1/esindex/{indexName}?action=close instead. Requires CMS\
        \ Administrator role."
      operationId: closeIndex
      parameters:
      - description: Index closing parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Close index (deprecated)
      tags:
      - Search Index
  /v1/esindex/cluster:
    get:
      description: "Retrieves comprehensive statistics about the Elasticsearch cluster\
        \ including cluster name, node information, and performance metrics. Requires\
        \ CMS Administrator role."
      operationId: getClusterStats
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Cluster statistics retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving cluster statistics
      summary: Get Elasticsearch cluster statistics
      tags:
      - Search Index
  /v1/esindex/create/{params}:
    put:
      deprecated: true
      description: Creates a new Elasticsearch index with specified parameters. This
        endpoint is deprecated - use the modern reindexing endpoints instead. Requires
        CMS Administrator role.
      operationId: createIndex
      parameters:
      - description: Index creation parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            text/plain: {}
          description: default response
      summary: Create index (deprecated)
      tags:
      - Search Index
  /v1/esindex/deactivate/{params}:
    put:
      deprecated: true
      description: "Deactivates an Elasticsearch index by name. This endpoint is deprecated\
        \ - use PUT /api/v1/esindex/{indexName}?action=deactivate instead. Requires\
        \ CMS Administrator role."
      operationId: deactivateIndex
      parameters:
      - description: Index deactivation parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Deactivate index (deprecated)
      tags:
      - Search Index
  /v1/esindex/failed:
    delete:
      description: Deletes all failed reindex records from the reindex queue. This
        clears the list of content items that previously failed to reindex. Requires
        CMS Administrator role.
      operationId: deleteFailedRecords
      responses:
        "200":
          content:
            application/json: {}
          description: Failed reindex records deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error deleting failed records
      summary: Delete failed reindex records
      tags:
      - Search Index
    get:
      description: "Retrieves a list of failed reindex records in JSON format. Each\
        \ record includes identifier, server ID, failure reason, and priority information.\
        \ Requires CMS Administrator role."
      operationId: downloadRemainingRecordsAsCsv
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Failed reindex records retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving failed records
      summary: Download failed reindex records
      tags:
      - Search Index
  /v1/esindex/indexlist/{params}:
    get:
      description: Retrieves a list of all dotCMS Elasticsearch indices. Requires
        CMS Administrator role.
      operationId: indexList
      parameters:
      - description: Index list query parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: List Elasticsearch indices
      tags:
      - Search Index
  /v1/esindex/open/{params}:
    put:
      deprecated: true
      description: "Opens an Elasticsearch index by name. This endpoint is deprecated\
        \ - use PUT /api/v1/esindex/{indexName}?action=open instead. Requires CMS\
        \ Administrator role."
      operationId: openIndex
      parameters:
      - description: Index opening parameters
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        default:
          content:
            application/json: {}
          description: default response
      summary: Open index (deprecated)
      tags:
      - Search Index
  /v1/esindex/optimize:
    post:
      description: Optimizes all Elasticsearch indices to improve search performance
        by reducing the number of segments and freeing up disk space. This operation
        can be resource-intensive. Requires CMS Administrator role.
      operationId: optimizeIndices
      responses:
        "200":
          description: Index optimization completed successfully (no body)
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error during index optimization
      summary: Optimize Elasticsearch indices
      tags:
      - Search Index
  /v1/esindex/reindex:
    delete:
      description: Stops the currently running content reindexation process. Optionally
        performs a switchover to activate the new index after stopping. Requires CMS
        Administrator role.
      operationId: stopReindexation
      parameters:
      - description: Whether to perform switchover to activate new index after stopping
          (defaults to true)
        in: query
        name: switch
        schema:
          type: boolean
          default: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityIndexOperationView"
          description: Reindexation stopped successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error stopping reindexation
      summary: Stop content reindexation
      tags:
      - Search Index
    get:
      description: "Retrieves the current progress status of content reindexation\
        \ process including percentage completed, records processed, and estimated\
        \ time remaining. Requires CMS Administrator role."
      operationId: getReindexationProgress
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityIndexOperationView"
          description: Reindexation progress retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving reindexation progress
      summary: Get reindexation progress
      tags:
      - Search Index
    post:
      description: Initiates a content reindexation process for all content or a specific
        content type. Optionally allows configuration of the number of Elasticsearch
        shards. This is a resource-intensive operation that rebuilds the search index.
        Requires CMS Administrator role.
      operationId: startReindex
      parameters:
      - description: Number of Elasticsearch shards (defaults to configuration value
          if 0 or negative)
        in: query
        name: shards
        schema:
          type: integer
          format: int32
      - description: Content type to reindex (defaults to 'DOTALL' for all content)
        in: query
        name: contentType
        schema:
          type: string
          default: DOTALL
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityIndexOperationView"
          description: Reindexation started successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid content type or shard count
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error starting reindexation
      summary: Start content reindexation
      tags:
      - Search Index
  /v1/esindex/{indexName}:
    delete:
      description: Deletes a specific Elasticsearch index by name. This is a destructive
        operation that permanently removes the index and all its data. Requires CMS
        Administrator role.
      operationId: deleteIndex
      parameters:
      - description: Name of the Elasticsearch index to delete
        in: path
        name: indexName
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityIndexOperationView"
          description: Index deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Index not found
        "500":
          content:
            application/json: {}
          description: Internal server error deleting index
      summary: Delete specific Elasticsearch index
      tags:
      - Search Index
    put:
      description: "Performs various operations on a specific Elasticsearch index\
        \ including activate, deactivate, clear, open, and close actions. This replaces\
        \ several deprecated endpoints. Requires CMS Administrator role."
      operationId: modIndex
      parameters:
      - description: Name of the Elasticsearch index to modify
        in: path
        name: indexName
        required: true
        schema:
          type: string
          pattern: .*
      - description: "Action to perform: ACTIVATE, DEACTIVATE, CLEAR, OPEN, CLOSE"
        in: query
        name: action
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityIndexOperationView"
          description: Index operation completed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid action parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized - CMS Administrator role required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Index not found
        "500":
          content:
            application/json: {}
          description: Internal server error during index operation
      summary: Modify Elasticsearch index
      tags:
      - Search Index
  /v1/experiments:
    get:
      description: "Retrieves a list of experiments with optional filtering by page\
        \ ID, name, or status. Returns all experiments if no filters are provided."
      operationId: list_1
      parameters:
      - description: Filter experiments by page ID
        in: query
        name: pageId
        schema:
          type: string
      - description: Filter experiments by name
        in: query
        name: name
        schema:
          type: string
      - description: "Filter experiments by status (DRAFT, RUNNING, ENDED, etc.)"
        in: query
        name: status
        schema:
          type: array
          items:
            type: string
            enum:
            - RUNNING
            - SCHEDULED
            - ENDED
            - DRAFT
            - ARCHIVED
          uniqueItems: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityExperimentView"
          description: Experiments list retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid filter parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to list experiments
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List experiments with optional filtering
      tags:
      - Experiments
    post:
      description: "Creates a new A/B test experiment with the provided configuration.\
        \ An experiment can be created with minimal information such as name and description,\
        \ and additional settings can be configured later."
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperimentForm"
        description: "Experiment configuration form with name, description, and optional\
          \ settings"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Experiment created successfully
        "400":
          content:
            application/json: {}
          description: Invalid experiment data or missing required fields
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to create experiments
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create a new experiment
      tags:
      - Experiments
  /v1/experiments/health:
    get:
      description: Performs a health check of the experiments and analytics configuration
        to verify that the system is properly configured and can send test events.
      operationId: healthcheck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityExperimentHealthView"
          description: Health check completed - see response body for status
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to check system health
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Check experiments system health
      tags:
      - Experiments
  /v1/experiments/isUserIncluded:
    post:
      description: "Determines if the current user should be included in any running\
        \ experiments based on targeting conditions, traffic allocation, and variant\
        \ weighting. Supports excluding specific experiments from consideration."
      operationId: isUserIncluded
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExcludedExperimentListForm"
        description: Optional form containing list of experiment IDs to exclude from
          consideration
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityExperimentSelectedView"
          description: User inclusion status determined successfully
        "400":
          content:
            application/json: {}
          description: Invalid request parameters or exclusion list
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Check if user should be included in experiment
      tags:
      - Experiments
  /v1/experiments/scheduled/{experimentId}/_cancel:
    post:
      description: Cancels an experiment that is either scheduled for future execution
        or currently running. The experiment must be in SCHEDULED or RUNNING status
        to be cancelled.
      operationId: cancel
      parameters:
      - description: Unique identifier of the experiment to cancel
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Experiment cancelled successfully
        "400":
          content:
            application/json: {}
          description: Experiment cannot be cancelled (not in SCHEDULED or RUNNING
            status)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to cancel experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Cancel a scheduled or running experiment
      tags:
      - Experiments
  /v1/experiments/{experimentId}:
    delete:
      description: Permanently deletes an experiment. This operation can only be performed
        on experiments in DRAFT status. Use archive instead if you want to preserve
        experiment data.
      operationId: delete_9
      parameters:
      - description: Unique identifier of the experiment to delete
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityExperimentOperationView"
          description: Experiment deleted successfully
        "400":
          content:
            application/json: {}
          description: Experiment cannot be deleted (not in DRAFT status)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to delete experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete an experiment
      tags:
      - Experiments
    patch:
      description: "Performs partial updates (PATCH) on an existing experiment. Only\
        \ the provided fields will be updated, while other experiment properties remain\
        \ unchanged."
      operationId: update_2
      parameters:
      - description: Unique identifier of the experiment to update
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperimentForm"
        description: Partial experiment update form with fields to modify
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Experiment updated successfully
        "400":
          content:
            application/json: {}
          description: Invalid experiment data or update parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to update experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update an experiment
      tags:
      - Experiments
  /v1/experiments/{experimentId}/_archive:
    put:
      description: Archives an experiment to preserve collected data while removing
        it from active use. Ideal for experiments with valuable historical data that
        should not be deleted.
      operationId: archive_1
      parameters:
      - description: Unique identifier of the experiment to archive
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityExperimentView"
          description: Experiment archived successfully
        "400":
          content:
            application/json: {}
          description: Invalid experiment ID or experiment cannot be archived
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to archive experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Archive an experiment
      tags:
      - Experiments
  /v1/experiments/{experimentId}/_end:
    post:
      description: Ends a currently running experiment and changes its status to ENDED.
        The experiment must be in RUNNING status to be ended.
      operationId: end
      parameters:
      - description: Unique identifier of the experiment to end
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Experiment ended successfully
        "400":
          content:
            application/json: {}
          description: Experiment cannot be ended (not in RUNNING status)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to end experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: End a running experiment
      tags:
      - Experiments
  /v1/experiments/{experimentId}/_start:
    post:
      description: "Starts an experiment and changes its status to RUNNING. The experiment\
        \ must be in DRAFT status, have at least one variant, and have a primary goal\
        \ configured. Scheduling dates will be set automatically if not provided."
      operationId: start
      parameters:
      - description: Unique identifier of the experiment to start
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Experiment started successfully
        "400":
          content:
            application/json: {}
          description: Experiment cannot be started (missing requirements or invalid
            scheduling)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to start experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Start an experiment
      tags:
      - Experiments
  /v1/experiments/{experimentId}/goals/primary:
    delete:
      description: Removes the primary goal from an experiment. This will clear the
        goal configuration but preserve other experiment settings.
      operationId: deleteGoal
      parameters:
      - description: Unique identifier of the experiment to remove goal from
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Primary goal deleted successfully
        "400":
          content:
            application/json: {}
          description: Invalid experiment ID or goal cannot be deleted
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to modify experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete experiment primary goal
      tags:
      - Experiments
  /v1/experiments/{experimentId}/targetingConditions/{id}:
    delete:
      description: Removes a targeting condition from an experiment. Targeting conditions
        define which users should be included in the experiment.
      operationId: deleteTargetingCondition
      parameters:
      - description: Unique identifier of the experiment
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      - description: Unique identifier of the targeting condition to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Targeting condition deleted successfully
        "400":
          content:
            application/json: {}
          description: Invalid targeting condition ID or condition cannot be deleted
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to modify experiment
        "404":
          content:
            application/json: {}
          description: Experiment or targeting condition not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete targeting condition
      tags:
      - Experiments
  /v1/experiments/{experimentId}/variants:
    post:
      description: Adds a new variant to an existing experiment. Variants represent
        different versions of content to be tested against each other.
      operationId: addVariant
      parameters:
      - description: Unique identifier of the experiment to add variant to
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddVariantForm"
        description: Variant configuration form with description and settings
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Variant added successfully
        "400":
          content:
            application/json: {}
          description: Invalid variant data or experiment cannot accept new variants
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to modify experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Add variant to experiment
      tags:
      - Experiments
  /v1/experiments/{experimentId}/variants/{name}:
    delete:
      description: Removes a variant from an experiment. This will permanently delete
        the variant and any associated data.
      operationId: deleteVariant
      parameters:
      - description: Unique identifier of the experiment
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      - description: Name of the variant to delete
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Variant deleted successfully
        "400":
          content:
            application/json: {}
          description: Variant cannot be deleted or does not exist
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to modify experiment
        "404":
          content:
            application/json: {}
          description: Experiment or variant not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete variant from experiment
      tags:
      - Experiments
    put:
      description: Updates the properties of an existing variant within an experiment.
        Supports partial updates - only provided fields will be modified.
      operationId: updateVariant
      parameters:
      - description: Unique identifier of the experiment
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      - description: Name of the variant to update
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperimentVariantForm"
        description: Variant update form with properties to modify
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Variant updated successfully
        "400":
          content:
            application/json: {}
          description: Invalid variant data or update parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to modify experiment
        "404":
          content:
            application/json: {}
          description: Experiment or variant not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update experiment variant
      tags:
      - Experiments
  /v1/experiments/{experimentId}/variants/{name}/_promote:
    put:
      description: Promotes a variant to become the default variant of the page. This
        makes the selected variant the primary version that will be used going forward.
      operationId: promoteVariant
      parameters:
      - description: Unique identifier of the experiment
        in: path
        name: experimentId
        required: true
        schema:
          type: string
      - description: Name of the variant to promote to default
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperimentVariantForm"
        description: Variant promotion form with additional configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Variant promoted successfully
        "400":
          content:
            application/json: {}
          description: Variant cannot be promoted or invalid promotion data
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to promote variant
        "404":
          content:
            application/json: {}
          description: Experiment or variant not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Promote variant to default
      tags:
      - Experiments
  /v1/experiments/{id}:
    get:
      description: "Retrieves a specific experiment by its unique identifier, including\
        \ all configuration details, variants, and current status."
      operationId: get_3
      parameters:
      - description: Unique identifier of the experiment to retrieve
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySingleExperimentView"
          description: Experiment retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to view experiment
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get experiment by ID
      tags:
      - Experiments
  /v1/experiments/{id}/results:
    get:
      description: "Retrieves the analytical results of an experiment, including performance\
        \ metrics, conversion rates, and statistical significance data for all variants."
      operationId: getResult
      parameters:
      - description: Unique identifier of the experiment to get results for
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityExperimentResults"
          description: Experiment results retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to view experiment results
        "404":
          content:
            application/json: {}
          description: Experiment not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get experiment results
      tags:
      - Experiments
  /v1/fieldTypes:
    get:
      description: Retrieves all available field types in dotCMS for content type
        configuration
      operationId: getFieldTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldTypeListView"
          description: Field types retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
      summary: Get field types
      tags:
      - Content Type Field
  /v1/folder/byPath:
    post:
      description: "Searches for subfolders within a specified path that match the\
        \ search criteria. Returns subfolders that the user has permissions to access,\
        \ with optional filtering by path pattern."
      operationId: findSubFoldersByPath
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchByPathForm"
        description: Search criteria for finding subfolders by path
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFolderSearchResultView"
          description: Subfolders found successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid search criteria
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access folders
        "500":
          content:
            application/json: {}
          description: Internal server error during folder search
      summary: Find subfolders by path
      tags:
      - Folders
  /v1/folder/createfolders/{siteName}:
    post:
      description: Creates one or more folders by their paths within a specified site.
        Returns a list of successfully created folders with their details.
      operationId: createFolders
      parameters:
      - description: Site name where folders will be created
        in: path
        name: siteName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of folder paths to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Folders created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid paths or site name
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to create folders
        "404":
          content:
            application/json: {}
          description: Site not found
        "409":
          content:
            application/json: {}
          description: Conflict - folder already exists
        "500":
          content:
            application/json: {}
          description: Internal server error during folder creation
      summary: Create folders
      tags:
      - Folders
  /v1/folder/siteId/{siteId}/path/{path}:
    get:
      description: Loads a folder and all its subfolders by path within a specific
        site. Returns the folder hierarchy that the user has permissions to access.
      operationId: loadFolderAndSubFoldersByPath
      parameters:
      - description: Site ID where the folder is located
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Path of the folder to load with subfolders
        in: path
        name: path
        required: true
        schema:
          type: string
          pattern: .+
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFolderWithSubfoldersView"
          description: Folder and subfolders loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access folder
        "404":
          content:
            application/json: {}
          description: Site or folder not found
        "500":
          content:
            application/json: {}
          description: Internal server error loading folder hierarchy
      summary: Load folder and subfolders by path
      tags:
      - Folders
  /v1/folder/sitename/{siteName}/uri/{uri}:
    get:
      description: Loads a specific folder by its URI path within a site. The URI
        should be the folder's path relative to the site root.
      operationId: loadFolderByURI
      parameters:
      - description: Site name where the folder is located
        in: path
        name: siteName
        required: true
        schema:
          type: string
      - description: URI path of the folder to load
        in: path
        name: uri
        required: true
        schema:
          type: string
          pattern: .+
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFolderView"
          description: Folder loaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access folder
        "404":
          content:
            application/json: {}
          description: Folder or site not found
        "500":
          content:
            application/json: {}
          description: Internal server error loading folder
      summary: Load folder by URI
      tags:
      - Folders
  /v1/folder/{folderId}:
    get:
      description: Retrieves a specific folder by its unique identifier. Returns the
        folder details if the user has permission to access it.
      operationId: findFolderById
      parameters:
      - description: Unique identifier of the folder to retrieve
        in: path
        name: folderId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFolderView"
          description: Folder found successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access folder
        "404":
          content:
            application/json: {}
          description: Folder not found
        "500":
          content:
            application/json: {}
          description: Internal server error retrieving folder
      summary: Find folder by ID
      tags:
      - Folders
  /v1/folder/{id}/file-browser-selected:
    put:
      description: Marks a folder as selected in the file browser interface. This
        is used for UI state management to track which folder is currently selected
        by the user.
      operationId: selectFolder_1
      parameters:
      - description: Folder ID to select
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Folder selected successfully (no body)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access folder
        "404":
          content:
            application/json: {}
          description: Folder not found
        "500":
          content:
            application/json: {}
          description: Internal server error selecting folder
      summary: Select folder in file browser
      tags:
      - Folders
  /v1/folder/{siteName}:
    delete:
      description: Deletes one or more folders by their paths within a specified site.
        Returns a list of successfully deleted folders.
      operationId: deleteFolders
      parameters:
      - description: Site name where folders are located
        in: path
        name: siteName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: List of folder paths to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListStringView"
          description: Folders deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid paths or site name
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to delete folders
        "404":
          content:
            application/json: {}
          description: Site or folder not found
        "500":
          content:
            application/json: {}
          description: Internal server error during folder deletion
      summary: Delete folders
      tags:
      - Folders
  /v1/forgotpassword:
    post:
      description: Sends a password reset email to the specified user. Returns the
        email address where the reset link was sent.
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordForm"
        description: Forgot password form containing user ID or email address
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityForgotPasswordView"
          description: Password reset email sent successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid email address or user not found (if configured
            to show)
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Send password reset email
      tags:
      - Authentication
  /v1/form/{idOrVar}/successCallback:
    get:
      description: Generates a JavaScript callback function for a form based on its
        formSuccessCallback field value. The function name includes the content type
        ID with dashes removed. Returns executable JavaScript code.
      operationId: getSuccessCallbackFunction
      parameters:
      - description: Form ID or variable name
        in: path
        name: idOrVar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/javascript: {}
          description: Success callback function generated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - formSuccessCallback field not found in form
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Form not found or not a form content type
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get form success callback function
      tags:
      - Forms
  /v1/health:
    get:
      description: Returns comprehensive health status including all registered health
        checks. Authentication requirements are controlled by the health.detailed.authentication.required
        configuration property.
      operationId: getOverallHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityHealthResponseView"
          description: Successfully retrieved overall health status
        "403":
          description: Forbidden - Authentication required
        "500":
          description: Internal Server Error
      summary: Get overall health status
      tags:
      - Health
  /v1/health/check/{checkName}:
    get:
      description: Returns the result of a specific health check identified by name.
        Useful for monitoring individual components or debugging specific health issues.
      operationId: getHealthCheck
      parameters:
      - description: Name of the health check to retrieve
        in: path
        name: checkName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityHealthCheckResultView"
          description: Successfully retrieved health check result
        "403":
          description: Forbidden - Authentication required
        "404":
          description: Health check not found
        "500":
          description: Internal Server Error
      summary: Get specific health check result
      tags:
      - Health
  /v1/health/checks:
    get:
      description: Returns a list of all registered health check names. Useful for
        discovering available health checks and building monitoring interfaces.
      operationId: getHealthCheckNames
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListStringView"
          description: Successfully retrieved health check names
        "403":
          description: Forbidden - Authentication required
        "500":
          description: Internal Server Error
      summary: Get all health check names
      tags:
      - Health
  /v1/health/liveness:
    get:
      description: Returns liveness health checks suitable for application dashboards.
        This endpoint provides detailed JSON information about critical system components
        required for the application to be considered alive.
      operationId: getLivenessHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityHealthResponseView"
          description: Successfully retrieved liveness health status
        "403":
          description: Forbidden - Authentication required
        "500":
          description: Internal Server Error
      summary: Get liveness health status
      tags:
      - Health
  /v1/health/readiness:
    get:
      description: Returns readiness health checks to determine if the application
        is ready to receive traffic. This endpoint provides detailed JSON information
        about system components required for the application to be considered ready
        to serve requests.
      operationId: getReadinessHealth
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityHealthResponseView"
          description: Successfully retrieved readiness health status
        "500":
          description: Internal Server Error
      summary: Get readiness health status
      tags:
      - Health
  /v1/health/refresh:
    post:
      description: "Triggers an immediate refresh of all registered health checks,\
        \ bypassing any caching mechanisms. Useful for getting up-to-date health status\
        \ after configuration changes or system maintenance."
      operationId: refreshHealthChecks
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Successfully triggered health checks refresh
        "403":
          description: Forbidden - Authentication required
        "500":
          description: Internal Server Error
      summary: Force refresh all health checks
      tags:
      - Health
  /v1/health/refresh/{checkName}:
    post:
      description: "Triggers an immediate refresh of a specific health check identified\
        \ by name, bypassing any caching mechanisms. Useful for testing individual\
        \ components or getting up-to-date status after targeted maintenance."
      operationId: refreshHealthCheck
      parameters:
      - description: Name of the health check to refresh
        in: path
        name: checkName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Successfully refreshed the health check
        "403":
          description: Forbidden - Authentication required
        "404":
          description: Health check not found
        "500":
          description: Internal Server Error
      summary: Force refresh a specific health check
      tags:
      - Health
  /v1/health/status:
    get:
      description: Returns a simple boolean summary of system health status with alive
        and ready flags. Provides a quick overview of system health without detailed
        check information.
      operationId: getSystemStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Successfully retrieved system status summary
        "403":
          description: Forbidden - Authentication required
        "500":
          description: Internal Server Error
      summary: Get system status summary
      tags:
      - Health
  /v1/jobs:
    get:
      description: Returns paginated list of all jobs across all queues regardless
        of status.
      operationId: listJobs
      parameters:
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List all jobs
      tags:
      - Job Queue
  /v1/jobs/abandoned:
    get:
      description: Returns paginated list of jobs that have been abandoned (no longer
        tracked or monitored).
      operationId: abandonedJobs
      parameters:
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Abandoned jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get abandoned jobs
      tags:
      - Job Queue
  /v1/jobs/active:
    get:
      description: Returns paginated list of currently active/running jobs across
        all queues.
      operationId: activeJobs
      parameters:
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Active jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get all active jobs
      tags:
      - Job Queue
  /v1/jobs/canceled:
    get:
      description: Returns paginated list of jobs that have been canceled before completion.
      operationId: canceledJobs
      parameters:
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Canceled jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get canceled jobs
      tags:
      - Job Queue
  /v1/jobs/completed:
    get:
      description: Returns paginated list of jobs that have completed successfully.
      operationId: completedJobs
      parameters:
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Completed jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get completed jobs
      tags:
      - Job Queue
  /v1/jobs/failed:
    get:
      description: Returns paginated list of jobs that have failed due to errors during
        execution.
      operationId: failedJobs
      parameters:
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Failed jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get failed jobs
      tags:
      - Job Queue
  /v1/jobs/queues:
    get:
      description: Returns a list of all available job queue names that can be used
        for submitting jobs.
      operationId: getQueues
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySetStringView"
          description: Queues retrieved successfully
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "500":
          description: Internal server error
      summary: Retrieves available job queues
      tags:
      - Job Queue
  /v1/jobs/successful:
    get:
      description: Returns paginated list of jobs that have completed successfully
        without errors.
      operationId: successfulJobs
      parameters:
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Successful jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get successful jobs
      tags:
      - Job Queue
  /v1/jobs/{jobId}/cancel:
    post:
      description: Sends a cancellation request to the specified job. The job may
        not immediately stop if it's currently running.
      operationId: cancelJob
      parameters:
      - description: Unique identifier of the job to cancel
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Cancellation request sent successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid job ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Job not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Cancel job
      tags:
      - Job Queue
  /v1/jobs/{jobId}/monitor:
    get:
      description: Establishes a Server-Sent Events (SSE) connection to monitor real-time
        progress of a specific job. Returns continuous updates until job completion.
      operationId: monitorJob
      parameters:
      - description: Unique identifier of the job to monitor
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            text/event-stream: {}
          description: SSE connection established for job monitoring
        "400":
          content:
            application/json: {}
          description: Bad request - invalid job ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Job not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Monitor job progress
      tags:
      - Job Queue
  /v1/jobs/{jobId}/status:
    get:
      description: "Returns detailed status information for a specific job including\
        \ progress, state, and results."
      operationId: getJobStatus_1
      parameters:
      - description: Unique identifier of the job
        in: path
        name: jobId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobView"
          description: Job status retrieved successfully
        "400":
          description: Bad request - Invalid job ID
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "404":
          description: Job not found
        "500":
          description: Internal server error
      summary: Retrieves job status information
      tags:
      - Job Queue
  /v1/jobs/{queueName}:
    post:
      description: Creates and queues a new background job with JSON parameters. Returns
        the job ID and initial status information.
      operationId: createJobWithJson
      parameters:
      - description: Name of the job queue to submit to
        in: path
        name: queueName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              description: JSON object containing job parameters as key-value pairs
        description: Job parameters as JSON key-value pairs
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobStatusView"
          description: Job created successfully
        "400":
          description: Bad request - Invalid job parameters or queue name
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "500":
          description: Internal server error
      summary: Creates a new job with JSON parameters
      tags:
      - Job Queue
  /v1/jobs/{queueName}/active:
    get:
      description: Returns paginated list of currently active/running jobs in the
        specified queue.
      operationId: activeJobs_1
      parameters:
      - description: Name of the job queue to filter by
        in: path
        name: queueName
        required: true
        schema:
          type: string
      - description: "Page number for pagination (default: 1)"
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 1
      - description: "Number of jobs per page (default: 20)"
        in: query
        name: pageSize
        schema:
          type: integer
          format: int32
          default: 20
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityJobPaginatedResultView"
          description: Active jobs retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid queue name or pagination parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get active jobs by queue
      tags:
      - Job Queue
  /v1/jvm:
    get:
      description: "Returns comprehensive system information including JVM details,\
        \ host information, environment variables, configuration overrides, and system\
        \ properties. Sensitive values are automatically obfuscated."
      operationId: getJvmInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "Comprehensive system information including release,\
                  \ host, JVM, environment, configOverrides, and system properties"
          description: JVM information retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get JVM information
      tags:
      - Administration
  /v1/languages:
    get:
      deprecated: true
      description: Returns a map of all available languages in the system. This method
        is deprecated - use v2 LanguagesResource instead.
      operationId: list_2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapStringRestLanguageView"
          description: Languages retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List all languages (deprecated)
      tags:
      - Internationalization
  /v1/languages/i18n:
    post:
      deprecated: true
      description: Retrieves internationalization messages for specified language
        and country. Processes custom locale and stores in session. This method is
        deprecated - use v2 LanguagesResource instead.
      operationId: getMessages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/I18NForm"
        description: "Internationalization form with language, country, and message\
          \ keys"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageMessagesView"
          description: Messages retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language or country parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get internationalization messages (deprecated)
      tags:
      - Internationalization
  /v1/logger:
    get:
      description: Get all system loggers. User must be Admin.
      operationId: getLoggers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLoggerListView"
          description: Loggers retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - admin required
        "403":
          content:
            application/json: {}
          description: Forbidden - admin access required
      summary: Get all loggers
      tags:
      - System Logging
    put:
      description: Change the log level for one or more loggers. User must be Admin.
      operationId: changeLoggerLevel
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeLoggerForm"
        description: Logger configuration data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLoggerListView"
          description: Logger level changed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid log level
        "401":
          content:
            application/json: {}
          description: Unauthorized - admin required
        "403":
          content:
            application/json: {}
          description: Forbidden - admin access required
        "404":
          content:
            application/json: {}
          description: Logger not found
      summary: Change logger level
      tags:
      - System Logging
  /v1/logger/{loggerName}:
    get:
      description: Get the logger for a specific class. User must be Admin.
      operationId: getLogger
      parameters:
      - description: Logger class name
        in: path
        name: loggerName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLoggerView"
          description: Logger retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - admin required
        "403":
          content:
            application/json: {}
          description: Forbidden - admin access required
        "404":
          content:
            application/json: {}
          description: Logger not found
      summary: Get logger
      tags:
      - System Logging
  /v1/loginform:
    post:
      description: "Retrieves login form configuration including company details,\
        \ available languages, and localized messages"
      operationId: loginForm
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/I18NForm"
        description: Internationalization form containing language and country preferences
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLoginFormView"
          description: Login form configuration retrieved successfully
        "403":
          content:
            application/json: {}
          description: Forbidden - security exception
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get login form configuration
      tags:
      - Authentication
  /v1/logout:
    get:
      description: "Logs out the current user, invalidating their session and optionally\
        \ providing a redirect URL"
      operationId: logout
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: User logged out successfully
        "403":
          content:
            application/json: {}
          description: Forbidden - security exception during logout
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Logout user
      tags:
      - Authentication
  /v1/logs/{fileName}/_tail:
    get:
      description: "Provides real-time log file tailing using Server-Sent Events (SSE).\
        \ Streams log content as it's written to the file, with configurable history\
        \ lines. Requires backend user authentication."
      operationId: getLogs
      parameters:
      - description: Name of the log file to tail (must match configured pattern)
        in: path
        name: fileName
        required: true
        schema:
          type: string
      - description: "Number of lines to read from the end of the file initially (default:\
          \ 5000)"
        in: query
        name: linesBack
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            text/event-stream: {}
          description: Log streaming started successfully
        "400":
          content:
            text/event-stream: {}
          description: Invalid file name or file does not match allowed patterns
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            text/event-stream: {}
          description: Forbidden - file access denied or outside allowed directory
        "404":
          content:
            text/event-stream: {}
          description: Log file not found
        "500":
          content:
            text/event-stream: {}
          description: Internal server error or too many active tail threads
      summary: Tail log file with real-time streaming
      tags:
      - TailLog
  /v1/maintenance/_downloadAssets:
    get:
      description: Generates and downloads a compressed ZIP file containing all assets
        from the current dotCMS instance. Can include all asset versions and has configurable
        size limits.
      operationId: downloadAssets
      parameters:
      - description: "Include all versions of assets (default: true)"
        in: query
        name: oldAssets
        schema:
          type: boolean
          default: true
      - description: "Maximum size limit for assets to include (e.g., '100MB', '1GB')"
        in: query
        name: maxSize
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Assets backup downloaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error or asset export failed
      summary: Download assets backup
      tags:
      - Maintenance
  /v1/maintenance/_downloadDb:
    get:
      description: Generates and downloads a compressed SQL dump of the current database.
        File is named with hostname and timestamp for identification.
      operationId: downloadDb
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Database backup downloaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error or database export failed
      summary: Download database backup
      tags:
      - Maintenance
  /v1/maintenance/_downloadLog/{fileName}:
    get:
      description: Downloads a specific log file from the dotCMS logs directory as
        an octet stream. Requires backend admin access.
      operationId: downloadLogFile
      parameters:
      - description: Name of the log file to download
        in: path
        name: fileName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Log file downloaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Log file not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Download log file
      tags:
      - Maintenance
  /v1/maintenance/_downloadStarter:
    get:
      description: "Downloads a ZIP file containing only the starter data structures\
        \ and records required to create a Starter Site in dotCMS, without assets."
      operationId: downloadStarter
      parameters:
      - description: "Maximum size limit for assets to include (e.g., '100MB', '1GB')"
        in: query
        name: maxSize
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Starter data downloaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error or starter export failed
      summary: Download starter data
      tags:
      - Maintenance
  /v1/maintenance/_downloadStarterWithAssets:
    get:
      description: Downloads a ZIP file containing starter data structures plus all
        assets. Supports including all asset versions and configurable size limits.
      operationId: downloadStarterWithAssets
      parameters:
      - description: "Include all versions of assets (default: true)"
        in: query
        name: oldAssets
        schema:
          type: boolean
          default: true
      - description: "Maximum size limit for assets to include (e.g., '100MB', '1GB')"
        in: query
        name: maxSize
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Starter with assets downloaded successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error or starter+assets export failed
      summary: Download starter with assets
      tags:
      - Maintenance
  /v1/maintenance/_pgDumpAvailable:
    get:
      description: Returns a boolean indicating whether the pg_dump binary is available
        and callable on the system. Used for database export functionality.
      operationId: isPgDumpAvailable
      responses:
        "200":
          content:
            text/plain: {}
          description: pg_dump availability checked successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Check pg_dump availability
      tags:
      - Maintenance
  /v1/maintenance/_shutdown:
    delete:
      description: Shuts down the current DotCMS instance. Control is passed to catalina.sh
        (Tomcat) script to handle the exit code. Requires CMS Administrator role.
      operationId: shutdown
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Shutdown initiated successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or shutdown not allowed
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Shutdown DotCMS instance
      tags:
      - Maintenance
  /v1/maintenance/_shutdownCluster:
    delete:
      description: Shuts down the entire DotCMS cluster with a configurable rolling
        delay between nodes. Requires CMS Administrator role.
      operationId: shutdownCluster
      parameters:
      - description: "Delay in seconds between shutting down cluster nodes (default:\
          \ 60)"
        in: query
        name: rollingDelay
        schema:
          type: integer
          format: int32
          default: 60
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Cluster shutdown initiated successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or shutdown not allowed
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Shutdown DotCMS cluster
      tags:
      - Maintenance
  /v1/menu:
    get:
      description: Returns the layout menus and sub-menus that the logged-in user
        has access to. Handles language translations and user impersonation scenarios.
      operationId: getMenus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMenuView"
          description: Navigation menus retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get navigation menus
      tags:
      - Navigation
  /v1/nav/{uri}:
    get:
      description: Returns navigation metadata in JSON format for objects that have
        been marked to show on menu. Retrieves hierarchical navigation structure starting
        from the specified URI path.
      operationId: loadJson_1
      parameters:
      - description: Path to the HTML page or folder to retrieve navigation from
        in: path
        name: uri
        required: true
        schema:
          type: string
          pattern: .*
      - description: "Number of navigation levels to include (default: 1)"
        in: query
        name: depth
        schema:
          type: string
      - description: "Language ID for navigation items (default: request language)"
        in: query
        name: languageId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Navigation retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid depth or languageId parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "403":
          content:
            application/json: {}
          description: Insufficient permissions to access the host
        "404":
          content:
            application/json: {}
          description: Navigation path not found
      summary: Get navigation hierarchy
      tags:
      - Navigation
  /v1/notification/delete:
    put:
      description: Deletes multiple notifications for the current user. Uses PUT instead
        of DELETE to support request body with JSON data.
      operationId: delete_10
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteForm"
        description: Form data containing list of notification IDs to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Notifications deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid notification IDs
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete multiple notifications
      tags:
      - Notifications
  /v1/notification/getNewNotificationsCount:
    get:
      description: Returns the count of new/unread notifications for the current user
        or all users if allUsers parameter is true.
      operationId: getNewNotificationsCount
      parameters:
      - description: Filter to include all users' notifications
        in: query
        name: allUsers
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityNotificationCountView"
          description: Notification count retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get new notifications count
      tags:
      - Notifications
  /v1/notification/getNotifications/{params}:
    get:
      description: Returns a JSON array with notifications for the given user. Supports
        pagination with offset/limit and can retrieve notifications for all users
        with allUsers=true parameter. Supports Range header for pagination.
      operationId: getNotifications
      parameters:
      - description: "URL parameters for pagination and filtering (e.g., offset/0/limit/5\
          \ or allUsers/true)"
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      - description: Range header for pagination (optional)
        in: header
        name: Range
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Notifications retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get notifications
      tags:
      - Notifications
  /v1/notification/id/{id}:
    delete:
      description: Deletes a specific notification by its ID for the current user.
      operationId: delete_11
      parameters:
      - description: Notification ID to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Notification deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Notification not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete single notification
      tags:
      - Notifications
  /v1/notification/markAsRead:
    put:
      description: Marks all notifications for the current user as read.
      operationId: markAsRead
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Notifications marked as read successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Mark notifications as read
      tags:
      - Notifications
  /v1/osgi:
    get:
      description: Returns a list of all bundles installed in the OSGi environment.
        Optionally exclude system bundles from the results.
      operationId: getInstalledBundles_1
      parameters:
      - in: query
        name: ignoresystembundles
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBundleListView"
          description: Bundles retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user required
        "403":
          content:
            application/json: {}
          description: Forbidden - dynamic-plugins portlet access required
      summary: Get all installed bundles
      tags:
      - OSGi Plugins
    post:
      description: Uploads one or more JAR files to the OSGi upload folder for deployment.
        Only JAR files are accepted and will be processed by the OSGi framework.
      operationId: uploadBundles
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing OSGI bundle files
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
        "403":
          description: Can not access the upload folder or invalid OSGI Upload request
      summary: Upload bundles to the OSGI framework
      tags:
      - OSGi Plugins
  /v1/osgi/_processExports/{bundle}:
    get:
      description: Processes the export packages for a specific OSGi bundle. This
        updates the bundle's export declarations for package sharing.
      operationId: processBundle_1
      parameters:
      - description: Bundle name to process
        in: path
        name: bundle
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
      summary: Process exports
      tags:
      - OSGi Plugins
  /v1/osgi/_restart:
    put:
      description: "Restarts the entire OSGi framework, which will reload all bundles.\
        \ This is a system-level operation that affects all deployed plugins."
      operationId: restart
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
      summary: restarts the OSGI framework
      tags:
      - OSGi Plugins
  /v1/osgi/available-plugins:
    get:
      description: Returns a list of JAR files available for deployment from the undeployed
        folder. These are plugins that have been uploaded but are not currently active.
      operationId: getAvailablePlugis
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListStringView"
      summary: Get available plugins
      tags:
      - OSGi Plugins
  /v1/osgi/dotsystem:
    get:
      description: Returns the dot system list of all bundles installed in the OSGi
        environment. Optionally exclude system bundles from the results.
      operationId: getSystemInstalledBundles
      parameters:
      - in: query
        name: ignoresystembundles
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBundleListView"
          description: Bundles retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user required
        "403":
          content:
            application/json: {}
          description: Forbidden - dynamic-plugins portlet access required
      summary: Get dot system installed bundles
      tags:
      - OSGi Plugins
  /v1/osgi/extra-packages:
    get:
      description: Returns the packages listed in the osgi-extra.conf file. These
        packages are exported to OSGi bundles as system packages.
      operationId: getExtraPackages
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
      summary: Get extra packages
      tags:
      - OSGi Plugins
    put:
      description: Updates the content of the osgi-extra.conf file with new package
        definitions. These packages will be available to OSGi bundles as system packages.
      operationId: modifyExtraPackages
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExtraPackagesForm"
        description: Extra packages configuration to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
      summary: Modify extra packages
      tags:
      - OSGi Plugins
  /v1/osgi/jar/{jar}:
    delete:
      description: Undeploys an OSGi bundle by moving it from the load folder to the
        undeployed folder. This will stop and uninstall the bundle.
      operationId: undeploy
      parameters:
      - description: JAR file name to undeploy
        in: path
        name: jar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
        "400":
          description: Can not stop system bundle
        "404":
          description: Bundle not found
      summary: Undeploys bundle
      tags:
      - OSGi Plugins
  /v1/osgi/jar/{jar}/_deploy:
    put:
      description: Deploys an OSGi bundle from its JAR file. This will load and activate
        the bundle from the load folder.
      operationId: deploy
      parameters:
      - description: JAR file name to deploy
        in: path
        name: jar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
        "400":
          description: Error loading OSGI Bundle
        "404":
          description: Bundle not found
      summary: deploys bundle
      tags:
      - OSGi Plugins
  /v1/osgi/jar/{jar}/_start:
    put:
      description: Starts a specific OSGi bundle by jar name. System bundles cannot
        be started manually.
      operationId: start_1
      parameters:
      - description: Name of the jar file containing the OSGi bundle
        in: path
        name: jar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Bundle started successfully
        "400":
          content:
            application/json: {}
          description: Cannot start system bundle
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user required
        "403":
          content:
            application/json: {}
          description: Forbidden - dynamic-plugins portlet access required
        "404":
          content:
            application/json: {}
          description: Bundle not found
      summary: Start OSGi bundle
      tags:
      - OSGi Plugins
  /v1/osgi/jar/{jar}/_stop:
    put:
      description: Stops an OSGi bundle by its JAR file name. This will deactivate
        the bundle but not uninstall it.
      operationId: stop
      parameters:
      - description: JAR file name to stop
        in: path
        name: jar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
        "400":
          description: Can not stop system bundle
        "404":
          description: Bundle not found
      summary: stops bundle
      tags:
      - OSGi Plugins
  /v1/page/_check-permission:
    post:
      description: Verifies if the current user has the specified permission level
        on a page. Checks page existence and user permissions based on the provided
        path and host information.
      operationId: checkPagePermission
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageCheckPermissionForm"
        description: "Page permission check form with path, host ID, language ID,\
          \ and permission type"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Permission check completed successfully
        "400":
          content:
            application/json: {}
          description: Invalid request parameters or malformed form data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found at the specified path
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Check page permissions
      tags:
      - Page
  /v1/page/actions:
    post:
      description: Returns all workflow actions that are available for the specified
        page based on the user's permissions and the page's current workflow state.
      operationId: findAvailableActions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindAvailableActionsForm"
        description: "Form containing page path, host ID, language ID, and render\
          \ mode for finding available actions"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPageWorkflowActionsView"
          description: Available workflow actions retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid request parameters or malformed form data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found at the specified path
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get available workflow actions for page
      tags:
      - Page
  /v1/page/copyContent:
    put:
      description: Copies a contentlet from the specified form. The contentlet must
        be part of the multitree on the page and must exist to be copied. Returns
        the copied contentlet data.
      operationId: copyContent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopyContentletForm"
        description: Content copy form with source contentlet information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Content copied successfully
        "400":
          content:
            application/json: {}
          description: Invalid form data or missing required fields
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to copy content
        "404":
          content:
            application/json: {}
          description: Content not found or not part of page multitree
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Copy page content
      tags:
      - Page
  /v1/page/json/{uri}:
    get:
      description: "Returns the metadata (objects that make up an HTML Page) in JSON\
        \ format based on the specified URI. Supports Vanity URLs with different response\
        \ codes. For 200 Forward, includes actual page metadata. For 301/302 redirects,\
        \ includes empty page JSON with Vanity URL properties."
      operationId: loadJson_2
      parameters:
      - description: URI path to the HTML page or vanity URL
        in: path
        name: uri
        required: true
        schema:
          type: string
          pattern: .*
      - description: "Page render mode (LIVE, PREVIEW_MODE, EDIT_MODE, ADMIN_MODE)"
        in: query
        name: mode
        schema:
          type: string
      - description: Persona identifier for personalized content
        in: query
        name: com.dotmarketing.persona.id
        schema:
          type: string
      - description: Language ID for content localization
        in: query
        name: language_id
        schema:
          type: string
      - description: Device inode for device-specific rendering
        in: query
        name: device_inode
        schema:
          type: string
      - description: Time machine date in ISO8601 format for historical content
        in: query
        name: publishDate
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPageView"
          description: Page metadata retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get page metadata as JSON
      tags:
      - Page
  /v1/page/layout:
    post:
      description: Handles saving of a page template using provided data. Method processes
        the request and returns HTTP response indicating a complete save operation.
      operationId: postPageLayout
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageForm"
        description: "POST body consists of a JSON object containing one property\
          \ called 'PageForm', which contains a template layout for the page"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPageOperationView"
          description: Page template saved successfully
        "400":
          description: Bad request or data exception
        "404":
          description: Page not found
      summary: Saves a page template
      tags:
      - Page
  /v1/page/render/{uri}:
    get:
      description: "Returns the complete page metadata including rendered HTML code\
        \ from the page and its containers. Supports Vanity URLs with different response\
        \ codes. For 200 Forward, includes actual rendered page. For 301/302 redirects,\
        \ includes empty page JSON with Vanity URL properties."
      operationId: render
      parameters:
      - description: URI path to the HTML page or vanity URL
        in: path
        name: uri
        required: true
        schema:
          type: string
          pattern: .*
      - description: "Page render mode (LIVE, PREVIEW_MODE, EDIT_MODE, ADMIN_MODE)"
        in: query
        name: mode
        schema:
          type: string
      - description: Persona identifier for personalized content
        in: query
        name: com.dotmarketing.persona.id
        schema:
          type: string
      - description: Language ID for content localization
        in: query
        name: language_id
        schema:
          type: string
      - description: Device inode for responsive rendering with specific dimensions
        in: query
        name: device_inode
        schema:
          type: string
      - description: Time machine date in ISO8601 format for historical content
        in: query
        name: publishDate
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPageView"
          description: Page rendered successfully with full HTML content
        "400":
          content:
            application/json: {}
          description: Invalid request parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Render page with HTML content
      tags:
      - Page
  /v1/page/renderHTML/{uri}:
    get:
      description: Returns only the rendered HTML content of a page without metadata
        or JSON wrapper. Useful for embedding pages or getting pure HTML output.
      operationId: renderHTMLOnly
      parameters:
      - description: URI path to the HTML page
        in: path
        name: uri
        required: true
        schema:
          type: string
          pattern: .*
      - description: "Page render mode (LIVE, PREVIEW_MODE, EDIT_MODE, ADMIN_MODE,\
          \ LIVE_ADMIN)"
        in: query
        name: mode
        schema:
          type: string
          default: LIVE_ADMIN
      responses:
        "200":
          content:
            text/html: {}
          description: Page HTML rendered successfully
        "400":
          content:
            application/json: {}
          description: Invalid page mode parameter
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Render page HTML only
      tags:
      - Page
  /v1/page/search:
    get:
      description: Returns all pages that match the specified path filter. Supports
        filtering by live/working versions and live sites only. Path can include site
        name when prefixed with '//'.
      operationId: searchPage
      parameters:
      - description: Path filter for pages. Use '//' prefix to include site name
        in: query
        name: path
        schema:
          type: string
      - description: "Return only live versions if true, both live and working if\
          \ false"
        in: query
        name: live
        schema:
          type: boolean
      - description: Filter pages only from live sites
        in: query
        name: onlyLiveSites
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityContentletMapsView"
          description: Pages found successfully
        "400":
          content:
            application/json: {}
          description: Invalid search parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Search pages by path
      tags:
      - Page
  /v1/page/types:
    get:
      description: "Returns all content types that can be used for pages, including\
        \ base HTML page types and content types with URL mapping configured. Supports\
        \ pagination and filtering."
      operationId: getPageTypes
      parameters:
      - description: Filter text to search content types by name
        in: query
        name: filter
        schema:
          type: string
          default: ""
      - description: Page number for pagination (starts at 1)
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
      - description: "Field to order results by (default: UPPER(name))"
        in: query
        name: orderby
        schema:
          type: string
          default: UPPER(name)
      - description: "Sort direction: ASC or DESC (default: ASC)"
        in: query
        name: direction
        schema:
          type: string
          default: ASC
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPaginatedArrayListMapView"
          description: Page types retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid pagination or filter parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get page content types
      tags:
      - Page
  /v1/page/{pageId}/_deepcopy:
    put:
      description: "Performs a deep copy of a page including: 1) Creates a complete\
        \ page copy, 2) For each contentlet in the multitree related to the page,\
        \ creates a copy. Returns the copied page contentlet data."
      operationId: deepCopyPage
      parameters:
      - description: Page identifier to deep copy
        in: path
        name: pageId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Page deep copied successfully
        "400":
          content:
            application/json: {}
          description: Invalid page ID
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to copy page
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Deep copy a page
      tags:
      - Page
  /v1/page/{pageId}/content:
    post:
      description: Updates all contents in an HTML Page. Used for adding or removing
        Contentlets from Containers. Takes a JSON array with container information
        and their respective contentlets.
      operationId: addContent
      parameters:
      - description: Page identifier
        in: path
        name: pageId
        required: true
        schema:
          type: string
      - description: "Variant name for content versioning (default: DEFAULT)"
        in: query
        name: variantName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageContainerForm"
        description: Container entries with contentlet assignments
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPageOperationView"
          description: Page content updated successfully
        "400":
          content:
            application/json: {}
          description: Invalid request data or container/content validation failed
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient edit permissions for the page
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update page content
      tags:
      - Page
  /v1/page/{pageId}/content/tree:
    get:
      description: "Returns the MultiTree structure associated with a page, showing\
        \ the relationships between pages, containers, and contentlets with their\
        \ tree order and personalization settings."
      operationId: getContentTree
      parameters:
      - description: Page identifier
        in: path
        name: pageId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMulitreeView"
          description: Page content tree retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid page ID
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get page content tree
      tags:
      - Page
  /v1/page/{pageId}/languages:
    get:
      deprecated: true
      description: Returns all available languages in dotCMS with flags indicating
        whether the page is available in each language. This endpoint is deprecated
        - use ContentResource.getExistingLanguagesForContent instead.
      operationId: checkPageLanguageVersions
      parameters:
      - description: Page identifier
        in: path
        name: pageId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguagesForPageView"
          description: Page language versions retrieved successfully (deprecated endpoint)
        "400":
          content:
            application/json: {}
          description: Invalid page ID
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get page language versions (deprecated)
      tags:
      - Page
  /v1/page/{pageId}/layout:
    post:
      description: |+
        Takes a saved template and links it to an HTML page.

        Any pages with a template already linked will update with the new link.

        Otherwise a new template will be created without making any changes to previous templates.

        Returns the rendered page.

      operationId: postPageLayoutHTMLLink
      parameters:
      - description: ID for the page will link to
        in: path
        name: pageId
        required: true
        schema:
          type: string
      - in: query
        name: variantName
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PageForm"
        description: "POST body consists of a JSON object containing one property\
          \ called 'PageForm', which contains information about the layout of a page's\
          \ template "
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPageView"
          description: Page template linked to HTML and saved successfully
        "400":
          description: Bad request or data exception
        "404":
          description: Page not found
      summary: Links template and page
      tags:
      - Page
  /v1/page/{pageId}/personas:
    get:
      description: "Returns a paginated list of personas with a flag indicating if\
        \ the persona has been customized on the specified page. Each entry includes\
        \ persona details, personalization status, and page ID."
      operationId: getPersonalizedPersonasOnPage
      parameters:
      - description: Filter criteria for personas
        in: query
        name: filter
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of results per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
      - description: Field to order results by
        in: query
        name: orderby
        schema:
          type: string
          default: title
      - description: Sort direction (ASC or DESC)
        in: query
        name: direction
        schema:
          type: string
          default: ASC
      - description: "Host identifier (default: current host)"
        in: query
        name: hostId
        schema:
          type: string
      - description: Page identifier
        in: path
        name: pageId
        required: true
        schema:
          type: string
      - description: Whether to respect front-end role permissions
        in: query
        name: respectFrontEndRoles
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListPersonalizationPersonaPageView"
          description: Page personas retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid pagination or filter parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get page personas with personalization status
      tags:
      - Page
  /v1/page/{pageId}/render/versions:
    get:
      description: Returns the page render versions for both live and preview working
        versions. Includes a boolean 'diff' flag indicating if the live and preview
        versions are different.
      operationId: getHtmlVersionsPage
      parameters:
      - description: Page identifier
        in: path
        name: pageId
        required: true
        schema:
          type: string
      - description: "Language ID for version comparison (default: system default)"
        in: query
        name: langId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPageLivePreviewVersionView"
          description: Page render versions retrieved successfully
        "400":
          content:
            application/json: {}
          description: Invalid page ID or language ID
        "401":
          content:
            application/json: {}
          description: Unauthorized access - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get page render versions
      tags:
      - Page
  /v1/permissions/_bycontent:
    get:
      description: "Retrieves permissions for a specific contentlet by its identifier.\
        \ Only admin users can access this endpoint. Optionally filter by permission\
        \ type (READ, WRITE, PUBLISH)."
      operationId: getByContentlet
      parameters:
      - in: query
        name: contentletId
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          default: READ
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPermissionView"
        "403":
          description: If not admin user
      summary: Get permission for a Contentlet
      tags:
      - Permissions
  /v1/permissions/_bycontent/_groupbytype:
    get:
      description: "Retrieves permissions for a specific contentlet grouped by permission\
        \ type (READ, WRITE, PUBLISH). Only admin users or content owners can access\
        \ this endpoint."
      operationId: getByContentletGroupByType
      parameters:
      - in: query
        name: contentletId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPermissionView"
        "403":
          description: If not admin user
      summary: Get permissions roles group by type for a Contentlet
      tags:
      - Permissions
  /v1/permissions/_bypermissiontype:
    get:
      description: Load a map of permission type indexed by permissionable types and
        permissions
      operationId: getPermissionsByPermissionType
      parameters:
      - description: User ID
        in: query
        name: userid
        schema:
          type: string
      - description: "Permission type (READ, WRITE)"
        in: query
        name: permission
        schema:
          type: string
      - description: Permissionable types
        in: query
        name: permissiontype
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPermissionsByTypeView"
          description: Permissions retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
      summary: Get permissions by permission type
      tags:
      - Permissions
  /v1/personalization/pagepersonas:
    post:
      description: Copies the current content associated to page containers with default
        personalization and creates a new set with the specified persona personalization.
        Requires edit permission on the page.
      operationId: personalizePageContainers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PersonalizationPersonaPageForm"
        description: Personalization form data with page ID and persona tag
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPersonalizationView"
          description: Page containers personalized successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid page ID, persona tag, or missing parameters"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient edit permissions on page
        "404":
          content:
            application/json: {}
          description: Page or persona not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Personalize page containers
      tags:
      - Personalization
  /v1/personalization/pagepersonas/page/{pageId}/personalization/{personalization}:
    delete:
      description: Deletes a personalization persona for a page. Can remove any persona
        personalization for page containers except the default personalization. Requires
        edit permission on the page.
      operationId: personalizePageContainers_1
      parameters:
      - description: Page identifier
        in: path
        name: pageId
        required: true
        schema:
          type: string
      - description: Personalization/persona tag to delete
        in: path
        name: personalization
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Page personalization deleted successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid parameters, trying to delete default\
            \ personalization, or persona doesn't exist"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient edit permissions on page
        "404":
          content:
            application/json: {}
          description: Page not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete page personalization
      tags:
      - Personalization
  /v1/personas:
    get:
      description: Returns all personas for the current site. Site can be determined
        from session or header.
      operationId: list_3
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapStringRestPersonaView"
          description: Personas retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - site ID required or invalid
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List personas
      tags:
      - Personas
  /v1/personas/{id}:
    get:
      description: Returns a specific persona by its identifier
      operationId: self
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Persona identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestPersona"
          description: Persona retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - persona ID or site ID required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Persona not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get persona by ID
      tags:
      - Personas
  /v1/portlet/_actionurl/{contentTypeVariable}:
    get:
      description: Returns the action URL to fire the create content modal for the
        specified content type. Handles special cases like calendar events.
      operationId: getCreateContentURL
      parameters:
      - description: Content type variable name
        in: path
        name: contentTypeVariable
        required: true
        schema:
          type: string
      - description: "Language ID (optional, defaults to user's language)"
        in: query
        name: language_id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Content creation URL retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid content type variable
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get content creation URL
      tags:
      - Portlets
  /v1/portlet/custom:
    post:
      description: Creates a custom dotCMS Portlet for a given Base Type or Content
        Type. Requires roles permission.
      operationId: saveNew_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPortletForm"
        description: Custom portlet form data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Custom portlet created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid portlet data or portlet already exists
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "409":
          content:
            application/json: {}
          description: Conflict - portlet with this ID already exists
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create custom portlet
      tags:
      - Portlets
    put:
      description: Saves a new working version of an existing custom portlet. The
        formData must contain the identifier of the portlet. Requires roles permission.
      operationId: updatePortlet
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomPortletForm"
        description: Custom portlet form data with identifier
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Custom portlet updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid portlet data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Portlet not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update custom portlet
      tags:
      - Portlets
  /v1/portlet/custom/{portletId}:
    delete:
      description: Deletes a custom portlet by its ID. Requires roles permission.
      operationId: deleteCustomPortlet
      parameters:
      - description: Custom portlet ID to delete
        in: path
        name: portletId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Custom portlet deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Portlet not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete custom portlet
      tags:
      - Portlets
  /v1/portlet/custom/{portletId}/_addtolayout/{layoutId}:
    put:
      description: "Links a layout with a portlet. Security is enforced - the user\
        \ must have roles on the layout, otherwise an unauthorized response is returned."
      operationId: addContentPortletToLayout
      parameters:
      - description: Portlet ID to add to layout
        in: path
        name: portletId
        required: true
        schema:
          type: string
      - description: Layout ID to add portlet to
        in: path
        name: layoutId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Portlet added to layout successfully
        "400":
          content:
            application/json: {}
          description: Bad request - layout already contains portlet
        "401":
          content:
            application/json: {}
          description: Unauthorized - insufficient permissions or restricted portlet
        "403":
          content:
            application/json: {}
          description: Forbidden - user lacks layout permissions
        "404":
          content:
            application/json: {}
          description: Portlet or layout not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Add portlet to layout
      tags:
      - Portlets
  /v1/portlet/portletId/{portletId}:
    delete:
      description: Deletes a personal portlet for the current user. Requires roles
        permission.
      operationId: deletePersonalPortlet
      parameters:
      - description: Personal portlet ID to delete
        in: path
        name: portletId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Personal portlet deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Portlet not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete personal portlet
      tags:
      - Portlets
  /v1/portlet/portletId/{portletId}/roleId/{roleId}:
    delete:
      description: Removes a portlet from a specific role. Automatically removes layouts
        if they become empty. Requires roles permission and user must be admin or
        own the role.
      operationId: deletePortletForRole
      parameters:
      - description: Portlet ID to remove from role
        in: path
        name: portletId
        required: true
        schema:
          type: string
      - description: Role ID to remove portlet from
        in: path
        name: roleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Portlet removed from role successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required or insufficient permissions
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Portlet or role not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete portlet for role
      tags:
      - Portlets
  /v1/portlet/{portletId}:
    get:
      description: Returns detailed information about a specific portlet by its ID.
        Requires appropriate permissions.
      operationId: findPortlet
      parameters:
      - description: Portlet ID to retrieve
        in: path
        name: portletId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Portlet details retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Portlet not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get portlet details
      tags:
      - Portlets
  /v1/portlet/{portletId}/_doesuserhaveaccess:
    get:
      description: Checks if the current user has access to the specified portlet.
        Returns a boolean result.
      operationId: doesUserHaveAccessToPortlet
      parameters:
      - description: Portlet ID to check access for
        in: path
        name: portletId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Access check completed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Check portlet access
      tags:
      - Portlets
  /v1/publishqueue:
    delete:
      description: Removes specified elements from the Push Publish Queue by their
        identifiers. Requires backend user authentication and publishing-queue portlet
        access.
      operationId: deleteAssetsByIdentifiers
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePPQueueElementsByIdentifierForm"
        description: Form containing identifiers of publish queue elements to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Elements removed from publish queue successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid identifiers or form data
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access publishing-queue
            portlet
        "500":
          content:
            application/json: {}
          description: Internal server error or publisher exception
      summary: Delete assets from publish queue
      tags:
      - Publishing
  /v1/pushpublish/filters:
    get:
      description: "Lists all Push Publishing filter descriptors that the user has\
        \ access to, sorted alphabetically"
      operationId: getFilters
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFilterDescriptorsView"
          description: Filters retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get push publishing filters
      tags:
      - Push Publishing
    post:
      description: Creates a new Push Publishing filter based on form data. Requires
        CMS Administrator role.
      operationId: saveFromForm
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterDescriptorForm"
        description: Push Publishing filter form data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListStringView"
          description: Filter created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid filter data or filter already exists
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
        "409":
          content:
            application/json: {}
          description: Conflict - filter with this key already exists
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create push publishing filter from form
      tags:
      - Push Publishing
    put:
      description: Updates an existing Push Publishing filter based on form data.
        Requires CMS Administrator role.
      operationId: updateFromForm
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FilterDescriptorForm"
        description: Push Publishing filter form data with updates
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListStringView"
          description: Filter updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid filter data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
        "404":
          content:
            application/json: {}
          description: Filter not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update push publishing filter from form
      tags:
      - Push Publishing
  /v1/pushpublish/filters/{filterKey}:
    delete:
      description: Deletes a Push Publishing filter by its unique key. Requires CMS
        Administrator role.
      operationId: deleteFilter
      parameters:
      - description: Push Publishing filter key to delete
        in: path
        name: filterKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListStringView"
          description: Filter deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
        "404":
          content:
            application/json: {}
          description: Filter not found
        "417":
          content:
            application/json: {}
          description: Expectation failed - filter cannot be deleted
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete push publishing filter
      tags:
      - Push Publishing
    get:
      description: Returns a specific Push Publishing filter descriptor by its key
        (if the user has access to it)
      operationId: getFilter
      parameters:
      - description: Push Publishing filter key
        in: path
        name: filterKey
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFilterDescriptorView"
          description: Filter retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access this filter
        "404":
          content:
            application/json: {}
          description: Filter not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get push publishing filter by key
      tags:
      - Push Publishing
  /v1/redis:
    put:
      description: Sets a key-value pair in Redis
      operationId: set_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetForm"
        description: Key-value data to set
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Key-value set successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
      summary: Set Redis key-value
      tags:
      - System
  /v1/redis/echo/{message}:
    get:
      description: Tests Redis functionality by echoing a message back
      operationId: echo
      parameters:
      - description: Message to echo
        in: path
        name: message
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Message echoed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
      summary: Redis echo
      tags:
      - System
  /v1/redis/hash:
    put:
      description: Sets hash fields in Redis
      operationId: setHash
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetHashForm"
        description: Hash data to set
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Hash set successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid hash data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
      summary: Set Redis hash
      tags:
      - System
  /v1/redis/hash/{key}:
    delete:
      description: Deletes all fields of a hash stored at key
      operationId: deleteHash
      parameters:
      - description: Redis hash key to delete
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Hash deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
      summary: Delete Redis hash
      tags:
      - System
    get:
      description: Retrieves all fields and values of a hash stored at key
      operationId: getHash
      parameters:
      - description: Redis hash key
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Hash retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
        "404":
          content:
            application/json: {}
          description: Hash key not found
      summary: Get Redis hash
      tags:
      - System
  /v1/redis/incr/{key}:
    get:
      description: Retrieves the current increment value for a key
      operationId: getIncrement
      parameters:
      - description: Redis increment key
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Increment value retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
        "404":
          content:
            application/json: {}
          description: Key not found
      summary: Get Redis increment value
      tags:
      - System
    put:
      description: Asynchronously increments the value of a key by 1
      operationId: incrementAsync
      parameters:
      - description: Redis key to increment
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Key incremented successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
      summary: Increment Redis key (async)
      tags:
      - System
  /v1/redis/ping:
    get:
      description: Tests Redis connectivity by sending a ping command
      operationId: ping
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Redis ping successful
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
      summary: Redis ping
      tags:
      - System
  /v1/redis/{key}:
    delete:
      description: Deletes a key and its value from Redis
      operationId: delete_13
      parameters:
      - description: Redis key to delete
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Key deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
      summary: Delete Redis key
      tags:
      - System
    get:
      description: Retrieves a value from Redis by its key
      operationId: get_5
      parameters:
      - description: Redis key
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Value retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - maintenance role required
        "404":
          content:
            application/json: {}
          description: Key not found
      summary: Get Redis value by key
      tags:
      - System
  /v1/relationships:
    get:
      description: Returns orphan relationships (those defined in the parent or children
        but not in both) for a given content type
      operationId: getOneSidedRelationships
      parameters:
      - description: Content type identifier
        in: query
        name: contentTypeId
        required: true
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityRelationshipPaginationView"
          description: One-sided relationships retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Content type not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get one-sided relationships
      tags:
      - Relationships
  /v1/relationships/cardinalities:
    get:
      description: Returns all available relationship cardinality types with their
        labels and IDs
      operationId: getCardinality
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Cardinalities retrieved successfully
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get relationship cardinalities
      tags:
      - Relationships
  /v1/roles:
    get:
      description: Loads the root roles with optional children roles
      operationId: loadRootRoles
      parameters:
      - description: Load children roles
        in: query
        name: loadChildrenRoles
        schema:
          type: boolean
          default: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityRoleViewListView"
          description: Root roles retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - backend user required
      summary: Load root roles
      tags:
      - Roles
    post:
      description: Creates a new role in the system. Only admins can add roles.
      operationId: addNewRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleForm"
        description: Role information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponseEntityView"
          description: Role created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid role data or role name failed
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - admin permissions required
      summary: Create new role
      tags:
      - Roles
  /v1/roles/_search:
    get:
      description: "Search and filter roles by name, key, or ID with pagination support.\
        \ Includes options to filter by workflow roles."
      operationId: searchRoles
      parameters:
      - description: Value to filter by role name
        in: query
        name: searchName
        schema:
          type: string
          default: ""
      - description: Value to filter by role key
        in: query
        name: searchKey
        schema:
          type: string
          default: ""
      - description: Value for specific role id
        in: query
        name: roleId
        schema:
          type: string
          default: ""
      - description: Offset on pagination
        in: query
        name: start
        schema:
          type: integer
          format: int32
          default: 0
      - description: Size on pagination
        in: query
        name: count
        schema:
          type: integer
          format: int32
          default: 20
      - description: Set false if do not want to include user rules
        in: query
        name: includeUserRoles
        schema:
          type: boolean
          default: true
      - description: Set to true if want to include the workflow roles
        in: query
        name: includeWorkflowRoles
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySmallRoleView"
      summary: Search Roles
      tags:
      - Roles
  /v1/roles/checkuserroles/userid/{userId}/roleids/{roleIds}:
    get:
      description: Verifies that a user is assigned to one of the specified role IDs
      operationId: checkRoles
      parameters:
      - description: User ID to check
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: Comma-separated list of role IDs
        in: path
        name: roleIds
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityRoleOperationView"
          description: Role check completed successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Check user roles
      tags:
      - Roles
  /v1/roles/layouts:
    delete:
      description: Deletes a set of layouts from a role
      operationId: deleteRoleLayouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleLayoutForm"
        description: Role and layout information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityRoleOperationView"
          description: Layouts deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid role or layout data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - admin permissions required
      summary: Delete role layouts
      tags:
      - Roles
    get:
      description: Get all layouts in the system
      operationId: getAllLayouts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LayoutMapResponseEntityView"
          description: Layouts retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get all layouts
      tags:
      - Roles
    post:
      description: Saves a set of layouts to a role
      operationId: saveRoleLayouts
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleLayoutForm"
        description: Role and layout information
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityRoleOperationView"
          description: Layouts saved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid role or layout data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - admin permissions required
      summary: Save role layouts
      tags:
      - Roles
  /v1/roles/{roleId}/layouts:
    get:
      description: Returns a collection of layouts associated to a role
      operationId: findRoleLayouts
      parameters:
      - description: Role ID
        in: path
        name: roleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLayoutList"
          description: Role layouts retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid role ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - roles portlet access required
      summary: Find role layouts
      tags:
      - Roles
  /v1/roles/{roleid}:
    get:
      description: Load role based on the role id with optional children roles
      operationId: loadRoleByRoleId
      parameters:
      - description: Role ID
        in: path
        name: roleid
        required: true
        schema:
          type: string
      - description: Load children roles
        in: query
        name: loadChildrenRoles
        schema:
          type: boolean
          default: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityRoleDetailView"
          description: Role retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid role ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - backend user required
        "404":
          content:
            application/json: {}
          description: Role not found
      summary: Load role by role ID
      tags:
      - Roles
  /v1/roles/{roleid}/rolehierarchyanduserroles:
    get:
      description: Load the user and roles by role id with optional hierarchy and
        filtering
      operationId: loadUsersAndRolesByRoleId
      parameters:
      - description: Role ID
        in: path
        name: roleid
        required: true
        schema:
          type: string
      - description: Include role hierarchy
        in: query
        name: roleHierarchyForAssign
        schema:
          type: boolean
          default: false
      - description: Role name filter prefix
        in: query
        name: name
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityRoleListView"
          description: Users and roles retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid role ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - backend user required
        "404":
          content:
            application/json: {}
          description: Role not found
      summary: Load users and roles by role ID
      tags:
      - Roles
  /v1/site:
    get:
      description: Returns a paginated list of sites with optional filtering and status
        filters
      operationId: sites
      parameters:
      - description: Filter for site names
        in: query
        name: filter
        schema:
          type: string
      - description: Include archived sites
        in: query
        name: archive
        schema:
          type: boolean
      - description: Include live sites
        in: query
        name: live
        schema:
          type: boolean
      - description: Include system sites
        in: query
        name: system
        schema:
          type: boolean
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPaginatedArrayListHostView"
          description: Sites retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List sites with pagination
      tags:
      - Sites
    post:
      description: Creates a new site with the specified configuration
      operationId: createNewSite
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteForm"
        description: Site configuration data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site data or site name required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "409":
          content:
            application/json: {}
          description: Conflict - site already exists
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create new site
      tags:
      - Sites
    put:
      description: Updates an existing site with new configuration data. Requires
        access to Sites portlet
      operationId: updateSite
      parameters:
      - description: Site identifier
        in: query
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteForm"
        description: Updated site configuration data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site updated successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid site data, missing ID, or site name\
            \ required"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update site
      tags:
      - Sites
  /v1/site/_byname:
    post:
      description: Finds a site by its name. Uses POST to avoid URL escaping issues
      operationId: findHostByName
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchSiteByNameForm"
        description: Site name search form
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site found successfully
        "400":
          content:
            application/json: {}
          description: Bad request - site name is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Find site by name
      tags:
      - Sites
  /v1/site/_copy:
    put:
      description: Creates a new site by copying an existing site with specified copy
        options
      operationId: copySite
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CopySiteForm"
        description: Site copy configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site copied successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid copy configuration
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or license required
        "404":
          content:
            application/json: {}
          description: Source site not found
        "409":
          content:
            application/json: {}
          description: Conflict - new site already exists
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Copy site
      tags:
      - Sites
  /v1/site/currentSite:
    get:
      description: Returns the current site for the logged-in user from the HTTP session
      operationId: currentSite
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Current site retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get current site
      tags:
      - Sites
  /v1/site/defaultSite:
    get:
      description: Returns the default site in the system
      operationId: defaultSite
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Default site retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get default site
      tags:
      - Sites
  /v1/site/switch:
    put:
      description: Switches the current session to the user's default site
      operationId: switchSite
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Switched to default site successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Switch to default site
      tags:
      - Sites
  /v1/site/switch/{id}:
    put:
      description: Switches the current session to the specified site
      operationId: switchSite_1
      parameters:
      - description: Site identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteSwitchView"
          description: Site switched successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Switch to site
      tags:
      - Sites
  /v1/site/thumbnails:
    get:
      description: Retrieves thumbnail information for all sites
      operationId: findAllSiteThumbnails
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListMapView"
          description: Site thumbnails retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get site thumbnails
      tags:
      - Sites
  /v1/site/variable:
    put:
      description: Creates or updates a site variable with the provided key-value
        configuration. Site variables are custom properties that can be used throughout
        the site for configuration and templating purposes.
      operationId: saveSiteVariable
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SiteVariableForm"
        description: "Site variable configuration data including key, value, and site\
          \ identifier"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseHostVariableEntityView"
        "400":
          description: When a required value is not sent
      summary: Save a Site Variable
      tags:
      - Sites
  /v1/site/variable/{siteId}:
    get:
      description: Returns all site variables configured for the specified site. Site
        variables are key-value pairs that can be used for site-specific configuration
        and templating.
      operationId: getSiteVariables
      parameters:
      - description: Site identifier to retrieve variables for
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSiteVariablesEntityView"
        "404":
          description: When the site id does not exists
      summary: Retrieve the Site Variables for a site
      tags:
      - Sites
  /v1/site/{siteId}:
    delete:
      description: Deletes a site. The default site cannot be deleted - mark another
        site as default first
      operationId: deleteSite
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteDeleteView"
          description: Site deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or default site cannot be deleted
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete site
      tags:
      - Sites
    get:
      description: Retrieves a site by its identifier
      operationId: findHostByIdentifier
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get site by ID
      tags:
      - Sites
  /v1/site/{siteId}/_archive:
    put:
      description: "Archives a site, making it inactive but preserving its data"
      operationId: archiveSite
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site archived successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or default site cannot be archived
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Archive site
      tags:
      - Sites
  /v1/site/{siteId}/_makedefault:
    put:
      description: Marks a site as the default site for the system
      operationId: makeDefault
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site marked as default successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Make site default
      tags:
      - Sites
  /v1/site/{siteId}/_publish:
    put:
      description: "Publishes a site, making it available to the public"
      operationId: publishSite
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site published successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Publish site
      tags:
      - Sites
  /v1/site/{siteId}/_unarchive:
    put:
      description: "Unarchives a site, making it active again"
      operationId: unarchiveSite
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site unarchived successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Unarchive site
      tags:
      - Sites
  /v1/site/{siteId}/_unpublish:
    put:
      description: "Unpublishes a site, removing it from public access"
      operationId: unpublishSite
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteView"
          description: Site unpublished successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Unpublish site
      tags:
      - Sites
  /v1/site/{siteId}/setup_progress:
    get:
      description: Returns the site setup progress when site assets are being copied
        in the background
      operationId: getSiteSetupProgress
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySiteSetupProgressView"
          description: Site setup progress retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get site setup progress
      tags:
      - Sites
  /v1/sites/{siteId}/ruleengine/actions:
    post:
      description: Creates a new rule action for the specified site
      operationId: add_1
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRuleAction"
        description: Rule action data
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Rule action created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or rule action data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create rule action
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/actions/{actionId}:
    delete:
      description: Removes a rule action from the system
      operationId: remove_1
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule action identifier
        in: path
        name: actionId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Rule action deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or action ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or rule action not found
      summary: Delete rule action
      tags:
      - Rules Engine
    get:
      description: Retrieves a specific rule action by its identifier
      operationId: self_2
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule action identifier
        in: path
        name: actionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json: {}
          description: Rule action retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or action ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or rule action not found
      summary: Get rule action by ID
      tags:
      - Rules Engine
    put:
      description: Updates an existing rule action
      operationId: update_4
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule action identifier
        in: path
        name: actionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRuleAction"
        description: Updated rule action data
        required: true
      responses:
        "200":
          content:
            application/json: {}
          description: Rule action updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters or rule action data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or rule action not found
      summary: Update rule action
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/conditions:
    post:
      description: Creates a new rule condition for the specified site
      operationId: add_3
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestCondition"
        description: Rule condition data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "JSON object containing the created condition ID in format:\
                  \ { 'id': 'condition-uuid' }"
          description: Condition created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or condition data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create rule condition
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/conditions/{conditionId}:
    delete:
      description: Removes a rule condition from the system
      operationId: remove_3
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Condition deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or condition ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or condition not found
      summary: Delete rule condition
      tags:
      - Rules Engine
    get:
      description: Retrieves a specific rule condition by its identifier
      operationId: self_4
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestCondition"
          description: Condition retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or condition ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or condition not found
      summary: Get condition by ID
      tags:
      - Rules Engine
    put:
      description: Updates an existing rule condition
      operationId: update_6
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestCondition"
        description: Updated rule condition data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestCondition"
          description: Condition updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters or condition data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or condition not found
      summary: Update rule condition
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/conditions/{conditionId}/conditionValues:
    get:
      description: Retrieves all condition values for a specific condition within
        a rule
      operationId: list_6
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapStringRestConditionValueView"
          description: Condition values retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or condition ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or condition not found
      summary: List condition values
      tags:
      - Rules Engine
    post:
      description: Creates a new condition value for a specific condition
      operationId: add_4
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestConditionValue"
        description: Condition value data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Response containing the created condition value ID
                example:
                  id: "12345"
          description: Condition value created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters or condition value data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or condition not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create condition value
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/conditions/{conditionId}/conditionValues/{valueId}:
    delete:
      description: Removes a condition value from a condition
      operationId: remove_4
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      - description: Condition value identifier
        in: path
        name: valueId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Condition value deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: "Site, condition, or value not found"
      summary: Delete condition value
      tags:
      - Rules Engine
    get:
      description: Retrieves a specific condition value by its identifier
      operationId: self_5
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      - description: Condition value identifier
        in: path
        name: valueId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestConditionValue"
          description: Condition value retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: "Site, condition, or value not found"
      summary: Get condition value by ID
      tags:
      - Rules Engine
    put:
      description: Updates an existing condition value
      operationId: update_7
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Condition identifier
        in: path
        name: conditionId
        required: true
        schema:
          type: string
      - description: Condition value identifier
        in: path
        name: valueId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestConditionValue"
        description: Updated condition value data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestConditionValue"
          description: Condition value updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters or condition value data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: "Site, condition, or value not found"
      summary: Update condition value
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/rules:
    get:
      description: Returns all rules defined for the specified site
      operationId: list_4
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Map of rule keys to RestRule objects containing all rules
                  for the site
          description: Rules retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
      summary: List rules
      tags:
      - Rules Engine
    post:
      description: Creates a new rule for the specified site
      operationId: add
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRule"
        description: Rule data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: "JSON object containing the created rule ID in format:\
                  \ { 'id': 'rule-uuid' }"
          description: Rule created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or rule data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create rule
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/rules/{ruleId}:
    delete:
      description: Removes a rule from the system
      operationId: remove
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Rule deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or rule ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Rule not found
      summary: Delete rule
      tags:
      - Rules Engine
    get:
      description: Retrieves a specific rule by its identifier
      operationId: self_1
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestRule"
          description: Rule retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or rule ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Rule not found
      summary: Get rule by ID
      tags:
      - Rules Engine
    put:
      description: Updates an existing rule
      operationId: update_3
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestRule"
        description: Updated rule data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestRule"
          description: Rule updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters or rule data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Rule not found
      summary: Update rule
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups:
    get:
      description: Retrieves all condition groups for a specific rule
      operationId: list_5
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapStringRestConditionGroupView"
          description: Condition groups retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid site ID or rule ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or rule not found
      summary: List condition groups
      tags:
      - Rules Engine
    post:
      description: Creates a new condition group for a specific rule
      operationId: add_2
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestConditionGroup"
        description: Condition group data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Response containing the created condition group ID
          description: Condition group created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters or condition group data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Site or rule not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create condition group
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups/{conditionGroupId}:
    delete:
      description: Deletes a condition group and all its child conditions
      operationId: remove_2
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      - description: Condition group identifier
        in: path
        name: conditionGroupId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Condition group deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: "Site, rule, or condition group not found"
      summary: Delete condition group
      tags:
      - Rules Engine
  /v1/sites/{siteId}/ruleengine/rules/{ruleId}/conditionGroups/{groupId}:
    get:
      description: Retrieves a specific condition group by its identifier
      operationId: self_3
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      - description: Condition group identifier
        in: path
        name: groupId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestConditionGroup"
          description: Condition group retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: "Site, rule, or condition group not found"
      summary: Get condition group by ID
      tags:
      - Rules Engine
    put:
      description: Updates an existing condition group
      operationId: update_5
      parameters:
      - description: Site identifier
        in: path
        name: siteId
        required: true
        schema:
          type: string
      - description: Rule identifier
        in: path
        name: ruleId
        required: true
        schema:
          type: string
      - description: Condition group identifier
        in: path
        name: groupId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RestConditionGroup"
        description: Updated condition group data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestConditionGroup"
          description: Condition group updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid parameters or condition group data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: "Site, rule, or condition group not found"
      summary: Update condition group
      tags:
      - Rules Engine
  /v1/storages/chain/_replicate/{from}/to/{to}:
    get:
      description: Initiates data replication from one storage provider to one or
        more target storage providers
      operationId: replicateStorages
      parameters:
      - description: Source storage type
        in: path
        name: from
        required: true
        schema:
          type: string
          enum:
          - FILE_SYSTEM
          - DB
          - S3
          - MEMORY
          - DEFAULT_CHAIN
          - CHAIN1
          - CHAIN2
          - CHAIN3
      - description: Target storage types (comma-separated path)
        in: path
        name: to
        required: true
        schema:
          type: array
          items:
            type: object
            properties:
              matrixParameters:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
              path:
                type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Storage replication initiated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid storage type parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - administrator role required
      summary: Replicate storage data
      tags:
      - System Storage
  /v1/storages/hello:
    get:
      description: Simple test endpoint to verify the storage API is operational
      operationId: hello
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStorageStatusView"
          description: Storage API is operational
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - administrator role required
      summary: Storage system health check
      tags:
      - System Storage
  /v1/system-table:
    get:
      description: Returns all entries in the system table (filtered by whitelist/blacklist)
      operationId: getAll_1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringStringView"
          description: System table entries retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
      summary: Get all system table entries
      tags:
      - System Configuration
    post:
      description: Saves or updates the value of a given key to the system table
      operationId: save_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyValueForm"
        description: Key-value form data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: System table value saved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - key is blacklisted or form is invalid
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
      summary: Save system table key-value
      tags:
      - System Configuration
    put:
      description: "Updates a value in the System Table, returns 404 if the key doesn't\
        \ exist"
      operationId: update_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KeyValueForm"
        description: Key-value form data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: System table value updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - key is blacklisted or form is invalid
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
        "404":
          content:
            application/json: {}
          description: Key not found
      summary: Update system table key-value
      tags:
      - System Configuration
  /v1/system-table/_delete:
    delete:
      description: "Deletes a value from the System Table using key in request body,\
        \ returns 404 if the key doesn't exist"
      operationId: deleteWithKey
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Map containing the key to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: System table key deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - key is blacklisted or invalid
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
        "404":
          content:
            application/json: {}
          description: Key not found
      summary: Delete system table key with request body
      tags:
      - System Configuration
  /v1/system-table/{key}:
    delete:
      description: "Deletes a value from the System Table, returns 404 if the key\
        \ doesn't exist"
      operationId: delete_12
      parameters:
      - description: System table key to delete
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: System table key deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - key is blacklisted or invalid
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
        "404":
          content:
            application/json: {}
          description: Key not found
      summary: Delete system table key
      tags:
      - System Configuration
    get:
      description: Returns the value of a key in the System Table
      operationId: get_4
      parameters:
      - description: System table key
        in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: System table value retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - key is blacklisted or invalid
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - CMS Administrator role required
        "404":
          content:
            application/json: {}
          description: Key not found
      summary: Get system table value by key
      tags:
      - System Configuration
  /v1/system/i18n/{lang}/{rsrc}:
    get:
      description: Retrieves localized messages for a specific language and resource
        key
      operationId: list_9
      parameters:
      - description: "Language code (e.g., 'en', 'es', 'en-US')"
        in: path
        name: lang
        required: true
        schema:
          type: string
          pattern: "[\\w]{2,3}(?:-?[\\w]{2})?"
      - description: "Resource key path (e.g., 'messages/login')"
        in: path
        name: rsrc
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Localized message strings as key-value pairs
          description: Localized messages retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language or resource key
        "404":
          content:
            application/json: {}
          description: No resource messages found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get localized messages
      tags:
      - Internationalization
  /v1/system/request-draining-test/long-request:
    get:
      description: Creates a long-running request to test graceful shutdown behavior.
        The request will sleep for the specified duration while monitoring for shutdown
        signals. This is for testing purposes only and should not be used in production.
      operationId: longRunningRequest
      parameters:
      - description: Duration in milliseconds for the long-running request
        in: query
        name: duration
        schema:
          type: integer
          format: int64
          default: 5000
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Request completed with timing information
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
      summary: Simulate long-running request for shutdown testing
      tags:
      - Testing
  /v1/system/request-draining-test/simulate-active-requests:
    get:
      description: Manually increments the active request counter to simulate having
        active requests without actually creating them. This allows testing of shutdown
        behavior under different load conditions.
      operationId: simulateActiveRequests
      parameters:
      - description: Number of active requests to simulate
        in: query
        name: count
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Active requests simulated successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
      summary: Simulate active requests for testing
      tags:
      - Testing
  /v1/system/request-draining-test/status:
    get:
      description: Retrieves the current shutdown status including active request
        counts and shutdown progress information. Used for monitoring system shutdown
        behavior.
      operationId: getShutdownStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Shutdown status retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
      summary: Get shutdown status
      tags:
      - Testing
  /v1/system/ruleengine/actionlets:
    get:
      description: Retrieves all available actionlets for the rules engine
      operationId: list_10
      responses:
        "200":
          content:
            application/json: {}
          description: Actionlets retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
      summary: List actionlets
      tags:
      - Rules Engine
  /v1/system/ruleengine/conditionlets:
    get:
      description: Retrieves all available conditionlets for the rules engine
      operationId: list_11
      responses:
        "200":
          content:
            application/json: {}
          description: Conditionlets retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
      summary: List conditionlets
      tags:
      - Rules Engine
  /v1/tags:
    get:
      deprecated: true
      description: "Lists all tags or searches by name. If name is provided, performs\
        \ search-by-name operation that can be delimited by site ID. If no matches\
        \ found against site ID, searches global tags. This endpoint is deprecated\
        \ - use v2 instead."
      operationId: list
      parameters:
      - description: Name of the tag to search for (optional)
        in: query
        name: name
        schema:
          type: string
      - description: ID of the site where the tag lives (optional)
        in: query
        name: siteId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Map of tag identifiers to RestTag objects containing
                  tag metadata and properties
          description: Tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List tags (deprecated)
      tags:
      - Tags
    post:
      deprecated: true
      description: Creates new tags and optionally links them to an owner/user. Handles
        multiple tags and provides error reporting for failed saves. This endpoint
        is deprecated - use v2 instead.
      operationId: addTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagForm"
        description: Tag form containing tags to create with optional owner assignment
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagOperationView"
          description: Tags created successfully (may include error details)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create tags (deprecated)
      tags:
      - Tags
    put:
      deprecated: true
      description: "Updates an existing tag's information. Requires tag ID, site ID,\
        \ and new tag name. This endpoint is deprecated - use v2 instead."
      operationId: updateTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTagForm"
        description: "Update tag form containing tag ID, site ID, and new tag name"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagsView"
          description: Tag updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid or incomplete tag data
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "404":
          content:
            application/json: {}
          description: Tag not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update tag (deprecated)
      tags:
      - Tags
  /v1/tags/import:
    post:
      deprecated: true
      description: Imports tags from a CSV file. The CSV file should contain tag data
        in the expected format for bulk tag creation. This endpoint is deprecated
        - use v2 instead.
      operationId: importTags
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: CSV file containing tag data for import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Tags imported successfully
        "400":
          content:
            application/json: {}
          description: Bad request - failure importing tags file
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Import tags from CSV (deprecated)
      tags:
      - Tags
  /v1/tags/inode/{inode}:
    delete:
      deprecated: true
      description: Breaks the link between an inode and all its associated tags. Removes
        all tag associations for the specified content but does not delete the tags
        themselves. This endpoint is deprecated - use v2 instead.
      operationId: deleteTagInodesByInode
      parameters:
      - description: Inode to remove tag associations from
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Tag-inode associations deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - error occurred during deletion
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "404":
          content:
            application/json: {}
          description: No tag associations found for the specified inode
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete tag-inode associations (deprecated)
      tags:
      - Tags
    get:
      deprecated: true
      description: Retrieves all tags associated with a given inode. Returns tag-inode
        relationships for the specified content. This endpoint is deprecated - use
        v2 instead.
      operationId: findTagsByInode
      parameters:
      - description: Inode to retrieve tags for
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagInodesView"
          description: Tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "404":
          content:
            application/json: {}
          description: No tags found for the specified inode
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get tags by inode (deprecated)
      tags:
      - Tags
  /v1/tags/tag/{nameOrId}/inode/{inode}:
    put:
      deprecated: true
      description: "Binds tags with a given inode. Lookup can be done via tag name\
        \ or ID. If tag name matches multiple tags, all matching tags will be bound.\
        \ Use tag ID for specific binding. This endpoint is deprecated - use v2 instead."
      operationId: linkTagsAndInode
      parameters:
      - description: Name or UUID of the tag to link
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      - description: Inode to link the tag(s) to
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagInodeOperationView"
          description: Tags linked to inode successfully (may include error details)
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "404":
          content:
            application/json: {}
          description: Tag not found by the specified name or ID
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Link tags to inode (deprecated)
      tags:
      - Tags
  /v1/tags/user/{userId}:
    get:
      deprecated: true
      description: Retrieves all tags owned by a specific user. Returns tags that
        were explicitly linked to the user during creation. This endpoint is deprecated
        - use v2 instead.
      operationId: getTagsByUserId
      parameters:
      - description: User ID to retrieve tags for
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagsView"
          description: User tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "404":
          content:
            application/json: {}
          description: No tags found for the specified user
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get tags by user ID (deprecated)
      tags:
      - Tags
  /v1/tags/{nameOrId}:
    get:
      deprecated: true
      description: "Retrieves tags by name or ID. If the provided value is a valid\
        \ UUID, performs search-by-ID and returns a single result. Otherwise, searches\
        \ by name and returns all matching tags. This endpoint is deprecated - use\
        \ v2 instead."
      operationId: getTagsByNameOrId
      parameters:
      - description: Name or UUID of the tag to search for
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagsView"
          description: Tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "404":
          content:
            application/json: {}
          description: No tags found by the specified name or ID
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get tags by name or ID (deprecated)
      tags:
      - Tags
  /v1/tags/{tagId}:
    delete:
      deprecated: true
      description: Deletes a tag based on its ID. The tag must exist and the user
        must have appropriate permissions. This endpoint is deprecated - use v2 instead.
      operationId: delete_6
      parameters:
      - description: ID of the tag to delete
        in: path
        name: tagId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Tag deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - error occurred during deletion
        "401":
          content:
            application/json: {}
          description: Unauthorized - backend user authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "404":
          content:
            application/json: {}
          description: Tag not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete tag (deprecated)
      tags:
      - Tags
  /v1/temp:
    post:
      description: Uploads multiple files as temporary resources. Supports anonymous
        access based on configuration
      operationId: uploadTempResourceMulti
      parameters:
      - description: Maximum file length allowed
        in: query
        name: maxFileLength
        schema:
          type: string
          default: "-1"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing files to upload
        required: true
      responses:
        "200":
          content:
            application/octet-stream: {}
          description: Files uploaded successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid referer or request data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required when anonymous access
            disabled
        "404":
          content:
            application/json: {}
          description: Temp resource not enabled
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Upload temporary files
      tags:
      - Temporary Files
  /v1/temp/byUrl:
    post:
      description: Creates a temporary file by downloading content from a remote URL
      operationId: copyTempFromUrl
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoteUrlForm"
        description: Remote URL configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: File copied from URL successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid URL, referer, or missing URL parameter"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required when anonymous access
            disabled
        "404":
          content:
            application/json: {}
          description: Temp resource not enabled
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Copy temp file from URL
      tags:
      - Temporary Files
  /v1/templates:
    delete:
      description: "Deletes one or more templates. User needs Edit permissions, templates\
        \ must be archived and have no dependencies"
      operationId: delete_14
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: List of template identifiers to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Templates delete operation completed
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template identifiers or empty list
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete templates
      tags:
      - Templates
    get:
      description: Returns a paginated list of templates the user has read permissions
        on. Each template is the current working version
      operationId: list_12
      parameters:
      - description: Filter for template title or identifier
        in: query
        name: filter
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
          default: 40
      - description: "Field to order by (default: mod_date)"
        in: query
        name: orderby
        schema:
          type: string
          default: mod_date
      - description: "Sort direction (ASC, DESC)"
        in: query
        name: direction
        schema:
          type: string
          default: DESC
      - description: Filter by site ID (where template lives)
        in: query
        name: host
        schema:
          type: string
      - description: Include archived templates
        in: query
        name: archive
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListTemplateView"
          description: Templates retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List templates
      tags:
      - Templates
    post:
      description: Creates and saves a new working version of a template
      operationId: saveNew_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateForm"
        description: Template data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Template created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Save new template
      tags:
      - Templates
    put:
      description: Saves a new working version of an existing template. The templateForm
        must contain the template identifier
      operationId: save_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateForm"
        description: Template data with identifier
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Template saved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template data or missing identifier
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Template not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Save template
      tags:
      - Templates
  /v1/templates/_archive:
    put:
      description: Archives one or more templates. User needs Edit permissions
      operationId: archive_2
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: List of template identifiers to archive
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Templates archive operation completed
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template identifiers or empty list
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Archive templates
      tags:
      - Templates
  /v1/templates/_publish:
    put:
      description: Publishes one or more templates. User needs Publish permissions
        and templates cannot be archived
      operationId: publish_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: List of template identifiers to publish
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Templates publish operation completed
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template identifiers or empty list
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Publish templates
      tags:
      - Templates
  /v1/templates/_savepublish:
    put:
      description: Saves and publishes a template in one operation. The templateForm
        must contain the identifier of the template
      operationId: saveAndPublish
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateForm"
        description: Template data with identifier to save and publish
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Template saved and published successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template data or missing identifier
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Template not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Save and publish template
      tags:
      - Templates
  /v1/templates/_unarchive:
    put:
      description: Unarchives one or more templates. User needs Edit permissions and
        templates must be archived
      operationId: unarchive_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: List of template identifiers to unarchive
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Templates unarchive operation completed
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template identifiers or empty list
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Unarchive templates
      tags:
      - Templates
  /v1/templates/_unpublish:
    put:
      description: Unpublishes one or more templates. User needs Publish permissions
        and templates cannot be archived
      operationId: unpublish
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: List of template identifiers to unpublish
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkResultView"
          description: Templates unpublish operation completed
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template identifiers or empty list
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Unpublish templates
      tags:
      - Templates
  /v1/templates/draft:
    put:
      description: Saves a new draft version of an existing template. The templateForm
        must contain the identifier of the template
      operationId: saveDraft_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateForm"
        description: Template draft data with identifier
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Template draft saved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template data or missing identifier
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Template not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Save template draft
      tags:
      - Templates
  /v1/templates/image:
    post:
      description: Returns the image contentlet of a template if it exists
      operationId: fetchTemplateImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateImageForm"
        description: Template image form data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Template image retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Template or template image not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Fetch template image
      tags:
      - Templates
  /v1/templates/{templateId}/_copy:
    put:
      description: Creates a copy of an existing template
      operationId: copy_1
      parameters:
      - description: Template identifier to copy
        in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Template copied successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Template not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Copy template
      tags:
      - Templates
  /v1/templates/{templateId}/live:
    get:
      description: Returns the live version of a template by its identifier
      operationId: getLiveById
      parameters:
      - description: Template identifier
        in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Live template retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Live version of template not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get live template by ID
      tags:
      - Templates
  /v1/templates/{templateId}/working:
    get:
      description: Returns the working version of a template by its identifier
      operationId: getWorkingById
      parameters:
      - description: Template identifier
        in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTemplateView"
          description: Working template retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Working version of template not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get working template by ID
      tags:
      - Templates
  /v1/themes:
    get:
      description: Returns a paginated list of themes that the user has read permissions
        on
      operationId: findThemes
      parameters:
      - description: Host identifier
        in: query
        name: hostId
        required: true
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
          default: -1
      - description: "Sort direction (ASC, DESC)"
        in: query
        name: direction
        schema:
          type: string
          default: ASC
      - description: Search parameter for filtering themes
        in: query
        name: searchParam
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityPaginatedArrayListMapView"
          description: Themes retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - hostId is required
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Find themes
      tags:
      - Themes
  /v1/themes/id/{id}:
    get:
      description: Returns a specific theme by its folder inode identifier
      operationId: findThemeById
      parameters:
      - description: Theme folder inode identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Theme retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Theme not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Find theme by ID
      tags:
      - Themes
  /v1/toolgroups/{layoutId}/_addtouser:
    put:
      description: "Adds a toolgroup to the specified user using the layout ID as\
        \ key. If the layoutId is 'gettingStarted' it will add the getting started\
        \ layout. If no user ID is provided, the operation is performed on the current\
        \ user."
      operationId: addToolGroupToUser
      parameters:
      - description: Layout ID or 'gettingStarted' for getting started layout
        in: path
        name: layoutId
        required: true
        schema:
          type: string
      - description: "User ID (optional, defaults to current user)"
        in: query
        name: userid
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Toolgroup added to user successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid layout ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Layout or user not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Add toolgroup to user
      tags:
      - Tool Groups
  /v1/toolgroups/{layoutId}/_removefromuser:
    put:
      description: "Removes a toolgroup from the specified user using the layout ID\
        \ as key. If the layoutId is 'gettingStarted' it will remove the getting started\
        \ layout. If no user ID is provided, the operation is performed on the current\
        \ user."
      operationId: deleteToolGroupFromUser
      parameters:
      - description: Layout ID or 'gettingStarted' for getting started layout
        in: path
        name: layoutId
        required: true
        schema:
          type: string
      - description: "User ID (optional, defaults to current user)"
        in: query
        name: userid
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Toolgroup removed from user successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid layout ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Layout or user not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Remove toolgroup from user
      tags:
      - Tool Groups
  /v1/toolgroups/{layoutId}/_userHasLayout:
    get:
      description: "Returns a boolean indicating if the user's role has the specified\
        \ layout associated. If no user ID is provided, the operation is performed\
        \ on the current user."
      operationId: userHasLayout
      parameters:
      - description: Layout ID or 'gettingStarted' for getting started layout
        in: path
        name: layoutId
        required: true
        schema:
          type: string
      - description: "User ID (optional, defaults to current user)"
        in: query
        name: userid
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapStringObjectView"
          description: Layout check completed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid layout ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Layout or user not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Check if user has layout
      tags:
      - Tool Groups
  /v1/upgradetask:
    post:
      description: Run an upgrade task. Must be logged in as backend admin user.
      operationId: upgrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpgradeTaskForm"
        description: Upgrade task configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Upgrade task ran successfully
        "304":
          content:
            application/json: {}
          description: Not modified - upgrade task does not need to be executed
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - admin access required
        "404":
          content:
            application/json: {}
          description: Upgrade task class not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Run upgrade task
      tags:
      - Maintenance
  /v1/users:
    post:
      description: "Creates a new user. Requires admin privileges or access to Users\
        \ and Roles portlets. FirstName, LastName, Email and Password are required"
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForm"
        description: User creation data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityUserUpdateView"
          description: User created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - missing required fields or invalid data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to create users
        "409":
          content:
            application/json: {}
          description: Conflict - user already exists
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create user
      tags:
      - Users
    put:
      description: "Updates an existing user's information including personal details,\
        \ roles, and account settings. Only admin users or users with appropriate\
        \ portlet access can perform this operation."
      operationId: update_9
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForm"
        description: "User update data including personal information, roles, and\
          \ account settings"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityUserUpdateView"
          description: If success returns a map with the user + user id.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSiteVariablesEntityView"
          description: If the user information is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSiteVariablesEntityView"
          description: "If the user is not an admin or access to the role + user layouts\
            \ or does have permission, it will return a 403."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseSiteVariablesEntityView"
          description: If the user to update does not exist
      summary: Update an existing user.
      tags:
      - Users
  /v1/users/activate/{userId}:
    patch:
      operationId: active
      parameters:
      - description: "Identifier of an user.\n\nExample value: `b9d89c80-3d88-4311-8365-187323c96436` "
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: If success returns a map with the user + user id.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: If the user information is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: "If the user is not an admin or access to the role + user layouts\
            \ or does have permission, it will return a 403."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: If the user to update does not exist
      summary: Active an existing user.
      tags:
      - Users
  /v1/users/current:
    get:
      description: Returns information about the currently authenticated user
      operationId: self_6
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestUser"
          description: Current user information retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - could not provide current user
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
      summary: Get current user
      tags:
      - Users
    put:
      description: Updates information for the currently authenticated user. May require
        reauthentication if critical fields are changed.
      operationId: updateCurrent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCurrentUserForm"
        description: Current user update data including personal information and password
          changes
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityUserUpdateView"
          description: User information updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid user data or password requirements
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update current user
      tags:
      - Users
  /v1/users/deactivate/{userId}:
    patch:
      operationId: deactivate
      parameters:
      - description: "Identifier of an user.\n\nExample value: `b9d89c80-3d88-4311-8365-187323c96436` "
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: If success returns a map with the user + user id.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: If the user information is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: "If the user is not an admin or access to the role + user layouts\
            \ or does have permission, it will return a 403."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserMapEntityView"
          description: If the user to update does not exist
      summary: Deactivate an existing user.
      tags:
      - Users
  /v1/users/filter:
    get:
      description: Returns a list of dotCMS users based on specified search criteria
        with pagination support
      operationId: filter
      parameters:
      - description: Filter users by full name or parts of it
        in: query
        name: query
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
          default: 0
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
          default: 40
      - description: Column name for sorting results
        in: query
        name: orderby
        schema:
          type: string
      - description: "Sorting direction: ASC or DESC"
        in: query
        name: direction
        schema:
          type: string
          default: ASC
      - description: Include anonymous user in results
        in: query
        name: includeanonymous
        schema:
          type: boolean
      - description: Include default user in results
        in: query
        name: includedefault
        schema:
          type: boolean
      - description: Asset inode for permission-based filtering
        in: query
        name: assetinode
        schema:
          type: string
      - description: Permission type for asset-based filtering
        in: query
        name: permission
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListUserView"
          description: Users retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
      summary: Filter users
      tags:
      - Users
  /v1/users/loginAsData:
    get:
      description: Returns a paginated list of users that can be impersonated (excludes
        anonymous and default users)
      operationId: loginAsData
      parameters:
      - description: Filter for user search
        in: query
        name: filter
        schema:
          type: string
      - description: Page number for pagination
        in: query
        name: page
        schema:
          type: integer
          format: int32
      - description: Number of items per page
        in: query
        name: per_page
        schema:
          type: integer
          format: int32
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityListUserView"
          description: User list retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get login as data
      tags:
      - Users
  /v1/users/loginas:
    post:
      description: "Performs user impersonation via the 'Login As' feature, allowing\
        \ administrators to simulate another user's session"
      operationId: loginAs
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginAsForm"
        description: Login as credentials
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLoginAsView"
          description: Login as operation successful
        "400":
          content:
            application/json: {}
          description: Bad request - invalid user credentials
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication failed
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions or missing Login As role
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Login as user
      tags:
      - Users
  /v1/users/logoutas:
    put:
      description: Ends user impersonation session and reverts back to the original
        administrator user
      operationId: logoutAs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLoginAsView"
          description: Logout as operation successful
        "400":
          content:
            application/json: {}
          description: Bad request - invalid session state
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Logout as user
      tags:
      - Users
  /v1/users/{userId}:
    delete:
      description: Deletes a user account and reassigns all associated content and
        permissions to a replacement user. Only admin users or users with appropriate
        portlet access can perform this operation.
      operationId: delete_15
      parameters:
      - description: "Identifier of an user.\n\nExample value: `b9d89c80-3d88-4311-8365-187323c96436` "
        in: path
        name: userId
        required: true
        schema:
          type: string
      - description: "Identifier of an user.\n\nExample value: `b9d89c80-3d88-4311-8365-187323c96436` "
        in: query
        name: replacementUserId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserDeletedEntityView"
          description: If success returns a map with the user + user id.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserDeletedEntityView"
          description: If the user information is not valid
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserDeletedEntityView"
          description: "If the user is not an admin or access to the role + user layouts\
            \ or does have permission, it will return a 403."
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseUserDeletedEntityView"
          description: If the user to update does not exist
      summary: Deletes an existing user.
      tags:
      - Users
  /v1/variants:
    post:
      description: Creates a new content variant with the specified name and description.
        Variants allow for A/B testing and personalization of content.
      operationId: addVariant_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VariantForm"
        description: Variant configuration including name and description
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityVariantView"
          description: Variant created successfully
        "400":
          description: Bad request - Invalid variant data or variant already exists
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "500":
          description: Internal server error
      summary: Creates a new content variant
      tags:
      - Variants
  /v1/variants/{variantName}/_promote:
    put:
      description: Promotes a content variant to replace the default content version.
        This action makes the variant content live for all users.
      operationId: promoteVariant_1
      parameters:
      - description: Name of the variant to promote
        in: path
        name: variantName
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Variant promoted successfully (no body)
        "400":
          description: Bad request - Invalid variant name
        "401":
          description: Unauthorized - User not authenticated
        "403":
          description: Forbidden - User lacks required permissions
        "404":
          description: Variant not found
        "500":
          description: Internal server error
      summary: Promotes a variant to become the default
      tags:
      - Variants
  /v1/versionables/{versionableInodeOrIdentifier}:
    get:
      description: "Finds versionable asset by UUID. If UUID is an inode, returns\
        \ specific version; if identifier, returns all versions"
      operationId: findVersionable
      parameters:
      - description: Versionable asset inode or identifier
        in: path
        name: versionableInodeOrIdentifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityVersionableView"
          description: Versionable found successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Versionable not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Find versionable
      tags:
      - Versionables
  /v1/versionables/{versionableInode}:
    delete:
      description: "Deletes a specific version of a versionable asset. The version\
        \ cannot be working or live, and user needs edit permissions"
      operationId: deleteVersion
      parameters:
      - description: Versionable asset inode
        in: path
        name: versionableInode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityVersionableOperationView"
          description: Version deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - version is working or live
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Version not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete version
      tags:
      - Versionables
  /v1/versionables/{versionableInode}/_bringback:
    put:
      description: Restores a specific version as the working version. User needs
        edit permissions
      operationId: bringBack
      parameters:
      - description: Versionable asset inode to restore
        in: path
        name: versionableInode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityVersionableView"
          description: Version restored successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "404":
          content:
            application/json: {}
          description: Version not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Bring back version
      tags:
      - Versionables
  /v1/workflow/actionlets:
    get:
      description: "Returns a list of all workflow actionlets — a.k.a. [workflow sub-actions](https://www.dotcms.com/docs/latest/workflow-sub-actions).\
        \ The returned list is complete and does not use pagination."
      operationId: getWorkflowActionlets
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionletsView"
          description: Workflow actionlets returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find all workflow actionlets
      tags:
      - Workflow
  /v1/workflow/actionlets/{actionletId}:
    delete:
      description: |+
        Removes an [actionlet](https://www.dotcms.com/docs/latest/workflow-sub-actions), or sub-action, from a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions). This deletes only the actionlet's binding to the action utilizing it, and leaves the actionlet category intact.

        To find the identifier, you can call `GET /workflow/actions/{actionId}/actionlets`.

        Returns "Ok" on success.

      operationId: deleteWorkflowActionletFromAction
      parameters:
      - description: Identifier of the actionlet to delete.
        in: path
        name: actionletId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Workflow actionlet deleted from action successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Remove an actionlet from a workflow action
      tags:
      - Workflow
  /v1/workflow/actions:
    post:
      description: "Creates or updates a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ from the properties specified in the payload. Returns the created workflow\
        \ action."
      operationId: postActionsByWorkflowActionForm
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowActionForm"
        description: |+
          Body consists of a JSON object containing a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions) form. This includes the following properties:

          | Property | Type | Description |
          |-|-|-|
          | `actionId` | String | The identifier of the workflow action to be updated. If left blank, a new workflow action will be created. |
          | `schemeId` | String | The [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes) under which the action will be created. |
          | `stepId` | String |  The [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps) with which to associate the action. |
          | `actionName` | String | The name of the workflow action. Multiple actions of the same name can coexist with different identifiers.  |
          | `whoCanUse` | List of Strings | A list of identifiers representing [users](https://www.dotcms.com/docs/latest/user-management), [role keys](https://www.dotcms.com/docs/latest/adding-roles), or [other user categories](https://www.dotcms.com/docs/latest/managing-workflows#ActionWho) allowed to use this action. This list can be empty. |
          | `actionIcon` | String | The icon to associate with the action. Example: `workflowIcon`.  |
          | `actionCommentable` | Boolean | Whether this action supports comments.  |
          | `showOn` | List of Strings | List defining under which of the eight valid [workflow states](https://www.dotcms.com/docs/latest/managing-workflows#ActionShow) the action is visible. States must be specified uppercase, such as `NEW` or `LOCKED`. There is no single state for ALL; each state must be listed. |
          | `actionNextStep` | String | The identifier of the step to enter after performing the action; `currentstep` is also a valid value. |
          | `actionNextAssign` | String | A user identifier or role key (such as `CMS Anonymous`) to serve as the  default entry in the assignment dropdown. |
          | `actionCondition` | String | [Custom Velocity code](https://www.dotcms.com/docs/latest/managing-workflows#ActionAssign) to be executed along with the action. |
          | `actionAssignable` | Boolean | Whether this action can be assigned.  |
          | `actionRoleHierarchyForAssign` | Boolean | If true, non-administrators cannot assign tasks to administrators.  |
          | `metadata` | Object | Additional metadata to include in the action definition. |

        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionView"
          description: Workflow action created successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Creates/saves a workflow action
      tags:
      - Workflow
  /v1/workflow/actions/default/fire/{systemAction}:
    patch:
      description: |-
        Assigns values to the specified fields across multiple [contentlets](https://www.dotcms.com/docs/latest/content#Contentlets) simultaneously.

        Can use a [Lucene query](https://www.dotcms.com/docs/latest/content-search-syntax#Lucene) in its body to select all resulting content items.

        Returns a list of resultant contentlet maps, each with an additional  `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: patchFireMergeSystemAction
      parameters:
      - description: Inode of the target content.
        in: query
        name: inode
        schema:
          type: string
      - description: Identifier of target content.
        in: query
        name: identifier
        schema:
          type: string
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      - description: Numeric offset for query results; useful for paginating.
        in: query
        name: offset
        schema:
          type: integer
          format: int64
      - description: Default system action.
        in: path
        name: systemAction
        required: true
        schema:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
      requestBody:
        content:
          application/json:
            example:
              comments: Publish an existing Generic content
              query: +contentType:webPageContent AND title:testcontent
              contentlet:
                title: TestContentNowWithCaps
            schema:
              $ref: "#/components/schemas/FireActionForm"
        description: |+
          Optional body consists of a JSON object containing various properties, some of which are specific to certain actionlets.

          The full list of properties that may be used with this form is as follows:

          | Property | Type | Description |
          |-|-|-|
          | `query` | String | A Lucene query that can target multiple contentlets for editing. Example: `+contentType:htmlpageasset` for all dotCMS pages. |
          | `contentlet` | Object | An alternate way of specifying the target contentlet. If no identifier or inode is included via parameter, either one could instead be included in the body as a property of this object. |
          | `comments` | String | Comments that will appear in the [workflow tasks](https://www.dotcms.com/docs/latest/workflow-tasks) tool with the execution of this workflow action. |
          | `individualPermissions` | Object | Allows setting granular permissions associated with the target. The object properties are the [system names of permissions](https://www.dotcms.com/docs/latest/user-permissions#Permissions), such as READ, PUBLISH, EDIT, etc. Their respective values are a list of user or role identifiers that should be granted the permission in question. Example: `"READ": ["9ad24203-ae6a-4e5e-aa10-a8c38fd11f17","MyRole"]` |
          | `assign` | String | The identifier of a user or role to next receive the workflow task assignment. |
          | `pathToMove` | String | If the workflow action includes the Move actionlet, this property will specify the target path. This path must include a host, such as `//default/testfolder`, `//demo.dotcms.com/application`, etc. |
          | `whereToSend` | String | For the [push publishing](push-publishing) actionlet; sets the push-publishing environment to receive the target content. Must be specified as an environment identifier. [Learn how to find environment IDs here.](https://www.dotcms.com/docs/latest/push-publishing-endpoints#EnvironmentIds) |
          | `iWantTo` | String | For the push publishing actionlet; this can be set to one of three values: <ul style="line-height:2rem;"><li>`publish` for push publish;</li><li>`expire` for remove;</li><li>`publishexpire` for push remove.</li></ul> These are further configurable with the properties below that specify publishing and expiration dates, times, etc. |
          | `publishDate` | String | For the push publishing actionlet; specifies a date to push the content. Format: `yyyy-MM-dd`.  |
          | `publishTime` | String | For the push publishing actionlet; specifies a time to push the content. Format: `hh-mm`. |
          | `expireDate` | String | For the push publishing actionlet; specifies a date to remove the content. Format: `yyyy-MM-dd`.  |
          | `expireTime` | String | For the push publishing actionlet; specifies a time to remove the content. Format: `hh-mm`.  |
          | `neverExpire` | Boolean | For the push publishing actionlet; a value of `true` invalidates the expiration time/date. |
          | `filterKey` | String | For the push publishing actionlet; specifies a [push publishing filter](https://www.dotcms.com/docs/latest/push-publishing-filters) key, should the workflow action call for such. To retrieve a full list of push publishing filters and their keys, use `GET /v1/pushpublish/filters`. |
          | `timezoneId` | String | For the push publishing actionlet; specifies the time zone to which the indicated times belong. Uses the [tz database](https://www.iana.org/time-zones). For a list of values, see [the database directly](https://data.iana.org/time-zones/tz-link.html) or refer to [the Wikipedia entry listing tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |

      responses:
        "200":
          content:
            application/octet-stream:
              example:
                entity:
                  results:
                  - c2701eced2b59f0bbd55b3d9667878ce:
                      AUTO_ASSIGN_WORKFLOW: false
                      archived: false
                      baseType: string
                      body: string
                      body_raw: string
                      contentType: string
                      creationDate: 1725051866540
                      folder: string
                      hasLiveVersion: false
                      hasTitleImage: false
                      host: string
                      hostName: string
                      identifier: c2701eced2b59f0bbd55b3d9667878ce
                      inode: string
                      languageId: 1
                      live: false
                      locked: false
                      modDate: 1727438483022
                      modUser: string
                      modUserName: string
                      owner: string
                      ownerName: string
                      publishDate: 1727438483051
                      publishUser: string
                      publishUserName: string
                      sortOrder: 0
                      stInode: string
                      title: string
                      titleImage: string
                      url: string
                      working: false
                  summary:
                    affected: 1
                    failCount: 0
                    successCount: 1
                    time: 45
                errors: []
                i18nMessagesMap: {}
                messages: []
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Contentlet(s) modified successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content Type not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Modify specific fields on multiple contentlets
      tags:
      - Workflow
    post:
      description: |-
        Fire a [default system action](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions) by name on multiple target contentlets.

        Returns a list of resultant contentlet maps, each with an additional  `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: postFireSystemActionByNameMulti
      parameters:
      - description: Default system action.
        in: path
        name: systemAction
        required: true
        schema:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
      requestBody:
        content:
          application/json:
            example:
              contentlet:
              - identifier: d684c0a9abeeeceea8b9a7e32fc272ae
              - identifier: c2701eced2b59f0bbd55b3d9667878ce
              comments: test comment
            schema:
              $ref: "#/components/schemas/FireMultipleActionForm"
        description: |+
          Optional body consists of a JSON object containing various properties, some of which are specific to certain actionlets.

          The full list of properties that may be used with this form is as follows:

          | Property | Type | Description |
          |-|-|-|
          | `contentlet` | List of Objects | Multiple contentlet objects to serve as the target of the selected default system action; requires, at minimum, an identifier in each. |
          | `comments` | String | Comments that will appear in the [workflow tasks](https://www.dotcms.com/docs/latest/workflow-tasks) tool with the execution of this workflow action. |
          | `assign` | String | The identifier of a user or role to next receive the workflow task assignment. |
          | `whereToSend` | String | For the [push publishing](push-publishing) actionlet; sets the push-publishing environment to receive the target content. Must be specified as an environment identifier. [Learn how to find environment IDs here.](https://www.dotcms.com/docs/latest/push-publishing-endpoints#EnvironmentIds) |
          | `iWantTo` | String | For the push publishing actionlet; this can be set to one of three values: <ul style="line-height:2rem;"><li>`publish` for push publish;</li><li>`expire` for remove;</li><li>`publishexpire` for push remove.</li></ul> These are further configurable with the properties below that specify publishing and expiration dates, times, etc. |
          | `publishDate` | String | For the push publishing actionlet; specifies a date to push the content. Format: `yyyy-MM-dd`.  |
          | `publishTime` | String | For the push publishing actionlet; specifies a time to push the content. Format: `hh-mm`. |
          | `expireDate` | String | For the push publishing actionlet; specifies a date to remove the content. Format: `yyyy-MM-dd`.  |
          | `expireTime` | String | For the push publishing actionlet; specifies a time to remove the content. Format: `hh-mm`.  |
          | `neverExpire` | Boolean | For the push publishing actionlet; a value of `true` invalidates the expiration time/date. |
          | `filterKey` | String | For the push publishing actionlet; specifies a [push publishing filter](https://www.dotcms.com/docs/latest/push-publishing-filters) key, should the workflow action call for such. To retrieve a full list of push publishing filters and their keys, use `GET /v1/pushpublish/filters`. |
          | `timezoneId` | String | For the push publishing actionlet; specifies the time zone to which the indicated times belong. Uses the [tz database](https://www.iana.org/time-zones). For a list of values, see [the database directly](https://data.iana.org/time-zones/tz-link.html) or refer to [the Wikipedia entry listing tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |

      responses:
        "200":
          content:
            application/octet-stream:
              example:
                entity:
                  results:
                  - c2701eced2b59f0bbd55b3d9667878ce:
                      AUTO_ASSIGN_WORKFLOW: false
                      archived: false
                      baseType: string
                      body: string
                      body_raw: string
                      contentType: string
                      creationDate: 1725051866540
                      folder: string
                      hasLiveVersion: false
                      hasTitleImage: false
                      host: string
                      hostName: string
                      identifier: c2701eced2b59f0bbd55b3d9667878ce
                      inode: string
                      languageId: 1
                      live: false
                      locked: false
                      modDate: 1727438483022
                      modUser: string
                      modUserName: string
                      owner: string
                      ownerName: string
                      publishDate: 1727438483051
                      publishUser: string
                      publishUserName: string
                      sortOrder: 0
                      stInode: string
                      title: string
                      titleImage: string
                      url: string
                      working: false
                  summary:
                    affected: 1
                    failCount: 0
                    successCount: 1
                    time: 45
                errors: []
                i18nMessagesMap: {}
                messages: []
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fired action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire system action by name over multiple contentlets
      tags:
      - Workflow
    put:
      description: |-
        Fire a [default system action](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions) by name on a target contentlet.

        Returns a map of the resultant contentlet, with an additional `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: putFireDefaultSystemAction
      parameters:
      - description: Inode of the target content.
        in: query
        name: inode
        schema:
          type: string
      - description: Identifier of target content.
        in: query
        name: identifier
        schema:
          type: string
      - description: |+
          Determines how target content is indexed.

          | Value | Description |
          |-------|-------------|
          | `DEFER` | Content will be indexed asynchronously, outside of the current process. Valid content will finish the method in process and be returned before the content becomes visible in the index. This is the default index policy; it is resource-friendly and well-suited to batch processing. |
          | `WAIT_FOR` | The API call will not return from the content check process until the content has been indexed. Ensures content is promptly available for searching. |
          | `FORCE` | Forces Elasticsearch to index the content **immediately**.<br>**Caution:** Using this value may cause system performance issues; it is not recommended for general use, though may be useful for testing purposes. |

        in: query
        name: indexPolicy
        schema:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      - description: Variant name
        in: query
        name: variantName
        schema:
          type: string
          default: DEFAULT
      - description: Default system action.
        in: path
        name: systemAction
        required: true
        schema:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FireActionByNameForm"
        description: |+
          Optional body consists of a JSON object containing a FireActionByNameForm object — a form that appears in similar functions, as well, but implemented with minor differences across methods. As such, some properties are unused.

          The full list of properties that may be used with this form is as follows:

          | Property | Type | Description |
          |-|-|-|
          | `actionName` | String | Not used in this method. |
          | `contentlet` | Object | An alternate way of specifying the target contentlet. If no identifier or inode is included via parameter, either one could instead be included in the body as a property of this object. |
          | `comments` | String | Comments that will appear in the [workflow tasks](https://www.dotcms.com/docs/latest/workflow-tasks) tool with the execution of this workflow action. |
          | `individualPermissions` | Object | Allows setting granular permissions associated with the target. The object properties are the [system names of permissions](https://www.dotcms.com/docs/latest/user-permissions#Permissions), such as READ, PUBLISH, EDIT, etc. Their respective values are a list of user or role identifiers that should be granted the permission in question. Example: `"READ": ["9ad24203-ae6a-4e5e-aa10-a8c38fd11f17","MyRole"]` |
          | `assign` | String | The identifier of a user or role to next receive the workflow task assignment. |
          | `pathToMove` | String | If the workflow action includes the Move actionlet, this property will specify the target path. This path must include a host, such as `//default/testfolder`, `//demo.dotcms.com/application`, etc. |
          | `query` | String | Not used in this method. |
          | `whereToSend` | String | For the [push publishing](push-publishing) actionlet; sets the push-publishing environment to receive the target content. Must be specified as an environment identifier. [Learn how to find environment IDs here.](https://www.dotcms.com/docs/latest/push-publishing-endpoints#EnvironmentIds) |
          | `iWantTo` | String | For the push publishing actionlet; this can be set to one of three values: <ul style="line-height:2rem;"><li>`publish` for push publish;</li><li>`expire` for remove;</li><li>`publishexpire` for push remove.</li></ul> These are further configurable with the properties below that specify publishing and expiration dates, times, etc. |
          | `publishDate` | String | For the push publishing actionlet; specifies a date to push the content. Format: `yyyy-MM-dd`.  |
          | `publishTime` | String | For the push publishing actionlet; specifies a time to push the content. Format: `hh-mm`. |
          | `expireDate` | String | For the push publishing actionlet; specifies a date to remove the content. Format: `yyyy-MM-dd`.  |
          | `expireTime` | String | For the push publishing actionlet; specifies a time to remove the content. Format: `hh-mm`.  |
          | `neverExpire` | Boolean | For the push publishing actionlet; a value of `true` invalidates the expiration time/date. |
          | `filterKey` | String | For the push publishing actionlet; specifies a [push publishing filter](https://www.dotcms.com/docs/latest/push-publishing-filters) key, should the workflow action call for such. To retrieve a full list of push publishing filters and their keys, use `GET /v1/pushpublish/filters`. |
          | `timezoneId` | String | For the push publishing actionlet; specifies the time zone to which the indicated times belong. Uses the [tz database](https://www.iana.org/time-zones). For a list of values, see [the database directly](https://data.iana.org/time-zones/tz-link.html) or refer to [the Wikipedia entry listing tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |

      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fired action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire system action by name
      tags:
      - Workflow
  /v1/workflow/actions/default/firemultipart/{systemAction}:
    put:
      description: |-
        (**Construction notice:** Still needs request body documentation. Coming soon!)

        Fires a default [system action](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions) on target contentlet. Uses a multipart form to transmit its data.

        Returns a map of the resultant contentlet, with an additional `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: putFireDefaultActionMultipart
      parameters:
      - description: Inode of the target content.
        in: query
        name: inode
        schema:
          type: string
      - description: Identifier of target content.
        in: query
        name: identifier
        schema:
          type: string
      - description: |+
          Determines how target content is indexed.

          | Value | Description |
          |-------|-------------|
          | `DEFER` | Content will be indexed asynchronously, outside of the current process. Valid content will finish the method in process and be returned before the content becomes visible in the index. This is the default index policy; it is resource-friendly and well-suited to batch processing. |
          | `WAIT_FOR` | The API call will not return from the content check process until the content has been indexed. Ensures content is promptly available for searching. |
          | `FORCE` | Forces Elasticsearch to index the content **immediately**.<br>**Caution:** Using this value may cause system performance issues; it is not recommended for general use, though may be useful for testing purposes. |

        in: query
        name: indexPolicy
        schema:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      - description: Default system action.
        in: path
        name: systemAction
        required: true
        schema:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: "Multipart form data for workflow action execution including\
          \ content, files, and workflow parameters"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fired action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire default action (multipart form) 🚧
      tags:
      - Workflow
  /v1/workflow/actions/fire:
    put:
      description: |-
        Fires a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions), specified by name, on a target contentlet.

        Returns a map of the resultant contentlet, with an additional `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: putFireActionByName
      parameters:
      - description: Inode of the target content.
        in: query
        name: inode
        schema:
          type: string
      - description: Identifier of target content.
        in: query
        name: identifier
        schema:
          type: string
      - description: |+
          Determines how target content is indexed.

          | Value | Description |
          |-------|-------------|
          | `DEFER` | Content will be indexed asynchronously, outside of the current process. Valid content will finish the method in process and be returned before the content becomes visible in the index. This is the default index policy; it is resource-friendly and well-suited to batch processing. |
          | `WAIT_FOR` | The API call will not return from the content check process until the content has been indexed. Ensures content is promptly available for searching. |
          | `FORCE` | Forces Elasticsearch to index the content **immediately**.<br>**Caution:** Using this value may cause system performance issues; it is not recommended for general use, though may be useful for testing purposes. |

        in: query
        name: indexPolicy
        schema:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FireActionByNameForm"
        description: |+
          Body consists of a JSON object containing at minimum the `actionName` property, specifying a workflow action to fire.

          The full list of properties that may be used with this form is as follows:

          | Property | Type | Description |
          |-|-|-|
          | `actionName` | String | The name of the workflow action to perform. |
          | `contentlet` | Object | An alternate way of specifying the target contentlet. If no identifier or inode is included via parameter, either one could instead be included in the body as a property of this object. |
          | `comments` | String | Comments that will appear in the [workflow tasks](https://www.dotcms.com/docs/latest/workflow-tasks) tool with the execution of this workflow action. |
          | `individualPermissions` | Object | Allows setting granular permissions associated with the target. The object properties are the [system names of permissions](https://www.dotcms.com/docs/latest/user-permissions#Permissions), such as READ, PUBLISH, EDIT, etc. Their respective values are a list of user or role identifiers that should be granted the permission in question. Example: `"READ": ["9ad24203-ae6a-4e5e-aa10-a8c38fd11f17","MyRole"]` |
          | `assign` | String | The identifier of a user or role to next receive the workflow task assignment. |
          | `pathToMove` | String | If the workflow action includes the Move actionlet, this property will specify the target path. This path must include a host, such as `//default/testfolder`, `//demo.dotcms.com/application`, etc. |
          | `query` | String | Not used in this method. |
          | `whereToSend` | String | For the [push publishing](push-publishing) actionlet; sets the push-publishing environment to receive the target content. Must be specified as an environment identifier. [Learn how to find environment IDs here.](https://www.dotcms.com/docs/latest/push-publishing-endpoints#EnvironmentIds) |
          | `iWantTo` | String | For the push publishing actionlet; this can be set to one of three values: <ul style="line-height:2rem;"><li>`publish` for push publish;</li><li>`expire` for remove;</li><li>`publishexpire` for push remove.</li></ul> These are further configurable with the properties below that specify publishing and expiration dates, times, etc. |
          | `publishDate` | String | For the push publishing actionlet; specifies a date to push the content. Format: `yyyy-MM-dd`.  |
          | `publishTime` | String | For the push publishing actionlet; specifies a time to push the content. Format: `hh-mm`. |
          | `expireDate` | String | For the push publishing actionlet; specifies a date to remove the content. Format: `yyyy-MM-dd`.  |
          | `expireTime` | String | For the push publishing actionlet; specifies a time to remove the content. Format: `hh-mm`.  |
          | `neverExpire` | Boolean | For the push publishing actionlet; a value of `true` invalidates the expiration time/date. |
          | `filterKey` | String | For the push publishing actionlet; specifies a [push publishing filter](https://www.dotcms.com/docs/latest/push-publishing-filters) key, should the workflow action call for such. To retrieve a full list of push publishing filters and their keys, use `GET /v1/pushpublish/filters`. |
          | `timezoneId` | String | For the push publishing actionlet; specifies the time zone to which the indicated times belong. Uses the [tz database](https://www.iana.org/time-zones). For a list of values, see [the database directly](https://data.iana.org/time-zones/tz-link.html) or refer to [the Wikipedia entry listing tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |

        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fired action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire workflow action by name
      tags:
      - Workflow
  /v1/workflow/actions/firemultipart:
    put:
      description: |-
        (**Construction notice:** Still needs request body documentation. Coming soon!)

        Fires a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions), specified by name, on a target contentlet. Uses a multipart form to transmit its data.

        Returns a map of the resultant contentlet, with an additional `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: putFireActionByNameMultipart
      parameters:
      - description: Inode of the target content.
        in: query
        name: inode
        schema:
          type: string
      - description: Identifier of target content.
        in: query
        name: identifier
        schema:
          type: string
      - description: |+
          Determines how target content is indexed.

          | Value | Description |
          |-------|-------------|
          | `DEFER` | Content will be indexed asynchronously, outside of the current process. Valid content will finish the method in process and be returned before the content becomes visible in the index. This is the default index policy; it is resource-friendly and well-suited to batch processing. |
          | `WAIT_FOR` | The API call will not return from the content check process until the content has been indexed. Ensures content is promptly available for searching. |
          | `FORCE` | Forces Elasticsearch to index the content **immediately**.<br>**Caution:** Using this value may cause system performance issues; it is not recommended for general use, though may be useful for testing purposes. |

        in: query
        name: indexPolicy
        schema:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form. More details to follow.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fired action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire action by name (multipart form) 🚧
      tags:
      - Workflow
  /v1/workflow/actions/separator:
    post:
      description: "Creates a [workflow action] separator(https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ from the properties specified in the payload. Returns the created workflow\
        \ action."
      operationId: addSeparatorAction
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowActionSeparatorForm"
        description: |-
          Body consists of a JSON object containing a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions) form. This includes the following properties:

          | Property | Type | Description |
          |-|-|-|
          | `schemeId` | String | The [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes) under which the action will be created. |
          | `stepId` | String |  The [workflow step](https://www.dotcms.com/docs/latest
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkflowAction"
          description: Workflow action created successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Creates workflow action separator
      tags:
      - Workflow
  /v1/workflow/actions/{actionId}:
    delete:
      description: |+
        Deletes a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions) from all [steps](https://www.dotcms.com/docs/latest/managing-workflows#Steps) in which it appears.

        Returns "Ok" on success.

      operationId: deleteWorkflowActionByActionId
      parameters:
      - description: Identifier of the workflow action to delete.
        in: path
        name: actionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Workflow action deleted successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Delete a workflow action
      tags:
      - Workflow
    get:
      description: "Returns a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ object."
      operationId: getWorkflowActionByActionId
      parameters:
      - description: |-
          Identifier of the workflow action to return.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionView"
          description: Action returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find action by ID
      tags:
      - Workflow
    put:
      description: |+
        Updates a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions) based on the payload properties.

        Returns updated workflow action.

      operationId: putSaveActionsByWorkflowActionForm
      parameters:
      - description: |-
          Identifier of workflow action to update.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowActionForm"
        description: |+
          Body consists of a JSON object containing the same form data as used above in `POST /v1/workflow/actions`. However, this endpoint uses the form's properties differently, as noted below:

          | Property | Type | Description |
          |-|-|-|
          | `schemeId` | String | The [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes) under which the action will be created. |
          | `actionName` | String | The name of the workflow action. Multiple actions of the same name can coexist with different identifiers.  |
          | `whoCanUse` | List of Strings | A list of identifiers representing [users](https://www.dotcms.com/docs/latest/user-management), [role keys](https://www.dotcms.com/docs/latest/adding-roles), or [other user categories](https://www.dotcms.com/docs/latest/managing-workflows#ActionWho) allowed to use this action. This list can be empty. |
          | `actionIcon` | String | The icon to associate with the action. Example: `workflowIcon`.  |
          | `actionCommentable` | Boolean | Whether this action supports comments.  |
          | `showOn` | List of Strings | List defining under which of the eight valid [workflow states](https://www.dotcms.com/docs/latest/managing-workflows#ActionShow) the action is visible. States must be specified uppercase, such as `NEW` or `LOCKED`. There is no single state for ALL; each state must be listed. |
          | `actionNextStep` | String | The identifier of the step to enter after performing the action; `currentstep` is also a valid value. |
          | `actionNextAssign` | String | A user identifier or role key (such as `CMS Anonymous`) to serve as the  default entry in the assignment dropdown. |
          | `actionCondition` | String | [Custom Velocity code](https://www.dotcms.com/docs/latest/managing-workflows#ActionAssign) to be executed along with the action. |
          | `actionAssignable` | Boolean | Whether this action can be assigned.  |
          | `actionRoleHierarchyForAssign` | Boolean | If true, non-administrators cannot assign tasks to administrators.  |
          | `metadata` | Object | Optional. Additional metadata to include in the action definition. |
          | `actionId` | String | Omit; not used in this endpoint. |
          | `stepId` | String | Omit; not used in this endpoint. |

        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionView"
          description: Updated workflow action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Update an existing workflow action
      tags:
      - Workflow
  /v1/workflow/actions/{actionId}/actionlets:
    get:
      description: "Returns a list of the workflow actionlets — a.k.a. [workflow sub-actions](https://www.dotcms.com/docs/latest/workflow-sub-actions)\
        \ — associated with a specified workflow action."
      operationId: getWorkflowActionletsByActionId
      parameters:
      - description: |-
          Identifier of workflow action to examine for actionlets.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                - actionId: string
                  actionlet:
                    actionClass: string
                    howTo: string
                    localizedHowto: string
                    localizedName: string
                    name: string
                    nextStep: null
                    parameters:
                    - displayName: string
                      key: string
                      defaultValue: string
                      required: true
                  clazz: string
                  id: string
                  name: string
                  order: 0
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionClassesView"
          description: Workflow actionlets returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find workflow actionlets by workflow action
      tags:
      - Workflow
    post:
      description: |-
        Adds an actionlet — a.k.a. a [workflow sub-action](https://www.dotcms.com/docs/latest/workflow-sub-actions) — to a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions).

        Returns "Ok" on success.
      operationId: postAddActionletToActionById
      parameters:
      - description: |-
          Identifier of workflow action to receive actionlet.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowActionletActionForm"
        description: |+
          Body consists of a JSON object containing a workflow action form. This includes the following properties:

          | Property | Type | Description |
          |-|-|-|
          | `actionletClass` | String | The class of the actionlet to be assigned.<br><br>Example: `com.dotcms.rendering.js.JsScriptActionlet` |
          | `order` | Integer | The position of the actionlet within the action's sequence. |
          | `parameters` | Object | Further parameters and properties are conveyed here, depending on the particulars of the selected actionlet.<br><br>For a complete list of possible parameters, refer to the various keys listed in `GET /workflow/actionlets`. |

        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                errors:
                - errorCode: string
                  message: string
                  fieldName: string
                entity: Ok
                messages:
                - message: string
                i18nMessagesMap:
                  additionalProp1: string
                  additionalProp2: string
                  additionalProp3: string
                permissions:
                - string
                pagination:
                  currentPage: 0
                  perPage: 0
                  totalEntries: 0
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Workflow actionlet assigned successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Adds an actionlet to a workflow action
      tags:
      - Workflow
  /v1/workflow/actions/{actionId}/condition:
    get:
      description: |-
        Returns a string representing the "condition" on the selected action.

        More specifically: if the workflow action has anything in its [Custom Code](https://www.dotcms.com/docs/latest/custom-workflow-actions) field, the result is evaluated as Velocity, and the output is returned.
      operationId: getWorkflowConditionByActionId
      parameters:
      - description: |-
          Identifier of a workflow action to check for condition.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Condition returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find condition by action ID
      tags:
      - Workflow
  /v1/workflow/actions/{actionId}/fire:
    put:
      description: |-
        Fires a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions), specified by identifier, on a target contentlet.

        Returns a map of the resultant contentlet, with an additional `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: putFireActionById
      parameters:
      - description: |-
          Identifier of a workflow action.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      - description: Inode of the target content.
        in: query
        name: inode
        schema:
          type: string
      - description: Identifier of target content.
        in: query
        name: identifier
        schema:
          type: string
      - description: |+
          Determines how target content is indexed.

          | Value | Description |
          |-------|-------------|
          | `DEFER` | Content will be indexed asynchronously, outside of the current process. Valid content will finish the method in process and be returned before the content becomes visible in the index. This is the default index policy; it is resource-friendly and well-suited to batch processing. |
          | `WAIT_FOR` | The API call will not return from the content check process until the content has been indexed. Ensures content is promptly available for searching. |
          | `FORCE` | Forces Elasticsearch to index the content **immediately**.<br>**Caution:** Using this value may cause system performance issues; it is not recommended for general use, though may be useful for testing purposes. |

        in: query
        name: indexPolicy
        schema:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FireActionForm"
        description: |+
          Optional body consists of a JSON object containing various properties, some of which are specific to certain actionlets.

          The full list of properties that may be used with this form is as follows:

          | Property | Type | Description |
          |-|-|-|
          | `contentlet` | Object | An alternate way of specifying the target contentlet. If no identifier or inode is included via parameter, either one could instead be included in the body as a property of this object. |
          | `comments` | String | Comments that will appear in the [workflow tasks](https://www.dotcms.com/docs/latest/workflow-tasks) tool with the execution of this workflow action. |
          | `individualPermissions` | Object | Allows setting granular permissions associated with the target. The object properties are the [system names of permissions](https://www.dotcms.com/docs/latest/user-permissions#Permissions), such as READ, PUBLISH, EDIT, etc. Their respective values are a list of user or role identifiers that should be granted the permission in question. Example: `"READ": ["9ad24203-ae6a-4e5e-aa10-a8c38fd11f17","MyRole"]` |
          | `assign` | String | The identifier of a user or role to next receive the workflow task assignment. |
          | `pathToMove` | String | If the workflow action includes the Move actionlet, this property will specify the target path. This path must include a host, such as `//default/testfolder`, `//demo.dotcms.com/application`, etc. |
          | `query` | String | Not used in this method. |
          | `whereToSend` | String | For the [push publishing](push-publishing) actionlet; sets the push-publishing environment to receive the target content. Must be specified as an environment identifier. [Learn how to find environment IDs here.](https://www.dotcms.com/docs/latest/push-publishing-endpoints#EnvironmentIds) |
          | `iWantTo` | String | For the push publishing actionlet; this can be set to one of three values: <ul style="line-height:2rem;"><li>`publish` for push publish;</li><li>`expire` for remove;</li><li>`publishexpire` for push remove.</li></ul> These are further configurable with the properties below that specify publishing and expiration dates, times, etc. |
          | `publishDate` | String | For the push publishing actionlet; specifies a date to push the content. Format: `yyyy-MM-dd`.  |
          | `publishTime` | String | For the push publishing actionlet; specifies a time to push the content. Format: `hh-mm`. |
          | `expireDate` | String | For the push publishing actionlet; specifies a date to remove the content. Format: `yyyy-MM-dd`.  |
          | `expireTime` | String | For the push publishing actionlet; specifies a time to remove the content. Format: `hh-mm`.  |
          | `neverExpire` | Boolean | For the push publishing actionlet; a value of `true` invalidates the expiration time/date. |
          | `filterKey` | String | For the push publishing actionlet; specifies a [push publishing filter](https://www.dotcms.com/docs/latest/push-publishing-filters) key, should the workflow action call for such. To retrieve a full list of push publishing filters and their keys, use `GET /v1/pushpublish/filters`. |
          | `timezoneId` | String | For the push publishing actionlet; specifies the time zone to which the indicated times belong. Uses the [tz database](https://www.iana.org/time-zones). For a list of values, see [the database directly](https://data.iana.org/time-zones/tz-link.html) or refer to [the Wikipedia entry listing tz database time zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones). |

      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fired action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire action by ID
      tags:
      - Workflow
  /v1/workflow/actions/{actionId}/firemultipart:
    put:
      description: |-
        (**Construction notice:** Still needs request body documentation. Coming soon!)

        Fires a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions), specified by identifier, on a target contentlet. Uses a multipart form to transmit its data.

        Returns a map of the resultant contentlet, with an additional `AUTO_ASSIGN_WORKFLOW` property, which can be referenced by delegate services that handle automatically assigning workflow schemes to content with none.
      operationId: putFireActionByIdMultipart
      parameters:
      - description: |-
          Identifier of a workflow action.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      - description: Inode of the target content.
        in: query
        name: inode
        schema:
          type: string
      - description: Identifier of target content.
        in: query
        name: identifier
        schema:
          type: string
      - description: |+
          Determines how target content is indexed.

          | Value | Description |
          |-------|-------------|
          | `DEFER` | Content will be indexed asynchronously, outside of the current process. Valid content will finish the method in process and be returned before the content becomes visible in the index. This is the default index policy; it is resource-friendly and well-suited to batch processing. |
          | `WAIT_FOR` | The API call will not return from the content check process until the content has been indexed. Ensures content is promptly available for searching. |
          | `FORCE` | Forces Elasticsearch to index the content **immediately**.<br>**Caution:** Using this value may cause system performance issues; it is not recommended for general use, though may be useful for testing purposes. |

        in: query
        name: indexPolicy
        schema:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form. More details to follow.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMapView"
          description: Fired action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Fire action by ID (multipart form) 🚧
      tags:
      - Workflow
  /v1/workflow/contentlet/actions/_bulkfire:
    post:
      description: "This operation allows you to specify a multiple content items\
        \ (either by query or a list of identifiers), a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ to perform on them, and additional parameters as needed by the selected\
        \ action."
      operationId: postBulkActionsFire
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FireBulkActionsForm"
        description: |-
          Body consists of a JSON object with the following possible properties:

          | Property | Type | Description |
          |-|-|-|
          | `contentletIds` | List of Strings | A list of individual contentlet identifiers. |
          | `query` | String | [Lucene query](https://www.dotcms.com/docs/latest/content-search-syntax#Lucene); uses all matching contentlets. |
          | `workflowActionId` | String | The identifier of the workflow action to be performed on the selected content. |
          | `additionalParams` | Object | Further parameters and properties are conveyed here, depending on the particulars of the selected action.<br><br>For a complete list of possible parameters, refer to the various keys listed in `GET /workflow/actionlets`. |

          If both `contentletIds` and `query` properties are present, the operation will perform the selected action on all contentlets indicated in both. Note that this will lead to the workflow action being performed on the same contentlet twice, if it appears in both.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventOutput"
          description: Success
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Perform workflow actions on bulk content
      tags:
      - Workflow
  /v1/workflow/contentlet/actions/bulk:
    post:
      description: "Returns a list of bulk actions available for [contentlets](https://www.dotcms.com/docs/latest/content#Contentlets)\
        \ either by identifiers or by query, as specified in the body."
      operationId: postBulkActions
      requestBody:
        content:
          application/json:
            example:
              contentletIds:
              - 651a4dc8-2124-45d8-8bd2-d8e68ad358a8
              - f8d60f79-e006-42e0-894f-5d3488b796f6
              query: +contentType:*
            schema:
              $ref: "#/components/schemas/BulkActionForm"
        description: |-
          Body consists of a JSON object with either of the following properties:

          | Property | Type | Description |
          |-|-|-|
          | `contentletIds` | List of Strings | A list of individual contentlet identifiers. |
          | `query` | String | [Lucene query](https://www.dotcms.com/docs/latest/content-search-syntax#Lucene); uses all matching contentlets. |

          If both properties are present, the operation will use the list of identifiers and disregard the query.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkActionView"
          description: Zero or more bulk actions returned successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Finds available bulk workflow actions for content
      tags:
      - Workflow
  /v1/workflow/contentlet/actions/bulk/fire:
    put:
      description: "This operation allows you to specify a multiple content items\
        \ (either by query or a list of identifiers), a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ to perform on them, and additional parameters as needed by the selected\
        \ action."
      operationId: putBulkActionsFire
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FireBulkActionsForm"
        description: |-
          Body consists of a JSON object with the following possible properties:

          | Property | Type | Description |
          |-|-|-|
          | `contentletIds` | List of Strings | A list of individual contentlet identifiers. |
          | `query` | String | [Lucene query](https://www.dotcms.com/docs/latest/content-search-syntax#Lucene); uses all matching contentlets. |
          | `workflowActionId` | String | The identifier of the workflow action to be performed on the selected content. |
          | `additionalParams` | Object | Further parameters and properties are conveyed here, depending on the particulars of the selected action.<br><br>For a complete list of possible parameters, refer to the various keys listed in `GET /workflow/actionlets`. |

          If both `contentletIds` and `query` properties are present, the operation will use the query and disregard the identifier list.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkActionsResultView"
          description: Success
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Perform workflow actions on bulk content
      tags:
      - Workflow
  /v1/workflow/contentlet/{inode}/actions:
    get:
      description: "Returns a list of [workflow actions](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ associated with a [contentlet](https://www.dotcms.com/docs/latest/content#Contentlets)\
        \ specified by inode."
      operationId: getWorkflowActionsByContentletInode
      parameters:
      - description: |+
          Inode of contentlet to examine for workflow actions.

        in: path
        name: inode
        required: true
        schema:
          type: string
      - description: |-
          *Optional.* Case-insensitive parameter indicating how results are to be displayed.

          In listing mode, all associated actions are returned; in editing mode (the default), it returns only the actions accessible to the contentlet's current workflow step.
        in: query
        name: renderMode
        schema:
          type: string
          default: EDITING
          enum:
          - EDITING
          - LISTING
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionsView"
          description: Scheme(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Contentlet not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Finds workflow actions by content inode
      tags:
      - Workflow
  /v1/workflow/contenttypes/{contentTypeVarOrId}/system/actions:
    get:
      description: "Returns a list of [default system actions](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions)\
        \ associated with a specified [content type](https://www.dotcms.com/docs/latest/content-types)."
      operationId: getSystemActionMappingsByContentType
      parameters:
      - description: |-
          The ID or Velocity variable of the content type to inspectfor default system action bindings.

          Example value: `htmlpageasset` (Default page content type)
        in: path
        name: contentTypeVarOrId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySystemActionWorkflowActionMappings"
          description: Action(s) returned successfully from content type
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content Type not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find default system actions mapped to a content type
      tags:
      - Workflow
  /v1/workflow/defaultactions/contenttype/{contentTypeId}:
    get:
      description: "Returns a list of actions that may be used as a [default action](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions)\
        \ for a specified [content type](https://www.dotcms.com/docs/latest/content-types),\
        \ along with their associated [workflow schemes](https://www.dotcms.com/docs/latest/managing-workflows#Schemes)."
      operationId: getDefaultActionsByContentTypeId
      parameters:
      - description: |-
          Identifier or variable of content type to examine for actions.

          Example ID: `c541abb1-69b3-4bc5-8430-5e09e5239cc8` (Default page content type)

          Example Variable: `htmlpageasset` (Default page content type)
        in: path
        name: contentTypeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityDefaultWorkflowActionsView"
          description: Default action(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content type not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find possible default actions by content type
      tags:
      - Workflow
  /v1/workflow/defaultactions/schemes:
    get:
      description: "Returns a list of actions that are eligible to be used as a [default\
        \ action](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions)\
        \ for one or more [workflow schemes](https://www.dotcms.com/docs/latest/managing-workflows#Schemes)."
      operationId: getDefaultActionsBySchemeIds
      parameters:
      - description: Comma-separated list of workflow scheme identifiers.
        in: query
        name: ids
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityDefaultWorkflowActionsView"
          description: Action(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find possible default actions by scheme(s)
      tags:
      - Workflow
  /v1/workflow/initialactions/contenttype/{contentTypeId}:
    get:
      description: "Returns a list of available actions of the initial/first step(s)\
        \ of the workflow scheme(s) associated with a [content type](https://www.dotcms.com/docs/latest/content-types)."
      operationId: getInitialActionsByContentTypeId
      parameters:
      - description: |-
          Identifier or variable of content type to examine for initial actions.

          Example ID: `c541abb1-69b3-4bc5-8430-5e09e5239cc8` (Default page content type)

          Example Variable: `htmlpageasset` (Default page content type)
        in: path
        name: contentTypeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityDefaultWorkflowActionsView"
          description: Initial action(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content type not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find initial actions by content type
      tags:
      - Workflow
  /v1/workflow/reorder/step/{stepId}/order/{order}:
    put:
      description: |+
        Updates a [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps)'s order within a [scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes) by assigning it a numeric order.

        Returns "Ok" on success.

      operationId: putReorderWorkflowStepsInScheme
      parameters:
      - description: |-
          Identifier of the step to reorder.

          Example: `ee24a4cb-2d15-4c98-b1bd-6327126451f3` (Default system workflow Draft step)
        in: path
        name: stepId
        required: true
        schema:
          type: string
      - description: "Integer indicating the step's position in the order, with `0`\
          \ as the first. All other steps numbers are adjusted accordingly, leaving\
          \ no gaps."
        in: path
        name: order
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Workflow step reordered successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Change the order of steps within a scheme
      tags:
      - Workflow
  /v1/workflow/reorder/steps/{stepId}/actions/{actionId}:
    put:
      description: |+
        Updates a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)'s order within a [step](https://www.dotcms.com/docs/latest/managing-workflows#Steps) by assigning it a numeric order.

        Returns "Ok" on success.

      operationId: putReorderWorkflowActionsInStep
      parameters:
      - description: Identifier of the step containing the action.
        in: path
        name: stepId
        required: true
        schema:
          type: string
      - description: Identifier of the action to reorder.
        in: path
        name: actionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowReorderWorkflowActionStepForm"
        description: "Body consists of a JSON object containing the single property\
          \ `order`, which is assigned an integer value."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Updated workflow action successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow step or action not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Change the order of actions within a workflow step
      tags:
      - Workflow
  /v1/workflow/schemes:
    get:
      description: Returns workflow schemes. Can be filtered by content type and/or
        live status through optional query parameters.
      operationId: getWorkflowSchemes
      parameters:
      - description: |-
          Optional filter parameter that takes a content type identifier and returns all [workflow schemes](https://www.dotcms.com/docs/latest/managing-workflows#Schemes) associated with that type.

          Leave blank to return all workflow schemes.

          Example value: `c541abb1-69b3-4bc5-8430-5e09e5239cc8` (Default page content type)
        in: query
        name: contentTypeId
        schema:
          type: string
      - description: "If `true`, includes archived schemes in response."
        in: query
        name: showArchived
        schema:
          type: boolean
          default: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowSchemesView"
          description: Scheme(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find workflow schemes
      tags:
      - Workflow
    post:
      description: |-
        Create a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes).

         Returns created workflow scheme on success.
      operationId: postSaveScheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowSchemeForm"
        description: |
          The request body consists of the following three properties:

          | Property | Type | Description |
          |-|-|-|
          | `schemeName` | String | The workflow scheme's name. |
          | `schemeDescription` | String | A description of the scheme. |
          | `schemeArchived` | Boolean | If `true`, the scheme will be created in an archived state. |
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowSchemeView"
          description: Copied workflow scheme successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Create a workflow scheme
      tags:
      - Workflow
  /v1/workflow/schemes/actions/{systemAction}:
    post:
      description: "Returns a list of [workflow actions](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ associated with [workflow schemes](https://www.dotcms.com/docs/latest/managing-workflows#Schemes),\
        \ further filtered by [default system actions](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions)."
      operationId: postFindActionsBySchemesAndSystemAction
      parameters:
      - description: Default system action.
        in: path
        name: systemAction
        required: true
        schema:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
      requestBody:
        content:
          application/json:
            example:
              schemes:
              - d61a59e1-a49c-46f2-a929-db2b4bfa88b2
            schema:
              $ref: "#/components/schemas/WorkflowSchemesForm"
        description: "Body consists of a JSON object containing a single property\
          \ called `schemes`, which contains a list of workflow scheme identifier\
          \ strings."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionsView"
          description: Workflow action(s) returned successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Finds workflow actions by schemes and system action
      tags:
      - Workflow
  /v1/workflow/schemes/import:
    post:
      description: |-
        Import a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes).

        Returns "OK" on success.
      operationId: postImportScheme
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowSchemeImportObjectForm"
        description: "Body consists of a JSON object containing two properties: \n\
          \n| Property | Type | Description |\n|-|-|-|\n| `workflowObject` | Object\
          \ | An entire scheme along with steps and actions, such as received from\
          \ the corresponding export method. |\n| `permissions` | List of Objects\
          \ | A list of permission objects, such as received from the corresponding\
          \ export method. |\n\nThe simplest way to perform an import is to pass the\
          \ full value of the `entity` property returned by the corresponding Workflow\
          \ Scheme Export endpoint as the data payload."
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Imported workflow scheme successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Import a workflow scheme
      tags:
      - Workflow
  /v1/workflow/schemes/schemescontenttypes/{contentTypeId}:
    get:
      description: |-
        Fetches [workflow schemes](https://www.dotcms.com/docs/latest/managing-workflows#Schemes)  associated with a content type by its identifier. Returns an entity containing two properties:

        | Property | Description |
        |----------|-------------|
        | `contentTypeSchemes` | A list of schemes associated with the specified content type. |
        | `schemes` | A list of non-archived schemes, irrespective of relation to the content type. |
      operationId: getWorkflowSchemesByContentTypeId
      parameters:
      - description: |-
          Identifier of content type to examine for workflow schemes.

          Example value: `c541abb1-69b3-4bc5-8430-5e09e5239cc8` (Default page content type)
        in: path
        name: contentTypeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemesAndSchemesContentTypeView"
          description: Scheme(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Content type ID not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find workflow schemes by content type id
      tags:
      - Workflow
  /v1/workflow/schemes/{schemeIdOrVariable}/export:
    get:
      description: |-
        Export a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes).

        Returns the full workflow scheme, along with steps, actions, permissions, etc., on success.
      operationId: getExportScheme
      parameters:
      - description: Identifier or variable name of the workflow scheme to export.
        in: path
        name: schemeIdOrVariable
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                  permissions:
                  - bitPermission: false
                    id: 0
                    individualPermission: true
                    inode: string
                    permission: 0
                    roleId: string
                    type: string
                  workflowObject:
                    actionClassParams:
                    - actionClassId: string
                      id: null
                      key: string
                      value: null
                    actionClasses:
                    - actionId: string
                      actionlet:
                        actionClass: string
                        howTo: string
                        localizedHowto: string
                        localizedName: string
                        name: string
                        nextStep: null
                        parameters:
                        - defaultValue: ""
                          displayName: string
                          key: string
                          required: false
                      clazz: string
                      id: string
                      name: string
                      order: 0
                    actionSteps:
                    - actionId: string
                      actionOrder: "0"
                      stepId: string
                    actions:
                    - assignable: false
                      commentable: false
                      condition: ""
                      icon: string
                      id: string
                      metadata: null
                      name: string
                      nextAssign: string
                      nextStep: string
                      nextStepCurrentStep: true
                      order: 0
                      owner: null
                      roleHierarchyForAssign: false
                      schemeId: string
                      showOn: []
                    schemeSystemActionWorkflowActionMappings:
                    - identifier: string
                      owner:
                        archived: false
                        creationDate: 1723806880187
                        defaultScheme: false
                        description: string
                        entryActionId: null
                        id: string
                        mandatory: false
                        modDate: 1723796816309
                        name: string
                        system: false
                        variableName: string
                      systemAction: string
                      workflowAction:
                        assignable: false
                        commentable: false
                        condition: ""
                        icon: string
                        id: string
                        metadata: null
                        name: string
                        nextAssign: string
                        nextStep: string
                        nextStepCurrentStep: true
                        order: 0
                        owner: null
                        roleHierarchyForAssign: false
                        schemeId: string
                        showOn: []
                      ownerContentType: false
                      ownerScheme: true
                    schemes:
                    - archived: false
                      creationDate: 1723806880187
                      defaultScheme: false
                      description: string
                      entryActionId: null
                      id: string
                      mandatory: false
                      modDate: 1723796816309
                      name: string
                      system: false
                      variableName: string
                    steps:
                    - creationDate: 1723806894533
                      enableEscalation: false
                      escalationAction: null
                      escalationTime: 0
                      id: string
                      myOrder: 0
                      name: string
                      resolved: false
                      schemeId: string
                    version: string
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowSchemeView"
          description: Exported workflow scheme successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Export a workflow scheme
      tags:
      - Workflow
  /v1/workflow/schemes/{schemeId}:
    delete:
      description: |-
        Deletes a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes)

        Scheme must already be in an archived state.

        Returns deleted workflow scheme on success.
      operationId: deleteWorkflowSchemeById
      parameters:
      - description: Identifier of workflow scheme to delete.
        in: path
        name: schemeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowSchemeView"
          description: Workflow scheme deleted successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Delete a workflow scheme
      tags:
      - Workflow
    put:
      description: |-
        Updates a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes).

        Returns updated scheme on success.
      operationId: putUpdateWorkflowScheme
      parameters:
      - description: |-
          Identifier of workflow scheme.

          Example value: `d61a59e1-a49c-46f2-a929-db2b4bfa88b2` (Default system workflow)
        in: path
        name: schemeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowSchemeForm"
        description: |
          The request body consists of the following three properties:

          | Property | Type | Description |
          |-|-|-|
          | `schemeName` | String | The workflow scheme's name. |
          | `schemeDescription` | String | A description of the scheme. |
          | `schemeArchived` | Boolean | If `true`, the scheme will be be placed in an archived state. |
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Updated workflow scheme successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found.
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Update a workflow scheme
      tags:
      - Workflow
  /v1/workflow/schemes/{schemeId}/actions:
    get:
      description: "Returns a list of [workflow actions](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ associated with a specified [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes)."
      operationId: getWorkflowActionsBySchemeId
      parameters:
      - description: |-
          Identifier of workflow scheme.

          Example value: `d61a59e1-a49c-46f2-a929-db2b4bfa88b2` (Default system workflow)
        in: path
        name: schemeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionsView"
          description: Actions returned successfully from workflow scheme
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find all actions in a workflow scheme
      tags:
      - Workflow
  /v1/workflow/schemes/{schemeId}/copy:
    post:
      description: |-
        Copy a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes).

         A name for the new scheme may be provided either by parameter or by POST body property; if no name is supplied, the name will be that of the copied workflow scheme with the current Unix epoch timestamp integer appended.

        Returns copied workflow scheme on success.
      operationId: postCopyScheme
      parameters:
      - description: |-
          Identifier of workflow scheme.

          Example value: `d61a59e1-a49c-46f2-a929-db2b4bfa88b2` (Default system workflow)
        in: path
        name: schemeId
        required: true
        schema:
          type: string
      - description: |-
          Name of new scheme from copy.

          Note: A name with a length less than 2 characters or greater than 100 may require renaming before certain actions, such as archiving, can be taken on it.
        in: query
        name: name
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowCopyForm"
        description: |-
          Body consists of a `name` property; an alternate way to supply the name of the new scheme, instead of parameter.

           Name supplied this way must be at minimum 2 and at maximum 100 characters in length.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowSchemeView"
          description: Copied workflow scheme successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Copy a workflow scheme
      tags:
      - Workflow
  /v1/workflow/schemes/{schemeId}/steps:
    get:
      description: "Returns a list of [steps](https://www.dotcms.com/docs/latest/managing-workflows#Steps)\
        \ associated with a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes)."
      operationId: getWorkflowStepsBySchemeId
      parameters:
      - description: |-
          Identifier of workflow scheme.

          Example value: `d61a59e1-a49c-46f2-a929-db2b4bfa88b2` (Default system workflow)
        in: path
        name: schemeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowStepsView"
          description: Scheme(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find steps by workflow scheme ID
      tags:
      - Workflow
  /v1/workflow/schemes/{schemeId}/system/actions:
    get:
      description: "Returns a list of [default system actions](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions)\
        \ associated with a specified [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes)."
      operationId: getSystemActionMappingsBySchemeId
      parameters:
      - description: |-
          Identifier of workflow scheme.

          Example value: `d61a59e1-a49c-46f2-a929-db2b4bfa88b2` (Default system workflow)
        in: path
        name: schemeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySystemActionWorkflowActionMappings"
          description: Actions returned successfully from workflow scheme
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow scheme not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find default system actions mapped to a workflow scheme
      tags:
      - Workflow
  /v1/workflow/status/{contentletInode}:
    get:
      description: |-
        Checks the current workflow status of a contentlet by its [inode](https://www.dotcms.com/docs/latest/content-versions#IdentifiersInodes).

        Returns an object containing the associated [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes), [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps), and [workflow task](https://www.dotcms.com/docs/latest/workflow-tasks) associated with the contentlet.
      operationId: getContentWorkflowStatusByInode
      parameters:
      - description: |+
          Inode of content version to inspect for workflow status.

        in: path
        name: contentletInode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseContentletWorkflowStatusView"
          description: Action(s) returned successfully
        "400":
          description: Bad Request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find workflow status of content
      tags:
      - Workflow
  /v1/workflow/steps:
    post:
      description: |-
        Creates a [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps).

        Returns an object representing the step.
      operationId: postAddWorkflowStep
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowStepAddForm"
        description: |+
          Body consists of a JSON object containing a workflow step update form. This includes the following properties:

          | Property | Type | Description |
          |-|-|-|
          | `schemeId` | String | The identifier of the [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes) to which the step will be added. |
          | `stepName` | String | The name of the workflow step. |
          | `enableEscalation` | Boolean | Determines whether a step is capable of automatic escalation to the next step. (Read more about [schedule-enabled workflows](https://www.dotcms.com/docs/latest/schedule-enabled-workflow).) |
          | `escalationAction` | String | The identifier of the workflow action to execute on automatic escalation. |
          | `escalationTime` | String | The time, in seconds, before the workflow automatically escalates. |
          | `stepResolved` | Boolean | If true, any content which enters this workflow step will be considered resolved.
          Content in a resolved step will not appear in the workflow queues of any users.
           |

        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowStepView"
          description: Created workflow step successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Add a new workflow step
      tags:
      - Workflow
  /v1/workflow/steps/{stepId}:
    delete:
      description: |-
        Deletes a [step](https://www.dotcms.com/docs/latest/managing-workflows#Steps) from a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes).

        Returns the deleted workflow step object.
      operationId: deleteWorkflowStepById
      parameters:
      - description: Identifier of a workflow step to delete.
        in: path
        name: stepId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowStepView"
          description: Workflow step deleted successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Delete a workflow step
      tags:
      - Workflow
    get:
      description: "Returns a [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps)\
        \ by identifier."
      operationId: getFindWorkflowStepById
      parameters:
      - description: |-
          Identifier of the step to retrieve.

          Example: `ee24a4cb-2d15-4c98-b1bd-6327126451f3` (Default system workflow Draft step)
        in: path
        name: stepId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowStepView"
          description: Found workflow step successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow step not found.
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Retrieves a workflow step
      tags:
      - Workflow
    put:
      description: |-
        Updates a [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps).

        Returns an object representing the updated step.
      operationId: putUpdateWorkflowStepById
      parameters:
      - description: |-
          Identifier of the step to update.

          Example: `ee24a4cb-2d15-4c98-b1bd-6327126451f3` (Default system workflow Draft step)
        in: path
        name: stepId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowStepUpdateForm"
        description: |+
          Body consists of a JSON object containing a workflow step update form. This includes the following properties:

          | Property | Type | Description |
          |-|-|-|
          | `stepOrder` | Integer | The position of the step within the [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes), with `0` being the first. |
          | `stepName` | String | The name of the workflow step. |
          | `enableEscalation` | Boolean | Determines whether a step is capable of automatic escalation to the next step. (Read more about [schedule-enabled workflows](https://www.dotcms.com/docs/latest/schedule-enabled-workflow).) |
          | `escalationAction` | String | The identifier of the workflow action to execute on automatic escalation. |
          | `escalationTime` | String | The time, in seconds, before the workflow automatically escalates. |
          | `stepResolved` | Boolean | If true, any content which enters this workflow step will be considered resolved.
          Content in a resolved step will not appear in the workflow queues of any users.
           |

        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowStepView"
          description: Updated workflow step successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Update an existing workflow step
      tags:
      - Workflow
  /v1/workflow/steps/{stepId}/actions:
    get:
      description: "Returns a list of [workflow actions](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ associated with a specified [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps)."
      operationId: getWorkflowActionsByStepId
      parameters:
      - description: |-
          Identifier of a workflow step.

          Example value: `ee24a4cb-2d15-4c98-b1bd-6327126451f3` (Default system workflow "Draft" step)
        in: path
        name: stepId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionsView"
          description: Actions returned successfully from step
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow step not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find all actions in a workflow step
      tags:
      - Workflow
    post:
      description: "Assigns a single [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ to a [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps).\
        \ Returns \"Ok\" on success."
      operationId: postActionToStepById
      parameters:
      - description: |-
          Identifier of a workflow step to receive a new action.

          Example value: `ee24a4cb-2d15-4c98-b1bd-6327126451f3` (Default system workflow "Draft" step)
        in: path
        name: stepId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            example:
              actionId: b9d89c80-3d88-4311-8365-187323c96436
            schema:
              $ref: "#/components/schemas/WorkflowActionStepForm"
        description: |+
          Body consists of a JSON object with a single property:

          | Property | Type | Description |
          |-|-|-|
          | `actionId` | String | The identifier of the workflow action to assign to the step specified in the parameter. |

        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                errors:
                - errorCode: string
                  message: string
                  fieldName: string
                entity: Ok
                messages:
                - message: string
                i18nMessagesMap:
                  additionalProp1: string
                  additionalProp2: string
                  additionalProp3: string
                permissions:
                - string
                pagination:
                  currentPage: 0
                  perPage: 0
                  totalEntries: 0
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Workflow action added to step successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Adds a workflow action to a workflow step
      tags:
      - Workflow
  /v1/workflow/steps/{stepId}/actions/{actionId}:
    delete:
      description: |-
        Deletes an [action](https://www.dotcms.com/docs/latest/managing-workflows#Actions) from a single [workflow step](https://www.dotcms.com/docs/latest/managing-workflows#Steps).

        Returns "Ok" on success.

        If the action exists on other steps, removing it from one step will not delete the action outright.
      operationId: deleteWorkflowActionFromStepByActionId
      parameters:
      - description: Identifier of the workflow action to remove.
        in: path
        name: actionId
        required: true
        schema:
          type: string
      - description: Identifier of the step containing the action.
        in: path
        name: stepId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityStringView"
          description: Workflow action removed from step successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Remove a workflow action from a step
      tags:
      - Workflow
    get:
      description: "Returns a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)\
        \ if it exists within a specific [step](https://www.dotcms.com/docs/latest/managing-workflows#Steps)."
      operationId: getWorkflowActionByStepActionId
      parameters:
      - description: |-
          Identifier of a workflow step.

          Example value: `ee24a4cb-2d15-4c98-b1bd-6327126451f3` (Default system workflow "Draft" step)
        in: path
        name: stepId
        required: true
        schema:
          type: string
      - description: |-
          Identifier of a workflow action.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: actionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowActionView"
          description: Action returned successfully from step
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found within specified step
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find a workflow action within a step
      tags:
      - Workflow
  /v1/workflow/system/actions:
    put:
      description: |-
        This operation allows you to save a [default system action](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions) mapping. This requires:

        1. Selecting a default system action to be mapped;
        2. Specifying a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions) to be performed when that system action is called;
        3. Associating this mapping with either a [workflow scheme](https://www.dotcms.com/docs/latest/managing-workflows#Schemes) or a [content type](https://www.dotcms.com/docs/latest/content-types).

        See the request body below for further details.
      operationId: putSaveSystemActions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowSystemActionForm"
        description: |-
          Body consists of a JSON object with the following properties:

          | Property | Type | Description |
          |-|-|-|
          | `systemAction` | String | A default system action, such as `NEW` or `PUBLISH`. |
          | `actionId` | String | The identifier of an action that will be performed by the specified system action. |
          | `schemeId` | String | The identifier of a workflow scheme to be associated with the system action. |
          | `contentTypeVariable` | String | The variable of a content type to be associated with the system action. Note that the content type must already have the schema assigned as one of its valid workflows in order to bind a system action from said schema. |

          If both the `schemeId` and `contentTypeVariable` are specified, the scheme identifier takes precedence, and the content type variable is disregarded.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBulkActionsResultView"
          description: Success
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Save a default system action mapping
      tags:
      - Workflow
  /v1/workflow/system/actions/{identifier}:
    delete:
      description: |-
        Deletes a [default system action](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions) binding.

        Returns the deleted system action object.

        This method is minimally destructive, as it neither deletes a [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions), nor removes any system action category. Instead, it dissolves the association between the two, which can be re-established any time.

        To find a suitable identifier, you can use `GET /system/actions/{workflowActionId}` and find it in the immediate `identifier` property of any of the objects returned in the entity.
      operationId: deleteSystemActionByActionId
      parameters:
      - description: |-
          Identifier of the system action mapping to delete.

          Example value: `59995336-187e-442a-b398-04b9f137eabd` (Demo starter binding that maps `DELETE` system action to the "Destroy" workflow action for the Blog content type)
        in: path
        name: identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySystemActionWorkflowActionMapping"
          description: System action binding deleted successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Delete default system action binding by action id
      tags:
      - Workflow
  /v1/workflow/system/actions/{workflowActionId}:
    get:
      description: "Returns a list of [default system actions](https://www.dotcms.com/docs/latest/managing-workflows#DefaultActions)\
        \ associated with a specified [workflow action](https://www.dotcms.com/docs/latest/managing-workflows#Actions)."
      operationId: getSystemActionsByActionId
      parameters:
      - description: |-
          Identifier of the workflow action to return.

          Example value: `b9d89c80-3d88-4311-8365-187323c96436` (Default system workflow "Publish" action)
        in: path
        name: workflowActionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySystemActionWorkflowActionMappings"
          description: Action(s) returned successfully
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "404":
          description: Workflow action not found
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find default system actions by workflow action id
      tags:
      - Workflow
  /v1/workflow/tasks/history/comments/{contentletIdentifier}:
    get:
      description: |-
        Retrieve the workflow tasks comments of a contentlet by its [id](https://www.dotcms.com/docs/latest/content-versions#IdentifiersInodes).

        Returns an object containing the associated [workflow history or comments]https://www2.dotcms.com/docs/latest/workflow-tasks, [workflow task]
      operationId: getWorkflowTasksHistoryComments
      parameters:
      - description: |+
          Id of content  to inspect for workflow tasks.

        in: path
        name: contentletIdentifier
        required: true
        schema:
          type: string
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowHistoryCommentsView"
          description: Action(s) returned successfully
        "400":
          description: Bad Request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "500":
          description: Internal Server Error
      summary: Find workflow tasks history and comments of content
      tags:
      - Workflow
  /v1/workflow/{contentletId}/comments:
    post:
      description: |-
        Create a [workflow comment].

         Returns created workflow comment on success.
      operationId: postSaveComment
      parameters:
      - description: Identifier of contentlet to add comment.
        in: path
        name: contentletId
        required: true
        schema:
          type: string
      - description: Language version of target content.
        in: query
        name: language
        schema:
          type: string
          default: "-1"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkflowCommentForm"
        description: |
          The request body consists of the following three properties:

          | Property | Type | Description |
          |-|-|-|
          | `comment` | String | The workflow comment. |
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityWorkflowCommentView"
          description: Copied workflow comment successfully
        "400":
          description: Bad request
        "401":
          description: Invalid User
        "403":
          description: Forbidden
        "406":
          description: Not Acceptable
        "415":
          description: Unsupported Media Type
        "500":
          description: Internal Server Error
      summary: Create a workflow comment
      tags:
      - Workflow
  /v1/{a}:
    get:
      description: Comprehensive health check for dotCMS startup and subsystems status
      operationId: heavyCheck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMonitorStatsView"
          description: System is healthy
        "403":
          content:
            application/json: {}
          description: Forbidden - access not granted
        "503":
          content:
            application/json: {}
          description: Service unavailable - system not healthy
      summary: Heavy system check
      tags:
      - System Monitoring
  /v1/{a}/{a}:
    get:
      description: Checks if the system is ready to serve traffic (alias for heavy
        check)
      operationId: ready
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityMonitorStatsView"
          description: System is ready
        "403":
          content:
            application/json: {}
          description: Forbidden - access not granted
        "503":
          content:
            application/json: {}
          description: Service unavailable - system not ready
      summary: System ready check
      tags:
      - System Monitoring
  /v2/contenttype/{typeIdOrVarName}/fields:
    delete:
      deprecated: true
      description: Deletes multiple fields from a content type by their field IDs.
        This v2 endpoint is deprecated - use v3 API instead.
      operationId: deleteFields_1
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        description: Array of field IDs to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldOperationView"
          description: Fields deleted successfully
        "400":
          description: Bad request - invalid field IDs
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type or fields not found
        "500":
          description: Internal server error
      summary: Delete multiple fields (deprecated v2)
      tags:
      - Content Type Field
    get:
      deprecated: true
      description: Retrieves all fields for a specific content type. This v2 endpoint
        is deprecated - use v3 API instead.
      operationId: getContentTypeFields_1
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldListView"
          description: Fields retrieved successfully
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type not found
        "500":
          description: Internal server error
      summary: Get content type fields (deprecated v2)
      tags:
      - Content Type Field
    post:
      description: Creates a new field for a content type. The field definition is
        provided as JSON in the request body.
      operationId: createContentTypeField_1
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field JSON definition
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldView"
          description: Field created successfully
        "400":
          description: Bad request - invalid field data or field ID should not be
            set
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type not found
        "500":
          description: Internal server error
      summary: Create content type field
      tags:
      - Content Type Field
    put:
      deprecated: true
      description: Updates multiple fields for a content type. This v2 endpoint is
        deprecated - use v3 API instead.
      operationId: updateFields_1
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Fields JSON data
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldListView"
          description: Fields updated successfully
        "400":
          description: Bad request - invalid field data
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type not found
        "500":
          description: Internal server error
      summary: Update content type fields (deprecated v2)
      tags:
      - Content Type Field
  /v2/contenttype/{typeIdOrVarName}/fields/id/{fieldId}:
    delete:
      description: Deletes a specific field from a content type by its unique field
        ID. This removes the field and all its data permanently.
      operationId: deleteContentTypeFieldById_1
      parameters:
      - description: Field ID to delete
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldDeletionView"
          description: Field deleted successfully
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Field not found
        "500":
          description: Internal server error
      summary: Delete content type field by ID
      tags:
      - Content Type Field
    get:
      description: Retrieves a specific field from a content type by its unique field
        ID.
      operationId: getContentTypeFieldById_1
      parameters:
      - description: Field ID
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldView"
          description: Field retrieved successfully
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Field not found
        "500":
          description: Internal server error
      summary: Get content type field by ID
      tags:
      - Content Type Field
    put:
      description: Updates a specific field in a content type by its field ID. The
        field must have an ID set in the JSON data.
      operationId: updateContentTypeFieldById_1
      parameters:
      - description: Field ID to update
        in: path
        name: fieldId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field JSON data with updates
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldView"
          description: Field updated successfully
        "400":
          description: Bad request - invalid field data or field ID not set
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Field not found
        "500":
          description: Internal server error
      summary: Update content type field by ID
      tags:
      - Content Type Field
  /v2/contenttype/{typeIdOrVarName}/fields/var/{fieldVar}:
    delete:
      description: Deletes a specific field from a content type by its variable name.
        This removes the field and all its data permanently.
      operationId: deleteContentTypeFieldByVar_1
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      - description: Field variable name to delete
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldDeletionView"
          description: Field deleted successfully
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type or field not found
        "500":
          description: Internal server error
      summary: Delete content type field by variable name
      tags:
      - Content Type Field
    get:
      description: Retrieves a specific field from a content type by its variable
        name.
      operationId: getContentTypeFieldByVar_1
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      - description: Field variable name
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldView"
          description: Field retrieved successfully
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type or field not found
        "500":
          description: Internal server error
      summary: Get content type field by variable name
      tags:
      - Content Type Field
    put:
      description: Updates a specific field in a content type by its variable name.
        The field definition is provided as JSON in the request body.
      operationId: updateContentTypeFieldByVar_1
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      - description: Field variable name to update
        in: path
        name: fieldVar
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Field JSON data with updates
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityFieldView"
          description: Field updated successfully
        "400":
          description: Bad request - invalid field data or field ID not set
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type or field not found
        "500":
          description: Internal server error
      summary: Update content type field by variable name
      tags:
      - Content Type Field
  /v2/languages:
    get:
      description: "Returns an array with all available languages. Can optionally\
        \ filter by content inode to show only languages available for specific content,\
        \ and include language variable counts."
      operationId: list_13
      parameters:
      - description: Content inode to filter languages by (optional)
        in: query
        name: contentInode
        schema:
          type: string
      - description: "Whether to include language variable counts (default: false)"
        in: query
        name: countLangVars
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageListView"
          description: Languages retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List all languages
      tags:
      - Internationalization
    post:
      description: "Creates a new language in the system. Returns language details\
        \ including ID, language code, country code, language name, and country name."
      operationId: saveLanguage
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageForm"
        description: Language form containing language details to create
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageView"
          description: Language created successfully or already exists
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access languages portlet
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create language
      tags:
      - Internationalization
  /v2/languages/_getdefault:
    get:
      description: Returns the current default language in the dotCMS instance.
      operationId: getDefaultLanguage
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageObjectView"
          description: Default language retrieved successfully
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get default language
      tags:
      - Internationalization
  /v2/languages/i18n:
    post:
      description: Retrieves internationalization messages. This method delegates
        to the v1 LanguagesResource.
      operationId: getMessages_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/I18NForm"
        description: "Internationalization form with language, country, and message\
          \ keys"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageMessagesView"
          description: Messages retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid form data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get internationalization messages
      tags:
      - Internationalization
  /v2/languages/id/{languageid}:
    get:
      description: Retrieves a specific language by its ID. Returns language details
        including whether it's the default language.
      operationId: get_8
      parameters:
      - description: Language ID to retrieve
        in: path
        name: languageid
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageView"
          description: Language retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "404":
          content:
            application/json: {}
          description: Language not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get language by ID
      tags:
      - Internationalization
  /v2/languages/iso:
    get:
      description: "Returns lists of all ISO standard languages and countries with\
        \ their codes and display names, sorted alphabetically by name."
      operationId: getIsoLanguagesAndCountries
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityIsoLanguagesCountriesView"
          description: ISO languages and countries retrieved successfully
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get ISO languages and countries
      tags:
      - Internationalization
  /v2/languages/variables:
    get:
      description: Gets all language variables in the system organized by key. Supports
        pagination and optional null value rendering.
      operationId: getVariables
      parameters:
      - description: "Whether to render null values in the response (default: true)"
        in: query
        name: renderNulls
        schema:
          type: boolean
          default: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageVariablePageView"
          description: Language variables retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access languages portlet
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get language variables
      tags:
      - Internationalization
  /v2/languages/{languageId}:
    delete:
      description: Deletes an existing language from the system. The language must
        exist and the user must have appropriate permissions.
      operationId: deleteLanguage
      parameters:
      - description: ID of the language to delete
        in: path
        name: languageId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageOperationView"
          description: Language deleted successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access languages portlet
        "404":
          content:
            application/json: {}
          description: Language not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete language
      tags:
      - Internationalization
    put:
      description: Updates an existing language's information. Requires language ID
        and updated language form data.
      operationId: updateLanguage
      parameters:
      - description: ID of the language to update
        in: path
        name: languageId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageForm"
        description: Language form containing updated language details
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageView"
          description: Language updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language data or ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access languages portlet
        "404":
          content:
            application/json: {}
          description: Language not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update language
      tags:
      - Internationalization
  /v2/languages/{languageTag}:
    get:
      description: Retrieves a language by its language tag (locale). The language
        tag can be validated strictly or flexibly depending on the strict parameter.
      operationId: getFromLanguageTag
      parameters:
      - description: Language tag (locale) to retrieve
        in: path
        name: languageTag
        required: true
        schema:
          type: string
      - description: "Whether to enforce strict Locale validation (default: false)"
        in: query
        name: strict
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageView"
          description: Language retrieved successfully
        "404":
          content:
            application/json: {}
          description: Language not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get language by language tag
      tags:
      - Internationalization
    post:
      description: Creates a new language from a language tag (locale). The language
        tag can be in valid Locale format or custom format depending on strict parameter.
      operationId: saveFromLanguageTag
      parameters:
      - description: Language tag (locale) to create language from
        in: path
        name: languageTag
        required: true
        schema:
          type: string
      - description: "Whether to enforce strict Locale validation (default: false)"
        in: query
        name: strict
        schema:
          type: boolean
          default: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageView"
          description: Language created successfully or already exists
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language tag
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access languages portlet
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create language from language tag
      tags:
      - Internationalization
  /v2/languages/{language}/_makedefault:
    put:
      description: Sets the specified language as the default language for the system.
        Optionally triggers a job to transfer assets from the old default language.
      operationId: makeDefault_1
      parameters:
      - description: ID of the language to make default
        in: path
        name: language
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MakeDefaultLangForm"
        description: Form specifying whether to fire transfer assets job
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageView"
          description: Default language changed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language ID
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access languages portlet
        "404":
          content:
            application/json: {}
          description: Language not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Make language default
      tags:
      - Internationalization
  /v2/languages/{language}/keys:
    get:
      description: "Gets all messages from the specified language including properties\
        \ file messages, language keys, and language variables. Supports both language\
        \ codes (en, it) and language_country codes (en_us, it_it)."
      operationId: getAllMessages
      parameters:
      - description: "Language code (e.g., 'en', 'it') or language_country code (e.g.,\
          \ 'en_us', 'it_it')"
        in: path
        name: language
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityLanguageMessagesView"
          description: Language messages retrieved successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid language code
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get all language messages
      tags:
      - Internationalization
  /v2/tags:
    get:
      description: "Lists all tags based on provided criteria. If a tag name is provided,\
        \ performs a search-by-name (like) operation that can be delimited by site\
        \ ID. If no matches are found against the site ID, searches global tags."
      operationId: list_14
      parameters:
      - description: Name of the tag to search for (optional)
        in: query
        name: name
        schema:
          type: string
      - description: ID of the site where the tag lives (optional)
        in: query
        name: siteId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagMapView"
          description: Tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags portlet
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: List tags
      tags:
      - Tags
    post:
      description: Creates one or more tags and optionally links them to an owner/user.
        Tags can be created with site-specific scoping.
      operationId: addTag_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagForm"
        description: Tag form containing tags to create with optional owner assignment
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagMapView"
          description: Tags created successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid tag data or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to create tags
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Create tags
      tags:
      - Tags
    put:
      description: "Updates the information belonging to a specific tag. Requires\
        \ tag ID, site ID, and new tag name."
      operationId: updateTag_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTagForm"
        description: "Update tag form containing tag ID, site ID, and new tag name"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagMapView"
          description: Tag updated successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid or incomplete tag data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to update tags
        "404":
          content:
            application/json: {}
          description: Tag not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Update tag
      tags:
      - Tags
  /v2/tags/import:
    post:
      description: Imports tags from a CSV file. The CSV file should contain tag data
        in the expected format for bulk tag creation.
      operationId: importTags_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: CSV file containing tag data for import
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Tags imported successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid CSV file format or data
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to import tags
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Import tags from CSV
      tags:
      - Tags
  /v2/tags/inode/{inode}:
    delete:
      description: Breaks the link between an inode and all its associated tags. Removes
        all tag associations for the specified content but does not delete the tags
        themselves.
      operationId: deleteTagInodesByInode_1
      parameters:
      - description: Inode to remove tag associations from
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Tag-inode associations deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to modify tag associations
        "404":
          content:
            application/json: {}
          description: No tag associations found for the specified inode
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete tag-inode associations
      tags:
      - Tags
    get:
      description: Retrieves all tags associated with a given inode. Returns tag-inode
        relationships for the specified content.
      operationId: findTagsByInode_1
      parameters:
      - description: Inode to retrieve tags for
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagInodesMapView"
          description: Tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags
        "404":
          content:
            application/json: {}
          description: No tags found for the specified inode
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get tags by inode
      tags:
      - Tags
  /v2/tags/tag/{nameOrId}/inode/{inode}:
    put:
      description: "Binds tags with a given inode. Lookup can be done via tag name\
        \ or ID. If tag name matches multiple tags, all matching tags will be bound.\
        \ Use tag ID for specific binding."
      operationId: linkTagsAndInode_1
      parameters:
      - description: Name or UUID of the tag to link
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      - description: Inode to link the tag(s) to
        in: path
        name: inode
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagInodesMapView"
          description: Tags linked to inode successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid tag name/ID or inode
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to link tags
        "404":
          content:
            application/json: {}
          description: Tag not found by the specified name or ID
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Link tags to inode
      tags:
      - Tags
  /v2/tags/user/{userId}:
    get:
      description: Retrieves all tags owned by a specific user. Returns tags that
        were explicitly linked to the user during creation.
      operationId: getTagsByUserId_1
      parameters:
      - description: User ID to retrieve tags for
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagMapView"
          description: User tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags
        "404":
          content:
            application/json: {}
          description: No tags found for the specified user
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get tags by user ID
      tags:
      - Tags
  /v2/tags/{nameOrId}:
    get:
      description: "Retrieves tags by name or ID. If the provided value is a valid\
        \ UUID, performs search-by-ID and returns a single result. Otherwise, searches\
        \ by name and returns all matching tags."
      operationId: getTagsByNameOrId_1
      parameters:
      - description: Name or UUID of the tag to search for
        in: path
        name: nameOrId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityTagMapView"
          description: Tags retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to access tags
        "404":
          content:
            application/json: {}
          description: No tags found by the specified name or ID
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get tags by name or ID
      tags:
      - Tags
  /v2/tags/{tagId}:
    delete:
      description: Deletes a tag based on its ID. The tag must exist and the user
        must have appropriate permissions.
      operationId: delete_18
      parameters:
      - description: ID of the tag to delete
        in: path
        name: tagId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntityBooleanView"
          description: Tag deleted successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions to delete tags
        "404":
          content:
            application/json: {}
          description: Tag not found
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Delete tag
      tags:
      - Tags
  /v3/contenttype/{typeIdOrVarName}/fields:
    delete:
      description: Deletes a set of fields from a content type and returns the new
        layout. Prevents deletion of fields that are used as publish or expire date
        fields at the content type level.
      operationId: deleteFields_2
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteFieldsForm"
        description: Delete fields form containing field IDs to delete
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Response containing updated layout and list of deleted
                  field IDs
          description: Fields deleted successfully and new layout returned
        "400":
          description: Bad request - invalid field IDs or field is used as publish/expire
            field
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type or fields not found
        "500":
          description: Internal server error
      summary: Delete content type fields
      tags:
      - Content Type Field
    get:
      description: "Returns the content type's field layout structure. If the content\
        \ type has an invalid layout, it will be fixed before returning. This endpoint\
        \ doesn't make any changes to the database."
      operationId: getContentTypeFields_2
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Content type field layout structure
          description: Content type layout retrieved successfully
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type not found
        "500":
          description: Internal server error
      summary: Get content type field layout
      tags:
      - Content Type Field
  /v3/contenttype/{typeIdOrVarName}/fields/allfields:
    get:
      description: Returns the list of fields in a Content Type that meet the specified
        criteria.
      operationId: allfields
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      - in: query
        name: filter
        schema:
          type: array
          items:
            type: string
            enum:
            - REQUIRED
            - USER_SEARCHABLE
            - SYSTEM_INDEXED
            - SHOW_IN_LIST
            - UNIQUE
          uniqueItems: true
      requestBody:
        content:
          '*/*':
            examples:
              filter:
                description: filter
                summary: Filter fields by one or more of the specified criteria
                value: "REQUIRED,SYSTEM_INDEXED,UNIQUE,SHOW_IN_LIST,USER_SEARCHABLE"
      responses:
        "200":
          content:
            application/json:
              example:
                entity:
                - clazz: com.dotcms.contenttype.model.field.ImmutableTextField
                  contentTypeId: 3b70f386cf65117a675f284eea928415
                  dataType: TEXT
                  dbColumn: text2
                  defaultValue: null
                  fixed: false
                  forceIncludeInApi: false
                  hint: null
                  iDate: 1732992811000
                  id: e39533a92ee05d8c083f7e6a1a5ee5e5
                  indexed: true
                  listed: false
                  modDate: 1732992838000
                  name: Description
                  owner: null
                  readOnly: false
                  regexCheck: null
                  relationType: null
                  required: true
                  searchable: false
                  sortOrder: 3
                  unique: true
                  values: null
                  variable: description
                errors: []
                i18nMessagesMap: {}
                messages: []
                pagination: null
                permissions: []
          description: Content type retrieved successfully
        "400":
          description: "Bad Request, when using invalid filter names"
        "401":
          description: Invalid User
        "404":
          description: Content Type was not found
        "500":
          description: Internal Server Error
      summary: Returns filtered Content Type fields
      tags:
      - Content Type Field
  /v3/contenttype/{typeIdOrVarName}/fields/move:
    put:
      description: "Moves fields within a content type layout and returns the new\
        \ layout structure. Can also create new fields when included in the layout.\
        \ The sortOrder attribute is ignored as array index determines order. If the\
        \ content type has an invalid layout, it will be fixed first."
      operationId: moveFields
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MoveFieldsForm"
        description: Move fields form containing the new layout structure
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: New content type layout with reorganized fields
          description: Fields moved successfully and new layout returned
        "400":
          description: Bad request - invalid layout structure
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type not found
        "500":
          description: Internal server error
      summary: Move and reorganize fields
      tags:
      - Content Type Field
  /v3/contenttype/{typeIdOrVarName}/fields/{id}:
    put:
      description: "Updates a field in a content type and returns the new content\
        \ type layout. If the content type has an invalid layout, it will be fixed\
        \ before the field update. The sortOrder attribute is ignored if sent."
      operationId: updateField
      parameters:
      - description: Content type ID or variable name
        in: path
        name: typeIdOrVarName
        required: true
        schema:
          type: string
      - description: Field ID to update
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFieldForm"
        description: Update field form containing field attributes
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Updated content type layout with field changes
          description: Field updated successfully and layout returned
        "400":
          description: Bad request - invalid field data
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "404":
          description: Content type or field not found
        "500":
          description: Internal server error
      summary: Update content type field
      tags:
      - Content Type Field
  /vtl/dynamic:
    get:
      description: Executes a dynamically provided Velocity template sent in the request
        body. The template code is embedded in the request and processed on-demand
        without requiring a file on the server.
      operationId: dynamicGet_2
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template syntax or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic VTL template
      tags:
      - VTL
    post:
      description: Executes a dynamically provided Velocity template sent in the request
        body via POST method. The template code is embedded in the request and processed
        on-demand without requiring a file on the server.
      operationId: dynamicPost_2
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template syntax or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic VTL template via POST
      tags:
      - VTL
    put:
      description: Executes a dynamically provided Velocity template sent in the request
        body via PUT method. The template code is embedded in the request and processed
        on-demand without requiring a file on the server.
      operationId: dynamicPut_2
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template syntax or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic VTL template via PUT
      tags:
      - VTL
  /vtl/dynamic/{pathParam}:
    delete:
      description: Executes a dynamically provided Velocity template sent in the request
        body via DELETE method. The template code is embedded in the request and processed
        on-demand without requiring a file on the server.
      operationId: dynamicDelete_1
      parameters:
      - description: Additional path parameters for VTL template processing
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template syntax or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic VTL template via DELETE with path parameters
      tags:
      - VTL
    get:
      description: Same as regular GET but supporting sending the velocity to be rendered
        embedded (properly escaped) in the JSON in a 'velocity' property
      operationId: dynamicGet_3
      parameters:
      - description: Additional path parameters
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid embedded velocity template
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic GET request with embedded VTL
      tags:
      - VTL
    patch:
      description: Executes a dynamically provided Velocity template sent in the request
        body via PATCH method. The template code is embedded in the request and processed
        on-demand without requiring a file on the server.
      operationId: dynamicPatch_1
      parameters:
      - description: Additional path parameters for VTL template processing
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template syntax or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic VTL template via PATCH with path parameters
      tags:
      - VTL
    post:
      description: Executes a dynamically provided Velocity template sent in the request
        body via POST method. The template code is embedded in the request and processed
        on-demand without requiring a file on the server.
      operationId: dynamicPost_3
      parameters:
      - description: Additional path parameters for VTL template processing
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template syntax or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic VTL template via POST with path parameters
      tags:
      - VTL
    put:
      description: Executes a dynamically provided Velocity template sent in the request
        body via PUT method. The template code is embedded in the request and processed
        on-demand without requiring a file on the server.
      operationId: dynamicPut_3
      parameters:
      - description: Additional path parameters for VTL template processing
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        description: JSON string or plain text containing embedded velocity template
      responses:
        "200":
          content:
            application/json: {}
          description: Dynamic VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template syntax or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process dynamic VTL template via PUT with path parameters
      tags:
      - VTL
  /vtl/{folder}:
    delete:
      description: "Returns the output of a convention based 'delete.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine."
      operationId: delete_16
      parameters:
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: JSON object with parameters for VTL template processing
        description: Request body parameters for template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process DELETE request with VTL template (folder only)
      tags:
      - VTL
    get:
      description: "Returns the output of a convention based 'get.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine."
      operationId: get_6
      parameters:
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: JSON object with parameters for VTL template processing
        description: Request body parameters for template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process GET request with VTL template (folder only)
      tags:
      - VTL
    patch:
      description: "Returns the output of a convention based 'patch.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine.\
        \ Supports multipart form data for file uploads and complex data submission."
      operationId: patchMultipart_2
      parameters:
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing files and form fields for VTL
          template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid template, folder, or multipart data"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found in the specified folder
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process VTL template via PATCH with multipart form data
      tags:
      - VTL
    post:
      description: "Returns the output of a convention based 'post.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine.\
        \ Supports multipart form data for file uploads and complex data submission."
      operationId: postMultipart_2
      parameters:
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing files and form fields for VTL
          template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid template, folder, or multipart data"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found in the specified folder
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process VTL template via POST with multipart form data
      tags:
      - VTL
    put:
      description: "Returns the output of a convention based 'put.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine.\
        \ Supports multipart form data for file uploads and complex data submission."
      operationId: putMultipart_2
      parameters:
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing files and form fields for VTL
          template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid template, folder, or multipart data"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found in the specified folder
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process VTL template via PUT with multipart form data
      tags:
      - VTL
  /vtl/{folder}/{pathParam}:
    delete:
      description: "Returns the output of a convention based 'delete.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine.\
        \ The VTL code determines whether the response is JSON, XML, or plain text."
      operationId: delete_17
      parameters:
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      - description: Additional path parameters
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: JSON object with parameters for VTL template processing
        description: Request body parameters for template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process DELETE request with VTL template
      tags:
      - VTL
    get:
      description: "Returns the output of a convention based 'get.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine.\
        \ The VTL code determines whether the response is JSON, XML, or plain text."
      operationId: get_7
      parameters:
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      - description: Additional path parameters
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: JSON object with parameters for VTL template processing
        description: Request body parameters for template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: Bad request - invalid template or parameters
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process GET request with VTL template
      tags:
      - VTL
    patch:
      description: "Returns the output of a convention based 'patch.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine.\
        \ Supports multipart form data for file uploads and complex data submission\
        \ with additional path parameters."
      operationId: patchMultipart_3
      parameters:
      - description: Additional path parameters for VTL template processing
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing files and form fields for VTL
          template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid template, folder, path parameters, or\
            \ multipart data"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found in the specified folder
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process VTL template via PATCH with multipart form data and path parameters
      tags:
      - VTL
    post:
      description: Same as regular POST but supporting multipart request for file
        uploads along with VTL template processing
      operationId: postMultipart_3
      parameters:
      - description: Additional path parameters
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data for file uploads and parameters
      responses:
        "200":
          content:
            application/json: {}
          description: VTL template processed successfully with multipart data
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid template, parameters, or multipart data"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process POST multipart request with VTL template
      tags:
      - VTL
    put:
      description: "Returns the output of a convention based 'put.vtl' file, located\
        \ under the given folder after being evaluated using the velocity engine.\
        \ Supports multipart form data for file uploads and complex data submission\
        \ with additional path parameters."
      operationId: putMultipart_3
      parameters:
      - description: Additional path parameters for VTL template processing
        in: path
        name: pathParam
        required: true
        schema:
          type: string
          pattern: .*
      - description: VTL template folder name
        in: path
        name: folder
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/FormDataMultiPart"
        description: Multipart form data containing files and form fields for VTL
          template processing
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                description: Dynamic content generated by VTL template processing
                  - format determined by template logic
          description: VTL template processed successfully
        "400":
          content:
            application/json: {}
          description: "Bad request - invalid template, folder, path parameters, or\
            \ multipart data"
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication may be required
        "404":
          content:
            application/json: {}
          description: VTL template not found in the specified folder
        "500":
          content:
            application/json: {}
          description: Internal server error during template processing
      summary: Process VTL template via PUT with multipart form data and path parameters
      tags:
      - VTL
  /widget/{params}:
    get:
      description: Renders a custom widget by processing its Velocity templates. Supports
        widget lookup by ID or inode with language and live/working version options.
        Executes widget pre-execute code and main widget code.
      operationId: getWidget
      parameters:
      - description: "URL parameters including id, inode, language, and live options"
        in: path
        name: params
        required: true
        schema:
          type: string
          pattern: .*
      responses:
        "200":
          content:
            text/plain: {}
          description: Widget rendered successfully
        "400":
          content:
            text/plain: {}
          description: Bad request - missing required ID or inode parameter
        "401":
          content:
            text/plain: {}
          description: Unauthorized - authentication may be required for working version
        "404":
          content:
            text/plain: {}
          description: Widget not found
        "500":
          content:
            text/plain: {}
          description: Internal server error during widget processing
      summary: Render widget
      tags:
      - Widgets
  /ws/v1/system/events:
    get:
      description: Establishes an asynchronous long polling connection to receive
        system events. Connection will timeout after configured seconds (default 30s).
        Uses suspended AsyncResponse for efficient resource utilization.
      operationId: getEvents
      parameters:
      - description: Timestamp of last callback to filter events (optional)
        in: query
        name: lastcallback
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySystemEventsView"
          description: System events retrieved successfully via async response
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
        "503":
          content:
            application/json: {}
          description: Service unavailable - operation timeout
      summary: Get asynchronous system events
      tags:
      - Administration
  /ws/v1/system/syncevents:
    get:
      description: Retrieves system events synchronously using long polling. Alternative
        to WebSocket when WebSocket connection is not available. Returns immediately
        with available events.
      operationId: getSyncEvents
      parameters:
      - description: Timestamp of last callback to filter events (optional)
        in: query
        name: lastcallback
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseEntitySystemEventsView"
          description: System events retrieved successfully
        "401":
          content:
            application/json: {}
          description: Unauthorized - authentication required
        "403":
          content:
            application/json: {}
          description: Forbidden - insufficient permissions
        "500":
          content:
            application/json: {}
          description: Internal server error
      summary: Get synchronous system events
      tags:
      - Administration
components:
  schemas:
    ACheckerResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/AccessibilityResult"
        lang:
          type: string
        results:
          type: array
          items:
            $ref: "#/components/schemas/AccessibilityResult"
    AIImageRequestDTO:
      type: object
      properties:
        model:
          type: string
        numberOfImages:
          type: integer
          format: int32
        prompt:
          type: string
        size:
          type: string
    AccessibilityForm:
      type: object
      additionalProperties:
        type: string
      properties:
        empty:
          type: boolean
    AccessibilityResult:
      type: object
      properties:
        check:
          $ref: "#/components/schemas/CheckBean"
        col_number:
          type: integer
          format: int32
        cssCode:
          type: string
        htmlCode:
          type: string
        image:
          type: string
        imageAlt:
          type: string
        line_number:
          type: integer
          format: int32
        success:
          type: boolean
    AccruedTag:
      type: object
      properties:
        count:
          type: integer
          format: int32
        tag:
          type: string
    ActionFail:
      type: object
      properties:
        errorMessage:
          type: string
        identifier:
          type: string
        inode:
          type: string
    ActionInputView:
      type: object
      properties:
        body:
          type: object
          additionalProperties:
            type: object
        id:
          type: string
    AddVariantForm:
      type: object
      properties:
        description:
          type: string
    AdditionalParamsBean:
      type: object
      properties:
        additionalParamsMap:
          type: object
          additionalProperties:
            type: object
        assignComment:
          $ref: "#/components/schemas/AssignCommentBean"
        assignCommentBean:
          $ref: "#/components/schemas/AssignCommentBean"
        pushPublish:
          $ref: "#/components/schemas/PushPublishBean"
        pushPublishBean:
          $ref: "#/components/schemas/PushPublishBean"
    AnalyticsEventsResult:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Error"
        failed:
          type: integer
          format: int64
        status:
          type: string
          enum:
          - SUCCESS
          - PARTIAL_SUCCESS
          - ERROR
        success:
          type: integer
          format: int64
    AnalyticsQuery:
      type: object
      properties:
        dimensions:
          type: array
          items:
            type: string
          uniqueItems: true
        filters:
          type: string
        limit:
          type: integer
          format: int64
        measures:
          type: array
          items:
            type: string
          uniqueItems: true
        offset:
          type: integer
          format: int64
        order:
          type: string
        timeDimensions:
          type: string
    Announcement:
      type: object
      properties:
        announcementDate:
          type: string
          format: date-time
        announcementDateAsISO8601:
          type: string
        description:
          type: string
        identifier:
          type: string
        inode:
          type: string
        languageId:
          type: string
        modDate:
          type: string
          format: date-time
        modDateAsISO8601:
          type: string
        title:
          type: string
        type:
          type: string
        url:
          type: string
    ApiTokenForm:
      type: object
      properties:
        claims:
          type: object
          additionalProperties:
            type: object
        expirationSeconds:
          type: integer
          format: int32
        network:
          type: string
        shouldBeAdmin:
          type: boolean
        userId:
          type: string
    AppView:
      type: object
      properties:
        allowExtraParams:
          type: boolean
        configurationsCount:
          type: integer
          format: int64
        description:
          type: string
        iconUrl:
          type: string
        key:
          type: string
        name:
          type: string
        sites:
          type: array
          items:
            $ref: "#/components/schemas/SiteView"
        sitesWithWarnings:
          type: integer
          format: int32
    AssetInfoRequestForm:
      type: object
      properties:
        assetPath:
          type: string
    AssetsRequestForm:
      type: object
      properties:
        assetPath:
          type: string
        language:
          type: string
        live:
          type: boolean
    AssignCommentBean:
      type: object
      properties:
        assign:
          type: string
        comment:
          type: string
    AuthenticationForm:
      type: object
      properties:
        backEndLogin:
          type: boolean
        country:
          type: string
        language:
          type: string
        password:
          type: string
        rememberMe:
          type: boolean
        userId:
          type: string
    BaseContentTypesView:
      type: object
      properties:
        label:
          type: string
        name:
          type: string
        types:
          type: array
          items:
            $ref: "#/components/schemas/ContentTypeView"
    BayesianResult:
      type: object
      properties:
        differenceData:
          $ref: "#/components/schemas/DifferenceData"
        distributionPdfs:
          $ref: "#/components/schemas/SampleGroup"
        quantiles:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/QuantilePair"
          properties:
            empty:
              type: boolean
        results:
          type: array
          items:
            $ref: "#/components/schemas/VariantResult"
          properties:
            empty:
              type: boolean
            first:
              $ref: "#/components/schemas/VariantResult"
            last:
              $ref: "#/components/schemas/VariantResult"
        suggestedWinner:
          type: string
        value:
          type: number
          format: double
    BinaryField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    Body:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: "#/components/schemas/TemplateLayoutRow"
    BodyPart:
      type: object
      properties:
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            parameters:
              type: object
              additionalProperties:
                type: string
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
        messageBodyWorkers:
          $ref: "#/components/schemas/MessageBodyWorkers"
        parameterizedHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/ParameterizedHeader"
        parent:
          $ref: "#/components/schemas/MultiPart"
        providers:
          type: object
    BodyView:
      type: object
      properties:
        rows:
          type: array
          items:
            $ref: "#/components/schemas/TemplateLayoutRowView"
    BrowserQueryForm:
      type: object
      properties:
        extensions:
          type: array
          items:
            type: string
        filter:
          type: string
        hostFolderId:
          type: string
        languageId:
          type: integer
          format: int64
        maxResults:
          type: integer
          format: int32
        mimeTypes:
          type: array
          items:
            type: string
        offset:
          type: integer
          format: int32
        showArchived:
          type: boolean
        showDotAssets:
          type: boolean
        showFiles:
          type: boolean
        showFolders:
          type: boolean
        showLinks:
          type: boolean
        showPages:
          type: boolean
        showWorking:
          type: boolean
        sortBy:
          type: string
        sortByDesc:
          type: boolean
    BulkActionForm:
      type: object
      properties:
        contentletIds:
          type: array
          items:
            type: string
        query:
          type: string
    BulkActionView:
      type: object
      properties:
        schemes:
          type: array
          items:
            $ref: "#/components/schemas/BulkWorkflowSchemeView"
    BulkActionsResultView:
      type: object
      properties:
        fails:
          type: array
          items:
            $ref: "#/components/schemas/ActionFail"
        skippedCount:
          type: integer
          format: int64
        successCount:
          type: integer
          format: int64
    BulkResultView:
      type: object
      properties:
        fails:
          type: array
          items:
            $ref: "#/components/schemas/FailedResultView"
        skippedCount:
          type: integer
          format: int64
        successCount:
          type: integer
          format: int64
    BulkWorkflowSchemeView:
      type: object
      properties:
        scheme:
          $ref: "#/components/schemas/WorkflowScheme"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/BulkWorkflowStepView"
    BulkWorkflowStepView:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: "#/components/schemas/CountWorkflowAction"
        step:
          $ref: "#/components/schemas/CountWorkflowStep"
    Bundle:
      type: object
      properties:
        expireDate:
          type: string
          format: date-time
        filterKey:
          type: string
        forcePush:
          type: boolean
        id:
          type: string
        name:
          type: string
        operation:
          type: integer
          format: int32
        owner:
          type: string
        publishDate:
          type: string
          format: date-time
    BundleMap:
      type: object
      properties:
        bundleId:
          type: integer
          format: int64
        jarFile:
          type: string
        location:
          type: string
        separator:
          type: string
        state:
          type: integer
          format: int32
        symbolicName:
          type: string
        system:
          type: boolean
        version:
          type: string
    CacheProvider:
      type: object
      properties:
        distributed:
          type: boolean
        groups:
          type: array
          items:
            type: string
          uniqueItems: true
        initialized:
          type: boolean
        key:
          type: string
        name:
          type: string
        stats:
          $ref: "#/components/schemas/CacheProviderStats"
    CacheProviderStats:
      type: object
      properties:
        providerName:
          type: string
        statColumns:
          type: array
          items:
            type: string
        stats:
          type: array
          items:
            $ref: "#/components/schemas/CacheStats"
    CacheStats:
      type: object
      properties:
        statColumns:
          type: array
          items:
            type: string
          uniqueItems: true
    CategoryEditForm:
      type: object
      properties:
        categoryData:
          type: object
          additionalProperties:
            type: integer
            format: int32
        direction:
          type: string
        filter:
          type: string
        orderBy:
          type: string
        page:
          type: integer
          format: int32
        parentInode:
          type: string
        perPage:
          type: integer
          format: int32
        siteId:
          type: string
    CategoryField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    CategoryForm:
      type: object
      properties:
        active:
          type: boolean
        categoryName:
          type: string
        categoryVelocityVarName:
          type: string
        description:
          type: string
        inode:
          type: string
        key:
          type: string
        keywords:
          type: string
        parent:
          type: string
        siteId:
          type: string
        sortOrder:
          type: integer
          format: int32
    CategoryKeysForm:
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
    CategoryView:
      type: object
      properties:
        active:
          type: boolean
        categoryName:
          type: string
        categoryVelocityVarName:
          type: string
        description:
          type: string
        inode:
          type: string
        key:
          type: string
        keywords:
          type: string
        modDate:
          type: string
          format: date-time
        parent:
          type: string
        sortOrder:
          type: integer
          format: int32
    ChangeLoggerForm:
      type: object
      properties:
        level:
          type: string
        name:
          type: string
    CheckBean:
      type: object
      properties:
        check_id:
          type: integer
          format: int32
        confidence:
          type: integer
          format: int32
        confidenceEnum:
          type: string
          enum:
          - KNOWN
          - LIKELY
          - POTENTIAL
        decision_fail:
          type: string
        decision_pass:
          type: string
        description:
          type: string
        err:
          type: string
        func:
          type: string
        how_to_repair:
          type: string
        html_tag:
          type: string
        lang:
          type: string
        long_description:
          type: string
        name:
          type: string
        note:
          type: string
        open_to_public:
          type: integer
          format: int32
        question:
          type: string
        rationale:
          type: string
        repair_example:
          type: string
        search_str:
          type: string
        test_expected_result:
          type: string
        test_failed_result:
          type: string
        test_procedure:
          type: string
        user_id:
          type: integer
          format: int32
    CheckboxField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    ColumnField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    CompanyEmailForm:
      type: object
      properties:
        senderAndEmail:
          type: string
    CompletionsForm:
      type: object
      properties:
        contentType:
          type: array
          items:
            type: string
        fieldVar:
          type: string
        indexName:
          type: string
        language:
          type: integer
          format: int64
        model:
          type: string
        operator:
          type: string
        prompt:
          type: string
          maxLength: 4096
          minLength: 1
        responseFormat:
          type: object
          additionalProperties:
            type: object
        responseLengthTokens:
          type: integer
          format: int32
          minimum: 128
        searchLimit:
          type: integer
          format: int32
          maximum: 1000
          minimum: 1
        searchOffset:
          type: integer
          format: int32
          minimum: 0
        site:
          type: string
        stream:
          type: boolean
        temperature:
          type: number
          format: float
          maximum: 2
          minimum: 0
        threshold:
          type: number
          format: float
        user:
          $ref: "#/components/schemas/User"
    Condition:
      type: object
      properties:
        operator:
          type: string
          enum:
          - EQUALS
          - CONTAINS
          - EXISTS
        parameter:
          type: string
        value:
          type: object
    ConstantField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    Container:
      type: object
      properties:
        archived:
          type: boolean
        categoryId:
          type: string
        code:
          type: string
        deleted:
          type: boolean
        friendlyName:
          type: string
        getiDate:
          type: string
          format: date-time
        idate:
          type: string
          format: date-time
        identifier:
          type: string
        inode:
          type: string
        live:
          type: boolean
        locked:
          type: boolean
        maxContentlets:
          type: integer
          format: int32
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        new:
          type: boolean
        notes:
          type: string
        owner:
          type: string
        parentPermissionable:
          $ref: "#/components/schemas/Permissionable"
        parents:
          type: array
          items:
            type: object
          writeOnly: true
        permissionId:
          type: string
        permissionType:
          type: string
        postLoop:
          type: string
        preLoop:
          type: string
        showOnMenu:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        source:
          type: string
          enum:
          - UNKNOWN
          - DB
          - FILE
        title:
          type: string
        type:
          type: string
        useDiv:
          type: boolean
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    ContainerEntry:
      type: object
      properties:
        containerId:
          type: string
        containerUUID:
          type: string
        contentIds:
          type: array
          items:
            type: string
        personaTag:
          type: string
    ContainerForm:
      type: object
      properties:
        code:
          type: string
        containerStructures:
          type: array
          items:
            $ref: "#/components/schemas/ContainerStructure"
        dynamic:
          type: boolean
        friendlyName:
          type: string
        hostId:
          type: string
        identifier:
          type: string
        maxContentlets:
          type: integer
          format: int32
        notes:
          type: string
        owner:
          type: string
        postLoop:
          type: string
        preLoop:
          type: string
        showOnMenu:
          type: boolean
        sortContentletsBy:
          type: string
        sortOrder:
          type: integer
          format: int32
        staticify:
          type: boolean
        structureInode:
          type: string
        title:
          type: string
        useDiv:
          type: boolean
    ContainerRaw:
      type: object
      properties:
        container:
          $ref: "#/components/schemas/ContainerView"
        containerStructures:
          type: array
          items:
            $ref: "#/components/schemas/ContainerStructure"
        contentlets:
          type: object
          additionalProperties:
            type: array
            items:
              type: object
              additionalProperties:
                type: object
    ContainerStructure:
      type: object
      properties:
        code:
          type: string
        containerId:
          type: string
        containerInode:
          type: string
        contentTypeVar:
          type: string
        id:
          type: string
        structureId:
          type: string
    ContainerUUID:
      type: object
      properties:
        historyUUIDs:
          type: array
          items:
            type: string
        identifier:
          type: string
        uuid:
          type: string
    ContainerView:
      type: object
      properties:
        container:
          $ref: "#/components/schemas/Container"
        path:
          type: string
    ContentDisposition:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
        fileName:
          type: string
        modificationDate:
          type: string
          format: date-time
        parameters:
          type: object
          additionalProperties:
            type: string
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        type:
          type: string
    ContentForm:
      type: object
      properties:
        contentlet:
          type: object
          additionalProperties:
            type: object
    ContentImportForm:
      type: object
      properties:
        commitGranularity:
          type: integer
          format: int32
        contentType:
          type: string
        fields:
          type: array
          items:
            type: string
        language:
          type: string
        stopOnError:
          type: boolean
        workflowActionId:
          type: string
    ContentImportParamsSchema:
      type: object
      description: Schema for content import parameters.
      properties:
        file:
          type: string
          format: binary
          description: The CSV file to import.
        form:
          type: string
          description: JSON string representing import settings.
          example: "{\n  \"contentType\": \"activity\",\n  \"language\": \"en-US\"\
            ,\n  \"workflowActionId\": \"b9d89c80-3d88-4311-8365-187323c96436\",\n\
            \  \"fields\": [\"title\"]\n  \"stopOnError\":false \n  \"commitGranularity\"\
            : 100\n}"
      required:
      - file
      - form
    ContentReferenceView:
      type: object
      properties:
        container:
          $ref: "#/components/schemas/ContainerView"
        page:
          $ref: "#/components/schemas/IHTMLPage"
        personaName:
          type: string
    ContentReportView:
      type: object
      properties:
        contentTypeName:
          type: string
        entries:
          type: integer
          format: int64
    ContentSearchForm:
      type: object
    ContentType:
      type: object
      discriminator:
        propertyName: clazz
      properties:
        clazz:
          type: string
        owner:
          type: string
      required:
      - clazz
    ContentTypeForm:
      type: object
      properties:
        contentType:
          $ref: "#/components/schemas/ContentType"
        iterable:
          type: object
        requestJson:
          type: object
        systemActions:
          type: array
          items:
            $ref: "#/components/schemas/Tuple2SystemActionString"
        workflows:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowFormEntry"
    ContentTypeView:
      type: object
      properties:
        action:
          type: string
        inode:
          type: string
        name:
          type: string
        type:
          type: string
        variable:
          type: string
    Contentlet:
      type: object
      properties:
        archived:
          type: boolean
        categoryId:
          type: string
        contentTypeId:
          type: string
        dotAsset:
          type: boolean
        fileAsset:
          type: boolean
        folder:
          type: string
        form:
          type: boolean
        host:
          type: string
        htmlpage:
          type: boolean
        identifier:
          type: string
        indexPolicyDependencies:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
        inode:
          type: string
        keyValue:
          type: boolean
        languageId:
          type: integer
          format: int64
        languageVariable:
          type: boolean
        live:
          type: boolean
        locked:
          type: boolean
        lowIndexPriority:
          type: boolean
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        new:
          type: boolean
        owner:
          type: string
        permissionId:
          type: string
        permissionType:
          type: string
        persona:
          type: boolean
        sortOrder:
          type: integer
          format: int64
        structureInode:
          type: string
        systemHost:
          type: boolean
        title:
          type: string
        titleImage:
          $ref: "#/components/schemas/Field"
        type:
          type: string
        userAPI:
          $ref: "#/components/schemas/UserAPI"
        vanityUrl:
          type: boolean
        variantId:
          type: string
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    ContentletWorkflowStatusView:
      type: object
      properties:
        scheme:
          $ref: "#/components/schemas/WorkflowScheme"
        step:
          $ref: "#/components/schemas/WorkflowStep"
        task:
          $ref: "#/components/schemas/WorkflowTask"
    CopyContentTypeForm:
      type: object
      properties:
        folder:
          type: string
        host:
          type: string
        icon:
          type: string
        name:
          type: string
        variable:
          type: string
    CopyContentletForm:
      type: object
      properties:
        containerId:
          type: string
        contentId:
          type: string
        pageId:
          type: string
        personalization:
          type: string
        relationType:
          type: string
        treeOrder:
          type: integer
          format: int32
        variantId:
          type: string
    CopySiteForm:
      type: object
      properties:
        copyAll:
          type: boolean
        copyContentOnPages:
          type: boolean
        copyContentOnSite:
          type: boolean
        copyContentTypes:
          type: boolean
        copyFolders:
          type: boolean
        copyFromSiteId:
          type: string
        copyLinks:
          type: boolean
        copySiteVariables:
          type: boolean
        copyTemplatesContainers:
          type: boolean
        site:
          $ref: "#/components/schemas/SiteForm"
    CountView:
      type: object
      properties:
        count:
          type: integer
          format: int32
    CountWorkflowAction:
      type: object
      properties:
        conditionPresent:
          type: boolean
        count:
          type: integer
          format: int64
        moveable:
          type: boolean
        pushPublish:
          type: boolean
        workflowAction:
          $ref: "#/components/schemas/WorkflowAction"
    CountWorkflowStep:
      type: object
      properties:
        count:
          type: integer
          format: int64
        workflowStep:
          $ref: "#/components/schemas/WorkflowStep"
    CredibilityInterval:
      type: object
      properties:
        lower:
          type: number
          format: double
        upper:
          type: number
          format: double
    CustomField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    CustomPortletForm:
      type: object
      properties:
        baseTypes:
          type: string
        contentTypes:
          type: string
        dataViewMode:
          type: string
        portletId:
          type: string
        portletName:
          type: string
    DateField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    DateTimeField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    DeleteBundlesByIdentifierForm:
      type: object
      properties:
        identifiers:
          type: array
          items:
            type: string
    DeleteFieldsForm:
      type: object
      properties:
        fieldsID:
          type: array
          items:
            type: string
    DeleteForm:
      type: object
      properties:
        items:
          type: array
          items:
            type: string
    DeletePPQueueElementsByIdentifierForm:
      type: object
      properties:
        identifiers:
          type: array
          items:
            type: string
    DeleteSecretForm:
      type: object
      properties:
        key:
          type: string
        params:
          type: array
          items:
            type: string
          uniqueItems: true
        siteId:
          type: string
    DifferenceData:
      type: object
      properties:
        controlData:
          type: array
          items:
            type: number
            format: double
        differences:
          type: array
          items:
            type: number
            format: double
        relativeDifference:
          type: number
          format: double
        testData:
          type: array
          items:
            type: number
            format: double
    DoesNotExistException:
      type: object
      properties:
        cause:
          type: object
          properties:
            localizedMessage:
              type: string
            message:
              type: string
            stackTrace:
              type: array
              items:
                type: object
                properties:
                  classLoaderName:
                    type: string
                  className:
                    type: string
                  fileName:
                    type: string
                  lineNumber:
                    type: integer
                    format: int32
                  methodName:
                    type: string
                  moduleName:
                    type: string
                  moduleVersion:
                    type: string
                  nativeMethod:
                    type: boolean
        localizedMessage:
          type: string
        message:
          type: string
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              className:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              methodName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              nativeMethod:
                type: boolean
        suppressed:
          type: array
          items:
            type: object
            properties:
              localizedMessage:
                type: string
              message:
                type: string
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    className:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    methodName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    nativeMethod:
                      type: boolean
    DotAssetContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    EmbeddingsForm:
      type: object
      properties:
        fields:
          type: array
          items:
            type: string
        indexName:
          type: string
        limit:
          type: integer
          format: int32
          maximum: 1000
          minimum: 1
        model:
          type: string
        offset:
          type: integer
          format: int32
          minimum: 0
        query:
          type: string
          maxLength: 4096
          minLength: 1
        userId:
          type: string
        velocityTemplate:
          type: string
    EmptyField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    EndpointForm:
      type: object
      properties:
        address:
          type: string
        authorizationToken:
          type: string
        enabled:
          type: boolean
        environmentId:
          type: string
        name:
          type: string
        port:
          type: string
        protocol:
          type: string
        sending:
          type: boolean
    Environment:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        owner:
          type: string
        permissionId:
          type: string
        pushToAll:
          type: boolean
    EnvironmentForm:
      type: object
      properties:
        name:
          type: string
        pushMode:
          type: string
          enum:
          - PUSH_TO_ONE
          - PUSH_TO_ALL
        whoCanSend:
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        code:
          type: string
          enum:
          - REQUIRED_FIELD_MISSING
          - INVALID_STRING_TYPE
          - INVALID_JSON_OBJECT_TYPE
          - INVALID_JSON_ARRAY_TYPE
          - UNKNOWN_FIELD
          - INVALID_DATE_FORMAT
          - INVALID_SITE_KEY
        eventIndex:
          type: integer
          format: int32
        field:
          type: string
        message:
          type: string
    ErrorDetail:
      type: object
      properties:
        exceptionClass:
          type: string
        message:
          type: string
        processingStage:
          type: string
        stackTrace:
          type: string
        timestamp:
          type: string
          format: date-time
    ErrorEntity:
      type: object
      properties:
        errorCode:
          type: string
        fieldName:
          type: string
        message:
          type: string
    EventOutput:
      type: object
      properties:
        closed:
          type: boolean
        type:
          type: object
          properties:
            typeName:
              type: string
    ExcludedExperimentListForm:
      type: object
      properties:
        exclude:
          type: array
          items:
            type: string
    ExistingLanguagesForContentletView:
      type: object
      additionalProperties:
        type: object
      properties:
        empty:
          type: boolean
    ExistingLanguagesForPageView:
      type: object
      additionalProperties:
        type: object
      properties:
        empty:
          type: boolean
    Experiment:
      type: object
      properties:
        createdBy:
          type: string
        creationDate:
          type: string
          format: date-time
        description:
          type: string
        goals:
          $ref: "#/components/schemas/Goals"
        id:
          type: string
        lastModifiedBy:
          type: string
        lookBackWindowExpireTime:
          type: integer
          format: int64
        modDate:
          type: string
          format: date-time
        name:
          type: string
        pageId:
          type: string
        runningIds:
          $ref: "#/components/schemas/RunningIds"
        scheduling:
          $ref: "#/components/schemas/Scheduling"
        status:
          type: string
          enum:
          - RUNNING
          - SCHEDULED
          - ENDED
          - DRAFT
          - ARCHIVED
        targetingConditions:
          type: array
          items:
            $ref: "#/components/schemas/TargetingCondition"
        trafficAllocation:
          type: number
          format: float
        trafficProportion:
          $ref: "#/components/schemas/TrafficProportion"
    ExperimentForm:
      type: object
      properties:
        description:
          type: string
        goals:
          $ref: "#/components/schemas/Goals"
        lookbackWindow:
          type: integer
          format: int32
        name:
          type: string
        pageId:
          type: string
        scheduling:
          $ref: "#/components/schemas/Scheduling"
        targetingConditions:
          type: array
          items:
            $ref: "#/components/schemas/TargetingCondition"
        trafficAllocation:
          type: number
          format: float
        trafficProportion:
          $ref: "#/components/schemas/TrafficProportion"
    ExperimentResults:
      type: object
      properties:
        bayesianResult:
          $ref: "#/components/schemas/BayesianResult"
        goals:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/GoalResults"
        sessions:
          $ref: "#/components/schemas/TotalSession"
    ExperimentVariant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        promoted:
          type: boolean
        url:
          type: string
        weight:
          type: number
          format: float
    ExperimentVariantForm:
      type: object
      properties:
        description:
          type: string
    ExportSecretForm:
      type: object
      properties:
        appKeys:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            uniqueItems: true
          writeOnly: true
        appKeysBySite:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
            uniqueItems: true
        exportAll:
          type: boolean
        password:
          type: string
    ExtraPackagesForm:
      type: object
      properties:
        packages:
          type: string
    FailedResultView:
      type: object
      properties:
        element:
          type: string
        errorMessage:
          type: string
    Field:
      type: object
      discriminator:
        propertyName: clazz
      properties:
        clazz:
          type: string
        fieldContentTypeProperties:
          type: array
          items:
            type: string
            enum:
            - NAME
            - VALUES
            - CATEGORIES
            - RELATIONSHIPS
            - REGEX_CHECK
            - HINT
            - REQUIRED
            - SEARCHABLE
            - INDEXED
            - LISTED
            - UNIQUE
            - DEFAULT_VALUE
            - DATA_TYPE
      required:
      - clazz
    FieldResponseView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Field"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    FileAssetContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    FileField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    FileUploadDetail:
      type: object
      properties:
        assetPath:
          type: string
        language:
          type: string
        live:
          type: boolean
        status:
          type: boolean
          writeOnly: true
    FilterDescriptor:
      type: object
      properties:
        default:
          type: boolean
          writeOnly: true
        defaultFilter:
          type: boolean
        filters:
          type: object
          additionalProperties:
            type: object
        key:
          type: string
        roles:
          type: string
        sort:
          type: string
        title:
          type: string
    FilterDescriptorForm:
      type: object
      properties:
        defaultFilter:
          type: boolean
        filters:
          type: object
          additionalProperties:
            type: object
        key:
          type: string
        roles:
          type: string
        sort:
          type: string
        title:
          type: string
    FilteredContentTypesForm:
      type: object
      properties:
        direction:
          type: string
        filter:
          type: object
          additionalProperties:
            type: object
        orderBy:
          type: string
        page:
          type: integer
          format: int32
        perPage:
          type: integer
          format: int32
    FindAvailableActionsForm:
      type: object
      properties:
        hostId:
          type: string
        languageId:
          type: integer
          format: int64
        path:
          type: string
        renderMode:
          type: string
          enum:
          - EDITING
          - LISTING
    FireActionByNameForm:
      type: object
      properties:
        actionName:
          type: string
        assign:
          type: string
        comments:
          type: string
        contentlet:
          type: object
          additionalProperties:
            type: object
        expireDate:
          type: string
        expireTime:
          type: string
        filterKey:
          type: string
        individualPermissions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        iwantTo:
          type: string
        neverExpire:
          type: string
        pathToMove:
          type: string
        publishDate:
          type: string
        publishTime:
          type: string
        query:
          type: string
        timezoneId:
          type: string
        whereToSend:
          type: string
    FireActionForm:
      type: object
      properties:
        assign:
          type: string
        comments:
          type: string
        contentlet:
          type: object
          additionalProperties:
            type: object
        expireDate:
          type: string
        expireTime:
          type: string
        filterKey:
          type: string
        individualPermissions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        iwantTo:
          type: string
        neverExpire:
          type: string
        pathToMove:
          type: string
        publishDate:
          type: string
        publishTime:
          type: string
        query:
          type: string
        timezoneId:
          type: string
        whereToSend:
          type: string
    FireBulkActionsForm:
      type: object
      properties:
        additionalParams:
          $ref: "#/components/schemas/AdditionalParamsBean"
        contentletIds:
          type: array
          items:
            type: string
        popupParamsBean:
          $ref: "#/components/schemas/AdditionalParamsBean"
        query:
          type: string
        workflowActionId:
          type: string
    FireMultipleActionForm:
      type: object
      properties:
        assign:
          type: string
        comments:
          type: string
        contentlet:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        expireDate:
          type: string
        expireTime:
          type: string
        filterKey:
          type: string
        iwantTo:
          type: string
        neverExpire:
          type: string
        publishDate:
          type: string
        publishTime:
          type: string
        timezoneId:
          type: string
        whereToSend:
          type: string
    Folder:
      type: object
      properties:
        defaultFileType:
          type: string
        filesMasks:
          type: string
        host:
          $ref: "#/components/schemas/Host"
        hostId:
          type: string
        idate:
          type: string
          format: date-time
        identifier:
          type: string
        inode:
          type: string
        map:
          type: object
          additionalProperties:
            type: object
        modDate:
          type: string
          format: date-time
        name:
          type: string
        owner:
          type: string
        parent:
          type: boolean
        path:
          type: string
        permissionId:
          type: string
        permissionType:
          type: string
        showOnMenu:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        systemFolder:
          type: boolean
        title:
          type: string
        type:
          type: string
    FolderSearchResultView:
      type: object
      properties:
        addChildrenAllowed:
          type: boolean
        hostName:
          type: string
        id:
          type: string
        inode:
          type: string
        path:
          type: string
    FolderView:
      type: object
      properties:
        defaultFileType:
          type: string
        filesMasks:
          type: string
        getiDate:
          type: string
          format: date-time
        hostId:
          type: string
        identifier:
          type: string
        inode:
          type: string
        modDate:
          type: string
          format: date-time
        name:
          type: string
        path:
          type: string
        showOnMenu:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        subFolders:
          type: array
          items:
            $ref: "#/components/schemas/FolderView"
        title:
          type: string
        type:
          type: string
    ForbiddenException:
      type: object
      properties:
        cause:
          type: object
          properties:
            localizedMessage:
              type: string
            message:
              type: string
            stackTrace:
              type: array
              items:
                type: object
                properties:
                  classLoaderName:
                    type: string
                  className:
                    type: string
                  fileName:
                    type: string
                  lineNumber:
                    type: integer
                    format: int32
                  methodName:
                    type: string
                  moduleName:
                    type: string
                  moduleVersion:
                    type: string
                  nativeMethod:
                    type: boolean
        localizedMessage:
          type: string
        message:
          type: string
        response:
          type: object
          properties:
            allowedMethods:
              type: array
              items:
                type: string
              uniqueItems: true
            cookies:
              type: object
              additionalProperties:
                type: object
                properties:
                  comment:
                    type: string
                  domain:
                    type: string
                  expiry:
                    type: string
                    format: date-time
                  httpOnly:
                    type: boolean
                  maxAge:
                    type: integer
                    format: int32
                  name:
                    type: string
                  path:
                    type: string
                  secure:
                    type: boolean
                  value:
                    type: string
                  version:
                    type: integer
                    format: int32
            date:
              type: string
              format: date-time
            entity:
              type: object
            entityTag:
              type: object
              properties:
                value:
                  type: string
                weak:
                  type: boolean
            headers:
              type: object
              additionalProperties:
                type: array
                items:
                  type: object
            language:
              type: object
              properties:
                country:
                  type: string
                displayCountry:
                  type: string
                displayLanguage:
                  type: string
                displayName:
                  type: string
                displayScript:
                  type: string
                displayVariant:
                  type: string
                extensionKeys:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                iso3Country:
                  type: string
                iso3Language:
                  type: string
                language:
                  type: string
                script:
                  type: string
                unicodeLocaleAttributes:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                unicodeLocaleKeys:
                  type: array
                  items:
                    type: string
                  uniqueItems: true
                variant:
                  type: string
            lastModified:
              type: string
              format: date-time
            length:
              type: integer
              format: int32
            links:
              type: array
              items:
                type: object
                properties:
                  params:
                    type: object
                    additionalProperties:
                      type: string
                  rel:
                    type: string
                  rels:
                    type: array
                    items:
                      type: string
                  title:
                    type: string
                  type:
                    type: string
                  uri:
                    type: string
                    format: uri
                  uriBuilder:
                    type: object
              uniqueItems: true
            location:
              type: string
              format: uri
            mediaType:
              type: object
              properties:
                parameters:
                  type: object
                  additionalProperties:
                    type: string
                subtype:
                  type: string
                type:
                  type: string
                wildcardSubtype:
                  type: boolean
                wildcardType:
                  type: boolean
            metadata:
              type: object
              additionalProperties:
                type: array
                items:
                  type: object
            status:
              type: integer
              format: int32
            statusInfo:
              type: object
              properties:
                family:
                  type: string
                  enum:
                  - INFORMATIONAL
                  - SUCCESSFUL
                  - REDIRECTION
                  - CLIENT_ERROR
                  - SERVER_ERROR
                  - OTHER
                reasonPhrase:
                  type: string
                statusCode:
                  type: integer
                  format: int32
            stringHeaders:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              className:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              methodName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              nativeMethod:
                type: boolean
        suppressed:
          type: array
          items:
            type: object
            properties:
              localizedMessage:
                type: string
              message:
                type: string
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    className:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    methodName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    nativeMethod:
                      type: boolean
    ForgotPasswordForm:
      type: object
      properties:
        userId:
          type: string
    FormContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    FormDataBodyPart:
      type: object
      properties:
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        entity:
          type: object
        formDataContentDisposition:
          $ref: "#/components/schemas/FormDataContentDisposition"
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            parameters:
              type: object
              additionalProperties:
                type: string
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
        messageBodyWorkers:
          $ref: "#/components/schemas/MessageBodyWorkers"
        name:
          type: string
        parameterizedHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/ParameterizedHeader"
        parent:
          $ref: "#/components/schemas/MultiPart"
        providers:
          type: object
        simple:
          type: boolean
        value:
          type: string
    FormDataContentDisposition:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
        fileName:
          type: string
        modificationDate:
          type: string
          format: date-time
        name:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: string
        readDate:
          type: string
          format: date-time
        size:
          type: integer
          format: int64
        type:
          type: string
    FormDataMultiPart:
      type: object
      properties:
        bodyParts:
          type: array
          items:
            $ref: "#/components/schemas/BodyPart"
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        entity:
          type: object
        fields:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/FormDataBodyPart"
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            parameters:
              type: object
              additionalProperties:
                type: string
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
        messageBodyWorkers:
          $ref: "#/components/schemas/MessageBodyWorkers"
        parameterizedHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/ParameterizedHeader"
        parent:
          $ref: "#/components/schemas/MultiPart"
        providers:
          type: object
    GenerateBundleForm:
      type: object
      properties:
        bundleId:
          type: string
        filterKey:
          type: string
        operation:
          type: string
          enum:
          - PUBLISH
          - UNPUBLISH
    Geolocation:
      type: object
      properties:
        city:
          type: string
        company:
          type: string
        continent:
          type: string
        continentCode:
          type: string
        country:
          type: string
        countryCode:
          type: string
        ipAddress:
          type: string
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double
        subdivision:
          type: string
        subdivisionCode:
          type: string
        timezone:
          type: string
    Goal:
      type: object
      properties:
        metric:
          $ref: "#/components/schemas/Metric"
        type:
          type: string
          enum:
          - MINIMIZE
          - MAXIMIZE
          writeOnly: true
    GoalResults:
      type: object
      properties:
        goal:
          $ref: "#/components/schemas/Goal"
        variants:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/VariantResults"
    Goals:
      type: object
      properties:
        primary:
          $ref: "#/components/schemas/Goal"
    GuideLineBean:
      type: object
      properties:
        abbr:
          type: string
        defaultGuideLine:
          type: boolean
        earlid:
          type: string
        guideline_id:
          type: integer
          format: int32
        long_name:
          type: string
        open_to_public:
          type: integer
          format: int32
        preamble:
          type: string
        seal_icon_name:
          type: string
        status:
          type: integer
          format: int32
        subset:
          type: string
        title:
          type: string
        user_id:
          type: integer
          format: int32
    HTMLPageAsset:
      type: object
      properties:
        archived:
          type: boolean
        cacheTTL:
          type: integer
          format: int64
        categoryId:
          type: string
        content:
          type: boolean
        contentTypeId:
          type: string
        dotAsset:
          type: boolean
        fileAsset:
          type: boolean
        folder:
          type: string
        form:
          type: boolean
        friendlyName:
          type: string
        host:
          type: string
        htmlpage:
          type: boolean
        httpsRequired:
          type: boolean
        identifier:
          type: string
        indexPolicyDependencies:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
        inode:
          type: string
        keyValue:
          type: boolean
        languageId:
          type: integer
          format: int64
        languageVariable:
          type: boolean
        live:
          type: boolean
        locked:
          type: boolean
        lowIndexPriority:
          type: boolean
        menuOrder:
          type: integer
          format: int32
        metadata:
          type: string
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        new:
          type: boolean
        owner:
          type: string
        pageUrl:
          type: string
        permissionId:
          type: string
        permissionType:
          type: string
        persona:
          type: boolean
        redirect:
          type: string
        seoDescription:
          type: string
        seoKeywords:
          type: string
        showOnMenu:
          type: boolean
        sortOrder:
          type: integer
          format: int64
        structureInode:
          type: string
        systemHost:
          type: boolean
        templateId:
          type: string
        title:
          type: string
        titleImage:
          $ref: "#/components/schemas/Field"
        type:
          type: string
        uri:
          type: string
        userAPI:
          $ref: "#/components/schemas/UserAPI"
        vanityUrl:
          type: boolean
        variantId:
          type: string
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    HealthCheckResult:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            type: object
        durationMs:
          type: integer
          format: int64
        error:
          type: string
        lastChecked:
          type: string
          format: date-time
        message:
          type: string
        monitorModeApplied:
          type: boolean
        name:
          type: string
        status:
          type: string
          enum:
          - UP
          - DEGRADED
          - DOWN
          - UNKNOWN
    HealthResponse:
      type: object
      properties:
        releaseId:
          type: string
        serviceId:
          type: string
    HiddenField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    HierarchyShortCategoriesResponseView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/HierarchyShortCategory"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    HierarchyShortCategory:
      type: object
      properties:
        inode:
          type: string
        key:
          type: string
        name:
          type: string
        parentList:
          type: array
          items:
            $ref: "#/components/schemas/ShortCategory"
    Host:
      type: object
      properties:
        aliases:
          type: string
        archived:
          type: boolean
        categoryId:
          type: string
        contentTypeId:
          type: string
        default:
          type: boolean
        dotAsset:
          type: boolean
        fileAsset:
          type: boolean
        folder:
          type: string
        form:
          type: boolean
        host:
          type: string
        hostThumbnail:
          type: string
          format: binary
        hostname:
          type: string
        htmlpage:
          type: boolean
        identifier:
          type: string
        indexPolicyDependencies:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
        inode:
          type: string
        keyValue:
          type: boolean
        languageId:
          type: integer
          format: int64
        languageVariable:
          type: boolean
        live:
          type: boolean
        locked:
          type: boolean
        lowIndexPriority:
          type: boolean
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        new:
          type: boolean
        owner:
          type: string
        parent:
          type: boolean
        permissionId:
          type: string
        permissionType:
          type: string
        persona:
          type: boolean
        sortOrder:
          type: integer
          format: int64
        structureInode:
          type: string
        systemHost:
          type: boolean
        tagStorage:
          type: string
        title:
          type: string
        titleImage:
          $ref: "#/components/schemas/Field"
        type:
          type: string
        userAPI:
          $ref: "#/components/schemas/UserAPI"
        vanityUrl:
          type: boolean
        variantId:
          type: string
        versionId:
          type: string
        working:
          type: boolean
    HostFolderField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    HostVariable:
      type: object
      properties:
        hostId:
          type: string
        id:
          type: string
        key:
          type: string
        lastModDate:
          type: string
          format: date-time
        lastModifierId:
          type: string
        name:
          type: string
        value:
          type: string
    I18NForm:
      type: object
      properties:
        country:
          type: string
        language:
          type: string
        messagesKey:
          type: array
          items:
            type: string
    IHTMLPage:
      type: object
      properties:
        archived:
          type: boolean
        cacheTTL:
          type: integer
          format: int64
        content:
          type: boolean
        friendlyName:
          type: string
        host:
          type: string
        httpsRequired:
          type: boolean
        identifier:
          type: string
        inode:
          type: string
        languageId:
          type: integer
          format: int64
        live:
          type: boolean
        locked:
          type: boolean
        map:
          type: object
          additionalProperties:
            type: object
        menuOrder:
          type: integer
          format: int32
        metadata:
          type: string
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        owner:
          type: string
        pageUrl:
          type: string
        parentPermissionable:
          $ref: "#/components/schemas/Permissionable"
        permissionId:
          type: string
        permissionType:
          type: string
        redirect:
          type: string
        seoDescription:
          type: string
        seoKeywords:
          type: string
        showOnMenu:
          type: boolean
        templateId:
          type: string
        title:
          type: string
        type:
          type: string
        uri:
          type: string
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    IPersona:
      type: object
      properties:
        archived:
          type: boolean
        description:
          type: string
        identifier:
          type: string
        inode:
          type: string
        keyTag:
          type: string
        live:
          type: boolean
        locked:
          type: boolean
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        owner:
          type: string
        parentPermissionable:
          $ref: "#/components/schemas/Permissionable"
        permissionId:
          type: string
        permissionType:
          type: string
        tags:
          type: string
        title:
          type: string
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    ImageField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    ImmutableListCondition:
      type: array
      items:
        $ref: "#/components/schemas/Condition"
      properties:
        empty:
          type: boolean
        first:
          $ref: "#/components/schemas/Condition"
        last:
          $ref: "#/components/schemas/Condition"
    ImmutableListJob:
      type: array
      items:
        $ref: "#/components/schemas/Job"
      properties:
        empty:
          type: boolean
        first:
          $ref: "#/components/schemas/Job"
        last:
          $ref: "#/components/schemas/Job"
    ImmutableListJobView:
      type: array
      items:
        $ref: "#/components/schemas/JobView"
      properties:
        empty:
          type: boolean
        first:
          $ref: "#/components/schemas/JobView"
        last:
          $ref: "#/components/schemas/JobView"
    ImmutableListVariantResult:
      type: array
      items:
        $ref: "#/components/schemas/VariantResult"
      properties:
        empty:
          type: boolean
        first:
          $ref: "#/components/schemas/VariantResult"
        last:
          $ref: "#/components/schemas/VariantResult"
    ImmutableMapDoubleQuantilePair:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/QuantilePair"
      properties:
        empty:
          type: boolean
    ImmutableMapObjectObject:
      type: object
      additionalProperties:
        type: object
      properties:
        empty:
          type: boolean
    ImmutableMapStringListSampleData:
      type: object
      additionalProperties:
        type: array
        items:
          $ref: "#/components/schemas/SampleData"
      properties:
        empty:
          type: boolean
    ImmutableMapStringObject:
      type: object
      additionalProperties:
        type: object
      properties:
        empty:
          type: boolean
    ImmutableMapStringString:
      type: object
      additionalProperties:
        type: string
      properties:
        empty:
          type: boolean
    JSONObject:
      type: object
      additionalProperties:
        type: object
      properties:
        asMap:
          type: object
          additionalProperties:
            type: object
        empty:
          type: boolean
    Job:
      type: object
      properties:
        completedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        executionNode:
          type: string
        id:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: object
          properties:
            empty:
              type: boolean
        progress:
          type: number
          format: float
        queueName:
          type: string
        result:
          $ref: "#/components/schemas/JobResult"
        retryCount:
          type: integer
          format: int32
        startedAt:
          type: string
          format: date-time
        state:
          type: string
          enum:
          - PENDING
          - RUNNING
          - SUCCESS
          - FAILED
          - FAILED_PERMANENTLY
          - ABANDONED
          - ABANDONED_PERMANENTLY
          - CANCEL_REQUESTED
          - CANCELLING
          - CANCELED
        updatedAt:
          type: string
          format: date-time
    JobPaginatedResult:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/Job"
          properties:
            empty:
              type: boolean
            first:
              $ref: "#/components/schemas/Job"
            last:
              $ref: "#/components/schemas/Job"
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        total:
          type: integer
          format: int64
    JobResult:
      type: object
      properties:
        errorDetail:
          $ref: "#/components/schemas/ErrorDetail"
        metadata:
          type: object
          additionalProperties:
            type: object
    JobStatusResponse:
      type: object
      properties:
        jobId:
          type: string
        statusUrl:
          type: string
    JobView:
      type: object
      properties:
        completedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        executionNode:
          type: string
        id:
          type: string
        parameters:
          type: object
          additionalProperties:
            type: object
          properties:
            empty:
              type: boolean
        progress:
          type: number
          format: float
        queueName:
          type: string
        result:
          $ref: "#/components/schemas/JobResult"
        retryCount:
          type: integer
          format: int32
        startedAt:
          type: string
          format: date-time
        state:
          type: string
          enum:
          - PENDING
          - RUNNING
          - SUCCESS
          - FAILED
          - FAILED_PERMANENTLY
          - ABANDONED
          - ABANDONED_PERMANENTLY
          - CANCEL_REQUESTED
          - CANCELLING
          - CANCELED
        updatedAt:
          type: string
          format: date-time
    JobViewPaginatedResult:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: "#/components/schemas/JobView"
          properties:
            empty:
              type: boolean
            first:
              $ref: "#/components/schemas/JobView"
            last:
              $ref: "#/components/schemas/JobView"
        page:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        total:
          type: integer
          format: int64
    JsonObjectView:
      type: object
      properties:
        jsonObject:
          type: object
          additionalProperties:
            type: object
          properties:
            asMap:
              type: object
              additionalProperties:
                type: object
            empty:
              type: boolean
    KeyValueContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    KeyValueField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    KeyValueForm:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    LangVarsCount:
      type: object
      properties:
        count:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
    Language:
      type: object
      properties:
        country:
          type: string
        countryCode:
          type: string
        id:
          type: integer
          format: int64
        isoCode:
          type: string
        language:
          type: string
        languageCode:
          type: string
    LanguageForm:
      type: object
      properties:
        country:
          type: string
        countryCode:
          type: string
        isoCode:
          type: string
        language:
          type: string
        languageCode:
          type: string
    LanguageVariablePageView:
      type: object
      properties:
        total:
          type: integer
          format: int32
        variables:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/LanguageVariableView"
    LanguageVariableView:
      type: object
      properties:
        identifier:
          type: string
        value:
          type: string
    LanguageView:
      type: object
      properties:
        country:
          type: string
        countryCode:
          type: string
        defaultLanguage:
          type: boolean
        id:
          type: integer
          format: int64
        isoCode:
          type: string
        language:
          type: string
        languageCode:
          type: string
        variables:
          $ref: "#/components/schemas/LangVarsCount"
    Layout:
      type: object
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
        portletIds:
          type: array
          items:
            type: string
        tabOrder:
          type: integer
          format: int32
    LayoutMapResponseEntityView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    LineDividerField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    LoggerView:
      type: object
      properties:
        level:
          type: string
        name:
          type: string
    LoginAsForm:
      type: object
      properties:
        password:
          type: string
        userId:
          type: string
    LoginFormResultView:
      type: object
      properties:
        authorizationType:
          type: string
        backgroundColor:
          type: string
        backgroundPicture:
          type: string
        buildDateString:
          type: string
        companyEmail:
          type: string
        currentLanguage:
          $ref: "#/components/schemas/LanguageView"
        languages:
          type: array
          items:
            $ref: "#/components/schemas/LanguageView"
        levelName:
          type: string
        logo:
          type: string
        serverId:
          type: string
        version:
          type: string
    LookBackWindow:
      type: object
      properties:
        expireMillis:
          type: integer
          format: int64
        value:
          type: string
    MakeDefaultLangForm:
      type: object
      properties:
        fireTransferAssetsJob:
          type: boolean
    MapStringRestConditionGroupView:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/RestConditionGroup"
      properties:
        empty:
          type: boolean
    MapStringRestConditionValueView:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/RestConditionValue"
      properties:
        empty:
          type: boolean
    MapStringRestLanguageView:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/RestLanguage"
      properties:
        empty:
          type: boolean
    MapStringRestPersonaView:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/RestPersona"
      properties:
        empty:
          type: boolean
    Menu:
      type: object
      properties:
        id:
          type: string
        menuItems:
          type: array
          items:
            $ref: "#/components/schemas/MenuItem"
        name:
          type: string
        tabIcon:
          type: string
        tabName:
          type: string
        url:
          type: string
    MenuItem:
      type: object
      properties:
        ajax:
          type: boolean
        angular:
          type: boolean
        id:
          type: string
        label:
          type: string
        url:
          type: string
    MessageBodyWorkers:
      type: object
    MessageEntity:
      type: object
      properties:
        message:
          type: string
    Metric:
      type: object
      properties:
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
          properties:
            empty:
              type: boolean
            first:
              $ref: "#/components/schemas/Condition"
            last:
              $ref: "#/components/schemas/Condition"
        name:
          type: string
        type:
          type: string
          enum:
          - REACH_PAGE
          - CLICK_ON_ELEMENT
          - EXIT_RATE
          - BOUNCE_RATE
          - URL_PARAMETER
    MonitorStats:
      type: object
      properties:
        contentAnalytics:
          type: string
    MoveFieldsForm:
      type: object
    MulitreeView:
      type: object
      properties:
        containerId:
          type: string
        contentId:
          type: string
        pageId:
          type: string
        personalization:
          type: string
        relationType:
          type: string
        treeOrder:
          type: integer
          format: int32
        variantId:
          type: string
    MultiPart:
      type: object
      properties:
        bodyParts:
          type: array
          items:
            $ref: "#/components/schemas/BodyPart"
        contentDisposition:
          $ref: "#/components/schemas/ContentDisposition"
        entity:
          type: object
        headers:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        mediaType:
          type: object
          properties:
            parameters:
              type: object
              additionalProperties:
                type: string
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
        messageBodyWorkers:
          $ref: "#/components/schemas/MessageBodyWorkers"
        parameterizedHeaders:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/ParameterizedHeader"
        parent:
          $ref: "#/components/schemas/MultiPart"
        providers:
          type: object
    MultiSelectField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    OpenFolderForm:
      type: object
      properties:
        path:
          type: string
    PageCheckPermissionForm:
      type: object
      properties:
        hostId:
          type: string
        languageId:
          type: integer
          format: int64
        path:
          type: string
        type:
          type: string
          enum:
          - NONE
          - READ
          - USE
          - EDIT
          - WRITE
          - PUBLISH
          - EDIT_PERMISSIONS
          - CAN_ADD_CHILDREN
    PageContainerForm:
      type: object
      properties:
        containerEntries:
          type: array
          items:
            $ref: "#/components/schemas/ContainerEntry"
        requestJson:
          type: string
    PageContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    PageForm:
      type: object
      properties:
        anonymousLayout:
          type: boolean
        layout:
          $ref: "#/components/schemas/TemplateLayout"
        siteId:
          type: string
        themeId:
          type: string
        title:
          type: string
    PageLivePreviewVersionBean:
      type: object
      properties:
        diff:
          type: boolean
        renderLive:
          type: string
        renderWorking:
          type: string
    PageView:
      type: object
      properties:
        containers:
          type: array
          items:
            $ref: "#/components/schemas/ContainerRaw"
        containersMap:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ContainerRaw"
        layout:
          $ref: "#/components/schemas/TemplateLayout"
        live:
          type: boolean
        numberContents:
          type: integer
          format: int32
        page:
          $ref: "#/components/schemas/HTMLPageAsset"
        pageUrlMapper:
          type: string
        runningExperiment:
          $ref: "#/components/schemas/Experiment"
        site:
          $ref: "#/components/schemas/Host"
        template:
          $ref: "#/components/schemas/Template"
        urlContent:
          $ref: "#/components/schemas/Contentlet"
        vanityUrl:
          $ref: "#/components/schemas/VanityURLView"
        viewAs:
          $ref: "#/components/schemas/ViewAsPageStatus"
    PageWorkflowActionsView:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowActionView"
        page:
          type: object
          additionalProperties:
            type: object
    PaginatedArrayListHost:
      type: array
      items:
        $ref: "#/components/schemas/Host"
      properties:
        empty:
          type: boolean
        first:
          $ref: "#/components/schemas/Host"
        last:
          $ref: "#/components/schemas/Host"
        query:
          type: string
        totalResults:
          type: integer
          format: int64
    PaginatedArrayListMapStringObject:
      type: array
      items:
        type: object
        additionalProperties:
          type: object
      properties:
        empty:
          type: boolean
        first:
          type: object
          additionalProperties:
            type: object
        last:
          type: object
          additionalProperties:
            type: object
        query:
          type: string
        totalResults:
          type: integer
          format: int64
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
          format: int32
        perPage:
          type: integer
          format: int32
        totalEntries:
          type: integer
          format: int64
    PaginatorOrdered:
      type: object
    ParamDescriptor:
      type: object
      properties:
        buttonEndpoint:
          type: string
        buttonLabel:
          type: string
        envshow:
          type: boolean
        envvar:
          type: string
        hidden:
          type: boolean
        hint:
          type: string
        label:
          type: string
        required:
          type: boolean
        type:
          type: string
          enum:
          - STRING
          - BOOL
          - SELECT
          - BUTTON
          - GENERATED_STRING
        value:
          type: object
    ParameterModel:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        ownerId:
          type: string
        priority:
          type: integer
          format: int32
        value:
          type: string
    ParameterizedHeader:
      type: object
      properties:
        parameters:
          type: object
          additionalProperties:
            type: string
        value:
          type: string
    Payload:
      type: object
      properties:
        data:
          type: object
        type:
          type: string
        visibility:
          type: string
          enum:
          - USER
          - USER_SESSION
          - USERS
          - ROLE
          - ROLES
          - PERMISSION
          - EXCLUDE_OWNER
          - GLOBAL
        visibilityType:
          type: string
        visibilityValue:
          type: object
    Permission:
      type: object
      properties:
        bitPermission:
          type: boolean
        id:
          type: integer
          format: int64
        individualPermission:
          type: boolean
        inode:
          type: string
        permission:
          type: integer
          format: int32
        roleId:
          type: string
        type:
          type: string
    PermissionTabField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    PermissionView:
      type: object
      properties:
        bitPermission:
          type: boolean
        id:
          type: integer
          format: int64
        inode:
          type: string
        permission:
          type: string
          enum:
          - READ
          - USE
          - EDIT
          - WRITE
          - PUBLISH
          - EDIT_PERMISSIONS
          - CAN_ADD_CHILDREN
        roleId:
          type: string
        type:
          type: string
    Permissionable:
      type: object
      properties:
        owner:
          type: string
        parentPermissionable:
          $ref: "#/components/schemas/Permissionable"
        permissionId:
          type: string
        permissionType:
          type: string
    Persona:
      type: object
      properties:
        archived:
          type: boolean
        categoryId:
          type: string
        contentTypeId:
          type: string
        description:
          type: string
        dotAsset:
          type: boolean
        fileAsset:
          type: boolean
        folder:
          type: string
        form:
          type: boolean
        host:
          type: string
        htmlpage:
          type: boolean
        identifier:
          type: string
        indexPolicyDependencies:
          type: string
          enum:
          - DEFER
          - WAIT_FOR
          - FORCE
        inode:
          type: string
        keyTag:
          type: string
        keyValue:
          type: boolean
        languageId:
          type: integer
          format: int64
        languageVariable:
          type: boolean
        live:
          type: boolean
        locked:
          type: boolean
        lowIndexPriority:
          type: boolean
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        new:
          type: boolean
        owner:
          type: string
        permissionId:
          type: string
        permissionType:
          type: string
        persona:
          type: boolean
        sortOrder:
          type: integer
          format: int64
        structureInode:
          type: string
        systemHost:
          type: boolean
        tags:
          type: string
        title:
          type: string
        titleImage:
          $ref: "#/components/schemas/Field"
        type:
          type: string
        userAPI:
          $ref: "#/components/schemas/UserAPI"
        vanityUrl:
          type: boolean
        variantId:
          type: string
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    PersonaContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    PersonalizationPersonaPageForm:
      type: object
      properties:
        pageId:
          type: string
        personaTag:
          type: string
    PersonalizationPersonaPageView:
      type: object
      properties:
        pageId:
          type: string
        persona:
          type: object
          additionalProperties:
            type: object
    PublishingEndPoint:
      type: object
      properties:
        address:
          type: string
        authKey:
          type: object
          properties:
            empty:
              type: boolean
            length:
              type: integer
              format: int32
              writeOnly: true
        enabled:
          type: boolean
        groupId:
          type: string
        id:
          type: string
        port:
          type: string
        protocol:
          type: string
        sending:
          type: boolean
        serverName:
          type: object
          properties:
            empty:
              type: boolean
            length:
              type: integer
              format: int32
              writeOnly: true
        tokenExpired:
          type: boolean
        tokenInvalid:
          type: boolean
    PullRelatedForm:
      type: object
      properties:
        condition:
          type: string
        fieldVariable:
          type: string
        identifier:
          type: string
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        orderBy:
          type: string
    PushPublishBean:
      type: object
      properties:
        expireDate:
          type: string
        expireTime:
          type: string
        filterKey:
          type: string
        iWantTo:
          type: string
          writeOnly: true
        iwantTo:
          type: string
        neverExpire:
          type: string
        publishDate:
          type: string
        publishTime:
          type: string
        timezoneId:
          type: string
        whereToSend:
          type: string
    QuantilePair:
      type: object
      properties:
        formatted:
          type: number
          format: double
        quantile:
          type: number
          format: double
    QueryForm:
      type: object
      properties:
        query:
          $ref: "#/components/schemas/AnalyticsQuery"
    RadioField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    RelationshipField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          skipRelationshipCreation:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    RelationshipsTabField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    RemoteAPITokenForm:
      type: object
      properties:
        tokenInfo:
          type: object
          additionalProperties:
            type: object
    RemoteUrlForm:
      type: object
      properties:
        accessKey:
          type: string
        fileName:
          type: string
        maxFileLength:
          type: integer
          format: int64
        remoteUrl:
          type: string
        urlTimeoutSeconds:
          type: integer
          format: int32
    ReportResponseEntityView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResetPasswordForm:
      type: object
      properties:
        password:
          type: string
        token:
          type: string
    ResponseACheckerEntityView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/ACheckerResponse"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseContentletWorkflowStatusView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/ContentletWorkflowStatusView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityAccessibilityGuidelinesView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/GuideLineBean"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityAnnouncementListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Announcement"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityApiTokenWithJwtView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityAppListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/AppView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityAppView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/AppView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityBaseContentTypesView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/BaseContentTypesView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityBooleanView:
      type: object
      properties:
        entity:
          type: boolean
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityBulkActionView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/BulkActionView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityBulkActionsResultView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/BulkActionsResultView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityBulkResultView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/BulkResultView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityBundleListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/BundleMap"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityCacheObjectView:
      type: object
      properties:
        entity:
          type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityCacheProviderView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/CacheProvider"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityCategoryView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/CategoryView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityContainerObjectMapView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityContainerView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Container"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityContentReferenceListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/ContentReferenceView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityContentTypeDetailView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityContentTypeJsonView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityContentTypeOperationView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
          properties:
            empty:
              type: boolean
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityContentletMapsView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
          uniqueItems: true
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityCountView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/CountView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityDefaultWorkflowActionsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowDefaultActionView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityEmaConfigurationView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
          properties:
            asMap:
              type: object
              additionalProperties:
                type: object
            empty:
              type: boolean
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityEndpointView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/PublishingEndPoint"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityEndpointsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/PublishingEndPoint"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityEnvironmentView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Environment"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityEnvironmentsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Environment"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityExperimentHealthView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityExperimentOperationView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityExperimentResults:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/ExperimentResults"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityExperimentSelectedView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/SelectedExperiments"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityExperimentView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Experiment"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFieldDeletionView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFieldListView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFieldOperationView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFieldTypeListView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFieldView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFilterDescriptorView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/FilterDescriptor"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFilterDescriptorsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/FilterDescriptor"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFolderSearchResultView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/FolderSearchResultView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFolderView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Folder"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityFolderWithSubfoldersView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/FolderView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityForgotPasswordView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityHealthCheckResultView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/HealthCheckResult"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityHealthResponseView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/HealthResponse"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityIndexOperationView:
      type: object
      properties:
        entity:
          type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityIsoLanguagesCountriesView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityJobPaginatedResultView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/JobPaginatedResult"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityJobStatusView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/JobStatusResponse"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityJobView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Job"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityJwtView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLanguageListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/LanguageView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLanguageMessagesView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLanguageObjectView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Language"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLanguageOperationView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLanguageVariablePageView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/LanguageVariablePageView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLanguageView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/LanguageView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLanguagesForPageView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/ExistingLanguagesForPageView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLayoutList:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Layout"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityListCacheProviderView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/CacheProvider"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityListContentTypeView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/ContentType"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityListMapView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityListPersonalizationPersonaPageView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/PersonalizationPersonaPageView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityListStringView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityListTemplateView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Template"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityListUserView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/User"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLoggerListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/LoggerView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLoggerView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/LoggerView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLoginAsView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityLoginFormView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/LoginFormResultView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityMapMapView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityMapStringObjectView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityMapStringStringView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityMapView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityMenuView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Menu"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityMonitorStatsView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/MonitorStats"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityMulitreeView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/MulitreeView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityNotificationCountView:
      type: object
      properties:
        entity:
          type: integer
          format: int64
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPageLivePreviewVersionView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/PageLivePreviewVersionBean"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPageOperationView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPageView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/PageView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPageWorkflowActionsView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/PageWorkflowActionsView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPaginatedArrayListHostView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Host"
          properties:
            empty:
              type: boolean
            first:
              $ref: "#/components/schemas/Host"
            last:
              $ref: "#/components/schemas/Host"
            query:
              type: string
            totalResults:
              type: integer
              format: int64
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPaginatedArrayListMapView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
          properties:
            empty:
              type: boolean
            first:
              type: object
              additionalProperties:
                type: object
            last:
              type: object
              additionalProperties:
                type: object
            query:
              type: string
            totalResults:
              type: integer
              format: int64
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPasswordResetView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPermissionView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/PermissionView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPermissionsByTypeView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: boolean
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityPersonalizationView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityRelationshipPaginationView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/PaginatorOrdered"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityRoleDetailView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/RoleView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityRoleListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/Role"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityRoleOperationView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityRoleViewListView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/RoleView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySearchView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/SearchView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySetStringView:
      type: object
      properties:
        entity:
          type: array
          items:
            type: string
          uniqueItems: true
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySingleContainerView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/ContainerView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySingleExperimentView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Experiment"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySiteDeleteView:
      type: object
      properties:
        entity:
          type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySiteSetupProgressView:
      type: object
      properties:
        entity:
          type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySiteSwitchView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySiteView:
      type: object
      properties:
        entity:
          type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySmallRoleView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/SmallRoleView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityStorageStatusView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityStringView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySystemActionWorkflowActionMapping:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/SystemActionWorkflowActionMapping"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySystemActionWorkflowActionMappings:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/SystemActionWorkflowActionMapping"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntitySystemEventsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/SystemEvent"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityTagInodeOperationView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/TagInode"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityTagInodesMapView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/TagInode"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityTagInodesView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/TagInode"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityTagMapView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RestTag"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityTagOperationView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityTagsView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RestTag"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityTemplateView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/TemplateView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityUserUpdateView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityVariantView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Variant"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityVersionableOperationView:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityVersionableView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/VersionableView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewJob:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/Job"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewJobPaginatedResult:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/JobPaginatedResult"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewJobView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/JobView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewJobViewPaginatedResult:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/JobViewPaginatedResult"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewListExistingLanguagesForContentletView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/ExistingLanguagesForContentletView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewMapStringObject:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewMapStringString:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewSearchView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/SearchView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewSetString:
      type: object
      properties:
        entity:
          type: array
          items:
            type: string
          uniqueItems: true
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityViewString:
      type: object
      properties:
        entity:
          type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowActionClassesView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowActionClass"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowActionView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/WorkflowAction"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowActionletsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/WorkFlowActionlet"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowActionsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowActionView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowCommentView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/WorkflowTimelineItemView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowHistoryCommentsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowTimelineItemView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowSchemeView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/WorkflowScheme"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowSchemesView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowScheme"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowStepView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/WorkflowStep"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseEntityWorkflowStepsView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowStep"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseHostVariableEntityView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/HostVariable"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseSiteVariablesEntityView:
      type: object
      properties:
        entity:
          type: array
          items:
            $ref: "#/components/schemas/SiteVariableView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseUserDeletedEntityView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/UserDeletedView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    ResponseUserMapEntityView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    RestCondition:
      type: object
      properties:
        conditionlet:
          type: string
        operator:
          type: string
        owningGroup:
          type: string
        priority:
          type: integer
          format: int32
        values:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RestConditionValue"
    RestConditionGroup:
      type: object
      properties:
        conditions:
          type: object
          additionalProperties:
            type: boolean
        operator:
          type: string
        priority:
          type: integer
          format: int32
    RestConditionValue:
      type: object
      properties:
        key:
          type: string
        priority:
          type: integer
          format: int32
        value:
          type: string
    RestLanguage:
      type: object
      properties:
        name:
          type: string
    RestPersona:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
    RestRule:
      type: object
      properties:
        conditionGroups:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RestConditionGroup"
        enabled:
          type: boolean
        fireOn:
          type: string
        name:
          type: string
        priority:
          type: integer
          format: int32
        ruleActions:
          type: object
          additionalProperties:
            type: boolean
        shortCircuit:
          type: boolean
    RestRuleAction:
      type: object
      properties:
        actionlet:
          type: string
        owningRule:
          type: string
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ParameterModel"
        priority:
          type: integer
          format: int32
    RestTag:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
        persona:
          type: boolean
        siteId:
          type: string
        siteName:
          type: string
    RestUser:
      type: object
      properties:
        admin:
          type: boolean
        email:
          type: string
        givenName:
          type: string
        loginAs:
          type: boolean
        roleId:
          type: string
        surname:
          type: string
        userId:
          type: string
    ResultResumeItem:
      type: object
      properties:
        conversionRate:
          type: number
          format: float
        totalSessions:
          type: integer
          format: int64
        uniqueBySession:
          type: integer
          format: int64
    Role:
      type: object
      properties:
        dbfqn:
          type: string
        description:
          type: string
        editLayouts:
          type: boolean
        editPermissions:
          type: boolean
        editUsers:
          type: boolean
        fqn:
          type: string
        id:
          type: string
        locked:
          type: boolean
        name:
          type: string
        parent:
          type: string
        roleChildren:
          type: array
          items:
            type: string
        roleKey:
          type: string
        system:
          type: boolean
        user:
          type: boolean
    RoleForm:
      type: object
      properties:
        canEditLayouts:
          type: boolean
        canEditPermissions:
          type: boolean
        canEditUsers:
          type: boolean
        description:
          type: string
        parentRoleId:
          type: string
        roleKey:
          type: string
        roleName:
          type: string
    RoleLayoutForm:
      type: object
      properties:
        layoutIds:
          type: array
          items:
            type: string
          uniqueItems: true
        roleId:
          type: string
    RoleResponseEntityView:
      type: object
      properties:
        entity:
          type: object
          additionalProperties:
            type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    RoleView:
      type: object
      properties:
        dbfqn:
          type: string
        description:
          type: string
        editLayouts:
          type: boolean
        editPermissions:
          type: boolean
        editUsers:
          type: boolean
        fqn:
          type: string
        id:
          type: string
        locked:
          type: boolean
        name:
          type: string
        parent:
          type: string
        roleKey:
          type: string
        system:
          type: boolean
    RowField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    RunningId:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        id:
          type: string
        startDate:
          type: string
          format: date-time
    RunningIds:
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: "#/components/schemas/RunningId"
    SampleData:
      type: object
      properties:
        x:
          type: number
          format: double
        "y":
          type: number
          format: double
    SampleGroup:
      type: object
      properties:
        samples:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/SampleData"
          properties:
            empty:
              type: boolean
    Scheduling:
      type: object
      properties:
        endDate:
          type: string
          format: date-time
        startDate:
          type: string
          format: date-time
    SchemesAndSchemesContentTypeView:
      type: object
      properties:
        contentTypeSchemes:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowScheme"
        schemes:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowScheme"
    SearchByPathForm:
      type: object
      properties:
        path:
          type: string
    SearchForm:
      type: object
      properties:
        allCategoriesInfo:
          type: boolean
        depth:
          type: integer
          format: int32
        languageId:
          type: integer
          format: int64
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        query:
          type: string
        render:
          type: string
        sort:
          type: string
        userId:
          type: string
    SearchSiteByNameForm:
      type: object
      properties:
        siteName:
          type: string
    SearchView:
      type: object
      properties:
        contentTook:
          type: integer
          format: int64
        jsonObjectView:
          $ref: "#/components/schemas/JsonObjectView"
        queryTook:
          type: integer
          format: int64
        resultsSize:
          type: integer
          format: int64
    Secret:
      type: object
      properties:
        envshow:
          type: boolean
        envvar:
          type: string
        hidden:
          type: boolean
        type:
          type: string
          enum:
          - STRING
          - BOOL
          - SELECT
          - BUTTON
          - GENERATED_STRING
        value:
          type: array
          items:
            type: string
    SecretForm:
      type: object
    SecretView:
      type: object
      properties:
        dynamic:
          type: boolean
        name:
          type: string
        paramDescriptor:
          $ref: "#/components/schemas/ParamDescriptor"
        secret:
          $ref: "#/components/schemas/Secret"
        warnings:
          type: array
          items:
            type: string
    SelectField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    SelectedExperiment:
      type: object
      properties:
        id:
          type: string
        lookBackWindow:
          $ref: "#/components/schemas/LookBackWindow"
        name:
          type: string
        pageUrl:
          type: string
        regexs:
          type: object
          additionalProperties:
            type: string
        runningId:
          type: string
        variant:
          $ref: "#/components/schemas/SelectedVariant"
    SelectedExperiments:
      type: object
      properties:
        excludedExperimentIds:
          type: array
          items:
            type: string
        excludedExperimentIdsEnded:
          type: array
          items:
            type: string
        experiments:
          type: array
          items:
            $ref: "#/components/schemas/SelectedExperiment"
        includedExperimentIds:
          type: array
          items:
            type: string
    SelectedVariant:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
    SetForm:
      type: object
      properties:
        key:
          type: string
        value:
          type: object
    SetHashForm:
      type: object
      properties:
        fields:
          type: object
          additionalProperties:
            type: object
        key:
          type: string
    ShortCategory:
      type: object
      properties:
        inode:
          type: string
        key:
          type: string
        name:
          type: string
    Sidebar:
      type: object
      properties:
        containers:
          type: array
          items:
            $ref: "#/components/schemas/ContainerUUID"
        location:
          type: string
        preview:
          type: boolean
        width:
          type: string
        widthPercent:
          type: integer
          format: int32
    SidebarView:
      type: object
      properties:
        containers:
          type: array
          items:
            $ref: "#/components/schemas/ContainerUUID"
        location:
          type: string
        width:
          type: string
    SimpleContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    SimpleSiteVariableForm:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        name:
          type: string
        value:
          type: string
    SiteForm:
      type: object
      properties:
        addThis:
          type: string
        aliases:
          type: string
        default:
          type: boolean
        description:
          type: string
        embeddedDashboard:
          type: string
        forceExecution:
          type: boolean
        googleAnalytics:
          type: string
        googleMap:
          type: string
        identifier:
          type: string
        inode:
          type: string
        keywords:
          type: string
        languageId:
          type: integer
          format: int64
        proxyUrlForEditMode:
          type: string
        runDashboard:
          type: boolean
        siteName:
          type: string
        siteThumbnail:
          type: string
        tagStorage:
          type: string
        variables:
          type: array
          items:
            $ref: "#/components/schemas/SimpleSiteVariableForm"
    SiteVariableForm:
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        name:
          type: string
        siteId:
          type: string
        value:
          type: string
    SiteVariableView:
      type: object
      properties:
        hostId:
          type: string
        id:
          type: string
        key:
          type: string
        lastModDate:
          type: string
          format: date-time
        lastModifierFullName:
          type: string
        lastModifierId:
          type: string
        name:
          type: string
        value:
          type: string
    SiteView:
      type: object
      properties:
        configured:
          type: boolean
        id:
          type: string
        name:
          type: string
        secrets:
          type: array
          items:
            $ref: "#/components/schemas/SecretView"
        secretsWithWarnings:
          type: integer
          format: int32
    SmallRoleView:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        roleKey:
          type: string
        user:
          type: boolean
    StoryBlockField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    SystemActionWorkflowActionMapping:
      type: object
      properties:
        identifier:
          type: string
        owner:
          type: object
        ownerContentType:
          type: boolean
        ownerScheme:
          type: boolean
        systemAction:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
        workflowAction:
          $ref: "#/components/schemas/WorkflowAction"
    SystemEvent:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
        event:
          type: string
          enum:
          - CLUSTER_WIDE_EVENT
          - NOTIFICATION
          - CREATED_SITE
          - SAVE_SITE
          - PUBLISH_SITE
          - UPDATE_SITE
          - ARCHIVE_SITE
          - DELETE_SITE
          - UN_ARCHIVE_SITE
          - UPDATE_SITE_PERMISSIONS
          - SWITCH_SITE
          - SAVE_BASE_CONTENT_TYPE
          - UPDATE_BASE_CONTENT_TYPE
          - DELETE_BASE_CONTENT_TYPE
          - SAVE_FOLDER
          - UPDATE_FOLDER
          - DELETE_FOLDER
          - SAVE_PAGE_ASSET
          - UPDATE_PAGE_ASSET
          - ARCHIVE_PAGE_ASSET
          - UN_ARCHIVE_PAGE_ASSET
          - DELETE_PAGE_ASSET
          - PUBLISH_PAGE_ASSET
          - UN_PUBLISH_PAGE_ASSET
          - SAVE_FILE_ASSET
          - UPDATE_FILE_ASSET
          - ARCHIVE_FILE_ASSET
          - UN_ARCHIVE_FILE_ASSET
          - DELETE_FILE_ASSET
          - PUBLISH_FILE_ASSET
          - UN_PUBLISH_FILE_ASSET
          - SAVE_LINK
          - UPDATE_LINK
          - ARCHIVE_LINK
          - UN_ARCHIVE_LINK
          - MOVE_LINK
          - COPY_LINK
          - DELETE_LINK
          - PUBLISH_LINK
          - UN_PUBLISH_LINK
          - MOVE_FOLDER
          - COPY_FOLDER
          - MOVE_FILE_ASSET
          - COPY_FILE_ASSET
          - MOVE_PAGE_ASSET
          - COPY_PAGE_ASSET
          - SESSION_CREATED
          - SESSION_DESTROYED
          - UPDATE_PORTLET_LAYOUTS
          - DELETE_PORTLET_LAYOUTS
          - MESSAGE
          - LARGE_MESSAGE
          - DELETE_BUNDLE
          - OSGI_FRAMEWORK_RESTART
          - OSGI_BUNDLES_LOADED
          - SESSION_LOGOUT
          - ANALYTICS_APP
          - AI_CONTENT_PROMPT
        id:
          type: string
        payload:
          $ref: "#/components/schemas/Payload"
        serverId:
          type: string
    TabDividerField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    TagField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    TagForm:
      type: object
      properties:
        ownerId:
          type: string
        tags:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/RestTag"
    TagInode:
      type: object
      properties:
        fieldVarName:
          type: string
        inode:
          type: string
        modDate:
          type: string
          format: date-time
        tagId:
          type: string
    TargetingCondition:
      type: object
      properties:
        conditionKey:
          type: string
        id:
          type: string
        operator:
          type: string
          enum:
          - AND
          - OR
        values:
          type: object
          additionalProperties:
            type: string
          properties:
            empty:
              type: boolean
    Template:
      type: object
      properties:
        anonymous:
          type: boolean
        archived:
          type: boolean
        body:
          type: string
        categoryId:
          type: string
        countAddContainer:
          type: integer
          format: int32
        countContainers:
          type: integer
          format: int32
        deleted:
          type: boolean
        drawed:
          type: boolean
        drawedBody:
          type: string
        footer:
          type: string
        friendlyName:
          type: string
        getiDate:
          type: string
          format: date-time
        headCode:
          type: string
        header:
          type: string
        idate:
          type: string
          format: date-time
        identifier:
          type: string
        image:
          type: string
        inode:
          type: string
        isTemplate:
          type: boolean
          writeOnly: true
        live:
          type: boolean
        locked:
          type: boolean
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        new:
          type: boolean
        owner:
          type: string
        parents:
          type: array
          items:
            type: object
          writeOnly: true
        permissionId:
          type: string
        permissionType:
          type: string
        selectedimage:
          type: string
        showOnMenu:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        source:
          type: string
          enum:
          - UNKNOWN
          - DB
          - FILE
        template:
          type: boolean
        theme:
          type: string
        themeName:
          type: string
        title:
          type: string
        type:
          type: string
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    TemplateForm:
      type: object
      properties:
        body:
          type: string
        countAddContainer:
          type: integer
          format: int32
        countContainers:
          type: integer
          format: int32
        drawed:
          type: boolean
        drawedBody:
          type: string
        footer:
          type: string
        footerCheck:
          type: boolean
        friendlyName:
          type: string
        headCode:
          type: string
        header:
          type: string
        headerCheck:
          type: boolean
        identifier:
          type: string
        image:
          type: string
        inode:
          type: string
        layout:
          $ref: "#/components/schemas/TemplateLayoutView"
        name:
          type: string
        selectedimage:
          type: string
        showOnMenu:
          type: boolean
        siteId:
          type: string
        sortOrder:
          type: integer
          format: int32
        theme:
          type: string
        themeName:
          type: string
        title:
          type: string
    TemplateImageForm:
      type: object
      properties:
        templateId:
          type: string
    TemplateLayout:
      type: object
      properties:
        body:
          $ref: "#/components/schemas/Body"
        bodyRows:
          type: array
          items:
            $ref: "#/components/schemas/TemplateLayoutRow"
          writeOnly: true
        footer:
          type: boolean
        header:
          type: boolean
        sidebar:
          $ref: "#/components/schemas/Sidebar"
        title:
          type: string
        version:
          type: integer
          format: int32
        width:
          type: string
    TemplateLayoutColumn:
      type: object
      properties:
        containers:
          type: array
          items:
            $ref: "#/components/schemas/ContainerUUID"
        left:
          type: integer
          format: int32
        leftOffset:
          type: integer
          format: int32
        preview:
          type: boolean
        styleClass:
          type: string
        width:
          type: integer
          format: int32
        widthPercent:
          type: integer
          format: int32
    TemplateLayoutColumnView:
      type: object
      properties:
        containers:
          type: array
          items:
            $ref: "#/components/schemas/ContainerUUID"
        leftOffset:
          type: integer
          format: int32
        styleClass:
          type: string
        width:
          type: integer
          format: int32
    TemplateLayoutRow:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/TemplateLayoutColumn"
        styleClass:
          type: string
    TemplateLayoutRowView:
      type: object
      properties:
        columns:
          type: array
          items:
            $ref: "#/components/schemas/TemplateLayoutColumnView"
        styleClass:
          type: string
    TemplateLayoutView:
      type: object
      properties:
        body:
          $ref: "#/components/schemas/BodyView"
        footer:
          type: boolean
        header:
          type: boolean
        sidebar:
          $ref: "#/components/schemas/SidebarView"
        title:
          type: string
        width:
          type: string
    TemplateView:
      type: object
      properties:
        body:
          type: string
        canPublish:
          type: boolean
        canRead:
          type: boolean
        canWrite:
          type: boolean
        categoryId:
          type: string
        containers:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ContainerView"
        countAddContainer:
          type: integer
          format: int32
        countContainers:
          type: integer
          format: int32
        deleted:
          type: boolean
        drawed:
          type: boolean
        drawedBody:
          type: string
        footer:
          type: string
        friendlyName:
          type: string
        fullTitle:
          type: string
        hasLiveVersion:
          type: boolean
        headCode:
          type: string
        header:
          type: string
        hostId:
          type: string
        hostName:
          type: string
        htmlTitle:
          type: string
        identifier:
          type: string
        image:
          type: string
        inode:
          type: string
        layout:
          $ref: "#/components/schemas/TemplateLayoutView"
        live:
          type: boolean
        locked:
          type: boolean
        lockedBy:
          type: string
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        name:
          type: string
        new:
          type: boolean
        owner:
          type: string
        selectedimage:
          type: string
        showOnMenu:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        theme:
          type: string
        themeInfo:
          $ref: "#/components/schemas/ThemeView"
        themeName:
          type: string
        title:
          type: string
        working:
          type: boolean
    TextAreaField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    TextField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    ThemeView:
      type: object
      properties:
        defaultFileType:
          type: string
        filesMasks:
          type: string
        getiDate:
          type: string
          format: date-time
        hostId:
          type: string
        identifier:
          type: string
        inode:
          type: string
        modDate:
          type: string
          format: date-time
        name:
          type: string
        path:
          type: string
        showOnMenu:
          type: boolean
        sortOrder:
          type: integer
          format: int32
        title:
          type: string
        type:
          type: string
    TimeField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
    TotalSession:
      type: object
      properties:
        total:
          type: integer
          format: int64
        variants:
          type: object
          additionalProperties:
            type: integer
            format: int64
    TrafficProportion:
      type: object
      properties:
        type:
          type: string
          enum:
          - SPLIT_EVENLY
          - CUSTOM_PERCENTAGES
        variants:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentVariant"
          uniqueItems: true
    Tuple2SystemActionString:
      type: object
      properties:
        _1:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
        _2:
          type: string
    UniqueBySessionResume:
      type: object
      properties:
        conversionRate:
          type: number
          format: float
        count:
          type: integer
          format: int64
    UpdateCurrentUserForm:
      type: object
      properties:
        currentPassword:
          type: string
        email:
          type: string
        givenName:
          type: string
        newPassword:
          type: string
        surname:
          type: string
        userId:
          type: string
    UpdateFieldForm:
      type: object
      properties:
        field:
          $ref: "#/components/schemas/Field"
    UpdateTagForm:
      type: object
      properties:
        siteId:
          type: string
        tagId:
          type: string
        tagName:
          type: string
    UpgradeTaskForm:
      type: object
      properties:
        upgradeTaskClass:
          type: string
    User:
      type: object
      properties:
        active:
          type: boolean
        actualCompanyId:
          type: string
        additionalInfo:
          type: object
          additionalProperties:
            type: object
        agreedToTermsOfUse:
          type: boolean
        aimId:
          type: string
        anonymousUser:
          type: boolean
        birthday:
          type: string
          format: date-time
        comments:
          type: string
        companyId:
          type: string
        createDate:
          type: string
          format: date-time
        defaultUser:
          type: boolean
        deleteDate:
          type: string
          format: date-time
        deleteInProgress:
          type: boolean
        dottedSkins:
          type: boolean
        emailAddress:
          type: string
        failedLoginAttempts:
          type: integer
          format: int32
        favoriteActivity:
          type: string
        favoriteBibleVerse:
          type: string
        favoriteFood:
          type: string
        favoriteMovie:
          type: string
        favoriteMusic:
          type: string
        female:
          type: boolean
        firstName:
          type: string
        fullName:
          type: string
        greeting:
          type: string
        icqId:
          type: string
        languageId:
          type: string
        lastLoginDate:
          type: string
          format: date-time
        lastLoginIP:
          type: string
        lastName:
          type: string
        layoutIds:
          type: string
        locale:
          type: object
          properties:
            country:
              type: string
            displayCountry:
              type: string
            displayLanguage:
              type: string
            displayName:
              type: string
            displayScript:
              type: string
            displayVariant:
              type: string
            extensionKeys:
              type: array
              items:
                type: string
              uniqueItems: true
            iso3Country:
              type: string
            iso3Language:
              type: string
            language:
              type: string
            script:
              type: string
            unicodeLocaleAttributes:
              type: array
              items:
                type: string
              uniqueItems: true
            unicodeLocaleKeys:
              type: array
              items:
                type: string
              uniqueItems: true
            variant:
              type: string
        loginDate:
          type: string
          format: date-time
        loginIP:
          type: string
        male:
          type: boolean
        middleName:
          type: string
        modificationDate:
          type: string
          format: date-time
        modified:
          type: boolean
        msnId:
          type: string
        multipleRecipients:
          type: boolean
        new:
          type: boolean
        nickName:
          type: string
        password:
          type: string
        passwordEncrypted:
          type: boolean
        passwordExpirationDate:
          type: string
          format: date-time
        passwordExpired:
          type: boolean
        passwordReset:
          type: boolean
        recipientAddress:
          type: string
        recipientId:
          type: string
        recipientInternetAddress:
          type: string
        recipientName:
          type: string
        refreshRate:
          type: string
        resolution:
          type: string
        roundedSkins:
          type: boolean
        skinId:
          type: string
        smsId:
          type: string
        timeZone:
          type: object
          properties:
            displayName:
              type: string
            dstsavings:
              type: integer
              format: int32
            id:
              type: string
            rawOffset:
              type: integer
              format: int32
        timeZoneId:
          type: string
        userId:
          type: string
        userRole:
          $ref: "#/components/schemas/Role"
        ymId:
          type: string
    UserAPI:
      type: object
      properties:
        anonymousUser:
          $ref: "#/components/schemas/User"
        anonymousUserNoThrow:
          $ref: "#/components/schemas/User"
        defaultUser:
          $ref: "#/components/schemas/User"
        systemUser:
          $ref: "#/components/schemas/User"
        unDeletedUsers:
          type: array
          items:
            $ref: "#/components/schemas/User"
    UserAgent:
      type: object
      properties:
        browser:
          type: string
          enum:
          - OUTLOOK
          - OUTLOOK2007
          - OUTLOOK2013
          - OUTLOOK2010
          - IE
          - OUTLOOK_EXPRESS7
          - IEMOBILE11
          - IEMOBILE10
          - IEMOBILE9
          - IEMOBILE7
          - IEMOBILE6
          - IE_XBOX
          - IE11
          - IE10
          - IE9
          - IE8
          - IE7
          - IE6
          - IE5_5
          - IE5
          - EDGE
          - EDGE_MOBILE
          - EDGE_MOBILE12
          - EDGE13
          - EDGE12
          - CHROME
          - CHROME_MOBILE
          - CHROME49
          - CHROME48
          - CHROME47
          - CHROME46
          - CHROME45
          - CHROME44
          - CHROME43
          - CHROME42
          - CHROME41
          - CHROME40
          - CHROME39
          - CHROME38
          - CHROME37
          - CHROME36
          - CHROME35
          - CHROME34
          - CHROME33
          - CHROME32
          - CHROME31
          - CHROME30
          - CHROME29
          - CHROME28
          - CHROME27
          - CHROME26
          - CHROME25
          - CHROME24
          - CHROME23
          - CHROME22
          - CHROME21
          - CHROME20
          - CHROME19
          - CHROME18
          - CHROME17
          - CHROME16
          - CHROME15
          - CHROME14
          - CHROME13
          - CHROME12
          - CHROME11
          - CHROME10
          - CHROME9
          - CHROME8
          - OMNIWEB
          - FIREFOX
          - FIREFOX3MOBILE
          - FIREFOX_MOBILE
          - FIREFOX_MOBILE23
          - FIREFOX_MOBILE_IOS
          - FIREFOX45
          - FIREFOX44
          - FIREFOX43
          - FIREFOX42
          - FIREFOX41
          - FIREFOX40
          - FIREFOX39
          - FIREFOX38
          - FIREFOX37
          - FIREFOX36
          - FIREFOX35
          - FIREFOX34
          - FIREFOX33
          - FIREFOX32
          - FIREFOX31
          - FIREFOX30
          - FIREFOX29
          - FIREFOX28
          - FIREFOX27
          - FIREFOX26
          - FIREFOX25
          - FIREFOX24
          - FIREFOX23
          - FIREFOX22
          - FIREFOX21
          - FIREFOX20
          - FIREFOX19
          - FIREFOX18
          - FIREFOX17
          - FIREFOX16
          - FIREFOX15
          - FIREFOX14
          - FIREFOX13
          - FIREFOX12
          - FIREFOX11
          - FIREFOX10
          - FIREFOX9
          - FIREFOX8
          - FIREFOX7
          - FIREFOX6
          - FIREFOX5
          - FIREFOX4
          - FIREFOX3
          - FIREFOX2
          - FIREFOX1_5
          - SAFARI
          - BLACKBERRY10
          - MOBILE_SAFARI
          - SILK
          - SAFARI9
          - SAFARI8
          - SAFARI7
          - SAFARI6
          - SAFARI5
          - SAFARI4
          - COAST
          - COAST1
          - OPERA
          - OPERA_MOBILE
          - OPERA_MINI
          - OPERA34
          - OPERA33
          - OPERA32
          - OPERA31
          - OPERA30
          - OPERA29
          - OPERA28
          - OPERA27
          - OPERA26
          - OPERA25
          - OPERA24
          - OPERA23
          - OPERA20
          - OPERA19
          - OPERA18
          - OPERA17
          - OPERA16
          - OPERA15
          - OPERA12
          - OPERA11
          - OPERA10
          - OPERA9
          - KONQUEROR
          - DOLFIN2
          - APPLE_WEB_KIT
          - APPLE_ITUNES
          - APPLE_APPSTORE
          - ADOBE_AIR
          - LOTUS_NOTES
          - CAMINO
          - CAMINO2
          - FLOCK
          - THUNDERBIRD
          - THUNDERBIRD12
          - THUNDERBIRD11
          - THUNDERBIRD10
          - THUNDERBIRD8
          - THUNDERBIRD7
          - THUNDERBIRD6
          - THUNDERBIRD3
          - THUNDERBIRD2
          - VIVALDI
          - SEAMONKEY
          - BOT
          - BOT_MOBILE
          - MOZILLA
          - CFNETWORK
          - EUDORA
          - POCOMAIL
          - THEBAT
          - NETFRONT
          - EVOLUTION
          - LYNX
          - DOWNLOAD
          - UNKNOWN
          - APPLE_MAIL
        browserVersion:
          $ref: "#/components/schemas/Version"
        id:
          type: integer
          format: int32
        operatingSystem:
          type: string
          enum:
          - WINDOWS
          - WINDOWS_10
          - WINDOWS_81
          - WINDOWS_8
          - WINDOWS_7
          - WINDOWS_VISTA
          - WINDOWS_2000
          - WINDOWS_XP
          - WINDOWS_10_MOBILE
          - WINDOWS_PHONE8_1
          - WINDOWS_PHONE8
          - WINDOWS_MOBILE7
          - WINDOWS_MOBILE
          - WINDOWS_98
          - XBOX_OS
          - ANDROID
          - ANDROID6
          - ANDROID6_TABLET
          - ANDROID5
          - ANDROID5_TABLET
          - ANDROID4
          - ANDROID4_TABLET
          - ANDROID4_WEARABLE
          - ANDROID3_TABLET
          - ANDROID2
          - ANDROID2_TABLET
          - ANDROID1
          - ANDROID_MOBILE
          - ANDROID_TABLET
          - CHROME_OS
          - WEBOS
          - PALM
          - MEEGO
          - IOS
          - iOS9_IPHONE
          - iOS8_4_IPHONE
          - iOS8_3_IPHONE
          - iOS8_2_IPHONE
          - iOS8_1_IPHONE
          - iOS8_IPHONE
          - iOS7_IPHONE
          - iOS6_IPHONE
          - iOS5_IPHONE
          - iOS4_IPHONE
          - MAC_OS_X_IPAD
          - iOS9_IPAD
          - iOS8_4_IPAD
          - iOS8_3_IPAD
          - iOS8_2_IPAD
          - iOS8_1_IPAD
          - iOS8_IPAD
          - iOS7_IPAD
          - iOS6_IPAD
          - MAC_OS_X_IPHONE
          - MAC_OS_X_IPOD
          - MAC_OS_X
          - MAC_OS
          - MAEMO
          - BADA
          - GOOGLE_TV
          - KINDLE
          - KINDLE3
          - KINDLE2
          - LINUX
          - UBUNTU
          - UBUNTU_TOUCH_MOBILE
          - SYMBIAN
          - SYMBIAN9
          - SYMBIAN8
          - SYMBIAN7
          - SYMBIAN6
          - SERIES40
          - SONY_ERICSSON
          - SUN_OS
          - PSP
          - WII
          - BLACKBERRY
          - BLACKBERRY7
          - BLACKBERRY6
          - BLACKBERRY_TABLET
          - ROKU
          - PROXY
          - UNKNOWN_MOBILE
          - UNKNOWN_TABLET
          - UNKNOWN
    UserDeletedView:
      type: object
      properties:
        deletedUser:
          type: string
        reassignedTo:
          type: string
        status:
          type: string
    UserForm:
      type: object
      properties:
        active:
          type: boolean
        additionalInfo:
          type: object
          additionalProperties:
            type: object
        birthday:
          type: string
        email:
          type: string
        firstName:
          type: string
        languageId:
          type: string
        lastName:
          type: string
        male:
          type: boolean
        middleName:
          type: string
        nickName:
          type: string
        password:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            type: string
        timeZoneId:
          type: string
        userId:
          type: string
    VanityURLView:
      type: object
      properties:
        forwardTo:
          type: string
        id:
          type: string
        response:
          type: integer
          format: int32
        siteId:
          type: string
        url:
          type: string
    VanityUrlContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    Variant:
      type: object
      properties:
        archived:
          type: boolean
        description:
          type: string
        name:
          type: string
    VariantForm:
      type: object
      properties:
        description:
          type: string
        name:
          type: string
    VariantResult:
      type: object
      properties:
        conversionRate:
          type: number
          format: double
        credibilityInterval:
          $ref: "#/components/schemas/CredibilityInterval"
        expectedLoss:
          type: number
          format: double
        isControl:
          type: boolean
        medianGrowth:
          type: number
          format: double
        probability:
          type: number
          format: double
        risk:
          type: number
          format: double
        variant:
          type: string
    VariantResults:
      type: object
      properties:
        details:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ResultResumeItem"
        uniqueBySession:
          $ref: "#/components/schemas/UniqueBySessionResume"
        variantDescription:
          type: string
        variantName:
          type: string
        weight:
          type: number
          format: float
    Version:
      type: object
      properties:
        majorVersion:
          type: string
        minorVersion:
          type: string
        version:
          type: string
    VersionableView:
      type: object
      properties:
        archived:
          type: boolean
        inode:
          type: string
        language:
          $ref: "#/components/schemas/Language"
        live:
          type: boolean
        locked:
          type: boolean
        modDate:
          type: string
          format: date-time
        modUser:
          type: string
        title:
          type: string
        versionId:
          type: string
        versionType:
          type: string
        working:
          type: boolean
    ViewAsPageStatus:
      type: object
      properties:
        device:
          $ref: "#/components/schemas/Contentlet"
        language:
          $ref: "#/components/schemas/Language"
        pageMode:
          type: string
          enum:
          - LIVE
          - ADMIN_MODE
          - PREVIEW_MODE
          - WORKING
          - EDIT_MODE
          - NAVIGATE_EDIT_MODE
        persona:
          $ref: "#/components/schemas/IPersona"
        personalized:
          type: boolean
        variantId:
          type: string
        visitor:
          $ref: "#/components/schemas/Visitor"
    Visitor:
      type: object
      properties:
        accruedTags:
          type: array
          items:
            $ref: "#/components/schemas/AccruedTag"
        device:
          type: string
        dmid:
          type: string
          format: uuid
        geo:
          $ref: "#/components/schemas/Geolocation"
        ipAddress:
          type: object
          properties:
            address:
              type: string
              format: byte
            anyLocalAddress:
              type: boolean
            canonicalHostName:
              type: string
            hostAddress:
              type: string
            hostName:
              type: string
            linkLocalAddress:
              type: boolean
            loopbackAddress:
              type: boolean
            mcglobal:
              type: boolean
            mclinkLocal:
              type: boolean
            mcnodeLocal:
              type: boolean
            mcorgLocal:
              type: boolean
            mcsiteLocal:
              type: boolean
            multicastAddress:
              type: boolean
            siteLocalAddress:
              type: boolean
        lastRequestDate:
          type: string
          format: date-time
        locale:
          type: object
          properties:
            country:
              type: string
            displayCountry:
              type: string
            displayLanguage:
              type: string
            displayName:
              type: string
            displayScript:
              type: string
            displayVariant:
              type: string
            extensionKeys:
              type: array
              items:
                type: string
              uniqueItems: true
            iso3Country:
              type: string
            iso3Language:
              type: string
            language:
              type: string
            script:
              type: string
            unicodeLocaleAttributes:
              type: array
              items:
                type: string
              uniqueItems: true
            unicodeLocaleKeys:
              type: array
              items:
                type: string
              uniqueItems: true
            variant:
              type: string
        newVisitor:
          type: boolean
        numberPagesViewed:
          type: integer
          format: int32
        persona:
          $ref: "#/components/schemas/Persona"
        personaCounts:
          type: object
          additionalProperties:
            type: integer
            format: int64
        personas:
          type: array
          items:
            type: string
        referrer:
          type: string
          format: uri
        selectedLanguage:
          $ref: "#/components/schemas/Language"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/AccruedTag"
        userAgent:
          $ref: "#/components/schemas/UserAgent"
        weightedPersonas:
          type: object
          additionalProperties:
            type: number
            format: float
    WebAssetEntityView:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/WebAssetView"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ErrorEntity"
        i18nMessagesMap:
          type: object
          additionalProperties:
            type: string
        messages:
          type: array
          items:
            $ref: "#/components/schemas/MessageEntity"
        pagination:
          $ref: "#/components/schemas/Pagination"
        permissions:
          type: array
          items:
            type: string
    WebAssetView:
      type: object
    WidgetContentType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ContentType"
      - type: object
        properties:
          defaultType:
            type: boolean
          description:
            type: string
          detailPage:
            type: string
          expireDateVar:
            type: string
          fixed:
            type: boolean
          folder:
            type: string
          folderPath:
            type: string
          host:
            type: string
          iDate:
            type: string
            format: date-time
          icon:
            type: string
          id:
            type: string
          metadata:
            type: object
            additionalProperties:
              type: object
          modDate:
            type: string
            format: date-time
          multilingualable:
            type: boolean
          name:
            type: string
          publishDateVar:
            type: string
          siteName:
            type: string
          sortOrder:
            type: integer
            format: int32
          system:
            type: boolean
          urlMapPattern:
            type: string
          variable:
            type: string
          versionable:
            type: boolean
    WorkFlowActionlet:
      type: object
      properties:
        actionClass:
          type: string
        howTo:
          type: string
        localizedHowto:
          type: string
        localizedName:
          type: string
        name:
          type: string
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowActionletParameter"
    WorkflowAction:
      type: object
      properties:
        archiveActionlet:
          type: boolean
          writeOnly: true
        assignable:
          type: boolean
        commentActionlet:
          type: boolean
          writeOnly: true
        commentable:
          type: boolean
        condition:
          type: string
        deleteActionlet:
          type: boolean
          writeOnly: true
        destroyActionlet:
          type: boolean
          writeOnly: true
        hasArchiveActionlet:
          type: boolean
        hasCommentActionlet:
          type: boolean
        hasDeleteActionlet:
          type: boolean
        hasDestroyActionlet:
          type: boolean
        hasMoveActionletActionlet:
          type: boolean
        hasMoveActionletHasPathActionlet:
          type: boolean
        hasOnlyBatchActionlet:
          type: boolean
        hasPublishActionlet:
          type: boolean
        hasPushPublishActionlet:
          type: boolean
        hasResetActionlet:
          type: boolean
        hasSaveActionlet:
          type: boolean
        hasUnarchiveActionlet:
          type: boolean
        hasUnpublishActionlet:
          type: boolean
        icon:
          type: string
        id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: object
        moveActionlet:
          type: boolean
          writeOnly: true
        moveActionletHashPath:
          type: boolean
          writeOnly: true
        name:
          type: string
        nextAssign:
          type: string
        nextStep:
          type: string
        nextStepCurrentStep:
          type: boolean
        onlyBatchActionlet:
          type: boolean
          writeOnly: true
        order:
          type: integer
          format: int32
        owner:
          type: string
        publishActionlet:
          type: boolean
          writeOnly: true
        pushPublishActionlet:
          type: boolean
          writeOnly: true
        resetable:
          type: boolean
          writeOnly: true
        roleHierarchyForAssign:
          type: boolean
        saveActionlet:
          type: boolean
          writeOnly: true
        schemeId:
          type: string
        showOn:
          type: array
          items:
            type: string
            enum:
            - NEW
            - LOCKED
            - UNLOCKED
            - PUBLISHED
            - UNPUBLISHED
            - ARCHIVED
            - LISTING
            - EDITING
          uniqueItems: true
        unarchiveActionlet:
          type: boolean
          writeOnly: true
        unpublishActionlet:
          type: boolean
          writeOnly: true
    WorkflowActionClass:
      type: object
      properties:
        actionId:
          type: string
        actionlet:
          $ref: "#/components/schemas/WorkFlowActionlet"
        clazz:
          type: string
        id:
          type: string
        name:
          type: string
        order:
          type: integer
          format: int32
    WorkflowActionClassParameter:
      type: object
      properties:
        actionClassId:
          type: string
        id:
          type: string
        key:
          type: string
        value:
          type: string
    WorkflowActionForm:
      type: object
      properties:
        actionAssignable:
          type: boolean
        actionCommentable:
          type: boolean
        actionCondition:
          type: string
        actionIcon:
          type: string
        actionId:
          type: string
        actionName:
          type: string
        actionNextAssign:
          type: string
        actionNextStep:
          type: string
        actionRoleHierarchyForAssign:
          type: boolean
        metadata:
          type: object
          additionalProperties:
            type: object
        schemeId:
          type: string
        showOn:
          type: array
          items:
            type: string
            enum:
            - NEW
            - LOCKED
            - UNLOCKED
            - PUBLISHED
            - UNPUBLISHED
            - ARCHIVED
            - LISTING
            - EDITING
          uniqueItems: true
        stepId:
          type: string
        whoCanUse:
          type: array
          items:
            type: string
    WorkflowActionSeparatorForm:
      type: object
      properties:
        schemeId:
          type: string
        stepId:
          type: string
    WorkflowActionStepForm:
      type: object
      properties:
        actionId:
          type: string
    WorkflowActionView:
      type: object
      properties:
        actionInputs:
          type: array
          items:
            $ref: "#/components/schemas/ActionInputView"
        archiveActionlet:
          type: boolean
          writeOnly: true
        assignable:
          type: boolean
        commentActionlet:
          type: boolean
          writeOnly: true
        commentable:
          type: boolean
        condition:
          type: string
        deleteActionlet:
          type: boolean
          writeOnly: true
        destroyActionlet:
          type: boolean
          writeOnly: true
        hasArchiveActionlet:
          type: boolean
        hasCommentActionlet:
          type: boolean
        hasDeleteActionlet:
          type: boolean
        hasDestroyActionlet:
          type: boolean
        hasMoveActionletActionlet:
          type: boolean
        hasMoveActionletHasPathActionlet:
          type: boolean
        hasOnlyBatchActionlet:
          type: boolean
        hasPublishActionlet:
          type: boolean
        hasPushPublishActionlet:
          type: boolean
        hasResetActionlet:
          type: boolean
        hasSaveActionlet:
          type: boolean
        hasUnarchiveActionlet:
          type: boolean
        hasUnpublishActionlet:
          type: boolean
        icon:
          type: string
        id:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: object
        moveActionlet:
          type: boolean
          writeOnly: true
        moveActionletHashPath:
          type: boolean
          writeOnly: true
        name:
          type: string
        nextAssign:
          type: string
        nextStep:
          type: string
        nextStepCurrentStep:
          type: boolean
        onlyBatchActionlet:
          type: boolean
          writeOnly: true
        order:
          type: integer
          format: int32
        owner:
          type: string
        publishActionlet:
          type: boolean
          writeOnly: true
        pushPublishActionlet:
          type: boolean
          writeOnly: true
        resetable:
          type: boolean
          writeOnly: true
        roleHierarchyForAssign:
          type: boolean
        saveActionlet:
          type: boolean
          writeOnly: true
        schemeId:
          type: string
        showOn:
          type: array
          items:
            type: string
            enum:
            - NEW
            - LOCKED
            - UNLOCKED
            - PUBLISHED
            - UNPUBLISHED
            - ARCHIVED
            - LISTING
            - EDITING
          uniqueItems: true
        unarchiveActionlet:
          type: boolean
          writeOnly: true
        unpublishActionlet:
          type: boolean
          writeOnly: true
    WorkflowActionletActionForm:
      type: object
      properties:
        actionletClass:
          type: string
        order:
          type: integer
          format: int32
        parameters:
          type: object
          additionalProperties:
            type: string
    WorkflowActionletParameter:
      type: object
      properties:
        defaultValue:
          type: string
        displayName:
          type: string
        key:
          type: string
        required:
          type: boolean
    WorkflowCommentForm:
      type: object
      properties:
        comment:
          type: string
    WorkflowCopyForm:
      type: object
      properties:
        name:
          type: string
    WorkflowDefaultActionView:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/WorkflowAction"
        firstStep:
          $ref: "#/components/schemas/WorkflowStep"
        scheme:
          $ref: "#/components/schemas/WorkflowScheme"
    WorkflowFormEntry:
      type: object
      properties:
        id:
          type: string
        variableName:
          type: string
    WorkflowReorderWorkflowActionStepForm:
      type: object
      properties:
        order:
          type: integer
          format: int32
    WorkflowScheme:
      type: object
      properties:
        archived:
          type: boolean
        creationDate:
          type: string
          format: date-time
        defaultScheme:
          type: boolean
        description:
          type: string
        entryActionId:
          type: string
        id:
          type: string
        mandatory:
          type: boolean
        modDate:
          type: string
          format: date-time
        name:
          type: string
        system:
          type: boolean
        variableName:
          type: string
    WorkflowSchemeForm:
      type: object
      properties:
        schemeArchived:
          type: boolean
        schemeDescription:
          type: string
        schemeName:
          type: string
    WorkflowSchemeImportExportObjectView:
      type: object
      properties:
        actionClassParams:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowActionClassParameter"
        actionClasses:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowActionClass"
        actionSteps:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
        actions:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowAction"
        schemeSystemActionWorkflowActionMappings:
          type: array
          items:
            $ref: "#/components/schemas/SystemActionWorkflowActionMapping"
        schemes:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowScheme"
        steps:
          type: array
          items:
            $ref: "#/components/schemas/WorkflowStep"
        version:
          type: string
    WorkflowSchemeImportObjectForm:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
        workflowObject:
          $ref: "#/components/schemas/WorkflowSchemeImportExportObjectView"
    WorkflowSchemesForm:
      type: object
      properties:
        schemes:
          type: array
          items:
            type: string
          uniqueItems: true
    WorkflowStep:
      type: object
      properties:
        creationDate:
          type: string
          format: date-time
        enableEscalation:
          type: boolean
        escalationAction:
          type: string
        escalationTime:
          type: integer
          format: int32
        id:
          type: string
        myOrder:
          type: integer
          format: int32
        name:
          type: string
        resolved:
          type: boolean
        schemeId:
          type: string
    WorkflowStepAddForm:
      type: object
      properties:
        enableEscalation:
          type: boolean
        escalationAction:
          type: string
        escalationTime:
          type: string
        schemeId:
          type: string
        stepName:
          type: string
        stepResolved:
          type: boolean
    WorkflowStepUpdateForm:
      type: object
      properties:
        enableEscalation:
          type: boolean
        escalationAction:
          type: string
        escalationTime:
          type: string
        stepName:
          type: string
        stepOrder:
          type: integer
          format: int32
        stepResolved:
          type: boolean
    WorkflowSystemActionForm:
      type: object
      properties:
        actionId:
          type: string
        contentTypeVariable:
          type: string
        schemeId:
          type: string
        systemAction:
          type: string
          enum:
          - NEW
          - EDIT
          - PUBLISH
          - UNPUBLISH
          - ARCHIVE
          - UNARCHIVE
          - DELETE
          - DESTROY
    WorkflowTask:
      type: object
      properties:
        assignedTo:
          type: string
        belongsTo:
          type: string
        createdBy:
          type: string
        creationDate:
          type: string
          format: date-time
        description:
          type: string
        dueDate:
          type: string
          format: date-time
        id:
          type: string
        inode:
          type: string
        languageId:
          type: integer
          format: int64
        modDate:
          type: string
          format: date-time
        new:
          type: boolean
        status:
          type: string
        title:
          type: string
        webasset:
          type: string
    WorkflowTimelineItemView:
      type: object
      properties:
        commentDescription:
          type: string
        createdDate:
          type: string
          format: date-time
        postedBy:
          type: string
        roleId:
          type: string
        taskId:
          type: string
        type:
          type: string
    WysiwygField:
      type: object
      allOf:
      - $ref: "#/components/schemas/Field"
      - type: object
        properties:
          contentTypeId:
            type: string
          dataType:
            type: string
            enum:
            - none
            - bool
            - date
            - float
            - integer
            - text
            - text_area
            - system_field
          dbColumn:
            type: string
          defaultValue:
            type: string
          fixed:
            type: boolean
          forceIncludeInApi:
            type: boolean
          hint:
            type: string
          iDate:
            type: string
            format: date-time
          id:
            type: string
          indexed:
            type: boolean
          listed:
            type: boolean
          modDate:
            type: string
            format: date-time
          name:
            type: string
          owner:
            type: string
          readOnly:
            type: boolean
          regexCheck:
            type: string
          relationType:
            type: string
          required:
            type: boolean
          searchable:
            type: boolean
          sortOrder:
            type: integer
            format: int32
          unique:
            type: boolean
          values:
            type: string
          variable:
            type: string
