buildscript {
    repositories { jcenter() }
    dependencies {classpath 'org.ajoberstar:grgit:1.7.0'}
}

configurations {
    compile
    buildlibs
    starter
    coreWeb
    provided
    felix
}

configurations.all({
    // dynamic: e.g. 'version: 2.0+'
    resolutionStrategy.cacheDynamicVersionsFor 1, 'hours'
    // changing: e.g. 'version 2.0.0-SNAPSHOT'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

    /*POM relocation to an other version number is not fully supported in Gradle : xml-apis#xml-apis;2.0.2 relocated to xml-apis#xml-apis;1.0.b2.
            Please update your dependency to directly use the correct version 'xml-apis#xml-apis;1.0.b2'.
    Resolution will only pick dependencies of the relocated element.  Artifacts and other metadata will be ignored.*/
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.4.01'
    }
})


// Apply the java plugin to add support for Java.
apply plugin: 'java'
apply plugin: 'war'

// In this section you declare where to find the dependencies of your project.
repositories {
    maven { url "http://repo.dotcms.com/artifactory/libs-release" }
    maven { url "http://repo.dotcms.com/artifactory/libs-snapshot-local" }
}

// Import and apply the dependencies from the dependencies scripts.
apply from: "$rootDir/dependencies.gradle"

ant.lifecycleLogLevel = "INFO"

ext {
    // Open the Git repository in the current directory.
    git = org.ajoberstar.grgit.Grgit.open(file('..'))

    dotcmsReleaseName='dotCMS Platform'
    dotcmsReleaseVersion='3.7.0'
    dotcmsReleaseCodename='Panther'
    dotcmsReleaseBuild='999999'
    dotcmsReleaseDdate='Jun 08, 1986'
    dotcmsReleaseBuild = git.head().abbreviatedId // abbreviatedId of head() method.
    dotcmsReleaseDdate = getDate()
}

archivesBaseName = 'dotcms_'+dotcmsReleaseVersion+'_'+dotcmsReleaseBuild

// Compile Java.
compileJava {
    targetCompatibility = 1.8
    sourceCompatibility = 1.8
}

// Expand the release properties.
processResources {
    filesMatching("release.properties") {
        expand( project.properties )
    }
}

// By default the war task compiles everything under src/main/java into WEB-INF/classes/
// but, instead, we want to compile everything on a .jar file and put it under WEB-INF/lib.
war.dependsOn 'deployPlugins'
war {
    classpath = classpath - sourceSets.main.output.classesDir
    from (jar) {
        into 'WEB-INF/lib'
    }

    from (configurations.felix) {
        into felixFolder
    }

    from (configurations.compile) {
        into felixFolder
        include '**/dot.org.apache.felix.http.bundle*.jar'
    }

    from (configurations.starter) {
        into dotcmsFolder
        rename ( /starter(.+)\.zip/, "starter.zip" )
    }

    from (zipTree(configurations.coreWeb.files.toArray()[0])) {
        into rulesEngineFolder
    }
}
war.finalizedBy 'undeployPlugins'

//TODO: now that we have grgit we could use it here instead exec.
// Clones dotCMS's tomcat repo following tomcatInstall under gradle.properties.
// If the tomcat folder exists: git pull, if not: git clone.
task clonePullTomcat(type: Exec) {
    description 'Pulls git.'

    def folder = new File( tomcatInstallLocation )
    if( !folder.exists() ) {
        commandLine "git", "clone", "-b", tomcatInstallVersion, tomcatInstallRepo, tomcatInstallLocation
    } else {
        workingDir tomcatInstallLocation
        commandLine "git", "pull"
    }
}

// Copying libs/buildlibs under tomcat8/lib.
task copyBuildLibs(type: Copy) {
    from '../libs/buildlibs'
    into tomcatInstallLocation + '/lib'
    include 'mail.jar'
    include 'sqljdbc42.jar'
    include 'mysql-connector-java-5.1.37-bin.jar'
    include 'postgresql-9.0-801.jdbc3.jar'
    include 'ojdbc5.jar'
    include 'jtds-1.2.2.jar'
}
copyBuildLibs.mustRunAfter clonePullTomcat

// Delete ROOT under tomcat8/webapps
task undeployWarTomcat(type: Delete) {
  delete tomcatInstallLocation + webAppRootFolder
  followSymlinks = true
}

// Makes all the magic to place the webapp under tomcat8 for devs.
task deployWarTomcat(type: Copy) {
    dependsOn 'war', 'clonePullTomcat', 'undeployWarTomcat', 'copyBuildLibs'

    def zipFile = file("$buildDir/libs/$archivesBaseName" + ".war")
 
    from zipTree(zipFile)
    into tomcatInstallLocation + webAppRootFolder
}

// This task finds all the plugins and runs 'ant build' inside each one.
// In order to compile everything it need the dependency jars in a folder ($buildDir/pluginsLib)
task buildPlugins(dependsOn: 'jar') << {
    delete "$buildDir/pluginsLib"

    copy {
        into "$buildDir/pluginsLib"
        from configurations.compile
        from "$buildDir/libs/"
    }

    new File("src/main/plugins").eachDir() {
        def pluginPath = it
        println "Compile Plugin: " + pluginPath
        exec {
          workingDir pluginPath
          commandLine 'ant', 'build'
        }
    }
}

// TODO I think there are variables for this paths.
// This task will copy what is used to be src-conf (now under resources)
// to webapp/WEB-INF/classes in order to be merged with the plugins.
task deployConfig(type: Copy) {
    from 'src/main/resources'
    into 'src/main/webapp/WEB-INF/classes'

    filesMatching("release.properties") {
        expand( project.properties )
    }
}

//TODO Need to check ROOT folder functionality is working.
// This task will:
// 1. Copy the plugins.xml from plugins folder.
// 2. Loop over each plugin and copy the .jar file into WEB-INF/liv
// 3. Call the and task def com.dotmarketing.plugin.ant.DeployTask to merge
//    all the properties/files from the static plugins.
task deployPlugins(dependsOn: ['buildPlugins', 'deployConfig']) << {
    copy {
        from 'src/main/plugins'
        into 'src/main/webapp/WEB-INF/classes'
        include 'plugins.xml'
    }

    //<target name="deploy-plugin"/>
    new File("src/main/plugins").eachDir() {
        def pluginPath = it
        copy {
            from pluginPath.getPath() + '/build/jar'
            into 'src/main/webapp/WEB-INF/lib'
            include '*.jar'
        }
    }

    ant.taskdef(
        name: 'pluginDeployTask', 
        classname: 'com.dotmarketing.plugin.ant.DeployTask', 
        classpath: configurations.compile.asPath)
    ant.pluginDeployTask(
        distributionPath: '../', 
        dotcmsHome: 'src/main/webapp',
        plugins: 'src/main/webapp/WEB-INF/lib')    
}

// This task will:
// 1. Call the and task def com.dotmarketing.plugin.ant.UndeployTask to remove
//    all the properties/files from the static plugins.
// 2. Delete plugin.xml from classes and the html of the static plugins.
task undeployPlugins << {
    ant.taskdef(
        name: 'pluginUndeployTask', 
        classname: 'com.dotmarketing.plugin.ant.UndeployTask', 
        classpath: configurations.compile.asPath)
    ant.pluginUndeployTask(
        distributionPath: '../', 
        dotcmsHome: 'src/main/webapp',
        plugins: 'src/main/webapp/WEB-INF/lib')

    delete fileTree('src/main/webapp/WEB-INF/lib') {
        include '**/plugin-*.jar'
        include '**/pluginlib-*.jar'
    }
    delete 'src/main/webapp/WEB-INF/classes/plugins.xml'
    delete 'src/main/webapp/html/plugins'
}

// Util methods.
def getDate() {
    def fmt = new java.text.SimpleDateFormat("MMMM dd, yyyy", Locale.US)
    def formattedDate = fmt.format(new Date())
    return formattedDate
}