buildscript {
    repositories {
        maven  {
            url "https://repo.dotcms.com/artifactory/libs-release"
            mavenCentral()
        }
    }
    dependencies {
        classpath 'com.dotcms.lib:dot.commons-io:2.0.1_2'
        classpath group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.11.1'
        classpath 'org.immutables:value:2.9.0'
        classpath 'org.codehaus.groovy:groovy-json:3.0.9'
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'war'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id "com.palantir.docker" version "0.32.0"  // reference:  https://github.com/palantir/gradle-docker
    id "org.sonarqube" version "3.4.0.2513"
    id "jacoco"

}


sonarqube {
    properties {
        property "sonar.projectKey", "dotCMS_core_AYSbIemxK43eThAXTlt-"
        property "sonar.projectName", "dotcms-core"
        property "sonar.host.url", "https://sonarqube.dotcms.site"
        //property "sonar.verbose","true"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", "src/main/webapp/dotcms-webcomponents/**, src/main/plugins/**"
        property "sonar.tests", "src/test/java, src/integration-test/java"
        property "sonar.junit.reportPaths" , "${project.buildDir}/test-results/test, ${project.buildDir}/test-results/integrationTest"
        property "sonar.coverage.jacoco.xmlReportPaths" ,"${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }

}

tasks.named('sonarqube').configure {
    dependsOn 'test','jacocoTestReport'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

repositories {
    maven { url "https://repo.dotcms.com/artifactory/libs-release" }
    maven { url "https://repo.dotcms.com/artifactory/libs-snapshot-local" }
    maven { url 'https://jitpack.io' }
    mavenCentral()
}

project.ext {
    aspectjVersion = '1.9.2'
    generatedSourcesDir = project.file("$buildDir/generated/sources/annotationProcessor/java/main")

    dotcmsReleaseBuild = ''
    dotcmsReleaseName='dotCMS Platform'
    dotcmsReleaseCodename='Panther'
    dotcmsReleaseBuild='999999'
    dotcmsReleaseDdate='Jun 08, 1986'
    dotcmsReleaseDdate = getDate()

    serverFolder = "$tomcatDistInstallLocation-$tomcatInstallVersion"
    homeFolder = serverFolder + webAppRootFolder
    dotcmsHome = serverFolder + webAppRootFolder


    if (project.gradle.startParameter.taskNames.contains('deployWarTomcat') || project.gradle.startParameter.taskNames.contains('createDist')|| project.gradle.startParameter.taskNames.contains('docker')){
        try {
            git = Grgit.open(file('..'))
            dotcmsReleaseBuild = git.head().abbreviatedId // abbreviatedId of head() method.
        } catch (Exception ignored) {
            println "ERROR:>> " + ignored.getMessage()
            //Do nothing, this will fail only if git is not installed on this machine
        }
    }

    tomcatDistBase = "$distLocation/$tomcatDistInstallLocation-$tomcatInstallVersion"
    dotcmsDistBase = "../$tomcatDistInstallLocation-$tomcatInstallVersion"
}


if (project.hasProperty('jarBaseName')) {
    archivesBaseName = "$jarBaseName"
}else{
    archivesBaseName = 'dotcms_'+dotcmsReleaseVersion+'_'+dotcmsReleaseBuild
}

// Utils

// Util methods.
def static getDate() {
    def fmt = new SimpleDateFormat("MMMM dd, yyyy", Locale.US)
    def formattedDate = fmt.format(new Date())
    return formattedDate
}

//Util method that replaces the occurrence of a string in a specified file
def replaceText(filePath, fromString, toString) {
    def updatedContent = project.file(filePath.toString()).getText('UTF-8').replaceAll(fromString, toString)
    project.file(filePath.toString()).write(updatedContent, 'UTF-8')
}


jar{
    exclude 'com/dotcms/enterprise/**'

    if (gradle.startParameter.taskNames.contains("deployWarTomcatTests")) {
        from project.sourceSets.main.output + project.sourceSets.test.output + project.sourceSets.integrationTest.output
    }
}


sourceSets {

    main {

        java {
            //We only want to compile using the submodules code when using the deployWarTomcatDev task
            srcDirs = ["${project.projectDir}/src/main/java", "$enterpriseProjectHome/src/main/java",generatedSourcesDir]
        }
        resources {
            srcDirs = ["${project.projectDir}/src/main/resources","$enterpriseProjectHome/src/main/resources"]
        }
        compileClasspath = project.configurations.compileClasspath
        runtimeClasspath = project.configurations.runtimeClasspath
    }

    test {

        java {
            //We only want to compile using the submodules code when using the deployWarTomcatDev task
            srcDirs = ["${project.projectDir}/src/test/java"]
        }
        resources {
            srcDirs = ["${project.projectDir}/src/test/resources"]
        }

        compileClasspath += configurations.compileClasspath +  sourceSets.main.output
        runtimeClasspath += configurations.compileClasspath + sourceSets.main.output

        //  compileClasspath += configurations.compileClasspath + main.output
        // runtimeClasspath += configurations.runtimeClasspath + main.output
    }


    integrationTest {
        java {
            //We only want to compile using the submodules code when using the deployWarTomcatDev task
            srcDirs = ["${project.projectDir}/src/integration-test/java"]

        }
        resources {
            srcDirs = ["${project.projectDir}/src/integration-test/resources"]
        }


        // sourceSetCompileClasspath

        compileClasspath +=  sourceSets.main.output + sourceSets.test.output
        runtimeClasspath +=  sourceSets.main.output + sourceSets.test.output

        //  compileClasspath = configurations.integrationTestCompileClasspath +  sourceSets.main.output + sourceSets.test.output
        //    runtimeClasspath = configurations.integrationTestRuntimeClasspath + sourceSets.main.output + sourceSets.test.output


        // compileClasspath = configurations.integrationTestCompileClasspath +  sourceSets.main.output + sourceSets.test.output
        // runtimeClasspath = configurations.integrationTestRuntimeClasspath + sourceSets.main.output + sourceSets.test.output
    }



}

configurations {

    if(JavaVersion.current() >= JavaVersion.VERSION_11) {
        all*.exclude group: "xerces"
        all*.exclude group: "xml-apis", module: "xml-apiss"
        all*.exclude group: "com.sun.activation"
    }



    testCompileOnly.extendsFrom compileOnly
    testImplementation.extendsFrom implementation

    integrationTestCompileOnly.extendsFrom compileOnly
    integrationTestImplementation.extendsFrom compileOnly, testImplementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly

    compileOnlyResolvable.extendsFrom compileOnly
    compileOnlyResolvable.canBeResolved  true



    generate

    buildlibs

    felix
    felixsystem
    starter
    testsStarter
    profiler
    profilerDependencies
    byteBuddyAgent
}




if(JavaVersion.current() >= JavaVersion.VERSION_11) {
    sourceCompatibility = 11
    targetCompatibility = 11
}
else {
    sourceCompatibility = JavaVersion.current()
    targetCompatibility = JavaVersion.current()
}



def eeType = dotcmsReleaseVersion == "master" ? '-SNAPSHOT' : ''

dependencies {

    //ajc "org.aspectj:aspectjtools:$aspectjVersion"


    implementation "org.immutables:value:2.9.0" // for annotation processor

    annotationProcessor 'org.immutables:value:2.9.0'


    //providedCompile "org.immutables:value-annotations:2.9.0" // for annotations
    //providedCompile "org.immutables:builder:2.9.0" // for annotations
    //providedCompile "org.immutables:gson:2.9.0" // for annotations

    /*****  Felix libs need to be placed in the WEB-INF/felix/bundle directory. This was previously handled using a pre-build copy task.  *****/
    felix group: 'org.apache.felix', name: 'org.apache.felix.fileinstall', version: '3.6.4'
    felix(group: 'org.apache.felix', name: 'org.apache.felix.configadmin', version: '1.9.2') {
        transitive = false
    }
    felix(group: 'org.osgi', name: 'org.osgi.compendium', version: '4.3.1') {
        transitive = false
    }

    felix group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    felix group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'

    //// Felix system configuration
    felixsystem group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'
    felixsystem group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'

    felixsystem(group: 'org.apache.tika', name: 'tika-core', version: '1.19') {
        transitive = false
    }
    felixsystem(group: 'org.apache.tika', name: 'tika-bundle', version: '1.19') {
        transitive = false
    }
    felixsystem group: 'com.dotcms.tika', name: 'com.dotcms.tika', version: '0.2'

    felixsystem group: 'com.dotcms.samlbundle', name: 'com.dotcms.samlbundle', version: '22.03'

    //// starter config

    starter group: 'com.dotcms', name: 'starter', version: 'empty_20221018', ext: 'zip'
    //Uncomment this line if you want to download the starter that comes with data
    //starter group: 'com.dotcms', name: 'starter', version: '20221010', ext: 'zip'
    testsStarter group: 'com.dotcms', name: 'starter', version: 'empty_20220718', ext: 'zip'
    
    profiler group: 'glowroot-custom', name: 'glowroot-agent', version: '0.13.1'
    profilerDependencies group: 'glowroot-custom', name: 'collector-https-linux', version: '0.13.1'
    profilerDependencies group: 'glowroot-custom', name: 'collector-https-osx', version: '0.13.1'
    profilerDependencies group: 'glowroot-custom', name: 'collector-https-windows', version: '0.13.1'
    profilerDependencies group: 'glowroot-custom', name: 'embedded-collector', version: '0.13.1'

    //individualTestCompile sourceSets.test.output
    //integrationTestCompile sourceSets.test.output


    if (!(project.gradle.startParameter.taskNames.contains('deployWarTomcatDev') || project.gradle.startParameter.taskNames.contains('testDev'))) {

        implementation group: 'com.dotcms.enterprise', name: 'ee', version: dotcmsReleaseVersion + eeType, changing: true
    }
}

import groovy.json.JsonSlurper
import org.ajoberstar.grgit.Grgit
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import java.text.SimpleDateFormat

// Import and apply the dependencies from the dependencies scripts.
apply from: "$rootDir/dependencies.gradle"


def enterpriseSrcFolder = file("$enterpriseProjectHome/src/main/java")
idea {

    module {

        name = 'dotCMS'
        contentRoot = file('..')
        excludeDirs += file('../docker/tests/integration/output')
        excludeDirs += file('build')
        excludeDirs += file('.idea')
        excludeDirs += file('.gradle')
        //if you prefer different output folders
        inheritOutputDirs = true
        outputDir = file('build/classes/main')
        testOutputDir = file('build/classes/test')

        //Extra source dirs
        sourceDirs += file('src/main/enterprise/src/main/java')
        sourceDirs += generatedSourcesDir
        generatedSourceDirs += generatedSourcesDir
        excludeDirs += file('src/main/enterprise/build')

        //Extra test source dirs
        testSourceDirs += file('integration-test/java')
    }
}

ant.lifecycleLogLevel = "INFO"

task prepareIntegrationTests(dependsOn: ['dowloadStarterForTests', 'prepareFelixForTests']) {}
prepareIntegrationTests.group='dotCMS tests'

task dowloadStarterForTests {

    copy {
        from configurations.testsStarter
        into integrationTestResourcesFolder
        rename(/starter(.+)\.zip/, "starter.zip")
    }
}
dowloadStarterForTests.group = 'dotCMS tests'
dowloadStarterForTests.description = 'Downloads the test starter zip to the integration tests resources folder'


ext.prepareFelixExternalFolder = { String felixExternalFolder ->

    println "Configuring felix in folder [" + felixExternalFolder + "]"

    if (felixExternalFolder.startsWith("/")) {// We need an absolute path here

        copy {
            from configurations.felix
            into felixExternalFolder.concat("/bundle")
        }

        copy {
            from 'src/main/webapp/WEB-INF/felix/osgi-extra-generated.conf'
            into felixExternalFolder
        }


        copy {
            from sourceSets.main.compileClasspath
            into felixExternalFolder.concat("/bundle")
            include '**/org.apache.felix.http.api*.jar'
        }

        copy {
            from sourceSets.main.compileClasspath
            into felixExternalFolder.concat("/bundle")
            include '**/org.apache.felix.http.bundle*.jar'
        }

    } else {
        // For integration tests we need an absolute path for the felix folder
        throw new GradleException('For integration tests we need an absolute path for the felix folder')
    }

}

task prepareFelixForTests {
    group='dotCMS tests'
    description='Copies the felix bundle jars and the osgi-extra-generated.conf file to the specified felix home location'

    doLast {

        //If we want the felix folder to live in a custom folder
        if (project.hasProperty("integrationTestFelixFolder")
                && integrationTestFelixFolder?.trim()) {

            prepareFelixExternalFolder(integrationTestFelixFolder)
        }
    }

}




task integrationTest(type: Test, dependsOn:['prepareIntegrationTests']) {
    description = 'Runs the integration tests.'
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath


    // Check if we want to run the tests suite
    def singleTest = System.getProperty("test.single")
    if (null != singleTest && singleTest == "com.dotcms.MainSuite"){
        include "**/MainSuite.class"
    } else {
        exclude "**/MainSuite.class"
    }


    doFirst
            {
                if (project.hasProperty('databaseType')){
                    systemProperty "databaseType", "$databaseType"
                }
            }


    // reports.junitXml.destination project.file("$buildDir/test-results/unit-tests/xml")
    //reports.html.destination project.file("$buildDir/test-results/unit-tests/html")
    //mustRunAfter(tasks.named('test'))
}



tasks.withType(Test) {
    useJUnit()
    maxHeapSize = '1G'
    // jvmArgs = ["--add-opens=java.base/jdk.internal.loader=ALL-UNNAMED", "-javaagent:${configurations.byteBuddyAgent.singleFile}"]

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL

    }
}


// End build

//Gradle Custom Task that contains the logic for deploying the app war in the application server
//It works for dist and development versions
//Also, copies specific libraries from /libs/buildlibs to tomcat/lib folder
class DeployWarTomcatTask extends DefaultTask{
    @Input
    String tomcatPath

    @TaskAction
    def deploy(){
        copyBuildLibs(tomcatPath)

        def zipFile = project.file("$project.buildDir/libs/$project.archivesBaseName" + ".war")
        project.copy{
            from project.zipTree(zipFile)
            into tomcatPath + project.webAppRootFolder.toString()
        }

        if (project.gradle.startParameter.taskNames.contains("deployWarTomcatTests")) {
            project.replaceText("$tomcatPath$project.webAppRootFolder/WEB-INF/web.xml", "<!-- TEST FRAMEWORK SERVLETS", "<!-- TEST FRAMEWORK SERVLETS -->")
            project.replaceText("$tomcatPath$project.webAppRootFolder/WEB-INF/web.xml", "END OF TEST FRAMEWORK SERVLETS -->", "<!-- END OF TEST FRAMEWORK SERVLETS -->")
        }
    }

    // Copying libs/buildlibs under tomcat8/lib.
    def copyBuildLibs(buildLibLocation) {

        project.copy {
            from project.configurations.compileClasspath
            into buildLibLocation + '/lib'
            include '**/ojdbc*.jar'
            include '**/postgresql*.jar'
            include '**/mysql-connector-java*.jar'
            include '**/mssql-jdbc*.jar'
        }

        project.copy{
            from '../libs/buildlibs'
            into buildLibLocation + '/lib'
            include 'mail.jar'
            include 'javax.activation-1.2.0.jar'
        }

    }
}

abstract class NpmArtifactExtractTask extends DefaultTask {
    @Input
    String url = 'https://registry.npmjs.org'
    @Input
    String artifactFolder = './tmp'
    @Input
    String artifact
    @Input
    String version

    @OutputDirectory
    abstract DirectoryProperty getOutputDir();

    @TaskAction
    def extract() {
        project.mkdir(artifactFolder)
        String artifactUrl = "$url/$artifact"
        Set<String> knownTags = new HashSet<>(Arrays.asList("latest", "stable", "next", "rc"))

        String artifactVersion = knownTags.contains(version)
                ? new JsonSlurper().parse(new URL(artifactUrl))."dist-tags"[version]
                : version
        String versionUrl = "$artifactUrl/-/$artifact-${artifactVersion}.tgz"
        println "Downloading from $versionUrl"
        String downloadArtifact = "$artifactFolder/${artifact}.tgz"
        def tempDownload = project.file(downloadArtifact)
        new URL(versionUrl).withInputStream { i -> tempDownload.withOutputStream { it << i } }

        def result = project.copy {
            from project.tarTree(project.file(downloadArtifact))
            into outputDir.get().asFile
        }
        //outputs.dir(outputDir.get().asFile)
    }
}

// Clones dotCMS's tomcat repo following tomcatInstall under gradle.properties.
// If the tomcat folder exists: git pull, if not: git clone.
class ClonePullTomcatTask extends DefaultTask{
    @Input
    String tomcatLocation = project.tomcatInstallLocation

    @TaskAction
    def pull(){
        def folder = project.file( tomcatLocation )

        println folder
        if( !folder.exists() ) {

            try {
                println "Cloning the $project.tomcatInstallRepo, branch $project.tomcatInstallBranch on $tomcatLocation"
                Grgit.clone(dir: folder.absolutePath, uri: "$project.tomcatInstallRepo", refToCheckout: "$project.tomcatInstallBranch")
            } catch (Exception exception) {
                println "ERROR:>> " + exception.getMessage()
                //Do nothing, this will fail only if git is not installed on this machine
            }
        } else {

            def tomcatGit = Grgit.open(dir: folder)
            tomcatGit.pull()
        }
    }

}


// WAR

task deleteDotCmsUi(type: Delete) {
    delete "./build/$angularFolder/package"
}




task extractDotCmsUi(type: NpmArtifactExtractTask) {
    artifact = 'dotcms-ui'
    version = coreWebReleaseVersion
    outputDir = file("$buildDir/packages")
}

task cleanDotCmsUi {
    outputs.upToDateWhen { false }
    delete './tmp/dotcms-ui.tgz'
    delete "./src/main/webapp/$angularFolder"
}

task copyDotCmsUi(type: Copy) {
    from (extractDotCmsUi.outputDir.dir('package'))
    into "./src/main/webapp/$angularFolder"
    dependsOn cleanDotCmsUi
}

task cleanDotCmsWebComponents {
    outputs.upToDateWhen { false }
    delete './tmp/dotcms-webcomponents.tgz'
    delete './src/main/webapp/dotcms-webcomponents/package'
    delete './src/main/webapp/dotcms-webcomponents/dotcms-webcomponents.js'
    delete './src/main/webapp/dotcms-webcomponents/dotcms-webcomponents.esm.js'
    //Cleanup for issue #22255 can be removed when no longer required
    delete './src/main/webapp/dotcms-webcomponents/dotcms-webcomponents'
}


task extractDotCmsWebComponents(type: NpmArtifactExtractTask) {
    group = 'extract dotcms-webcomponents'
    description = 'Extracts package from dotcms-webcomponents to dotcms-webcomponents'
    artifact = 'dotcms-webcomponents'
    version = webComponentsReleaseVersion
    outputDir = file("$buildDir/dotcms-webcomponents")
    dependsOn 'cleanDotCmsWebComponents'
}

task copyDotCmsWebComponents(type: Copy) {
    from (extractDotCmsWebComponents.outputDir.dir('package/dist'))
    into "./src/main/webapp"
    include 'dotcms-webcomponents/*'
    dependsOn cleanDotCmsWebComponents
}


// By default the war task compiles everything under src/main/java into WEB-INF/classes/
// but, instead, we want to compile everything on a .jar file and put it under WEB-INF/lib.

task cleanTmp(type: Delete) {
    delete './tmp'
}


task extractDotCmsArtifacts {
    dependsOn 'copyDotCmsUi', 'copyDotCmsWebComponents'
    finalizedBy 'cleanTmp'
}

// This task finds all th plugins and runs 'ant build' inside each one.
// In order to compile everything it need the dependency jars in a folder ($buildDir/pluginsLib)
task buildPlugins(dependsOn: 'jar') {
    group='dotCMS Development'
    description='Compiles and Builds all the plugins but does not deploy.'
    doLast {
        delete "$buildDir/pluginsLib"

        copy {
            into "$buildDir/pluginsLib"
            from configurations.compile
            from "$buildDir/libs/"
        }

        println project.buildDir
        println project.buildDir

//        def pluginsFolder = new File("src/main/plugins");
        def pluginsFolder = file('src/main/plugins')

        if (!pluginsFolder.exists()) {
            pluginsFolder = project.file("../plugins")
        }

        pluginsFolder.eachDir() {
            def pluginPath = it
            println "Compile Plugin: " + pluginPath

            javaexec {
                workingDir pluginPath
                main = "-jar"
                args = [
                        "$rootDir/../bin/ant/ant-launcher.jar",
                        "-buildfile",
                        pluginPath.getAbsolutePath() + "/build.xml"
                ]
            }
        }
    }
}

task copyTestRuntimeLibs(type: Copy) {
    into "build/libs/test"
    from configurations.testRuntimeClasspath
}

// Expand the release properties.
processResources {
    filesMatching("release.properties") {
        expand( project.properties )
    }
}


war {
    dependsOn 'copyDotCmsUi'
    dependsOn 'copyDotCmsWebComponents'
    finalizedBy 'undeployPlugins'
    if (gradle.startParameter.taskNames.contains("deployWarTomcatTests")) {
        classpath = configurations.testRuntime
    }

    from (jar) {
        into 'WEB-INF/lib'
    }

    /*
    from (copyDotCmsUi)
    {
        into 'dotAdmin'
    }

    from (copyDotCmsUi)
     {
        into 'dotcms-webcomponents'
    }
    */

    // Verify if the felix folder is outside the war
    if (!felixFolder.startsWith("/")) { // Relative to the war
        from(configurations.felix) {
            into felixFolder.concat("/bundle")
        }

        from(configurations.runtimeClasspath) {
            into felixFolder.concat("/bundle")
            include '**/org.apache.felix.http.api*.jar'
        }

        from(configurations.runtimeClasspath) {
            into felixFolder.concat("/bundle")
            include '**/org.apache.felix.http.bundle*.jar'
        }
    } else { //Outside the war

        doLast {
            prepareFelixExternalFolder(felixFolder)
            exclude 'WEB-INF/felix'
        }
    }
    // verify system-felix {
        from(configurations.felixsystem) {
            into felixSystemFolder.concat("/bundle")
        }

        from(configurations.runtimeClasspath) {
            into felixSystemFolder.concat("/bundle")
            include '**/org.apache.felix.http.api*.jar'
        }
    //}

    from (configurations.starter) {
        into dotcmsFolder
        rename ( /starter(.+)\.zip/, "starter.zip" )
    }

    from (configurations.profiler) {
        into profilerFolder
        rename ( /glowroot(.+)\.jar/, "profiler.jar" )
    }
    from (configurations.profilerDependencies) {
        into profilerFolder + "/lib"
        rename ( /embedded-collector(.+)\.jar/, "glowroot-embedded-collector.jar" )
        rename ( /collector-https-linux(.+)\.jar/, "glowroot-central-collector-https-linux.jar" )
        rename ( /collector-https-osx(.+)\.jar/, "glowroot-central-collector-https-osx.jar" )
        rename ( /collector-https-windows(.+)\.jar/, "glowroot-central-collector-https-windows.jar" )
    }

}

task testDev(type: Test) {
    reports.junitXml.setDestination(file("$buildDir/test-results/unit-tests/xml"))
    reports.html.setDestination(file("$buildDir/test-results/unit-tests/html"))
}

// Distribution


task removeDistFolder(type: Delete){
    group='dotCMS Util'
    description='Removes the distribution folder.'

    mustRunAfter 'zip', 'tgzTask', 'docker'
    delete "$distLocation"
}


//Task used to create a tar.gz from the distribution
task tgzTask(type: Tar) {
    if (!"$distUpdate".toBoolean()) {
        from ("$distLocation"){
            eachFile { file ->
                if (file.getName().endsWith(".sh") || file.getName().startsWith("gradle")) {
                    file.setMode(0755)
                }
            }
        }
        destinationDir file("$outputDistLocation")
        baseName 'dotcms_'+dotcmsReleaseVersion
        extension = 'tar.gz'
        compression = Compression.GZIP
    }
}

//Task used to create a .zip file from the distribution
task zip(type: Zip) {
    group='dotCMS Util'
    description='Creates distribution as a .zip file.'
    from "$distLocation"
    destinationDir file("$outputDistLocation")
    baseName 'dotcms_'+dotcmsReleaseVersion
}

// Delete ROOT under tomcat9/webapps
task undeployWarTomcat(type: Delete) {
    group='dotCMS Util'
    description='Removes /tomcat9/webapps folder. (reset tomcat)'

    mustRunAfter 'backupWarTomcatData'

    delete tomcatInstallLocation + webAppRootFolder
    followSymlinks = true
}

// Makes all the magic to place the webapp under tomcat8 for devs.
task deployWarTomcat(type: DeployWarTomcatTask) {
    group='dotCMS Development'
    description='Will checkout the tomcat app server, generate a war structure and copy it to the just checked out tomcat. If the app server exist instead of a checkout a git pull will be use.'
    dependsOn 'war', 'clonePullTomcat', 'undeployWarTomcat'
    tomcatPath = tomcatInstallLocation
}



//Same as the deploy-war-tomcat except that it will backup the assets, dotsecure, META-INF and H2 folders
//in order to restore them after the deploy.
//This is useful in cases when you need to make a deploy-war-tomcat but keeping your current data.
task deployWarTomcatBackup(type: DeployWarTomcatTask){
    finalizedBy 'restoreBackupWarTomcatData'
    group='dotCMS Development'
    description='Same as deployWarTomcat but will also backup and restore the assets, dotsecure, META-INF and h2 database folders. (Useful for development)'

    dependsOn 'war', 'clonePullTomcat', 'backupWarTomcatData', 'undeployWarTomcat'
    tomcatPath = tomcatInstallLocation

}


//Executes deployWarTomcat task from dist version
task deployWarTomcatDist(type: DeployWarTomcatTask) {
    group='dotCMS Util'
    description='Same as deployWarTomcat but ran inside the Distribution. (Useful for development)'

    dependsOn 'war'
    tomcatPath = tomcatDistBase
}

//Same as deployWarTomcat but will use the no obfuscated version of the enterprise jars.
//(Useful for development)
task deployWarTomcatDev (dependsOn: 'deployWarTomcat') {

}
deployWarTomcatDev.finalizedBy 'generateMoveCleanEnterpriseTomcat'
deployWarTomcatDev.group='dotCMS Development'
deployWarTomcatDev.description='Same as deployWarTomcat but will use the no obfuscated version of the enterprise jar. (Useful for development)'

//Executes a pull or clone to get tomcat from the repository
task clonePullTomcat(type: ClonePullTomcatTask) {
    group='dotCMS Util'
    description='Clones or pull /tomcat9 folder.'
}


//Executes clonePullTomcat task from dist version
task clonePullTomcatDist(type: ClonePullTomcatTask) {
    group='dotCMS Util'
    description='Clones or pull /tomcat8 folder to be used on on the distribution.'
    tomcatLocation = tomcatDistBase
}

//Creates the final distribution files for dotCMS.
task createDistPrep(dependsOn: ['clonePullTomcatDist', 'deployWarTomcatDist']) {
    group='dotCMS Util'
    description='Creates distribution as a .tgz file.'

    doLast {
        copy {
            from "$rootDir/../bin"
            into "$distLocation$distBinLocation"
            filesMatching('build.con*') {
                expand(project.properties)
            }
        }

        copy {
            from "$rootDir/../"
            into "$distLocation$distBinLocation/ant"
            include "build.xml"
        }

        copy {
            into "$distLocation$confDistLocation"
            from sourceSets.main.resources
            exclude "com", "org", "release.properties"
        }

        copy {
            into "$distLocation$pluginsDistLocation"
            from "src/main/plugins"
            exclude "**/.git"
        }

        copy {
            into "$distLocation$docsDistLocation"
            from "$rootDir/../docs"
        }

        replaceText("$distLocation$distBinLocation/build.conf", "#SERVER_FOLDER", "SERVER_FOLDER")

        replaceText("$distLocation$distBinLocation/build.conf", "#HOME_FOLDER", "HOME_FOLDER")

        replaceText("$distLocation$distBinLocation/build.conf", "#target.root", "target.root")

        replaceText("$distLocation$distBinLocation/build.conf.bat", "rem set", "set")

        replaceText("$distLocation$distBinLocation/build.conf.bat", "/", "\\\\")

        if ("$distUpdate".toBoolean()) {
            delete "$tomcatDistBase$webAppRootFolder/starter.zip"
        }
    }

}

task createDist(dependsOn: ['createDistPrep','zip', 'tgzTask']) {
    group 'dotCMS Development'
    description 'Creates the final distribution files for dotCMS.'
    finalizedBy 'removeDistFolder'
}

javadoc {

    options.addStringOption('sourcepath', sourceSets.main.allJava.asPath)
    //doclint html standards in Java 8 are very strict that's why is better to turn in off
    options.addBooleanOption('Xdoclint:none', true)

    /*
     Not working, gradle bug
      https://groups.google.com/forum/#!topic/gradle-dev/R83dy_6PHMc/discussion
      https://discuss.gradle.org/t/javadoc-exclusion-question/11875
     */
    options.addStringOption('subpackages', 'com.dotmarketing:com.dotcms')

    title = "dotCMS API"
    maxMemory = "1024m"
    failOnError = false
    options.noQualifiers 'all'
    options.author(true)
    options.version(true)
    options.use(true)
    options.encoding 'utf-8'
    options.docEncoding 'utf-8'
    options.charSet 'utf-8'
    options.linkSource false
    options.links 'https://docs.oracle.com/javase/8/docs/api/'
    options.addBooleanOption("-allow-script-in-comments", true)
}


//Task meant to be use from a distribution structure using the buildwar.sh script.
//This task will just use the already deployed folder inside the app server and compressed to a war file.
task customDistWar(type: War) {
    group='dotCMS Development'
    description='Builds a dotCMS as a war. (Task mean to be use from a distribution structure using the buildwar.sh script. This task will just use the already deployed folder inside the app server and compressed into a war file.)'

    dependsOn 'deployPlugins'
    from "$dotcmsDistBase$webAppRootFolder"
    exclude "assets/**", "dotsecure/**"
    baseName "dotcms"
    destinationDirectory = file("../WAR")
}


// TODO I think there are variables for this paths.
// This task will copy what is used to be src-conf (now under resources)
// to webapp/WEB-INF/classes in order to be merged with the plugins.
task deployConfig() {
    group='dotCMS Util'
    description='This task will copy what is used to be src-conf to webapp/WEB-INF/classes in order to be merged with the plugins.'

    def resourcesFolder = project.file('src/main/resources')
    def sourceFolderPath = resourcesFolder.getAbsolutePath()
    def webAppFolderPath = project.file('src/main/webapp').getAbsolutePath()

    if (!resourcesFolder.exists()) {
        sourceFolderPath = "../$confDistLocation"
        webAppFolderPath = project.file("$dotcmsDistBase$webAppRootFolder").getAbsolutePath()
    }
    webAppFolderPath = "$webAppFolderPath/WEB-INF/classes"

    copy {
        from (sourceFolderPath)
        into webAppFolderPath
        filesMatching("release.properties") {
            expand( project.properties )
        }
    }
}

//TODO Need to check ROOT folder functionality is working.
// This task will:
// 1. Copy the plugins.xml from plugins folder.
// 2. Loop over each plugin and copy the .jar file into WEB-INF/lib
// 3. Call the and task def com.dotmarketing.plugin.ant.DeployTask to merge
//    all the properties/files from the static plugins.
task deployPlugins(dependsOn: ['buildPlugins']) {
    group='dotCMS Development'
    description='Builds and deploys all the plugins under /plugins folder.'
    doLast {

        def pluginsFolder = project.file("src/main/plugins")
        def webAppFolder = 'src/main/webapp'

        if (!pluginsFolder.exists()) {
            pluginsFolder = project.file("../plugins")
            webAppFolder = "$dotcmsDistBase$webAppRootFolder"
        }

        copy {
            from "$pluginsFolder.path"
            into "$webAppFolder/WEB-INF/classes"
            include 'plugins.xml'
        }

        //<target name="deploy-plugin"/>
        pluginsFolder.eachDir() {
            def pluginPath = it
            copy {
                from pluginPath.getPath() + '/build/jar'
                into "$webAppFolder/WEB-INF/lib"
                include '*.jar'
            }
        }

        ant.taskdef(
                name: 'pluginDeployTask',
                classname: 'com.dotmarketing.plugin.ant.DeployTask',
                classpath: configurations.compile.asPath)

        ant.pluginDeployTask(
                distributionPath: '../',
                dotcmsHome: "$webAppFolder",
                plugins: "$webAppFolder/WEB-INF/lib")
    }
}


// This task will:
// 1. Call the and task def com.dotmarketing.plugin.ant.UndeployTask to remove
//    all the properties/files from the static plugins.
// 2. Delete plugin.xml from classes and the html of the static plugins.
task undeployPlugins() {
    group='dotCMS Development'
    description='Undeploys all plugins, returns overridden files to default state. This task does not need to be executed as a pre-condition of deployPlugins because that task executes it automatically.'
    finalizedBy 'deployConfig'
    doLast {
        def webAppFolder = 'src/main/webapp'

        if( !project.file("$webAppFolder").exists() ) {
            webAppFolder = "$dotcmsDistBase$webAppRootFolder"
        }


        ant.taskdef(
                name: 'pluginUndeployTask',
                classname: 'com.dotmarketing.plugin.ant.UndeployTask',
                classpath: configurations.compileClasspath.asPath)
        ant.pluginUndeployTask(
                distributionPath: '../',
                dotcmsHome: "$webAppFolder",
                plugins: "$webAppFolder/WEB-INF/lib")

        delete fileTree("$webAppFolder/WEB-INF/lib") {
            include '**/plugin-*.jar'
            include '**/pluginlib-*.jar'
        }
        delete "$webAppFolder/WEB-INF/classes/plugins.xml"
        delete "$webAppFolder/html/plugins"
    }
}

//Creates a backup of assets, dotsecure, META-INF and H2_Database
task backupWarTomcatData() {
    group='dotCMS Util'
    description='Creates a backup of assets, dotsecure, META-INF and H2_Database.'
    doLast {
        delete "$tomcatInstallLocation/temp"

        copy {
            into "$tomcatInstallLocation/temp/assets"
            from "$tomcatInstallLocation$webAppRootFolder/assets"
            include "**/*"
        }

        copy {
            into "$tomcatInstallLocation/temp/dotsecure"
            from "$tomcatInstallLocation$webAppRootFolder/dotsecure"
            include "**/*"
        }

        copy {
            into "$tomcatInstallLocation/temp/META-INF"
            from "$tomcatInstallLocation$webAppRootFolder/META-INF"
            include "**/*"
        }

        copy {
            into "$tomcatInstallLocation/temp/h2"
            from "$tomcatInstallLocation$webAppRootFolder/WEB-INF/H2_DATABASE"
            include "*.db"
        }
    }
}


//Restores content of assets, dotsecure, META-INF and H2_Database (copy back to webapps/ROOT)
task restoreBackupWarTomcatData() {
    group='dotCMS Util'
    description='Restores content of assets, dotsecure, META-INF and H2_Database.'
    finalizedBy 'deployConfig'
    doLast {
        delete "$tomcatInstallLocation$webAppRootFolder/assets"
        copy {
            from "$tomcatInstallLocation/temp/assets"
            into "$tomcatInstallLocation$webAppRootFolder/assets"
            include "**/*"
        }

        delete "$tomcatInstallLocation$webAppRootFolder/dotsecure"
        copy {
            from "$tomcatInstallLocation/temp/dotsecure"
            into "$tomcatInstallLocation$webAppRootFolder/dotsecure"
            include "**/*"
        }

        delete "$tomcatInstallLocation$webAppRootFolder/META-INF"
        copy {
            from "$tomcatInstallLocation/temp/META-INF"
            into "$tomcatInstallLocation$webAppRootFolder/META-INF"
            include "**/*"
        }

        delete "$tomcatInstallLocation$webAppRootFolder/WEB-INF/H2_DATABASE"
        copy {
            from "$tomcatInstallLocation/temp/h2"
            into "$tomcatInstallLocation$webAppRootFolder/WEB-INF/H2_DATABASE"
            include "*.db"
        }

        FileUtils.cleanDirectory(project.file("$tomcatInstallLocation/temp"))
        delete "$tomcatInstallLocation$webAppRootFolder/WEB-INF/classes/com"
    }
}




//Generates a no obfuscated version of the enterprise jar
task generateMoveCleanEnterpriseTomcat(type: GradleBuild) {
    group='dotCMS Util'
    description='Creates a no-obfuscated enterprise JAR and moves it into WEB-INF/lib .'

    dir=file("$enterpriseProjectHome/build.gradle")
    tasks = gradle.startParameter.taskNames.contains('clean') ? ['clean', 'build'] : ['build']
    startParameter.projectProperties = [dotcmsReleaseVersion: "$dotcmsReleaseVersion"]

    doLast {
        delete fileTree("$tomcatInstallLocation$webAppRootFolder/WEB-INF/lib"){
            include "ee-*", "ee_*"
        }

        copy{
            from "$enterpriseProjectHome/build/libs"
            into "$tomcatInstallLocation$webAppRootFolder/WEB-INF/lib"
            include "ee_clean.jar"
        }
    }
}



task downloadDependencies(type: Exec) {

    // configurations.each { println it.name }
    // ./gradlew --console plain dependencies

    //configurations.ajtools.files
    configurations.testCompileClasspath.files
    configurations.testRuntimeClasspath.files
    configurations.integrationTestCompileClasspath.files
    configurations.integrationTestRuntimeClasspath.files
    configurations.compileClasspath.files
    configurations.runtimeClasspath.files

    configurations.default.files

    configurations.testsStarter.files
    configurations.buildlibs.files
    configurations.starter.files
    configurations.profiler.files
    configurations.profilerDependencies.files
    configurations.felix.files

    commandLine 'echo', 'Downloaded all dependencies'
}
// reference:  https://github.com/palantir/gradle-docker
docker {
    dependsOn createDist
    name "dotcms/dotcms:base-$dotcmsReleaseVersion-$dotcmsReleaseBuild"
    tags 'latest'
    dockerfile file('docker/Dockerfile')
    files 'docker/entrypoint.sh', tgzTask.archivePath, 'docker/log4j2.xml'
    pull true
    noCache false
}


// upgrade task
task upgradeTask  {
    doLast {
        println "running the task: $task "

        javaexec {
            main = "com.dotcms.upgrade.Upgrade"
            classpath += files("../libs/plugins/plugin-com.dotcms.upgradetask.jar") + sourceSets.main.runtimeClasspath
            args = ["${task}"]
        }
    }
}
