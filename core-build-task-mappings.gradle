/**
 * Ant Target replacement task mappings
 * Emulate pre-3.5 Ant tasks for backwards compatability.
 */


task 'war-file'(dependsOn: war) { description = 'See documentation for "war" task.' }
task 'clean-jsp'(dependsOn: cleanJsp) { description = 'See documentation for "distCleanJsp" task.' }

task 'clone-pull-tomcat'(dependsOn: pullTomcat) {
    description = 'Will checkout the tomcat app server, generate a war structure and copy it to the just checked out tomcat. If the app server exist instead of a checkout a git pull will be use.'
}
task 'clone-pull-jboss7'(dependsOn: pullJboss7) {}

task "deploy-war-tomcat"(dependsOn: [installTomcat, cleanDeploy]) {
    description = 'Same as executing "./gradlew pullTomcat distClean deployToCustomTomcat". Will checkout the tomcat app server if missing, generate a war structure and copy it to the just checked out tomcat. If the app server exist instead of a checkout a git pull will be use.'
}

task "undeploy-war-tomcat"(dependsOn: [undeploy]) {}

task "deploy-war-tomcat-backup"(dependsOn: [installTomcat, backupCustomTomcatData, cleanDeploy, restoreCustomTomcatData]) {
    description = "Same as 'deploy-war-tomcat' but will also backup and restore the assets, dotsecure, META-INF and h2 database folders. (Useful for development)"
}

task "setup-deploy-location"() {
    description = 'Sets up the locations where to deploy'
    project.ext.'plugin.root.dir' = project.hasProperty('target.root') ? "${projectDir}/../../${project.'target.root'}" : "${project.'plugin.root.dir.default'}"
    project.ext.'plugin.jar.deploy.dir' = project.hasProperty('target.root') ? "${project.'target.root'}/WEB-INF/lib" : "${project.'plugin.root.dir.default'}/WEB-INF/lib"
    ant.properties.'plugin.root.dir' = project.ext.'plugin.root.dir'
    ant.properties.'plugin.jar.deploy.dir' = project.ext.'plugin.jar.deploy.dir'
    logger.info("Deploying plugins to: ${project.'plugin.root.dir'} | ${project.'plugin.jar.deploy.dir'}")
}


task "create-dist"(dependsOn: [createDistribution]) {
    description = "Creates the final distribution files for dotCMS."
    doLast {
        copy {
            from "${project.distsDir}"
            include '**/dotcms_*.*'
            into "${project.'distribution.file.output'}"
        }
    }
}

task "create-update-dist"(dependsOn: [createUpdateDistribution]) {
    description = "Creates an update distribution zip file."
    doLast {
        copy {
            from "${project.distsDir}"
            include '**/dotcms_*.zip'
            into "${project.'distribution.file.output'}"
        }
    }
}

task cleanDistribution(type: Delete) {
    description = 'Cleans the distribution output files. Note that this does NOT clean build files.'
    File dist = file(project.'distribution.output')
    if(!dist.parentFile.absolutePath.startsWith(file(rootProject.rootDir.parentFile).absolutePath)) {
        throw new Exception("Deleting files outside of the project space using unconstrained wildcards is unsafe: Attempted command: rm -rf ${dist.absolutePath.replace(' ', '\\ ')}")
    }
    delete files(dist)
}

