name: Frontend
on:
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
  push:
    paths:
      - 'core-web/**'
    branches:
      - master
      - release-*
env:
  PULL_REQUEST_URL: ${{ github.event.pull_request._links.html.href }}
  EXCLUDED_PROJECTS: dot-rules,dot-layout-grid,dot-primeng-theme-styles,dot-rules,dotcms,dotcms-field-elements,dotcms-js,dotcms-models,dotcms-webcomponents,dotcdn-e2e,dotcms-block-editor,dotcms-block-editor-e2e,dotcms-ui-e2e,utils-testing,block-editor,utils
jobs:
  check-all:
    outputs:
      name: ${{ steps.lint.outputs.name || steps.test.outputs.name || steps.build.outputs.name }}
      status: ${{ steps.lint.outputs.status || steps.test.outputs.status || steps.build.outputs.status }}
      color: ${{ steps.lint.outputs.color || steps.test.outputs.color || steps.build.outputs.color }}
      message: ${{ steps.persist_results.outputs.message }}
    defaults:
    runs-on: ubuntu-latest # the image our job will run on
    name: Frontend Checks # the name that will appear on the Actions UI
    steps: # what steps it will perform
      - uses: actions/checkout@v3 # checkout whatever branch the PR is using
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16.14.2
          cache: npm
          cache-dependency-path: core-web/package-lock.json
      - uses: bahmutov/npm-install@v1 # trigger an `npm install`
        with:
          working-directory: core-web
      - name: Lint
        id: lint
        working-directory: core-web
        run: |
          echo "name=Lint" >>$GITHUB_OUTPUT
          if ! (npx nx affected --target=lint --base=origin/master --parallel --exclude=${{ env.EXCLUDED_PROJECTS }}) then
            echo "::set-output name=status::failure";
            echo "::set-output name=color::#ff2400";
            exit 1;
          fi
      - name: Test
        id: test
        working-directory: core-web
        run: |
          echo "name=Test" >>$GITHUB_OUTPUT
          if ! (npx nx affected --target=test --base=origin/master --parallel --exclude=${{ env.EXCLUDED_PROJECTS }}) then
            echo "::set-output name=status::failure";
            echo "::set-output name=color::#ff2400";
            exit 1;
          fi
      - name: Push Tests to GitHub
        id: persist_results
        if: success() || failure()
        run: |
          chmod +x ./cicd/github.sh && source ./cicd/github.sh
          persistResults
          echo "::set-output name=message::$(logResults)";
      - name: Build
        id: build
        working-directory: core-web
        run:  |
          echo "name=Test" >>$GITHUB_OUTPUT
          if ! (npx nx build dotcms-ui) then
            echo "::set-output name=status::failure";
            echo "::set-output name=color::#ff2400";
            exit 1;
          fi
  notify:
    runs-on: ubuntu-latest # the image our job will run on
    name: Notify Slack
    needs: check-all
    steps:
      - name: Slack Notification
        if: success() || failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.UI_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_ICON: https://avatars.slack-edge.com/2020-09-21/1362682893351_5b474f175640cf5f5912_72.png
          SLACK_COLOR: ${{ needs.check-all.outputs.color }} || "#5E7D00"
          SLACK_TITLE: "${{ needs.check-all.outputs.name }}: (${{ needs.check-all.outputs.status }})"
          SLACK_MESSAGE: ${{ needs.check-all.outputs.message }} || "You're good"
          SLACK_FOOTER: ${{ env.PULL_REQUEST_URL }}