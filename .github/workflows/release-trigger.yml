name: Release Trigger

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release Version (yy.mm.dd)'
        required: true
      commit_hash:
        description: 'Commit Hash'
        required: true

jobs:
  release-trigger:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0

      - name: Create Release Branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          remote=$(git ls-remote --heads https://github.com/dotCMS/core.git release-${{ github.event.inputs.release_version }} | wc -l | tr -d '[:space:]')
          [[ "${remote}" == '1' ]] && git push origin :release-${{ github.event.inputs.release_version }}
          
          git reset --hard ${{ github.event.inputs.commit_hash }}
          git checkout -b release-${{ github.event.inputs.release_version }}
          git push origin release-${{ github.event.inputs.release_version }}

      - name: Modify gradle.properties
        run: |
          sed -i 's/dotcmsReleaseVersion=.*/dotcmsReleaseVersion=${{ github.event.inputs.release_version }}/' dotCMS/gradle.properties
          git commit -am "Update dotCmsReleaseVersion to ${{ github.event.inputs.release_version }}"
          RELEASE_COMMIT=$(git log -1 --pretty=%H)
          echo "RELEASE_COMMIT: ${RELEASE_COMMIT}"
          git push origin release-${{ github.event.inputs.release_version }}
          echo "RELEASE_COMMIT=${RELEASE_COMMIT}" >> $GITHUB_ENV

      - name: Create Release
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer ${{ secrets.CICD_GITHUB_TOKEN }}" \
            https://api.github.com/repos/dotCMS/core/releases \
            -d '{"tag_name": "v${{ github.event.inputs.release_version }}", "name": "Release ${{ github.event.inputs.release_version }}", "target_commitish": "${{ env.RELEASE_COMMIT }}", "draft": false, "prerelease": false, "generate_release_notes": false}'
