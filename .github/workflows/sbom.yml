name: sbom

on:
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC
  workflow_dispatch:  # Allows manual trigger from GitHub UI

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout core-test-results repository
        uses: actions/checkout@v3
        with:
          repository: rashik1144/core-test-results
          token: ${{ secrets.SECRET_PENTEST_TOKEN }}
          path: core-test-results

      - name: Get latest dotCMS Docker image tag based on last update
        id: get_version
        run: |
          # Fetch the list of tags from Docker Hub
          response=$(curl -s https://hub.docker.com/v2/repositories/dotcms/dotcms/tags/)
          
          # Extract tag names from the response
          tags=$(echo "$response" | jq -r '.results[].name')
          # Get detailed info for each tag
          tags_with_dates=""
          for tag in $tags; do
            tag_info=$(curl -s "https://hub.docker.com/v2/repositories/dotcms/dotcms/tags/${tag}/")
            last_updated=$(echo "$tag_info" | jq -r '.last_updated')
            tags_with_dates="$tags_with_dates\n$tag $last_updated"
          done
          # Find the tag with the most recent update
          latest_tag=$(echo -e "$tags_with_dates" | sort -k2,2 -r | head -n 1 | awk '{print $1}')
          
          echo "Latest tag: $latest_tag"
          echo "DOTCMS_VERSION=$latest_tag" >> $GITHUB_ENV

      - name: Check if latest tag has changed
        id: check_tag
        run: |
          # Debugging: List files in the core-test-results directory
          echo "Contents of core-test-results directory:"
          ls -l core-test-results

          # Create the previous_tag.txt file if it does not exist
          if [ ! -f core-test-results/previous_tag.txt ]; then
            echo "No previous tag file found. Creating it now."
            echo "" > core-test-results/previous_tag.txt
          fi

          # Retrieve the previous tag from the file
          previous_tag=$(cat core-test-results/previous_tag.txt || echo "")
          echo "Previous tag: '$previous_tag'"
          echo "Current tag: '${{ env.DOTCMS_VERSION }}'"

          # Check if the current tag is different from the previous tag
          if [ "$previous_tag" != "${{ env.DOTCMS_VERSION }}" ]; then
            echo "Tag has changed. Proceeding with the scan."
            echo "${{ env.DOTCMS_VERSION }}" > core-test-results/previous_tag.txt
            echo "tag_changed=true" >> $GITHUB_ENV
          else
            echo "No change in tag. Skipping scan."
            echo "tag_changed=false" >> $GITHUB_ENV
          fi

      - name: Pull and run dotCMS Docker image
        if: env.tag_changed == 'true'
        run: |
          docker pull dotcms/dotcms:${{ env.DOTCMS_VERSION }}
          docker run -d -p 8082:8082 dotcms/dotcms:${{ env.DOTCMS_VERSION }}

      - name: Install pipx
        if: env.tag_changed == 'true'
        run: |
          pip install pipx

      - name: Scan Docker Image with Syft
        if: env.tag_changed == 'true'
        run: |
          pipx run anchore_syft dotcms/dotcms:${{ env.DOTCMS_VERSION }} -o cyclonedx-xml > core-test-results/cyclonedx.json

      - name: Rename SBOM file with dotCMS version
        if: env.tag_changed == 'true'
        run: |
          mv core-test-results/cyclonedx.json core-test-results/dotcms-${{ env.DOTCMS_VERSION }}.json

      - name: Configure Git
        if: env.tag_changed == 'true'
        run: |
          git config --global user.email "rashik1144@github.com"
          git config --global user.name "rashik1144"

      - name: Commit and push results to core-test-results repository
        if: env.tag_changed == 'true'
        run: |
          cd core-test-results
          git add dotcms-${{ env.DOTCMS_VERSION }}.json
          git commit -m "Add SBOM for dotCMS version ${{ env.DOTCMS_VERSION }}" || echo "No changes to commit"
          git push origin master
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_PENTEST_TOKEN }}
