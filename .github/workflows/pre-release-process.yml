name: code-freeze-automation
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to create'
        required: true
      from_branch:
        description: 'Branch to cut from'
        required: true
        default: master
      node_version:
        description: 'Node version to use when building core-web'
        required: true
        default: '16'
jobs:
  pre-release-process:
    name: Automated Code Freeze process
    runs-on: ubuntu-latest
    env:
      DOT_CICD_BRANCH: master
      RELEASE_VERSION: ${{ github.event.inputs.release_version }}
      DEBUG: true
    steps:
      - name: Checkout core
        uses: actions/checkout@v3
      - name: Set Common Vars
        run: |
          BUILD_ID=$(basename "${{ github.ref }}")
          BUILD_HASH=$(git log -1 --pretty=%h)
          
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
          echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
      - name: Prepare dot-cicd
        run: |
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
      - name: Run DotCMS Pre-Release Docker Image
        run: |
          ../dotcicd/library/pipeline.sh runPreRelease
        env:
          GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
          REPO_USERNAME: ${{ secrets.EE_REPO_USERNAME }}
          REPO_PASSWORD: ${{ secrets.EE_REPO_PASSWORD }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          FROM_BRANCH: ${{ github.event.inputs.from_branch }}
          NODE_VERSION: ${{ github.event.inputs.node_version }}
  pre-release-process-image:
    name: Pre-Release Image Publishing
    runs-on: ubuntu-latest
    needs: pre-release-process
    env:
      DOT_CICD_BRANCH: master
      RELEASE_VERSION: ${{ github.event.inputs.release_version }}
      DEBUG: true
    steps:
      - name: Checkout core
        uses: actions/checkout@v3
      - name: Set Common Vars
        run: |
          BUILD_ID=$(basename "${{ github.ref }}")
          BUILD_HASH=$(git log -1 --pretty=%h)

          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
          echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
      - name: Discover docker tags
        id: discover-docker-tags
        uses: dotcms/discover-docker-tags-action@v2.0
        with:
          version: ${{ env.RELEASE_VERSION }}
          hash: ${{ env.BUILD_HASH }}
          label: ${{ env.RELEASE_LABEL }}
          also_latest: ${{ env.ALSO_LATEST }}
          update_stable: single
          image_name: dotcms/dotcms
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: amd64,arm64
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v2.2.1
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:v0.10.6
      - name: Docker Hub login
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3.2.0
        with:
          context: ./docker/dotcms
          push: true
          tags: ${{ steps.discover-docker-tags.outputs.discovered_tags }}
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_FROM=TAG
            BUILD_ID=${{ env.BUILD_ID }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.CODE_FREEZE_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Attention dotters: New pre-release created!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.githubusercontent.com/u/1005263?s=200&v=4
          SLACK_MESSAGE: "<!channel> A code freeze for ${{ env.RELEASE_VERSION }} has successfully run :hatching_chick:"
        if: success()
