name: pentest

on:
 workflow_dispatch:
# cronjob will be used when it is fully set up and complete
#  schedule:
#    - cron: '0 3 1,15 * *'

jobs:
#  start:
#    runs-on: ubuntu-latest
#    
#    steps:
#      - name: Start EC2 Instance
#        run: |
#          aws ec2 start-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID }}
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  scanner:
#    needs: start
    runs-on: [self-hosted, linux, x64, ubuntu-server]

    steps:
      - name: Start dotCMS with docker
        id: start-dotcms
        run: |
          docker-compose down && docker-compose up -d
          timeout=$(date +%s)
          while true; do
            container_status=$(docker inspect --format='{{.State.Status}}' ubuntu_dotcms_1)
            echo "Container Status: $container_status"
            if [[ "$container_status" == "running" ]]; then
              break
            fi
            if [ $(($(date +%s)-timeout)) -gt 300 ]; then
              echo "Timeout waiting for dotCMS to start"
              exit 1
            fi
            sleep 1
          done
          timeout=$(($(date +%s)-timeout))

      - name: Install updates
        run: sudo apt-get update
        
      - name: Pull dotCMS/core-test-results repository
        run: |
          git config pull.rebase false
          git remote set-url origin git@github.com:TommyB13/RunnerTest.git
          git pull origin main
        working-directory: /home/ubuntu/RunnerTest


#      - name: Check if local changes exist
#        run: |
#          if [[ -n "$(git status -s)" ]]; then
#            git stash
#          fi
#        working-directory: /home/ubuntu/RunnerTest

      - name: Switch to pentest branch
        run: |
          branch_name="pentest-$(date +'%Y%m%d')"
          if ! git show-ref --quiet --verify "refs/heads/$branch_name"; then
            git checkout -b "$branch_name" origin/pentest
          else
            git checkout "$branch_name"
          fi
        working-directory: /home/ubuntu/RunnerTest

#      - name: Apply stashed changes
#        run: |
#          git stash branch temp-branch
#        working-directory: /home/ubuntu/RunnerTest
        
      - name: Check if web server is running
        run: |
          server_status=$(wget --spider -S http://localhost:8082 2>&1 | grep "HTTP/" | awk '{print $2}')
          if [[ "$server_status" == "200" ]]; then
            echo "Web server is running"
          else
            echo "Web server is not running"
            exit 1
          fi

      - name: Run nikto scan
        run: nikto -h localhost:8082 |& tee /home/ubuntu/RunnerTest/test-results/report.txt

      - name: Stop dotCMS
        run: docker-compose down
        working-directory: /home/ubuntu

  pull_request:
    needs: scanner
    runs-on: [self-hosted, linux, x64, ubuntu-server]
    
    steps:

      - name: Create pull request
        run: |
          branch_name="pentest-$(date +'%Y%m%d')"
          pr_title="Pentest Results"
          pr_body="This is an automated pull request with the latest pentest results. Please review the attached report."
          git add test-results/*
          git commit -m "Add pentest report"
          git push origin "$branch_name"
          curl -X POST \
            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/TommyB13/RunnerTest/pulls \
            -d '{
              "title": "'"$pr_title"'",
              "body": "'"$pr_body"'",
              "head": "'"$branch_name"'",
              "base": "main"
            }'
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        working-directory: /home/ubuntu/RunnerTest

#          repo: dotCMS/core-test-results

#      - name: Stop AWS EC2
#        run: |
#          aws ec2 stop-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID }}
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
