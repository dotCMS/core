name: pentest

on:
# workflow_dispatch:
# cronjob will be used when it is fully set up and complete
  schedule:
    - cron: '0 3 1,15 * *'

jobs:
#  start:
#    runs-on: ubuntu-latest
#    
#    steps:
#      - name: Start EC2 Instance
#        run: |
#          aws ec2 start-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID }}
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

  scanner:
#    needs: start
    runs-on: [self-hosted, linux, x64, ubuntu-server]

    steps:
      - name: Start dotCMS with docker
        id: start-dotcms
        run: |
          docker-compose down && docker-compose up -d

      - name: Install updates
        run: sudo apt-get update
        
      - name: Pull dotCMS/core-test-results repository
        run: |
          git config pull.rebase false
          git remote set-url origin git@github.com:dotCMS/core-test-results.git
          git pull origin master
        working-directory: /home/ubuntu/core-test-results
        
      - name: Get latest release version
        id: get-latest-release
        run: |
          releases=$(curl -s "https://api.github.com/repos/dotCMS/core/releases")
          release_version=$(echo "$releases" | jq -r '.[].tag_name' | sort -rV | head -n 1 | sed 's/^v//')
          formatted_version="release-$release_version"
          echo "Latest release version: $formatted_version"
          echo "release_version=$formatted_version" >> $GITHUB_ENV
        
      - name: Check if web server is running
        run: |
          server_status=$(wget --spider -S http://localhost:8082 2>&1 | grep "HTTP/" | awk '{print $2}')
          if [[ "$server_status" == "200" ]]; then
            echo "Web server is running"
          else
            echo "Web server is not running"
            exit 1
          fi

#      - name: Run test
#        run: |
#          report_dir="/home/ubuntu/cure-test-results/pentest/$(date +'%Y-%m-%d')"
#          mkdir -p "$report_dir"
#          echo "test" |& tee "$report_dir/report.txt"

      - name: Run nikto scan
        run: |
          report_dir="/home/ubuntu/core-test-results/pentest/$(date +'%Y-%m-%d')-$release_version"
          mkdir -p "$report_dir"
          nikto -h localhost:8082 |& tee "$report_dir/report.txt"

      - name: Run htmlreport.py
        run: python3 /home/ubuntu/htmlreport.py $release_version

      - name: Run clear-old-tests.py
        run: python3 /home/ubuntu/clear-old-tests.py $release_version

      - name: Stop dotCMS
        run: docker-compose down
        working-directory: /home/ubuntu
          
      - name: Switch to release branch
        run: |
          branch_name="${{ env.release_version }}"
          git fetch origin "$branch_name" && git checkout "$branch_name" || git checkout -b "$branch_name"
        working-directory: /home/ubuntu/core-test-results

      - name: Add files and commit changes
        run: |
          git add .
          git commit -m "Add test results for release ${{ env.release_version }}"
        working-directory: /home/ubuntu/core-test-results

      - name: Push changes to dotCMS/core-test-results repository
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.release_version }}
          force: true
          directory: /home/ubuntu/core-test-results/
          repository: dotCMS/core-test-results
          
#  pull_request:
#    needs: scanner
#    runs-on: [self-hosted, linux, x64, ubuntu-server]
#    
#    steps:
#
#      - name: Create pull request
#        run: |
#          branch_name="pentest-$(date +'%Y%m%d')"
#          pr_title="Pentest Results"
#          pr_body="This is an automated pull request with the latest pentest results. Please review the attached report."
#          git add test-results/*
#          git commit -m "Add pentest report"
#          git push origin "$branch_name"
#          curl -X POST \
#            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
#            -H "Accept: application/vnd.github.v3+json" \
#            https://api.github.com/repos/TommyB13/RunnerTest/pulls \
#            -d '{
#              "title": "'"$pr_title"'",
#              "body": "'"$pr_body"'",
#              "head": "'"$branch_name"'",
#              "base": "main"
#            }'
#        env:
#          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        working-directory: /home/ubuntu/RunnerTest
#
#          repo: dotCMS/core-test-results
#
#      - name: Stop AWS EC2
#        run: |
#          aws ec2 stop-instances --instance-ids ${{secrets.AWS_EC2_INSTANCE_ID }}
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
