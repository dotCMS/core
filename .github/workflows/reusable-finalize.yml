name: Reusable Finalize
on:
  workflow_call:
    inputs:
      artifact-run-id:
        default: ${{ github.run_id }}
        type: string
jobs:
  prepare-report-data:
    name: Prepare Report Data
    runs-on: ubuntu-20.04
    if: always()
    outputs:
      aggregate_status: ${{ steps.prepare-workflow-data.outputs.aggregate_status }}
    steps:
      - name: Download build reports
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          path: /tmp/build-step-reports
          pattern: build-reports-*
          merge-multiple: false
          run-id: ${{ inputs.artifact-run-id }}
      - name: Prepare workflow data
        id: prepare-workflow-data
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          AGGREGATE_STATUS="SUCCESS"
          jobs_status="${{ toJson(needs) }}"
          echo "job status=${jobs_status}"
          while IFS=" " read -r key result; do
            key=$(echo $key | tr -d ' {')
            result=$(echo $result | tr -d ',')
          
            echo "Job: $key, Result: $result"
          
            if [[ $result == "cancelled" ]]; then
              AGGREGATE_STATUS="CANCELLED"
              break
            elif [[ $result == "failure" ]]; then
              AGGREGATE_STATUS="FAILURE"
            fi
          done < <(echo "$jobs_status" | awk -F': ' '/result:/ {print $1,$2}')
          
          FIRST_FAIL_STEP=""
          FIRST_FAIL_MODULE=""
          
          echo '{' > workflow-data.json
          
          EVENT_TYPE="${{ github.event_name }}"
          
          if [[ "$EVENT_TYPE" == "pull_request" ]]; then
            echo "Creating workflow data for pull request ${PR_TITLE}"
            BRANCH="${{ github.head_ref }}"
          else
              PR_TITLE="N/A"
              BRANCH="${{ github.ref }}"
          
              echo "Creating workflow data for branch ${BRANCH}"
          fi
          
          BRANCH="${BRANCH##*/}"
          
          PR_TITLE_JQ=$(jq --arg title "$PR_TITLE" -n '$title')
          
          echo '"branch": "'$BRANCH'",' >> workflow-data.json
          echo '"run_id": "'${{ github.run_id }}'",' >> workflow-data.json
          echo '"trigger_event_name": "'$GITHUB_EVENT_NAME'",' >> workflow-data.json
          echo '"source_repository": "'$GITHUB_REPOSITORY'",' >> workflow-data.json
          
          echo '"merge_sha": "'${{ github.sha }}'",' >> workflow-data.json
          
          echo '"base_sha": "'${{ github.event.pull_request.base.sha }}'",' >> workflow-data.json
          echo '"base_branch": "'${{ github.event.pull_request.base.sha }}'",' >> workflow-data.json
          echo '"base_author": "'${{ github.event.pull_request.base.user.login }}'",' >> workflow-data.json
          
          echo '"head_author": "'${{ github.event.pull_request.head.user.login }}'",' >> workflow-data.json
          echo '"head_name": "'${{ github.event.pull_request.head.ref }}'",' >> workflow-data.json
          echo '"head_sha": "'${{ github.event.pull_request.head.sha }}'",' >> workflow-data.json
          
          echo '"pr_id": "'${{ github.event.pull_request.id }}'",' >> workflow-data.json
          echo '"pr_number": "'${{ github.event.pull_request.number }}'",' >> workflow-data.json
          echo "\"pr_title\": $PR_TITLE_JQ," >> workflow-data.json
          echo '"pr_author": "'${{ github.event.pull_request.user.login }}'",' >> workflow-data.json
          echo '"pr_merge_state": "'${{ github.event.pull_request.mergeable_state }}'",' >> workflow-data.json
          
          
          echo '"build_reports": [' >> workflow-data.json
          total_reports=$(find /tmp/build-step-reports/build-reports-*/target -name build-report.json 2>/dev/null | wc -l)
          
          report_index=0
          if [ "$total_reports" -eq "0" ]; then
            echo "No build report files found."
          else
            for build_report in "/tmp/build-step-reports/build-reports-"*/target/build-report.json; do
              ((report_index=report_index+1))
              step_name=$(basename "$(dirname "$(dirname "$build_report")")" | sed 's/build-reports-//')
              cat "$build_report" | jq ".step_name = \"$step_name\"" >> workflow-data.json
              # If the aggregate status is still SUCCESS, check if this module failed
              if [[ "$AGGREGATE_STATUS" == "SUCCESS" ]]; then
                # Loop over each projectReport
                length=$(jq '.projectReports | length' "$build_report")
                for (( i=0; i<$length; i++ )); do
                status=$(jq -r ".projectReports[$i].status" "$build_report")
                if [[ "$status" == "FAILURE" ]]; then
                  AGGREGATE_STATUS="FAILURE"
                  FIRST_FAIL_STEP="$step_name"
                  FIRST_FAIL_MODULE="$(jq -r ".projectReports[$i].name" "$build_report")"
                  FIRST_FAIL_ERROR="$(jq -r ".projectReports[$i].error" "$build_report")"
                fi
                done
              fi
          
              # If not the last file, append a comma
              if (( report_index != total_reports )); then
                echo ',' >> workflow-data.json
              fi
            done
          fi
          
          echo '],' >> workflow-data.json
          echo '"aggregate_status": "'$AGGREGATE_STATUS'"' >> workflow-data.json
          if [[ "$AGGREGATE_STATUS" != "SUCCESS" ]]; then
            echo ',' >> workflow-data.json
            echo '"first_fail_step": "'$FIRST_FAIL_STEP'",' >> workflow-data.json
            echo '"first_fail_module": "'$FIRST_FAIL_MODULE'",' >> workflow-data.json
            echo '"first_fail_error": "'$FIRST_FAIL_ERROR'"' >> workflow-data.json
          fi
          echo '}' >> workflow-data.json
          
          echo "aggregate_status=${AGGREGATE_STATUS}" >> $GITHUB_OUTPUT
      - name: Upload workflow data
        uses: actions/upload-artifact@v4
        with:
          name: workflow-data
          path: ./workflow-data.json

  final-status:
    name: Final Status
    needs: prepare-report-data
    if: always()
    runs-on: ubuntu-20.04
    steps:
      - name: Check Final Status
        run: |
          if [ "${{ needs.prepare-report-data.outputs.aggregate_status }}" != "SUCCESS" ]; then
            echo "One or more jobs failed!"
            exit 1
          fi