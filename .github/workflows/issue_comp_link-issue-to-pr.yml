name: Link Issue to PR

on:
  workflow_call:
    inputs:
      pr_branch:
        description: 'Pull Request branch'
        type: string
        required: true
      pr_url:
        description: 'Pull Request URL'
        type: string
        required: true
    secrets:
      CI_MACHINE_TOKEN:
        description: 'CI machine token'
        required: true

  workflow_dispatch:
    inputs:
      pr_branch:
        description: 'Pull Request branch'
        type: string
        required: true
      pr_url:
        description: 'Pull Request URL'
        type: string
        required: true

env:
  GH_TOKEN: ${{ secrets.CI_MACHINE_TOKEN }}

jobs:
  add-issue-to-pr:
    runs-on: ubuntu-${{ vars.UBUNTU_RUNNER_VERSION || '22.04' }}

    steps:
      - run: echo 'GitHub context'
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Extract issue number from branch name
        id: extract_issue_number
        run: |
          branch_name="${{ inputs.pr_branch }}"
          if [[ "$branch_name" =~ ^([0-9]+)- ]]; then
            issue_number="${BASH_REMATCH[1]}"
          elif [[ "$branch_name" =~ ^issue-([0-9]+)- ]]; then
            issue_number="${BASH_REMATCH[1]}"
          else
            echo "Branch name doesn't match the expected pattern"
            exit 1
          fi
          
          echo "issue_number=$issue_number" >> "$GITHUB_OUTPUT"

      - name: Get existing issue comments
        id: get_comments
        run: |
          comments="$(\
            curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ env.GH_TOKEN }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ steps.extract_issue_number.outputs.issue_number }}/comments \
            | jq -c .
          )"
          
          echo "comments=${comments}" >> "$GITHUB_OUTPUT"

      - name: Check if PR comment exists
        id: check_comment
        uses: actions/github-script@v7
        with:
          script: |
            const prUrl = '${{ inputs.pr_url }}';
            let prList = `PRs:\n- ${prUrl}`;
            let existingCommentId = '';
            const comments = JSON.parse(${{ toJSON(steps.get_comments.outputs.comments) }});
            
            for(comment of comments) {
              const commentBody = comment.body;
              if (commentBody.startsWith('PRs:')) {
                existingCommentId = comment.id;
                prList = `${commentBody}\n- ${prUrl}`;
                break;
              }
            }
            
            core.setOutput('pr_list', prList);
            core.setOutput('existing_comment_id', existingCommentId);
            console.log(`pr_list: [${prList}]`);
            console.log(`existing_comment_id: [${existingCommentId}]`);

      - name: Update or create comment
        if: steps.check_comment.outputs.existing_comment_id == ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.extract_issue_number.outputs.issue_number }}
          body: ${{ steps.check_comment.outputs.pr_list }}

      - name: Update existing comment
        if: steps.check_comment.outputs.existing_comment_id != ''
        uses: actions/github-script@v7
        with:
          script: |
            const prs = ${{ toJSON(steps.check_comment.outputs.pr_list) }}.split('\n');
            await github.rest.issues.updateComment({
              owner: '${{ github.repository_owner }}',
              repo: '${{ github.event.repository.name }}',
              comment_id: ${{ steps.check_comment.outputs.existing_comment_id }},
              body: prs.join('\n')
            });
