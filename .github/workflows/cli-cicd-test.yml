name: CLI tests
on:
  pull_request:
    paths:
      - 'tools/dotcms-cli/**'
  push:
    branches:
      - master
      - release-*
jobs:
  cli_tests:
    name: CLI tests
    runs-on: ubuntu-latest
    outputs:
      tests_results_status: ${{ steps.run-cli-tests.outputs.status }}
#      tests_results_skip_report: ${{ steps.run-unit-tests.outputs.tests_results_skip_report }}
      tests_results_report_url: ${{ steps.publish-tests-results.outputs.tests_report_url }}
      tests_results_log_url: ${{ steps.publish-tests-results.outputs.test_logs_url }}
    steps:
      - id: checkout-core
        name: Checkout core
        uses: actions/checkout@v3
#        if: success()

      - id: prepare-license
        name: Prepare license
        working-directory: ./tools/dotcms-cli/
        env:
          DOTCMS_LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
        run: |
          DOTCMS_LICENSE_PATH=${GITHUB_WORKSPACE}/tools/dotcms-cli/license
          mkdir -p ${DOTCMS_LICENSE_PATH}
          echo "${DOTCMS_LICENSE_KEY}" > ${DOTCMS_LICENSE_PATH}/license.dat
          echo "DOTCMS_LICENSE_FILE=${DOTCMS_LICENSE_PATH}/license.dat" >> "$GITHUB_ENV"
#        if: success()

      - id: run-cli-tests
        name: Run cli tests
        working-directory: ./tools/dotcms-cli/
        run: |
          env | grep DOTCMS_LICENSE
          RESULTS_PATH=${{ github.workspace }}/tools/dotcms-cli/target/test-results

          ./mvnw clean verify
          
          command_result=$?

          if [ $command_result -eq 0 ]; then
            echo "::set-output name=status::PASSED"
          else
            echo "::set-output name=status::FAILED"
          fi
          
          mkdir -p $RESULTS_PATH
          
          cp -r api-data-model/target/surefire-reports $RESULTS_PATH
          cp -r api-data-model/target/failsafe-reports $RESULTS_PATH
          
          echo "::set-output name=results_location::$RESULTS_PATH"
          echo "::set-output name=results_report_location::$RESULTS_PATH"
          
          ls $RESULTS_PATH

#        if: success()
      - id: publish-tests-results
        name: Github publish tests results
        uses: ./.github/actions/publish-test-results
        with:
          build_id: ${{ env.BUILD_ID }}
          build_hash: ${{ env.BUILD_HASH }}
          test_type: cli
          pull_request: ${{ github.event.number }} # optional in case the tests are triggered by a PR
          tests_results_status: ${{ steps.run-cli-tests.outputs.status }} # tests results status, optional
          tests_results_location: ${{ steps.run-cli-tests.outputs.results_location }} # tests results location, optional, most of the time this made up of a bunch of XML files, optional
          tests_results_report_location: ${{ steps.run-cli-tests.outputs.results_report_location }} # actual reports made from XML files, probably in HTML format
          cicd_github_token: ${{ secrets.CICD_GITHUB_TOKEN }