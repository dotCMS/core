name: Release Candidate Process
on:
  workflow_dispatch:
    inputs:
      initial_sha:
        description: 'Initial commit sha'
        required: true
      last_sha:
        description: 'Last commit sha'
        required: true
      labels:
        description: 'Comma delimited labels to add/remove'
        required: false
        default: 'Release Candidate'
      label_operation:
        description: 'Label operation (ADD or REMOVE) to perform'
        type: choice
        options:
          - Add
          - Remove
          - None
        required: true
        default: 'ADD'
      tag_name:
        description: 'Tag name to create'
        required: false
        default: 'release_candidate'

jobs:
  release-candidate-process:
    name: Release process automation
    runs-on: ubuntu-latest
    steps:
      -
        run: echo "Github Context:"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
      -
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0
      -
        name: Generate changelog
        id: changelog
        uses: ./.github/actions/rc-changelog
        with:
          branch: ${{ github.ref_name }}
          initial_sha: ${{ github.event.inputs.initial_sha }}
          last_sha: ${{ github.event.inputs.last_sha }}
          github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
      -
        name: Label issues
        uses: ./.github/actions/issue-labeler
        with:
          issues_json: ${{ steps.changelog.outputs.issues_flat }}
          labels: ${{ github.event.inputs.labels }}
          operation: ${{ github.event.inputs.label_operation }}
          github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
        if: ${{ github.event.inputs.label_operation != 'None' }}
      -
        name: Create RC tag
        run: |
          source ${GITHUB_WORKSPACE}/cicd/local-env.sh
          source ${GITHUB_WORKSPACE}/cicd/local-cicd.sh
          
          executeCmd "git fetch --tags"
          executeCmd "git reset --hard ${{ github.event.inputs.last_sha }}"
          if git show-ref --tags "${RELEASE_CANDIDATE_TAG}" --quiet; then
            executeCmd "git tag -d ${RELEASE_CANDIDATE_TAG}"
            executeCmd "git push origin :refs/tags/${RELEASE_CANDIDATE_TAG}"
          fi
          gitConfig ${GITHUB_USER} ${GITHUB_EMAIL}
          executeCmd "git tag -a \"${RELEASE_CANDIDATE_TAG}\" -m \"Release candidate tag\""
          executeCmd "git push origin \"${RELEASE_CANDIDATE_TAG}\""
        env:
          RELEASE_CANDIDATE_TAG: ${{ github.event.inputs.tag_name }}
          GITHUB_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
        if: env.RELEASE_CANDIDATE_TAG != ''
      -
        name: Changelog report
        uses: ./.github/actions/changelog-report
        with:
          issues_json: ${{ steps.changelog.outputs.issues_json }}
          tag: ${{ github.event.inputs.tag_name }}
          format: md
      -
        uses: docker/setup-qemu-action@v3.0.0
        with:
          platforms: amd64,arm64
      -
        uses: docker/setup-buildx-action@v3.0.0
        with:
          platforms: amd64,arm64
          driver-opts: |
            image=moby/buildkit:v0.12.2
      -
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      -
        run: |
          docker system prune --volumes -af
      -
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./docker/dotcms
          push: true
          tags: dotcms/dotcms:rc
          platforms: amd64,arm64
          build-args: |
            BUILD_FROM=COMMIT
            BUILD_ID=${{ github.event.inputs.last_sha }}
      -
        name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.CODE_FREEZE_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Attention dotters: New pre-release created!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.githubusercontent.com/u/1005263?s=200&v=4
          SLACK_MESSAGE: "<!channel> A release candidate has been successfully crated :hatching_chick:"
        if: success()
