name: CICD Reports
run-name: Reports - ${{ github.event.workflow_run.name }}
on:
  workflow_run:
    workflows: ['Maven CICD Pipeline']
    types: [completed]

permissions:
  checks: write

jobs:
  report:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    outputs:
      workflow-json: ${{ steps.workflow-data.outputs.json }}
    steps:
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Download Worlfkow Data
        uses: dawidd6/action-download-artifact@v2
        with:
          name: 'workflow-data'
          workflow: ${{ github.event.workflow.id }}
          run_id: ${{ github.event.workflow_run.id }}
          if_no_artifact_found: warn

      - name: Get Workflow Data
        id: workflow-data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ ! -e "workflow-data.json" ]]
          then
            echo "::warn title=Artifact 'workflow-data' missing::Expected artifact 'workflow-data' does not exist for pull_request event."
          else
            json=$(jq -c '.' workflow-data.json)
            status=$(echo $json | jq -r '.aggregate_status // "null"')
            pr_number=$(echo $json | jq -r '.pr_number // "null"')
            pr_author=$(echo $json | jq -r '.pr_author // "null"')
            run_id=$(echo $json | jq -r '.run_id // "null"')
            first_fail_step=$(echo $json | jq -r '.first_fail_step // "None"')
            first_fail_module=$(echo $json | jq -r '.first_fail_module // "None"')
            first_fail_error=$(echo $json | jq -r '.first_fail_error // "None"')
            pr_name=$(echo $json | jq -r '.pr_name // "null"')
            branch=$(echo $json | jq -r '.branch // "null"')
            head_sha=$(echo $json | jq -r '.head_sha // "null"')
            head_author=$(echo $json | jq -r '.head_author // "null"')
            head_name=$(echo $json | jq -r '.head_name // "null"')
            source_repository=$(echo $json | jq -r '.source_repository // "null"')
            action_run_url="https://github.com/$source_repository/actions/runs/$run_id"
            pr_number_url="https://github.com/$source_repository/pull/$pr_number"
            branch_url="https://github.com/$source_repository/tree/$branch"
            commit_id_url="https://github.com/$source_repository/pull/$pr_number/commits/$head_sha"
            if [[ "$status" == "SUCCESS" ]]; then
              echo "status_icon=‚úÖ" >> $GITHUB_OUTPUT
            else
              echo "status_icon=‚ùå" >> $GITHUB_OUTPUT
            fi
            echo "json=$json" >> $GITHUB_OUTPUT
            echo "has-json=true" >> $GITHUB_OUTPUT
            echo "status=$status" >> $GITHUB_OUTPUT
            echo "pr_number=$pr_number" >> $GITHUB_OUTPUT
            echo "pr_author=$pr_author" >> $GITHUB_OUTPUT
            echo "run_id=$run_id" >> $GITHUB_OUTPUT
            echo "first_fail_step=$first_fail_step" >> $GITHUB_OUTPUT
            echo "first_fail_module=$first_fail_module" >> $GITHUB_OUTPUT
            echo "first_fail_error=$first_fail_error" >> $GITHUB_OUTPUT
            echo "pr_name=$pr_name" >> $GITHUB_OUTPUT
            echo "branch=$branch" >> $GITHUB_OUTPUT
            echo "head_sha=$head_sha" >> $GITHUB_OUTPUT
            echo "head_author=$head_author" >> $GITHUB_OUTPUT
            echo "head_name=$head_name" >> $GITHUB_OUTPUT
            echo "source_repository=$source_repository" >> $GITHUB_OUTPUT
            echo "action_run_url=$action_run_url" >> $GITHUB_OUTPUT
            echo "pr_number_url=$pr_number_url" >> $GITHUB_OUTPUT
            echo "branch_url=$branch_url" >> $GITHUB_OUTPUT
            echo "commit_id_url=$commit_id_url" >> $GITHUB_OUTPUT
          fi

      - uses: dorny/test-reporter@v1
        if: steps.workflow-data.outputs.has-json == 'true'
        with:
          artifact: /^build-reports-test-(.*)/        # artifact name
          name: 'MVN Test Report $1'               # Name of the check run which will be created
          path: '**/target/**/TEST-*.xml'                     # Path to test results (inside artifact .zip)
          reporter: java-junit            # Format of test results
          fail-on-error: false

          
      - name: Post to a Slack channel
        if: steps.workflow-data.outputs.has-json == 'true'
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.workflow-data.outputs.status_icon }} Github Actions Build Notification",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The build for PR #${{ steps.workflow-data.outputs.pr_number }} by ${{ steps.workflow-data.outputs.pr_author }} is *${{ steps.workflow-data.outputs.status }} ${{ steps.workflow-data.outputs.status_icon }}*."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üîó Action Run:*\n<${{ steps.workflow-data.outputs.action_run_url }} | ${{ steps.workflow-data.outputs.run_id }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üë£ Failure Step:*\n${{ steps.workflow-data.outputs.first_fail_step }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üë£ Failure Module:*\n${{ steps.workflow-data.outputs.first_fail_module }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üí¨ Failure Message:*\n${{ steps.workflow-data.outputs.first_fail_error }}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üë§ PR Author:*\n${{ steps.workflow-data.outputs.pr_author }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üìù PR Name:*\n${{ steps.workflow-data.outputs.pr_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üî¢ PR Number:*\n<${{ steps.workflow-data.outputs.pr_number_url }}|#${{ steps.workflow-data.outputs.pr_number }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üåø Branch Name:*\n<${{ steps.workflow-data.outputs.branch_url }}|${{ steps.workflow-data.outputs.branch }}>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üî¢ Commit ID:*\n<${{ steps.workflow-data.outputs.commit_id_url }}|#${{ steps.workflow-data.outputs.head_sha }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üë§ Commit Author:*\n${{ steps.workflow-data.outputs.head_author }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üìù Commit Name:*\n${{ steps.workflow-data.outputs.head_name }}"
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CORE_SLACK_WEBHOOK }}
