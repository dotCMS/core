name: CICD Reports
run-name: Reports - ${{ github.event.workflow_run.name }}
on:
  workflow_run:
    workflows: ['Maven CICD Pipeline']
    types: [completed]

permissions:
  checks: write

jobs:
  report:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    outputs:
      workflow-json: ${{ steps.workflow-data.outputs.json }}
    steps:
      - name: Log GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Download Worlfkow Data
        uses: dawidd6/action-download-artifact@v2
        with:
          name: 'workflow-data'
          workflow: ${{ github.event.workflow.id }}
          run_id: ${{ github.event.workflow_run.id }}
          if_no_artifact_found: warn

      - name: Get Workflow Data
        id: workflow-data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ ! -e "workflow-data.json" ]]
          then
            echo "::warn title=Artifact 'workflow-data' missing::Expected artifact 'workflow-data' does not exist for pull_request event."
          else
            echo "json=$(jq -c '.' workflow-data.json)" >> $GITHUB_OUTPUT  # need to shrink to single line
            echo "has-json=true" >> $GITHUB_OUTPUT
          fi

      - uses: dorny/test-reporter@v1
        if: steps.workflow-data.outputs.has-json == 'true'
        with:
          artifact: /^build-reports-test-(.*)/        # artifact name
          name: 'MVN Test Report $1'               # Name of the check run which will be created
          path: '**/target/**/TEST-*.xml'                     # Path to test results (inside artifact .zip)
          reporter: java-junit            # Format of test results
          fail-on-error: false


      - name: Post to a Slack channel
        if: steps.workflow-data.outputs.has-json == 'true'
        id: slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ fromJSON(steps.workflow-data.outputs.json).aggregate_status == 'SUCCESS' ? '‚úÖ' : '‚ùå' }} Github Actions Build Notification",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "The build for PR #${{ fromJSON(steps.workflow-data.outputs.json).pr_number }}  by ${{ fromJSON(steps.workflow-data.outputs.json).pr_author }} is *${{ fromJSON(steps.workflow-data.outputs.json).aggregate_status }} ${{ fromJSON(steps.workflow-data.outputs.json).aggregate_status == 'SUCCESS' ? '‚úÖ' : '‚ùå' }}*."
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üîó Action Run:*\n<https://github.com/${{ fromJSON(steps.workflow-data.outputs.json).source_repository }}/actions/runs/${{ fromJSON(steps.workflow-data.outputs.json).run_id }} | ${{ fromJSON(steps.workflow-data.outputs.json).run_id }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üë£ Failure Step:*\n${{ fromJSON(steps.workflow-data.outputs.json).first_fail_step || 'None'}}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üë£ Failure Module:*\n${{ fromJSON(steps.workflow-data.outputs.json).first_fail_module || 'None'}}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üí¨ Failure Message:*\n${{ fromJSON(steps.workflow-data.outputs.json).first_fail_error || 'None}}"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üë§ PR Author:*\n${{ fromJSON(steps.workflow-data.outputs.json).pr_author }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üìù PR Name:*\n${{ fromJSON(steps.workflow-data.outputs.json).pr_name }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üî¢ PR Number:*\n<https://github.com/${{ fromJSON(steps.workflow-data.outputs.json).source_repository }}/pull/${{ fromJSON(steps.workflow-data.outputs.json).pr_number }}|#${{ fromJSON(steps.workflow-data.outputs.json).pr_number }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üåø Branch Name:*\n<https://github.com/${{ fromJSON(steps.workflow-data.outputs.json).source_repository }}/tree/${{ fromJSON(steps.workflow-data.outputs.json).branch }}|${{ fromJSON(steps.workflow-data.outputs.json).branch }}>"
                    }
                  ]
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*üî¢ Commit ID:*\n<https://github.com/${{ fromJSON(steps.workflow-data.outputs.json).source_repository }}/pull/${{ fromJSON(steps.workflow-data.outputs.json).pr_number }}//commits/${{ fromJSON(steps.workflow-data.outputs.json).head_sha }}|#${{ fromJSON(steps.workflow-data.outputs.json).head_sha }}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üë§ Commit Author:*\n${{ fromJSON(steps.workflow-data.outputs.json).head_author }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*üìù Commit Name:*\n${{ fromJSON(steps.workflow-data.outputs.json).head_name }}"
                    }
                  ]
                },
                {
                  "type": "divider"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CORE_SLACK_WEBHOOK }}
