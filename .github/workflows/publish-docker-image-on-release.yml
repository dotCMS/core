name: publish-dotcms-docker-image-on-release
on:
  push:
    branches:
      - release-*
  repository_dispatch:
    types:
      - enterprise-update
jobs:
  publish_image:
    name: Publish DotCMS docker image on release push
    runs-on: ubuntu-latest
    steps:
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        if: env.DEBUG == 'true'
      - name: Process Params
        run: |
          if [[ "${{ github.event_name }}" == 'repository_dispatch' ]]; then
            BUILD_ID=${{ github.event.client_payload.build_id }}
          else
            BUILD_ID=$(basename "${{ github.ref }}")
          fi

          if [[ -z "${BUILD_ID}" ]]; then
            echo 'Could not resolve BUILD_ID, aborting'
            exit 1
          else
            echo "Found BUILD_ID: ${BUILD_ID}"
          fi

          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
      - name: Checkout core
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BUILD_ID }}
      - name: Set Common Vars
        run: |
          BUILD_HASH=$(git log -1 --pretty=%h)
          eval $(cat dotCMS/gradle.properties| grep dotcmsReleaseVersion)
          DOTCMS_VERSION="${dotcmsReleaseVersion}"

          if [[ ${BUILD_ID} =~ ^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ ]]; then
            jobRun=true
          else
            jobRun=false
          fi

          echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV
          echo "DOTCMS_VERSION=${DOTCMS_VERSION}" >> $GITHUB_ENV
          echo "jobRun=${jobRun}" >> $GITHUB_ENV
      - name: Discover docker tags
        id: discover-docker-tags
        uses: dotcms/discover-docker-tags-action@main
        with:
          version: ${{ env.DOTCMS_VERSION }}
          hash: ${{ env.BUILD_HASH }}
          label: 'SNAPSHOT'
          update_stable: false
          also_latest: false
        if: env.jobRun == 'true'
      - name: Publish docker image
        id: publish-docker-image
        uses: dotcms/publish-docker-image-action@main
        with:
          dot_cicd_branch: master
          build_id: ${{ env.BUILD_ID }}
          tags: ${{ steps.discover-docker-tags.outputs.discovered_tags }}
          github_user_token: ${{ secrets.CICD_GITHUB_TOKEN }}
          docker_hub_username: ${{ secrets.DOCKER_USERNAME }}
          docker_hub_token: ${{ secrets.DOCKER_TOKEN }}
          dry_run: false
        if: env.jobRun == 'true'
      - name: Slack Notification
        if: success() && env.jobRun == 'true' 
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.DEVELOPERS_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotcms-bot
          SLACK_TITLE: "Attention dotters: Docker image built!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.githubusercontent.com/u/1005263?s=200&v=4
          SLACK_MESSAGE: "<!channel> This automated script is happy to announce that a new docker image has been built for *${{ env.DOTCMS_VERSION }}* with tag: ${{ steps.discover-docker-tags.outputs.discovered_tags }} :docker:"
