name: Reusable Deployment
on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      artifact-run-id:
        default: ${{ github.run_id }}
        type: string
      snapshot:
        default: false
        type: boolean
      latest:
        default: false
        type: boolean
      deploy-dev-image:
        default: false
        type: boolean
    secrets:
        DOCKER_USERNAME:
          required: false
          description: 'Docker.io username'
        DOCKER_TOKEN:
          required: false
          description: 'Docker.io token'
        EE_REPO_USERNAME:
          required: false
          description: 'Artifactory username'
        EE_REPO_PASSWORD:
          required: false
          description: 'Artifactory password'
        DEVELOPERS_SLACK_WEBHOOK:
          required: false
          description: 'Slack webhook for developers'
jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      # The repository is checked out using the 'actions/checkout' action.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # A Docker image is built and pushed using the 'deploy-artifact-docker' action.
      - name: Build/Push Docker Image
        id: docker_build
        uses: ./.github/actions/deploy-artifact-docker
        with:
          image_name: dotcms/dotcms
          docker_platforms: linux/amd64,linux/arm64
          build_run_id: ${{ inputs.artifact-run-id }}
          commit_id: ${{ github.sha }}
          ref: ${{ inputs.environment }}
          snapshot: ${{ inputs.snapshot }}
          latest: ${{ inputs.latest }}
          do_deploy: ${{ vars.DOCKER_DEPLOY || 'true' }} # default to true, set to disable in fork
          docker_io_username: ${{ secrets.DOCKER_USERNAME }}
          docker_io_token: ${{ secrets.DOCKER_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build/Push Docker Dev Image
        id: docker_build_dev
        if: inputs.deploy-dev-image
        uses: ./.github/actions/deploy-artifact-docker
        with:
          image_name: dotcms/dotcms-dev
          docker_platforms: linux/amd64,linux/arm64
          docker_context: dev-env
          commit_id: ${{ github.sha }}
          ref: ${{ inputs.environment }}
          snapshot: ${{ inputs.snapshot }}
          latest: ${{ inputs.latest }}
          do_deploy: ${{ vars.DOCKER_DEPLOY || 'true' }} # default to true, set to disable in fork
          docker_io_username: ${{ secrets.DOCKER_USERNAME }}
          docker_io_token: ${{ secrets.DOCKER_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Make value below which is source dotcms/dotcms tag to base dev image on dynamic to use whatever tag created above
          build_args: |
            DOTCMS_DOCKER_TAG=${{ inputs.environment }}_latest_SNAPSHOT

      # The CLI artifacts are built and uploaded to Artifactory using the 'deploy-artifact-cli' action.
      - name: CLI Deploy
        id: cli_deploy
        uses: ./.github/actions/deploy-artifact-cli
        with:
          branch: master
          artifactory-repo-username: ${{ secrets.EE_REPO_USERNAME }}
          artifactory-repo-password: ${{ secrets.EE_REPO_PASSWORD }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-run-id: ${{ inputs.artifact-run-id }}
          commit-id: ${{ github.sha }}

      # A Slack notification is sent using the 'action-slack-notify' action if the repository is 'dotcms/core'.
      - name: Slack Notification
        if: github.repository == 'dotcms/core'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.DEVELOPERS_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Attention dotters: Docker image built!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.githubusercontent.com/u/1005263?s=200&v=4
          SLACK_MESSAGE: "This automated script is happy to announce that a new docker image has been built for *master* with tags: [${{ steps.docker_build.outputs.tags }}] :docker:"