name: Reusable Deployment
on:
  workflow_call:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: string
      artifact-run-id:
        default: ${{ github.run_id }}
        type: string
      latest:
        default: false
        type: boolean
      deploy-dev-image:
        default: false
        type: boolean
      reuse-previous-build:
        default: false
        type: boolean
      publish-npm-package:
        default: false
        type: boolean
    secrets:
        DOCKER_USERNAME:
          required: false
          description: 'Docker.io username'
        DOCKER_TOKEN:
          required: false
          description: 'Docker.io token'
        EE_REPO_USERNAME:
          required: false
          description: 'Artifactory username'
        EE_REPO_PASSWORD:
          required: false
          description: 'Artifactory password'
        SLACK_BOT_TOKEN:
          required: false
          description: 'Slack webhook for developers'
        NPM_ORG_TOKEN:
          required: false
          description: 'NPM token'
        DEV_REQUEST_TOKEN:
          required: false
          description: 'Token to request a dev license from license.dotcms.com'
jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      # The repository is checked out using the 'actions/checkout' action.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: ./.github/actions/cleanup-runner

      # A Docker image is built and pushed using the 'deploy-artifact-docker' action.
      - name: Build/Push Docker Image
        id: docker_build
        uses: ./.github/actions/deploy-artifact-docker
        with:
          image_name: dotcms/dotcms
          docker_platforms: linux/amd64,linux/arm64
          build_run_id: ${{ inputs.artifact-run-id }}
          commit_id: ${{ github.sha }}
          ref: ${{ inputs.environment }}
          latest: ${{ inputs.latest }}
          do_deploy: ${{ vars.DOCKER_DEPLOY || 'true' }} # default to true, set to disable in fork
          docker_io_username: ${{ secrets.DOCKER_USERNAME }}
          docker_io_token: ${{ secrets.DOCKER_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build/Push Docker Dev Image
        id: docker_build_dev
        if: inputs.deploy-dev-image
        uses: ./.github/actions/deploy-artifact-docker
        with:
          image_name: dotcms/dotcms-dev
          docker_platforms: linux/amd64,linux/arm64
          docker_context: dev-env
          commit_id: ${{ github.sha }}
          ref: ${{ inputs.environment }}
          latest: true #${{ inputs.latest }}
          do_deploy: ${{ vars.DOCKER_DEPLOY || 'true' }} # default to true, set to disable in fork
          docker_io_username: ${{ secrets.DOCKER_USERNAME }}
          docker_io_token: ${{ secrets.DOCKER_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Make value below which is source dotcms/dotcms tag to base dev image on dynamic to use whatever tag created above
          build_args: |
            DOTCMS_DOCKER_TAG=${{ inputs.environment }}
            # This is a secret that is used to request a dev license from license.dotcms.com
            DEV_REQUEST_TOKEN=${{ secrets.DEV_REQUEST_TOKEN }} 

      # The artifacts are uploaded to Artifactory using the 'deploy-artifact-jfrog' action.
      - name: CLI Deploy
        continue-on-error: true
        id: cli_deploy
        uses: ./.github/actions/deploy-artifact-jfrog
        with:
          artifactory-username: ${{ secrets.EE_REPO_USERNAME }}
          artifactory-password: ${{ secrets.EE_REPO_PASSWORD }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: CLI Publish
        id: cli_publish
        if: inputs.publish-npm-package
        uses: ./.github/actions/publish-npm-cli
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          npm-token: ${{ secrets.NPM_ORG_TOKEN }}
          reuse-previous-build: ${{ inputs.reuse-previous-build }}


      # A Slack notification is sent using the 'slackapi/slack-github-action' action if the repository is 'dotcms/core'.
      - name: Slack Notification (Docker image announcement)
        if: github.repository == 'dotcms/core'
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "log-docker"
          payload: |
            {
              "blocks": [              
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "> :large_purple_circle: *Attention dotters:* Docker image built!\n \n>This automated script is happy to announce that a new *docker* image has been built for *${{ inputs.environment }}* with *tags:* [`${{ steps.docker_build.outputs.tags }}`] :docker:"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Slack Notification (dotCLI announcement)
        if: inputs.publish-npm-package
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: "log-dotcli"
          payload: |
            {
              "blocks": [              
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "> :large_purple_circle: *Attention dotters:* dotCLI published!\n \n>This automated script is happy to announce that a new *_dotCLI_* version *tagged as:* [ `${{ steps.cli_publish.outputs.npm-package-version }}, ${{ steps.cli_publish.outputs.npm-package-version-tag }}` ] is now available on the `NPM` registry :package:!\n \n>`npm i -g @dotcms/dotcli@${{ steps.cli_publish.outputs.npm-package-version-tag }}`"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
