# Trunk Deployment Workflow
# This workflow is triggered when the 'Maven CICD Pipeline' workflow run is completed on the 'master' branch.
# It deploys the application if the 'Maven CICD Pipeline' workflow run was successful.
name: Trunk Deployment

# The workflow run name is 'Trunk Deployment' appended with the name of the workflow run that triggered this workflow.
run-name: Trunk Deployment - ${{ github.event.workflow_run.name }}

# The concurrency group is 'trunk-deployment'. This ensures that only one run of this workflow can be in progress at a time.
concurrency: trunk-deployment
env:
  DEPLOYMENT_ENV: trunk
on:
  workflow_run:
    workflows: ['Maven CICD Pipeline']
    types:
      - completed
    branches:
      - master
  workflow_dispatch:
    inputs:
      trigger_sha:
        description: 'SHA for manual trigger (leave empty for HEAD of master)'
        required: false
      skip_checks:
        description: 'Set to true to skip checks'
        required: false
        default: 'false'
      force_latest:
        description: 'Force upload of latest artifact even if conditions are not met does nothing if skip_checks is false'
        required: false
        default: 'false'

# The workflow has read access to the repository contents and actions.
permissions:
  contents: read
  actions: read # allow access to other job artifacts with GITHUB_TOKEN
jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      calculated_run_id: ${{ steps.set_run_id.outputs.calculated_run_id }}
    steps:
      - name: Set manual run ID
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_id }}
        id: set_run_id
        run: echo "calculated_run_id=${{ github.event.inputs.run_id }}" >> $GITHUB_OUTPUT

      - name: Fetch latest successful Maven CICD Pipeline run ID
        if: ${{ github.event_name == 'workflow_dispatch' && !github.event.inputs.run_id }}
        id: get_latest_successful_run
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'maven-cicd-pipeline.yml', // Replace with your Maven CICD Pipeline workflow file name
              branch: 'master',
              status: 'success',
              event: 'push',
              per_page: 1
            });
            return data.total_count > 0 ? data.workflow_runs[0].id : null;
          result-encoding: string
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set dynamic run ID
        if: ${{ github.event_name == 'workflow_dispatch' && !github.event.inputs.run_id }}
        id: set_run_id
        run: echo "calculated_run_id=${{ steps.get_latest_successful_run.outputs.result }}" >> $GITHUB_OUTPUT

  deploy_check:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout core
        uses: actions/checkout@v4

      - name: Download latest artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: deployment-trunk.yml
          name: ${{ env.DEPLOYMENT_ENV }}_latest_sha
          path: .

      - name: Get the latest commit SHA from master and compare
        id: check
        run: |
          LAST_DEPLOY_SHA=$(cat ${{ env.DEPLOYMENT_ENV }}_latest_sha.txt)
          TRIGGER_SHA=${{ github.event.inputs.trigger_sha || github.event.workflow_run.head_sha }}
          WORKFLOW_SUCCESS=${{ github.event.workflow_run.conclusion == 'success' || github.event.inputs.skip_checks == 'true' }}
          FORCE_LATEST=${{ github.event.inputs.force_latest == 'true' }}
          echo "Last Deploy SHA: $LAST_DEPLOY_SHA, Trigger SHA: $TRIGGER_SHA, Workflow success: $WORKFLOW_SUCCESS, Force latest: $FORCE_LATEST"

          # Determine if deployment should proceed
          SKIP_CHECKS=${{ github.event.inputs.skip_checks == 'true' }}
          if [[ "$SKIP_CHECKS" == "true" ]] || (git merge-base --is-ancestor $LAST_DEPLOY_SHA $TRIGGER_SHA && [ "$WORKFLOW_SUCCESS" == "true" ]); then
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "Conditions for deployment not met. Latest: $LAST_DEPLOY_SHA, Trigger: $TRIGGER_SHA, Workflow success: $WORKFLOW_SUCCESS"
            echo "should_deploy=false" >> $GITHUB_ENV
          fi
        shell: bash

  deployment:
    if: needs.deploy_check.outputs.should_deploy == 'true'
    needs: [setup,deploy_check]
    runs-on: ubuntu-latest
    environment: ${{ env.DEPLOYMENT_ENV }}
    steps:
      # The repository is checked out using the 'actions/checkout' action.
      - name: Checkout core
        uses: actions/checkout@v4

      # A Docker image is built and pushed using the 'deploy-artifact-docker' action.
      - name: Build/Push Docker Image
        id: docker_build
        uses: ./.github/actions/deploy-artifact-docker
        with:
          docker_platforms: linux/amd64,linux/arm64
          build_run_id: ${{ needs.setup.outputs.calculated_run_id }}
          commit_id: ${{ github.event.workflow_run.head_sha }}"
          ref: master
          snapshot: true
          latest: true
          do_deploy: ${{ vars.DOCKER_DEPLOY || 'true' }} # default to true, set to disable in fork
          docker_io_username: ${{ secrets.DOCKER_USERNAME }}
          docker_io_token: ${{ secrets.DOCKER_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create artifact with commit id
        run: |
          echo "${{ github.event.workflow_run.head_sha }}" > ${{ env.DEPLOYMENT_ENV }}_latest_sha.txt
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEPLOYMENT_ENV }}_latest_sha
          path: ${{ env.DEPLOYMENT_ENV }}_latest_sha.txt

      # A Slack notification is sent using the 'action-slack-notify' action if the repository is 'dotcms/core'.
      - name: Slack Notification
        if: github.repository == 'dotcms/core'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.DEVELOPERS_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Attention dotters: Docker image built!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.githubusercontent.com/u/1005263?s=200&v=4
          SLACK_MESSAGE: "This automated script is happy to announce that a new docker image has been built for *master* with tags: [${{ steps.docker_build.outputs.tags }}] :docker:"