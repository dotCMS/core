# Trunk Deployment Workflow
# This workflow is triggered when the 'Maven CICD Pipeline' workflow run is completed on the 'master' branch.
# It deploys the application if the 'Maven CICD Pipeline' workflow run was successful.
name: Trunk Deployment

# The workflow run name is 'Trunk Deployment' appended with the name of the workflow run that triggered this workflow.
run-name: Trunk Deployment - ${{ github.event.workflow_run.name }}

# The concurrency group is 'trunk-deployment'. This ensures that only one run of this workflow can be in progress at a time.
concurrency: trunk-deployment
on:
  workflow_run:
    workflows: ['Maven CICD Pipeline']
    types:
      - completed
    branches:
      - master
  workflow_dispatch:
    inputs:
      build_run_id:
        description: 'The run id of the build to pull the artifact from'
        required: false
      skip_checks:
        description: 'Set to true to skip checks'
        type: boolean
        required: false
        default: false
      force_latest:
        description: 'Force upload of latest artifact even if conditions are not met does nothing if skip_checks is false'
        type: boolean
        required: false
        default: false

# The workflow has read access to the repository contents and actions.
permissions:
  contents: read
  actions: read # allow access to other job artifacts with GITHUB_TOKEN
jobs:
  deploy_check:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      is_latest: ${{ steps.check.outputs.is_latest }}
      build_sha: ${{ steps.check.outputs.build_sha }}
      run_id: ${{ steps.check.outputs.run_id }}
    steps:
      - name: Checkout core
        uses: actions/checkout@v4
        with:
          ref: master         # Specify the branch to check out
          fetch-depth: 0      # Indicates to fetch all history for all branches and tags

      - name: Download latest artifact
        id: deployment-status
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: deployment-trunk.yml
          branch: master
          workflow_conclusion: success
          search_artifacts: true
          name: trunk_latest_sha
          path: .
          if_no_artifact_found: warn
      - name: Set options for artifact lookup
        id: lookup-type
        run: |
          if [[ "${{ github.event.inputs.build_run_id || github.event.workflow_run.id }}" != "" ]]; then
            echo 'branch=master' >> $GITHUB_OUTPUT
            echo 'runid=' >> $GITHUB_OUTPUT
          else
            echo 'branch=' >> $GITHUB_OUTPUT
            echo 'runid=${{ github.event.inputs.build_run_id || github.event.workflow_run.id }}' >> $GITHUB_OUTPUT
          fi

      - name: Download Build Status
        id: data-download
        uses: dawidd6/action-download-artifact@v2
        with:
          name: 'workflow-data'
          workflow: maven-cicd-pipeline.yml
          workflow_conclusion: success
          branch: ${{ steps.lookup-type.outputs.branch }}
          event: push
          run_id: ${{ steps.lookup-type.outputs.runid }}
          search_artifacts: true
          if_no_artifact_found: warn

      - name: Get SHAs and check if we should deploy
        id: check
        run: |
          build_artifact_exists=${{ steps.data-download.outputs.found_artifact }}
          last_deployed_exists=${{ steps.deployment-status.outputs.found_artifact }} 
          if [[ ${last_deployed_exists} == "true" ]]; then
              last_deployed_sha=`echo '${{ steps.deployment-status.outputs.artifacts }}' | jq -r '.[0].workflow_run.head_sha'`
          else
              echo "No Last Deployed SHA found"
          fi
          
          if [[ ${build_artifact_exists} == "true" ]]; then
              build_sha=`echo '${{ steps.data-download.outputs.artifacts }}' | jq -r '.[0].workflow_run.head_sha'`
              run_id=`echo '${{ steps.data-download.outputs.artifacts }}' | jq -r '.[0].workflow_run.id'`
              echo "Build SHA: $build_sha"
              echo "Run id: $run_id"
          else
             echo "No build artifact found, nothing to deploy"
             echo "should_deploy=false" >> $GITHUB_OUTPUT
             exit 0
          fi
          
          if [[ ${last_deployed_exists} == "true" ]]; then
              echo "Found last deployed artifact with SHA: $last_deployed_sha"
             if [[ "${last_deployed_sha}" == "${build_sha}" ]]; then
                  echo "Last deployed SHA and build SHA are the same."
                  last_deployed_is_ancestor=false
              else
                  if git merge-base --is-ancestor ${last_deployed_sha} ${build_sha}; then
                      echo "The last deployed SHA is an ancestor of the build SHA."
                      last_deployed_is_ancestor=true
                  else
                      echo "The last deployed SHA is not an ancestor of the build SHA."
                      last_deployed_is_ancestor=false
                  fi
              fi
          else
              last_deployed_is_ancestor=false
          fi
          
          
          SKIP_CHECKS="${{ github.event.inputs.skip_checks == 'true' }}"
          FORCE_LATESST="${{ github.event.inputs.force_latest == 'true' }}"
          
          if [[ ${SKIP_CHECKS} == "true" || "${last_deployed_is_ancestor}" == "true" || "${last_deployed_exists}" != "true" ]]; then
                echo "should_deploy=true" >> $GITHUB_OUTPUT
            else
                echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ ${FORCE_LATESST} == "true" || ${last_deployed_is_ancestor} == true ]]; then
                echo "setting latest on deployment"
                echo "is_latest=true" >> $GITHUB_OUTPUT
            else
                echo "is_latest=false" >> $GITHUB_OUTPUT
          fi
          echo "build_sha=${build_sha}" >> $GITHUB_OUTPUT
          echo "run_id=${run_id}" >> $GITHUB_OUTPUT
        shell: bash
  deployment:
    if: needs.deploy_check.outputs.should_deploy == 'true'
    needs: [deploy_check]
    runs-on: ubuntu-latest
    environment: trunk
    steps:
      # The repository is checked out using the 'actions/checkout' action.
      - name: Checkout core
        uses: actions/checkout@v4

      # A Docker image is built and pushed using the 'deploy-artifact-docker' action.
      - name: Build/Push Docker Image
        id: docker_build
        uses: ./.github/actions/deploy-artifact-docker
        with:
          docker_platforms: linux/amd64,linux/arm64
          build_run_id: ${{ needs.deploy_check.outputs.run_id }}
          commit_id: ${{ needs.deploy_check.outputs.build_sha }}
          ref: master
          snapshot: true
          latest: ${{ needs.deploy_check.outputs.is_latest == 'true' }}
          do_deploy: ${{ vars.DOCKER_DEPLOY || 'true' }} # default to true, set to disable in fork
          docker_io_username: ${{ secrets.DOCKER_USERNAME }}
          docker_io_token: ${{ secrets.DOCKER_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      # The CLI artifacts are built and uploaded to Artifactory using the 'deploy-artifact-cli' action.
      - name: CLI Deploy
        id: cli_deploy
        uses: ./.github/actions/deploy-artifact-cli
        with:
          branch: master
          artifactory-repo-username: ${{ secrets.EE_REPO_USERNAME }}
          artifactory-repo-password: ${{ secrets.EE_REPO_PASSWORD }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          build-run-id: ${{ needs.deploy_check.outputs.run_id }}
          commit-id: ${{ needs.deploy_check.outputs.build_sha }}

      - name: Create artifact with commit id
        if: needs.deploy_check.outputs.is_latest == 'true'
        run: |
          echo "${{ needs.deploy_check.outputs.build_sha }}" > trunk_latest_sha.txt
        shell: bash
      - name: Upload artifact
        if: needs.deploy_check.outputs.is_latest == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: trunk_latest_sha
          path: trunk_latest_sha.txt

      # A Slack notification is sent using the 'action-slack-notify' action if the repository is 'dotcms/core'.
      - name: Slack Notification
        if: github.repository == 'dotcms/core'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.DEVELOPERS_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Attention dotters: Docker image built!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.githubusercontent.com/u/1005263?s=200&v=4
          SLACK_MESSAGE: "This automated script is happy to announce that a new docker image has been built for *master* with tags: [${{ steps.docker_build.outputs.tags }}] :docker:"