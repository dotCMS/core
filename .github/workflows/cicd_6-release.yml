# Release Workflow
#
# This workflow is responsible for creating and publishing dotCMS releases.
# It follows the standard workflow pattern with initialize, build, test, deployment, release, finalize, and report phases.
#
# Key features:
# - Can be triggered manually or automatically when a release branch is pushed
# - Gets version information from .mvn/maven.config in the release branch
# - Uses standardized environment name throughout the workflow
# - Reuses artifacts from previous builds when available
# - Follows the same pipeline structure as other workflows (PR, trunk, nightly)
# - Handles the specific release tasks like versioning, tagging, and Docker image publishing
# - Sends notifications upon completion

name: '-6 Release Workflow'

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Release branch name'
        required: true
        type: string
      reuse-previous-build:
        description: 'Reuse artifacts from previous workflows'
        type: boolean
        default: true
        required: false
      build-on-missing-artifacts:
        description: 'Build if artifacts are missing'
        type: boolean
        default: true
        required: false
      run-all-tests:
        description: 'Run all tests'
        type: boolean
        default: true
        required: false
      update_github_labels:
        description: 'Update GitHub labels'
        type: boolean
        default: false
        required: false
      notify_slack:
        description: 'Notify Slack'
        type: boolean
        default: true
        required: false
      docker_registry:
        description: 'Docker registry to push images to (dockerhub or ghcr)'
        type: choice
        default: 'dockerhub'
        options:
          - 'dockerhub'
          - 'ghcr'
        required: false
  push:
    branches:
      - 'release-**'

# Concurrency group to manage multiple runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: false

jobs:
  # Get release information from branch
  get-release-info:
    name: Get Release Info
    runs-on: ubuntu-${{ vars.UBUNTU_RUNNER_VERSION || '24.04' }}
    outputs:
      release_version: ${{ steps.extract-version.outputs.release_version }}
      environment: ${{ steps.set-vars.outputs.environment }}
      docker_tag: ${{ steps.set-vars.outputs.docker_tag }}
      maven_revision: ${{ steps.set-vars.outputs.maven_revision }}
      maven_changelist: ${{ steps.set-vars.outputs.maven_changelist }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.release_branch }}

      - name: Extract version from config
        id: extract-version
        run: |
          if [ -f .mvn/maven.config ]; then
            echo "Found .mvn/maven.config, extracting version"
            REVISION=$(grep -oP "(?<=-Drevision=)[^\s]+" .mvn/maven.config || echo "1.0.0-SNAPSHOT")
            CHANGELIST=$(grep -oP "(?<=-Dchangelist=)[^\s]+" .mvn/maven.config || echo "")
            
            if [ -n "$CHANGELIST" ]; then
              VERSION="${REVISION}${CHANGELIST}"
            else
              VERSION="${REVISION}"
            fi
          else
            echo "No .mvn/maven.config found, using default version"
            VERSION="1.0.0-SNAPSHOT"
          fi
          
          echo "release_version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using release version: ${VERSION}"
      
      - name: Set additional variables
        id: set-vars
        run: |
          # Set environment based on version pattern
          if [[ "${{ steps.extract-version.outputs.release_version }}" == *-SNAPSHOT ]]; then
            echo "environment=trunk" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.extract-version.outputs.release_version }}" == *_lts_v* ]]; then
            echo "environment=lts" >> $GITHUB_OUTPUT
          else
            echo "environment=release" >> $GITHUB_OUTPUT
          fi
          
          # Set docker_tag (same as release_version if not specified)
          echo "docker_tag=${{ steps.extract-version.outputs.release_version }}" >> $GITHUB_OUTPUT
          
          # Extract maven_revision and maven_changelist if they exist
          if [ -f .mvn/maven.config ]; then
            REVISION=$(grep -oP "(?<=-Drevision=)[^\s]+" .mvn/maven.config || echo "${{ steps.extract-version.outputs.release_version }}")
            CHANGELIST=$(grep -oP "(?<=-Dchangelist=)[^\s]+" .mvn/maven.config || echo "")
          else
            # Default values if .mvn/maven.config doesn't exist
            if [[ "${{ steps.extract-version.outputs.release_version }}" == *-SNAPSHOT ]]; then
              REVISION=$(echo "${{ steps.extract-version.outputs.release_version }}" | sed 's/-SNAPSHOT//')
              CHANGELIST="-SNAPSHOT"
            else
              REVISION="${{ steps.extract-version.outputs.release_version }}"
              CHANGELIST=""
            fi
          fi
          
          echo "maven_revision=${REVISION}" >> $GITHUB_OUTPUT
          echo "maven_changelist=${CHANGELIST}" >> $GITHUB_OUTPUT

  # Initialize the release process, checking for existing artifacts
  initialize:
    name: Initialize
    needs: [get-release-info]
    uses: ./.github/workflows/cicd_comp_initialize-phase.yml
    with:
      reuse-previous-build: ${{ inputs.reuse-previous-build }}
      build-on-missing-artifacts: ${{ inputs.build-on-missing-artifacts }}
      validation-level: 'full'

  # Build job - only runs if no artifacts were found during initialization
  build:
    name: Release Build
    needs: [ get-release-info, initialize ]
    if: needs.initialize.outputs.found_artifacts == 'false'
    uses: ./.github/workflows/cicd_comp_build-phase.yml
    with:
      core-build: true
      version: ${{ needs.get-release-info.outputs.release_version }}
    permissions:
      contents: read
      packages: write

  # Test job - runs comprehensive tests
  test:
    name: Release Test
    needs: [ get-release-info, initialize, build ]
    if: always() && !failure() && !cancelled()
    uses: ./.github/workflows/cicd_comp_test-phase.yml
    with:
      run-all-tests: ${{ inputs.run-all-tests }}
      jvm_unit_test: true
      integration: true
      postman: true
      karate: true
      frontend: true
      cli: true
      e2e: true
      artifact-run-id: ${{ needs.initialize.outputs.artifact-run-id }}
    secrets:
      DOTCMS_LICENSE: ${{ secrets.DOTCMS_LICENSE }}
    permissions:
      contents: read
      packages: write

  # CLI Build job - builds CLI artifacts
  build-cli:
    name: CLI Build
    needs: [ get-release-info, initialize, test ]
    if: always() && !failure() && !cancelled()
    uses: ./.github/workflows/cicd_comp_cli-native-build-phase.yml
    with:
      buildNativeImage: true
      artifact-run-id: ${{ needs.initialize.outputs.artifact-run-id }}
      branch: ${{ github.ref }}
      version: ${{ needs.get-release-info.outputs.release_version }}

  # Release phase - handles release-specific tasks
  release:
    name: Release Process
    needs: [ get-release-info, initialize, build, test, build-cli ]
    if: success()
    uses: ./.github/workflows/cicd_comp_release-phase.yml
    with:
      release_version: ${{ needs.get-release-info.outputs.release_version }}
      release_commit: ''
      deploy_artifact: true
      update_plugins: true
      upload_javadocs: true
      artifact-run-id: ${{ needs.initialize.outputs.artifact-run-id }}
      environment: ${{ needs.get-release-info.outputs.environment }}
      docker_tag: ${{ needs.get-release-info.outputs.docker_tag }}
      maven_revision: ${{ needs.get-release-info.outputs.maven_revision }}
      maven_changelist: ${{ needs.get-release-info.outputs.maven_changelist }}
      docker_registry: ${{ inputs.docker_registry || 'dockerhub' }}
    secrets:
      CI_MACHINE_TOKEN: ${{ secrets.CI_MACHINE_TOKEN }}
      CI_MACHINE_USER: ${{ secrets.CI_MACHINE_USER }}
      EE_REPO_USERNAME: ${{ secrets.EE_REPO_USERNAME }}
      EE_REPO_PASSWORD: ${{ secrets.EE_REPO_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update GitHub issue labels with the new release
  release-labeling:
    name: Release Labeling
    needs: [ get-release-info, release ]
    if: success() && inputs.update_github_labels == 'true'
    uses: ./.github/workflows/issue_comp_release-labeling.yml
    with:
      new_label: 'Release : ${{ needs.get-release-info.outputs.release_version }}'
      rename_label: 'Next Release'
    secrets:
      CI_MACHINE_TOKEN: ${{ secrets.CI_MACHINE_TOKEN }}

  # Release notification - sends Slack message for successful releases
  notify:
    name: Release Notification
    runs-on: ubuntu-${{ vars.UBUNTU_RUNNER_VERSION || '24.04' }}
    needs: [ get-release-info, release ]
    if: success() && (inputs.notify_slack == 'true' || github.event_name == 'push')
    steps:
      - name: Notify Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.RELEASE_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Important news!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.slack-edge.com/temp/2021-12-08/2830145934625_e4e464d502865ff576e4.png
          SLACK_MESSAGE: "<!channel> This automated script is excited to announce the release of a new version of dotCMS `${{ needs.get-release-info.outputs.release_version }}` :rocket:\n:docker: Produced images: [${{ needs.release.outputs.formatted_tags }}]"

  # Finalize job - aggregates results from previous jobs
  finalize:
    name: Finalize
    if: always()
    needs: [ get-release-info, initialize, build, test, build-cli, release, release-labeling, notify ]
    uses: ./.github/workflows/cicd_comp_finalize-phase.yml
    with:
      artifact-run-id: ${{ needs.initialize.outputs.artifact-run-id }}
      needsData: ${{ toJson(needs) }}

  # Report job - generates and sends the final workflow report
  report:
    name: Report
    if: always()
    needs: [ finalize ]
    uses: ./.github/workflows/cicd_post-workflow-reporting.yml
    secrets:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }} 