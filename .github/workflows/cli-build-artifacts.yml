name: 'CLI Build Artifacts'
on:
  workflow_call:
    inputs:
      skipTests:
        type: boolean
      buildNativeImage:
        type: boolean
      uploadArtifacts:
        type: boolean
      branch:
        type: string

env:
  JAVA_VERSION: 11
  JAVA_DISTRO: temurin
  GRAALVM_VERSION: '22.1.0'
  BRANCH: ${{ inputs.branch || github.ref_name }}

jobs:
  os-runners:
    name: 'Get OS matrix'
    runs-on: ubuntu-latest
    outputs:
      runners: ${{ steps.set-os.outputs.runners }}
    steps:
      - name: 'Set OS'
        id: set-os
        run: |
          if [[ "${{ inputs.buildNativeImage }}" == "true" ]]; then
            RUNNERS='[{ "os": "ubuntu-latest", "label": "Linux" }, { "os": "macos-latest", "label": "macOS-Intel" }, { "os": "macos-13-xlarge", "label": "macOS-Silicon" }]'
          else
            RUNNERS='[{ "os": "ubuntu-latest", "label": "Linux" }]'
          fi
          echo "runners=$RUNNERS" >> $GITHUB_OUTPUT

  build:
    needs: os-runners
    name: 'Build native image on ${{ matrix.label }}'
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJSON( needs.os-runners.outputs.runners ) }}
    runs-on: ${{ matrix.os }}
    outputs:
      date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - name: 'Cleanup Ubuntu Runner'
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: ./.github/actions/cleanup-runner

      - name: 'Cleanup MacOS Runner'
        if: ${{ contains(matrix.os, 'macos-') }}
        uses: ./.github/actions/cleanup-macos-runner

      - name: 'Setup Java'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      # Sets up GRAALVM for native image compilation (Linux/macOS)
      # Downloads and installs GRAALVM
      # Configures environment variables
      - name: 'Set up GRAALVM for ${{ matrix.label }}'
        if: ${{ inputs.buildNativeImage == true && matrix.os != 'windows-latest' }}
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            echo "GRAALVM on Linux (AMD64)"

            ARCH=amd64
            PLATFORM=linux
            INSTALLATION_PATH=/usr/lib/jvm

          else
            if [ "${{ matrix.os }}" == "macos-13-xlarge" ]; then
              echo "GRAALVM on Mac (AARCH64)"
              ARCH=aarch64
            else
              echo "GRAALVM on Mac (AMD64)"
              ARCH=amd64
            fi

            PLATFORM=darwin
            INSTALLATION_PATH=/Library/Java/JavaVirtualMachines
          fi

          echo "PLATFORM=$PLATFORM"
          echo "ARCH=$ARCH"
          echo "INSTALLATION_PATH=$INSTALLATION_PATH"

          wget https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{ env.GRAALVM_VERSION }}/graalvm-ce-java11-${PLATFORM}-${ARCH}-${{ env.GRAALVM_VERSION }}.tar.gz
          sudo mkdir -p $INSTALLATION_PATH
          tar -xzf graalvm-ce-java11-${PLATFORM}-${ARCH}-${{ env.GRAALVM_VERSION }}.tar.gz
          sudo mv graalvm-ce-java11-${{ env.GRAALVM_VERSION }} $INSTALLATION_PATH

          if [ "${{ matrix.os }}" != "ubuntu-latest" ]; then
            sudo xattr -r -d com.apple.quarantine /Library/Java/JavaVirtualMachines/graalvm-ce-java11-${{ env.GRAALVM_VERSION }}/Contents/Home
            GRAALVM_HOME="${INSTALLATION_PATH}/graalvm-ce-java11-${{ env.GRAALVM_VERSION }}/Contents/Home"
          else
            GRAALVM_HOME="${INSTALLATION_PATH}/graalvm-ce-java11-${{ env.GRAALVM_VERSION }}"
          fi

          echo "GRAALVM_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          echo "JAVA_HOME=$GRAALVM_HOME" >> $GITHUB_ENV
          PATH="$GRAALVM_HOME/bin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          gu install native-image

      - name: 'Set up GRAALVM for (Windows)'
        if: ${{ inputs.buildNativeImage == true && matrix.os == 'windows-latest' }}
        shell: pwsh
        run: |
          $ARCH="amd64"
          $DOWNLOAD_URL="https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-${{ env.GRAALVM_VERSION }}/graalvm-ce-java11-windows-${ARCH}-${{ env.GRAALVM_VERSION }}.zip"
          $OUTPUT_PATH="C:\graalvm-ce-java11-windows-${ARCH}-${{ env.GRAALVM_VERSION }}.zip"
          $GRAALVM_INSTALLATION_PATH="C:\Program Files (x86)\Java"

          Invoke-WebRequest -Uri $DOWNLOAD_URL -OutFile $OUTPUT_PATH

          if (Test-Path -Path $GRAALVM_INSTALLATION_PATH -PathType Container) {
            Write-Host "GRAALVM installation path exists."
          } else {
            Write-Host "Creating GRAALVM installation path."
            New-Item -ItemType Directory -Path $GRAALVM_INSTALLATION_PATH
          }

          Expand-Archive -Path $OUTPUT_PATH -DestinationPath $GRAALVM_INSTALLATION_PATH

          $env:JAVA_HOME="${GRAALVM_INSTALLATION_PATH}\graalvm-ce-java11-22.1.0"
          $env:Path="${env:Path};${env:JAVA_HOME}\bin;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.38.33130\bin\HostX86\x64"

          echo "JAVA_HOME=${env:JAVA_HOME}" >> "$env:GITHUB_ENV"
          echo "Path=${env:Path}" >> "$env:GITHUB_ENV"

          gu.cmd install native-image

      - name: 'Get Date'
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash

      - name: 'Cache Maven Repository'
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: mavencore-${{ steps.get-date.outputs.date }}-${{ github.run_id }}
          restore-keys: |
            mavencore-${{ steps.get-date.outputs.date }}

      - name: 'Prepare dotCMS license'
        if: ${{ inputs.skipTests == false }}
        env:
          DOTCMS_LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
        run: |
          DOTCMS_LICENSE_PATH=${{ github.workspace }}/tools/dotcms-cli/license
          mkdir -p ${DOTCMS_LICENSE_PATH}
          echo "${DOTCMS_LICENSE_KEY}" > ${DOTCMS_LICENSE_PATH}/license.dat
          echo "DOTCMS_LICENSE_FILE=${DOTCMS_LICENSE_PATH}/license.dat" >> "$GITHUB_ENV"

      - name: 'Compile source code'
        working-directory: ${{ github.workspace }}
        run: |
          ./mvnw clean install -Dtest.failure.ignore=true -DskipTests=${{ inputs.skipTests }} -am -pl :dotcms-cli

      - name: 'Build uber-jar'
        if: ${{ matrix.label == 'Linux' }}
        working-directory: ${{ github.workspace }}
        run: |
          ./mvnw package -Dquarkus.package.type="uber-jar" -DskipTests=${{ inputs.skipTests }} -pl :dotcms-cli

      # Builds a native image of the CLI using GRAALVM (Linux/macOS)
      # Runs on a matrix for different operating systems
      - name: 'Build Native Image ${{ matrix.label }}'
        if: ${{ inputs.buildNativeImage == true && matrix.os != 'windows-latest' }}
        working-directory: ${{ github.workspace }}
        run: |
          ./mvnw package -Pnative -DskipTests=${{ inputs.skipTests }} -pl :dotcms-cli

      # Builds a native image of the CLI using GRAALVM on Windows
      # Uses PowerShell for setup and execution
      - name: 'Build Native Image (Windows)'
        if: ${{ inputs.buildNativeImage == true && matrix.os == 'windows-latest' }}
        working-directory: ${{ github.workspace }}
        shell: pwsh
        run: |
          cmd /c 'call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" && .\mvnw.cmd package -Dnative -DskipTests=true -pl :dotcms-cli'

      - name: 'Create distribution'
        if: ${{ inputs.buildNativeImage == true }}
        working-directory: ${{ github.workspace }}
        run: |
          ./mvnw -B -ntp -Pdist package -DskipTests=${{ inputs.skipTests }} -pl :dotcms-cli

      - name: 'Distribution tree'
        if: ${{ inputs.buildNativeImage == true }}
        working-directory: ${{ github.workspace }}/tools/dotcms-cli/
        run: |
          ls -ltr cli/target/distributions

      - name: 'Upload built distribution'
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}
          path: |
            ${{ github.workspace }}/tools/dotcms-cli/cli/target/*-runner.jar
            ${{ github.workspace }}/tools/dotcms-cli/cli/target/distributions/*.zip
          retention-days: 2
          if-no-files-found: ignore

  upload:
    if: ${{ inputs.uploadArtifacts == true }}
    name: 'Upload Artifacts to Artifactory'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4
        with:
          ref: ${{ env.BRANCH }}

      - name: 'Cleanup Ubuntu Runner'
        uses: ./.github/actions/cleanup-runner

      - name: 'Download build artifacts'
        uses: actions/download-artifact@v4
        with:
          pattern: artifacts-*
          path: ${{ github.workspace }}/artifacts
          merge-multiple: true

      - name: 'List artifacts'
        run: |
          ls -R          

      - name: 'Cache Maven Repository'
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: mavencore-${{ needs.build.outputs.date }}-${{ github.run_id }}
          restore-keys: |
            mavencore-${{ needs.build.outputs.date }}

      - name: 'Upload to Artifactory'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JRELEASER_ARTIFACTORY_USERNAME: ${{ secrets.EE_REPO_USERNAME }}
          JRELEASER_ARTIFACTORY_PASSWORD: ${{ secrets.EE_REPO_PASSWORD }}
        working-directory: ${{ github.workspace }}
        run: |
          tools/dotcms-cli/mvnw -B -Prelease jreleaser:upload -DartifactsDir=artifacts -Djreleaser.git.root.search=true -pl :dotcms-cli-parent -Dmaven.plugin.validation=VERBOSE

      - name: 'Cleanup'
        run: |
          rm -rf ${{ github.workspace }}/artifacts
