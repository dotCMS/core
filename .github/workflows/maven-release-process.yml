name: Maven Release Process
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release Version (yy.mm.dd[_lts_v##]])'
        required: true
      release_commit:
        description: 'Commit Hash'
        required: true
      update_github_labels:
        description: 'Update GitHub labels'
        type: boolean
        default: false
        required: false
env:
  JAVA_VERSION: 11
  JAVA_DISTRO: temurin
  JVM_TEST_MAVEN_OPTS: '-e -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn'
  NODE_VERSION: 16
  NEXT_VERSION: '1.0.0-SNAPSHOT'
  DOCKER_BUILD_CONTEXT: /home/runner/work/_temp/core-build

jobs:
  prepare-release:
    if: ${{ !startsWith(github.event.release.name, 'dotcms-cli') }}
    name: Prepare Release
    runs-on: ubuntu-20.04
    outputs:
      release_version: ${{ steps.set-common-vars.outputs.release_version }}
      release_tag: ${{ steps.set-common-vars.outputs.release_tag }}
      release_branch: ${{ steps.set-common-vars.outputs.release_branch }}
      release_hash: ${{ steps.set-common-vars.outputs.release_hash }}
      is_lts: ${{ steps.set-common-vars.outputs.is_lts }}
      date: ${{ steps.set-common-vars.outputs.date }}
    env:
      REPO_USERNAME: ${{ secrets.EE_REPO_USERNAME }}
      REPO_PASSWORD: ${{ secrets.EE_REPO_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      IMAGE_NAME: dotcms/dotcms
    steps:
      - name: Validate Inputs
        run: |
          if [[ ! ${{ github.event.inputs.release_version }} =~ ^[0-9]{2}.[0-9]{2}.[0-9]{2}(_lts_v[0-9]{2})?$ ]]; then
            echo 'Release version must be in the format yy.mm.dd or yy.mm.dd_lts_v##'
            exit 1
          fi

      - run: echo 'GitHub context'
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Checkout core
        uses: actions/checkout@v3
        with:
          ref: master
          fetch-depth: 0

      - name: Set Common Vars
        id: set-common-vars
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          release_version=${{ github.event.inputs.release_version }}
          release_tag=v${release_version}
          release_branch=release-${release_version}
          release_commit=${{ github.event.inputs.release_commit }}
          release_hash=${release_commit::7}
          is_lts=false
          [[ ${release_version} =~ ^[0-9]{2}.[0-9]{2}.[0-9]{2}_lts_v[0-9]{2}$ ]] && is_lts=true

          echo "release_version=${release_version}" >> $GITHUB_OUTPUT
          echo "release_tag=${release_tag}" >> $GITHUB_OUTPUT
          echo "release_branch=${release_branch}" >> $GITHUB_OUTPUT
          echo "release_commit=${release_commit}" >> $GITHUB_OUTPUT
          echo "release_hash=${release_hash}" >> $GITHUB_OUTPUT
          echo "is_lts=${is_lts}" >> $GITHUB_OUTPUT
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        run: |
          release_tag=${{ steps.set-common-vars.outputs.release_tag }}
          if git rev-parse "${release_tag}" >/dev/null 2>&1; then 
            echo "Tag ${release_tag} exists, removing it"
            git push origin :refs/tags/${release_tag}
          fi
      
          release_branch=${{ steps.set-common-vars.outputs.release_branch }}
          remote=$(git ls-remote --heads https://github.com/dotCMS/core.git ${release_branch} | wc -l | tr -d '[:space:]')
          is_lts_trunk=false
          if [[ "${remote}" == '1' ]]; then
            if [[ ${{ steps.set-common-vars.outputs.release_version }} =~ [0-9]{2}.[0-9]{2}.[0-9]{2}_lts ]]; then
              is_lts_trunk=true
              echo "LTS release branch ${release_branch} already exists, ignoring removal"
            else
              echo "Release branch ${release_branch} already exists, removing it"
              git push origin :${release_branch}
            fi
          fi

          git reset --hard ${{ steps.set-common-vars.outputs.release_commit }}
          if [[ ${is_lts_trunk} == 'false' ]]; then
            git checkout -b ${release_branch}
            git push origin ${release_branch}
          fi

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Build Core
        id: build-core
        run: |
          release_version=${{ steps.set-common-vars.outputs.release_version }}
          
          ./mvnw -ntp \
            ${JVM_TEST_MAVEN_OPTS} \
            versions:set \
            versions:commit \
            -DnewVersion=${release_version} \
            -DprocessAllModules=true
          
          ./mvnw -ntp \
            ${JVM_TEST_MAVEN_OPTS} \
            versions:set-property \
            -Dproperty=tika.api.version \
            -DnewVersion=99.12.31 \
            --file independent-projects/pom.xml
          
          git status
          git commit -a -m "🏁 Publishing release version [${release_version}]"
          git push origin ${{ steps.set-common-vars.outputs.release_branch }}
          
          release_commit=$(git log -1 --pretty=%H)
          echo "release_commit=${release_commit}" >> $GITHUB_OUTPUT
          
          mkdir -p ${DOCKER_BUILD_CONTEXT}
          ./mvnw -ntp \
            ${JVM_TEST_MAVEN_OPTS} \
            -Dprod=true \
            -Ddocker.buildArchiveOnly=${DOCKER_BUILD_CONTEXT} \
            -Dskip.npm.install=${NODE_CACHE_HIT} \
            -DskipTests=true \
            -DskipITs=true \
            clean install \
            --file pom.xml \
            --show-version

      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: maven-core-${{ steps.set-common-vars.outputs.date }}-${{ github.run_id }}
          restore-keys: |
            maven-core-${{ steps.set-common-vars.outputs.date }}

      - name: Cache Core Output
        id: cache-core-output
        uses: actions/cache@v3
        with:
          path: |
            ./dotCMS/target/classes
            ./dotCMS/target/generated-sources
            ./dotCMS/target/dotcms-core-${{ steps.set-common-vars.outputs.release_version }}.zip
          key: maven-core-output-${{ steps.set-common-vars.outputs.date }}-${{ github.run_id }}
          restore-keys: |
            maven-core-output-${{ steps.set-common-vars.outputs.date }}

      - name: Cache Node Binary
        id: cache-node-binary
        uses: actions/cache@v3
        with:
          path: |
            core-web/installs
          key: node-binary-${{ hashFiles('core-web/.nvmrc') }}

      - name: Cache NPM
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
          key: npm-${{ hashFiles('core-web/package-lock.json') }}
          restore-keys: npm-

      - name: Cache Docker Context
        id: cache-docker-context
        uses: actions/cache@v3
        with:
          path: ${{ env.DOCKER_BUILD_CONTEXT }}
          key: docker-context-${{ steps.set-common-vars.outputs.date }}-${{ github.run_id }}
          restore-keys: |
            docker-context-${{ steps.set-common-vars.outputs.date }}

      - name: Create Release
        run: |
          curl -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Authorization: Bearer ${{ secrets.CICD_GITHUB_TOKEN }}" \
            https://api.github.com/repos/dotCMS/core/releases \
            -d '{"tag_name": "${{ steps.set-common-vars.outputs.release_tag }}", "name": "Release ${{ steps.set-common-vars.outputs.release_version }}", "target_commitish": "${{ steps.build-core.outputs.release_commit }}", "draft": false, "prerelease": false, "generate_release_notes": false}'

  release-process:
    name: Release Process
    runs-on: ubuntu-latest
    needs: prepare-release
    if: success()
    steps:
      - name: Checkout core
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.prepare-release.outputs.release_tag }}

      - name: Restore Maven Repository
        id: restore-maven
        uses: actions/cache/restore@v3
        with:
          path: ~/.m2/repository
          key: maven-core-${{ needs.prepare-release.outputs.date }}-${{ github.run_id }}

      - name: Restore Core Output
        id: restore-core-output
        uses: actions/cache/restore@v3
        with:
          path: |
            ./dotCMS/target/classes
            ./dotCMS/target/generated-sources
            ./dotCMS/target/dotcms-core-${{ needs.prepare-release.outputs.release_version }}.zip
          key: maven-core-output-${{ needs.prepare-release.outputs.date }}-${{ github.run_id }}

      - name: Restore Node Binary
        id: restore-node-binary
        uses: actions/cache/restore@v3
        with:
          path: core-web/installs
          key: node-binary-${{ hashFiles('core-web/.nvmrc') }}

      - name: Restore NPM
        id: restore-npm
        uses: actions/cache/restore@v3
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('core-web/package-lock.json') }}

      - name: Restore Docker Context
        id: restore-docker-context
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.DOCKER_BUILD_CONTEXT }}
          key: docker-context-${{ needs.prepare-release.outputs.date }}-${{ github.run_id }}

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: maven-settings-xml-action
        uses: whelk-io/maven-settings-xml-action@v20
        with:
          repositories: '[{ "id": "dotcms-libs", "name": "DotCMS libs Release", "url": "https://repo.dotcms.com/artifactory/libs-release" }]'
          servers: '[{ "id": "dotcms-libs", "username": "${{ secrets.EE_REPO_USERNAME }}", "password": "${{ secrets.EE_REPO_PASSWORD }}" }]'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: Deploy Release
#        run: |
#          ./mvnw -ntp \
#            ${JVM_TEST_MAVEN_OPTS} \
#            -Dprod=true \
#            -DskipTests=true \
#            -DskipITs=true \
#            deploy \
#            --file dotCMS/pom.xml

#      - name: Push Distro
#        run: |
#          target_dir=./dotCMS/target
#          distro_file=dotcms_${{ needs.prepare-release.outputs.release_version }}.zip
#          mv ${target_dir}/dotcms-core-${{ needs.prepare-release.outputs.release_version }}.zip ${target_dir}/${distro_file}
#
#          aws s3 cp \
#            ${target_dir}/${distro_file} \
#            s3://static.dotcms.com/versions/${{ needs.prepare-release.outputs.release_version }}/${distro_file}
#        env:
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Generate/Push Javadoc
        run: |
          ./mvnw -ntp \
            ${JVM_TEST_MAVEN_OPTS} \
            javadoc:javadoc \
            --file dotCMS/pom.xml
          rc=$?
          if [[ $rc != 0 ]]; then
            echo "Javadoc generation failed with exit code $rc"
            exit $rc
          fi
          
          site_dir=./dotCMS/target/site
          javadoc_dir=${site_dir}/javadocs
          
          mv ${site_dir}/apidocs ${javadoc_dir}
          aws s3 cp \
            ${javadoc_dir} \ 
            s3://static.dotcms.com/docs/${{ needs.prepare-release.outputs.release_version }}/javadocs \
            --recursive
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Checkout Plugins
        uses: actions/checkout@v3
        with:
          repository: dotCMS/plugin-seeds
          path: plugins
          ref: master
          fetch-depth: 0

      - name: Update Plugins
        working-directory: ${{ github.workspace }}/plugins
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          release_version=${{ needs.prepare-release.outputs.release_version }}
          git checkout -b release-${release_version}
          
          for file in $(find . -name build.gradle)
          do
            echo "Replacing version for ${file}"
            python3 ${{ github.workspace }}/cicd/resources/update_osgi_plugins.py ${file} ${release_version}
            cat ${file} | grep "${release_version}"
          done
          
          git status
          git add .
          git commit -m "Updating dotcms version to ${release_version}"
          git commit --allow-empty -m "Publish Release ${release_version}" 
          git push origin ${{ needs.prepare-release.outputs.release_branch }}

  publish-release-image:
    name: Publish Release Image
    runs-on: ubuntu-latest
    needs: [prepare-release, release-process]
    if: success()
    outputs:
      formatted_tags: ${{ steps.set-common-vars.outputs.formatted_tags }}
    env:
      DOCKER_BUILD_CONTEXT: /home/runner/work/_temp/core-build
      DOCKER_PLATFORMS: linux/amd64,linux/arm64
    steps:
      - name: Set Common Vars
        id: set-common-vars
        run: |
          release_version=${{ needs.prepare-release.outputs.release_version }}
          tags="${release_version}_${{ needs.prepare-release.outputs.release_hash }},${release_version}"
          formatted_tags=''
          if [[ "${{ needs.prepare-release.outputs.is_lts }}" != 'true' ]]; then
            tags="${tags},latest"
          fi
          
          old_ifs=$IFS
          IFS=,
          
          for tag in "${tags[@]}"
          do
            [[ -n "${formatted_tags}" ]] && formatted_tags="${formatted_tags}, "
            formatted_tags="`${tag}`"
          done
          
          IFS=${old_ifs}

          echo "tags=${tags}" >> $GITHUB_OUTPUT
          echo "formatted_tags=${formatted_tags}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
        with:
          image: tonistiigi/binfmt:latest
          platforms: ${{ env.DOCKER_PLATFORMS }}

      - id: docker-setup-buildx
        name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          version: latest
          platforms: ${{ env.DOCKER_PLATFORMS }}
          driver-opts: |
            image=moby/buildkit:v0.12.2

      - name: Docker Hub login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build base image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKER_BUILD_CONTEXT }}/context
          tags: ${{ steps.set-common-vars.outputs.tags }}
          platforms: ${{ env.DOCKER_PLATFORMS }}
          pull: true
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release-wrap:
    name: Release Wrap-up
    runs-on: ubuntu-latest
    needs: [prepare-release, release-process, publish-release-image]
    if: success()
    env:
      FETCH_VALUE: 'Next Release'
    steps:
      - name: Checkout core
        uses: actions/checkout@v3
        with:
          ref: ${{ needs.prepare-release.outputs.release_tag }}

      - name: Fetch `Next Release` issues
        id: fetch-next-release-issues
        uses: ./.github/actions/issue-fetcher
        with:
          fetch_operation: 'WITH_LABELS'
          fetch_value: ${{ env.FETCH_VALUE }}
          github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
        if: ${{ github.event.inputs.update_github_labels == 'true' }}

      - name: Clear next release issues
        uses: ./.github/actions/issue-labeler
        with:
          issues_json: ${{ steps.fetch-next-release-issues.outputs.issues }}
          labels: ${{ env.FETCH_VALUE }}
          operation: 'REMOVE'
          github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
        if: ${{ github.event.inputs.update_github_labels == 'true' }}

      - name: Label current release issues
        uses: ./.github/actions/issue-labeler
        with:
          issues_json: ${{ steps.fetch-next-release-issues.outputs.issues }}
          labels: 'Release ${{ needs.prepare-release.outputs.release_version }}'
          operation: 'ADD'
          github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
        if: ${{ github.event.inputs.update_github_labels == 'true' }}

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.RELEASE_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Important news!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.slack-edge.com/temp/2021-12-08/2830145934625_e4e464d502865ff576e4.png
          SLACK_MESSAGE: "<!channel> This automated script is excited to announce the release of a new version of dotCMS `${{ needs.prepare-release.outputs.release_version }}` :rocket:\n:docker: Produced images: [${{ needs.publish-release-image.outputs.formatted_tags }}]"
        if: success()
