# action.yml
name: 'PR Notifier'
on:
  workflow_call:
    inputs:
      pr_status:
        description: 'PR status'
        type: string
        required: true
      github_user:
        description: 'Github user'
        type: string
        required: false
        default: ${{ github.actor }}

    secrets:
      CI_MACHINE_USER:
        description: 'CI machine user'
        required: true
      CI_MACHINE_TOKEN:
        description: 'CI machine token'
        required: true
      SLACK_BOT_TOKEN:
        description: 'Slack bot token'
        required: true

jobs:
  pr-notifier:
    runs-on: ubuntu-20.04
    if: always()
    env:
      SOURCE_REPOSITORY: ${{ github.repository }}
    steps:
      - name: Resolve User
        id: resolve-user
        shell: bash
        env:
          DEFAULT_CHANNEL: eng
        run: |
          github_user=${{ inputs.github_user }}
          [[ -z "${github_user}" ]] && github_user=${{ env.DEFAULT_CHANNEL }}
          
          echo "github_user=${github_user}"
          echo "github_user=${github_user}" >> $GITHUB_OUTPUT

      - name: Resolve Channel
        id: resolve-channel
        shell: bash
        env:
          DEFAULT_CHANNEL_ID: C028Z3R2D # eng channel id
        run: |
          github_user=${{ steps.resolve-user.outputs.github_user }}
          
          githack_host=raw.githack.com
          githack_core_repo_url=https://${githack_host}/${{ env.SOURCE_REPOSITORY }}
          
          branch=/${{ github.head_ref }}
          [[ "${branch}" == '/master' ]] && branch=
          
          slack_mappings_file=.github/data/slack-mappings.json
          slack_mapping_url=${githack_core_repo_url}${branch}/${slack_mappings_file}
          
          if [[ -n "${github_user}" ]]; then
            if [[ -f ${slack_mappings_file} ]]; then
              json=$(curl -s ${slack_mapping_url})
            
              channel_id=$( \
                jq '.[] | select(.github_user == "${github_user}")' <<< "${json}" | \
                jq -r '.slack_id' \
              )
            fi
          
            if [[ -z "${channel_id}" ]]; then
              user_email=$( \
                curl \
                  -u ${{ secrets.CI_MACHINE_USER }}:${{ secrets.CI_MACHINE_TOKEN }} \
                  --request GET \
                  -s \
                  https://api.github.com/users/${github_user} | \
                grep "\"email\":" | \
                sed "s/\"email\"://g" | \
                tr -d '",[:space:]' \
              )
            
              if [[ -n "${user_email}" ]]; then
                channel_id=$( \
                  curl \
                    --request GET \
                    --header "Content-type: application/json" \
                    --header "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
                    -s \
                    "https://slack.com/api/users.lookupByEmail?email=${user_email}" | \
                  python3 -m json.tool | \
                  grep "\"id\":" | \
                  sed "s/\"id\"://g" | \
                  tr -d '",[:space:]' \
                )
              fi
            fi
          fi
            
          [[ -z "${channel_id}" ]] && channel_id=${{ env.DEFAULT_CHANNEL_ID }}
          echo "channel_id=${channel_id}" >> $GITHUB_OUTPUT
          echo "channel_id=${channel_id}"

      - name: Resolve Message
        id: resolve-message
        shell: bash
        run: |
            pr_status=${{ inputs.pr_status }}
            channel_id=${{ steps.resolve-channel.outputs.channel_id }}
            run_id=${{ github.run_id }}
            run_url=https://github.com/${{ env.SOURCE_REPOSITORY }}/actions/runs/${run_id}
            details_message="Please check ${run_url} for more details."
            
            case "${pr_status}" in
            "SUCCESS")
                message=":white_check_mark: PR passed all checks"
                ;;
            "FAILURE")
                message=":x: PR failed checks"
                ;;
            "CANCELLED")
                message=":warning: PR was cancelled"
                ;;
            *)
                message=":question: PR status is unknown"
                ;;
            esac
          
            message="${message}. ${details_message}"
            
            echo "message=${message}" >> $GITHUB_OUTPUT
            echo "message=${message}"

      - name: Notify PR Status
        shell: bash
        run: |
          channel=${{ steps.resolve-channel.outputs.channel_id }}
          message="${{ steps.resolve-message.outputs.message }}"
          
          curl -X POST \
            -H "Content-type: application/json" \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -d "{ \"channel\":\"${channel}\",\"text\":\"${message}\"}" \
            -s \
            https://slack.com/api/chat.postMessage
