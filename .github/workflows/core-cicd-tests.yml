name: core-tests
on:
  pull_request:
  push:
    branches:
      - master
      - release-*
jobs:
  build-core-job:
    name: Build Core
    runs-on: ubuntu-latest
    outputs:
      cache_metadata: ${{ steps.cache-core.outputs.cache_metadata }}
    steps:
      - id: fetch-core
        name: Fetch Core repo
        uses: actions/checkout@v3
      - id: read-cicd-local-env
        name: Read CICD local library
        run: source ${GITHUB_WORKSPACE}/cicd/local-env.sh
        if: success()
      - id: build-core
        name: Build Core
        uses: ./.github/actions/build-core
        with:
          build_env: ${{ env.BUILD_ENV }}
        if: success()
      - id: core-cache-locator
        name: Core Cache Locator
        uses: ./.github/actions/core-cache-locator
        with:
          build_env: ${{ env.BUILD_ENV }}
        if: success()
      - id: cache-core
        name: Cache Core
        uses: ./.github/actions/cache-core
        with:
          build_env: ${{ env.BUILD_ENV }}
          cache_locations: ${{ steps.core-cache-locator.outputs.cache_locations }}
        if: success()
  run-unit-tests-job:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: build-core-job
    if: success()
    steps:
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v3
      - id: read-cicd-local-env
        name: Read CICD local library
        run: source ${GITHUB_WORKSPACE}/cicd/local-env.sh
        if: success()
      - id: restore-core
        name: Restore Core Cache
        uses: ./.github/actions/restore-core
        with:
          cache_metadata: ${{ needs.build-core-job.outputs.cache_metadata }}
        if: success()
      - id: run-unit-tests
        name: Run Unit Tests
        uses: ./.github/actions/run-unit-tests
        with:
          build_env: ${{ env.BUILD_ENV }}
      - id: unit-tests-results
        name: Unit Tests Results
        uses: dorny/test-reporter@v1
        with:
          name: Unit Test Results
          path: ${{ steps.run-unit-tests.outputs.tests-results-location }}/*.xml
          reporter: java-junit
          max-annotations: 50
          fail-on-error: false
        if: always() && steps.run-unit-tests.outputs.skip-results-report == 'false'
      - id: unit-tests-comment
        name: Unit Test Comment
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: ${{ steps.run-unit-tests.outputs.tests-results-location }}/*.xml
          check_name: 'Unit Tests Report'
        if: always() && steps.run-unit-tests.outputs.skip-results-report == 'false'
      - id: publish-unit-tests
        name: Publish Unit Tests
        uses: ./.github/actions/publish-test-results
        with:
          build_id: ${{ env.BUILD_ID }}
          build_hash: ${{ env.BUILD_HASH }}
          test_type: unit
          pull_request: ${{ github.event.number }}
          tests_run_exit_code: ${{ steps.run-unit-tests.outputs.tests-run-exit-code }}
          test_results_location: ${{ steps.run-unit-tests.outputs.tests-results-location }}/html
          cicd_github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
        if: always() && steps.run-unit-tests.outputs.skip-results-report == 'false'
      - id: github-status
        name: Send Github Status
        uses: ./.github/actions/github-status
        with:
          test_type: unit
          test_results_status: ${{ steps.run-unit-tests.outputs.tests-results-status }}
          pull_request: ${{ github.event.number }}
          github_user: ${{ env.GITHUB_USER }}
          cicd_github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
          report_url: ${{ steps.publish-unit-tests.outputs.test_results_commit_url }}
        if: always() && steps.run-unit-tests.outputs.skip-results-report == 'false'
#  run-unit-tests-job:
#    name: Unit Tests
#    runs-on: ubuntu-latest
#    env:
#      DOT_CICD_BRANCH: master
#      EXPORT_REPORTS: true
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
#      PULL_REQUEST: ${{ github.event.number }}
#    steps:
#      - name: GITHUB CONTEXT
#        env:
#          GITHUB_CONTEXT: ${{ toJson(github) }}
#        run: echo "$GITHUB_CONTEXT"
#        if: env.DEBUG == 'true'
#      - name: Get commit message
#        id: get-commit-message
#        uses: dotcms/get-commit-message@master
#        with:
#          accessToken: ${{ secrets.GITHUB_TOKEN }}
#      - name: Set Common Vars
#        run: |
#          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
#            BUILD_ID="${{ github.head_ref }}"
#          else
#            BUILD_ID=$(basename "${{ github.ref }}")
#          fi
#
#          COMMIT_MESSG="${{ steps.get-commit-message.outputs.commit_message }}"
#          echo "COMMIT_MESSG: ${COMMIT_MESSG}"
#          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
#
#          if [[ "${{ github.event_name }}" == "pull_request" || ${BUILD_ID} =~ master|^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^test-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ || ${COMMIT_MESSG} =~ run-all|run-unit ]]; then
#            echo "jobRun=true" >> $GITHUB_ENV
#          else
#            echo "jobRun=false" >> $GITHUB_ENV
#          fi
#      - name: Prepare dot-cicd
#        run: |
#          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
#        if: env.jobRun == 'true'
#      - name: Run Unit Tests
#        run: |
#          ../dotcicd/library/pipeline.sh runUnit
#        env:
#          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
#        if: env.jobRun == 'true'
#  run-curl-tests-job:
#    name: Curl Tests
#    runs-on: ubuntu-latest
#    env:
#      DOT_CICD_BRANCH: master
#      EXPORT_REPORTS: true
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
#      PULL_REQUEST: ${{ github.event.number }}
#    steps:
#      - name: GITHUB CONTEXT
#        env:
#          GITHUB_CONTEXT: ${{ toJson(github) }}
#        run: echo "$GITHUB_CONTEXT"
#        if: env.DEBUG == 'true'
#      - name: Get commit message
#        id: get-commit-message
#        uses: dotcms/get-commit-message@master
#
#        with:
#          accessToken: ${{ secrets.GITHUB_TOKEN }}
#      - name: Set Common Vars
#        run: |
#          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
#            IS_PR=true
#          else
#            IS_PR=false
#          fi
#
#          if [[ ${IS_PR} == true ]]; then
#            BUILD_ID="${{ github.head_ref }}"
#          else
#            BUILD_ID=$(basename "${{ github.ref }}")
#          fi
#
#          COMMIT_MESSG="${{ steps.get-commit-message.outputs.commit_message }}"
#          echo "COMMIT_MESSG: ${COMMIT_MESSG}"
#          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
#
#          [[ ${BUILD_ID} =~ master|^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^test-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ ]] && SPECIAL_BRANCH=true
#
#          if [[ ${IS_PR} == true || "${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-curl ]]; then
#            echo "jobRun=true" >> $GITHUB_ENV
#          else
#            echo "jobRun=false" >> $GITHUB_ENV
#          fi
#      - name: Checkout core
#        uses: actions/checkout@v2
#      - name: Prepare dot-cicd
#        run: |
#          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
#        if: env.jobRun == 'true'
#      - name: Run Curl Tests - postgres
#        run: |
#          ../dotcicd/library/pipeline.sh runCurl
#        env:
#          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
#          databaseType: postgres
#          PROVIDER_DB_USERNAME: postgres
#          PROVIDER_DB_PASSWORD: postgres
#        if: success() && env.jobRun == 'true'
#  run-integration-tests-job:
#    name: Integration Tests
#    runs-on: ubuntu-latest
#    continue-on-error: true
#    strategy:
#      fail-fast: false
#      matrix:
#        databaseType: [ postgres, mssql ]
#    env:
#      DOT_CICD_BRANCH: master
#      EXPORT_REPORTS: true
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
#      PULL_REQUEST: ${{ github.event.number }}
#      RUN_ALL_DBS: true
#    steps:
#      - name: GITHUB CONTEXT
#        env:
#          GITHUB_CONTEXT: ${{ toJson(github) }}
#        if: env.DEBUG == 'true'
#        run: echo "$GITHUB_CONTEXT"
#      - name: Get commit message
#        id: get-commit-message
#        uses: dotcms/get-commit-message@master
#        with:
#          accessToken: ${{ secrets.GITHUB_TOKEN }}
#      - name: Set Common Vars
#        run: |
#          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
#            IS_PR=true
#          else
#            IS_PR=false
#          fi
#
#          if [[ ${IS_PR} == true ]]; then
#            BUILD_ID="${{ github.head_ref }}"
#          else
#            BUILD_ID=$(basename "${{ github.ref }}")
#          fi
#
#          COMMIT_MESSG="${{ steps.get-commit-message.outputs.commit_message }}"
#          echo "COMMIT_MESSG: ${COMMIT_MESSG}"
#          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
#
#          [[ ${IS_PR} == false && ${BUILD_ID} =~ master|^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^test-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ ]] && SPECIAL_BRANCH=true
#
#          if [[ "${RUN_ALL_DBS}" == 'true' ]]; then
#            RUN_POSTGRES=true
#            RUN_MYSQL=true
#            RUN_ORACLE=true && echo "WAIT_DB_FOR=60" >> $GITHUB_ENV
#            RUN_MSSQL=true
#          else
#            # Evaluate postgres
#            [[ ((! ${COMMIT_MESSG} =~ run-mysql|run-oracle|run-mssql) || ${COMMIT_MESSG} =~ run-all|run-postgres) \
#              && "${{ matrix.databaseType }}" == 'postgres' ]] && RUN_POSTGRES=true
#            # Evaluate mysql
#            [[ ("${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-mysql) \
#              && "${{ matrix.databaseType }}" == 'mysql' ]] && RUN_MYSQL=true
#            # Evaluate oracle
#            [[ ("${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-oracle) \
#              && "${{ matrix.databaseType }}" == 'oracle' ]] && RUN_ORACLE=true && echo "WAIT_DB_FOR=60" >> $GITHUB_ENV
#            # Evaluate mssql
#            [[ ("${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-mssql) \
#              && "${{ matrix.databaseType }}" == 'mssql' ]] && RUN_MSSQL=true
#          fi
#
#          if [[ "${RUN_POSTGRES}" == 'true' || "${RUN_MYSQL}" == 'true' || "${RUN_ORACLE}" == 'true' || "${RUN_MSSQL}" == 'true' ]]; then
#            JOB_RUN=true
#          else
#            JOB_RUN=false
#          fi
#          echo "jobRun=${JOB_RUN}" >> $GITHUB_ENV
#      - name: Prepare dot-cicd
#        run: |
#          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
#        if: env.jobRun == 'true'
#      - name: Run Integration Tests - ${{ matrix.databaseType }}
#        run: |
#          ../dotcicd/library/pipeline.sh runIntegration
#        env:
#          databaseType: ${{ matrix.databaseType }}
#          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
#        if: success() && env.jobRun == 'true'
#  slack-notification:
#    name: Notification
#    runs-on: ubuntu-latest
#    env:
#      DOT_CICD_TARGET: core
#      GITHUB_USER: victoralfaro-dotcms
#      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
#      PULL_REQUEST: ${{ github.event.number }}
#    if: success() || failure()
#    needs: [run-unit-tests-job, run-curl-tests-job, run-integration-tests-job]
#    steps:
#      - name: GITHUB CONTEXT
#        env:
#          GITHUB_CONTEXT: ${{ toJson(github) }}
#        run: echo "$GITHUB_CONTEXT"
#        if: env.DEBUG == 'true'
#      - name: Set Common Vars
#        run: |
#          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
#            echo "BUILD_ID=${{ github.head_ref }}" >> $GITHUB_ENV
#          else
#            echo "BUILD_ID=$(basename ${{ github.ref }})" >> $GITHUB_ENV
#          fi
#      - name: Notify through CI/CD slack action
#        env:
#          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
#        uses: dotcms/cicd-slack-action@master
#        with:
#          github-user: ${{ github.actor }}
#          branch: ${{ env.BUILD_ID }}
