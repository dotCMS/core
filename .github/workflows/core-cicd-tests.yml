name: Core
on:
  pull_request:
  push:
    branches:
      - master
      - release-*
      - test-*
jobs:
  run-unit-tests-job:
    name: Unit Tests
    runs-on: ubuntu-latest
    env:
      DOT_CICD_BRANCH: master
      EXPORT_REPORTS: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
    steps:
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        if: env.DEBUG == 'true'
      - name: Get commit message
        id: get-commit-message
        uses: dotcms/get-commit-message@master
        with:
          accessToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Common Vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BUILD_ID="${{ github.head_ref }}"
          else
            BUILD_ID=$(basename "${{ github.ref }}")
          fi

          COMMIT_MESSG="${{ steps.get-commit-message.outputs.commit_message }}"
          echo "COMMIT_MESSG: ${COMMIT_MESSG}"
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV

          if [[ "${{ github.event_name }}" == "pull_request" || ${BUILD_ID} =~ master|^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^test-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ || ${COMMIT_MESSG} =~ run-all|run-unit ]]; then
            echo "jobRun=true" >> $GITHUB_ENV
          else
            echo "jobRun=false" >> $GITHUB_ENV
          fi
      - name: Prepare dot-cicd
        run: |
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
        if: env.jobRun == 'true'
      - name: Run Unit Tests
        run: |
          ../dotcicd/library/pipeline.sh runUnit
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
        if: env.jobRun == 'true'
  run-curl-tests-job:
    name: Curl Tests
    runs-on: ubuntu-latest
    env:
      DOT_CICD_BRANCH: master
      EXPORT_REPORTS: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
    steps:
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        if: env.DEBUG == 'true'
      - name: Get commit message
        id: get-commit-message
        uses: dotcms/get-commit-message@master
        
        with:
          accessToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Common Vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IS_PR=true
          else
            IS_PR=false
          fi

          if [[ ${IS_PR} == true ]]; then
            BUILD_ID="${{ github.head_ref }}"
          else
            BUILD_ID=$(basename "${{ github.ref }}")
          fi

          COMMIT_MESSG="${{ steps.get-commit-message.outputs.commit_message }}"
          echo "COMMIT_MESSG: ${COMMIT_MESSG}"
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV

          [[ ${BUILD_ID} =~ master|^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^test-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ ]] && SPECIAL_BRANCH=true

          if [[ ${IS_PR} == true || "${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-curl ]]; then
            echo "jobRun=true" >> $GITHUB_ENV
          else
            echo "jobRun=false" >> $GITHUB_ENV
          fi
      - name: Checkout core
        uses: actions/checkout@v2
      - name: Prepare dot-cicd
        run: |
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
        if: env.jobRun == 'true'
      - name: Run Curl Tests - postgres
        run: |
          ../dotcicd/library/pipeline.sh runCurl
        env:
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
          databaseType: postgres
          PROVIDER_DB_USERNAME: postgres
          PROVIDER_DB_PASSWORD: postgres
        if: success() && env.jobRun == 'true'
  run-integration-tests-job:
    name: Integration Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        databaseType: [ postgres, mysql, oracle, mssql ]
    env:
      DOT_CICD_BRANCH: master
      EXPORT_REPORTS: true
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
      RUN_ALL_DBS: true
    steps:
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        if: env.DEBUG == 'true'
        run: echo "$GITHUB_CONTEXT"
      - name: Get commit message
        id: get-commit-message
        uses: dotcms/get-commit-message@master
        with:
          accessToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Set Common Vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            IS_PR=true
          else
            IS_PR=false
          fi

          if [[ ${IS_PR} == true ]]; then
            BUILD_ID="${{ github.head_ref }}"
          else
            BUILD_ID=$(basename "${{ github.ref }}")
          fi

          COMMIT_MESSG="${{ steps.get-commit-message.outputs.commit_message }}"
          echo "COMMIT_MESSG: ${COMMIT_MESSG}"
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV

          [[ ${IS_PR} == false && ${BUILD_ID} =~ master|^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^test-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ ]] && SPECIAL_BRANCH=true

          if [[ "${RUN_ALL_DBS}" == 'true' ]]; then
            RUN_POSTGRES=true
            RUN_MYSQL=true
            RUN_ORACLE=true && echo "WAIT_DB_FOR=60" >> $GITHUB_ENV
            RUN_MSSQL=true
          else
            # Evaluate postgres
            [[ ((! ${COMMIT_MESSG} =~ run-mysql|run-oracle|run-mssql) || ${COMMIT_MESSG} =~ run-all|run-postgres) \
              && "${{ matrix.databaseType }}" == 'postgres' ]] && RUN_POSTGRES=true
            # Evaluate mysql
            [[ ("${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-mysql) \
              && "${{ matrix.databaseType }}" == 'mysql' ]] && RUN_MYSQL=true
            # Evaluate oracle
            [[ ("${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-oracle) \
              && "${{ matrix.databaseType }}" == 'oracle' ]] && RUN_ORACLE=true && echo "WAIT_DB_FOR=60" >> $GITHUB_ENV
            # Evaluate mssql
            [[ ("${SPECIAL_BRANCH}" == 'true' || ${COMMIT_MESSG} =~ run-all|run-mssql) \
              && "${{ matrix.databaseType }}" == 'mssql' ]] && RUN_MSSQL=true
          fi

          if [[ "${RUN_POSTGRES}" == 'true' || "${RUN_MYSQL}" == 'true' || "${RUN_ORACLE}" == 'true' || "${RUN_MSSQL}" == 'true' ]]; then
            JOB_RUN=true
          else
            JOB_RUN=false
          fi
          echo "jobRun=${JOB_RUN}" >> $GITHUB_ENV
      - name: Prepare dot-cicd
        run: |
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
        if: env.jobRun == 'true'
      - name: Run Integration Tests - ${{ matrix.databaseType }}
        run: |
          ../dotcicd/library/pipeline.sh runIntegration
        env:
          databaseType: ${{ matrix.databaseType }}
          LICENSE_KEY: ${{ secrets.DOTCMS_LICENSE }}
        if: success() && env.jobRun == 'true'
  slack-notification:
    name: Notification
    runs-on: ubuntu-latest
    env:
      DOT_CICD_TARGET: core
      GITHUB_USER: victoralfaro-dotcms
      GITHUB_USER_TOKEN: ${{ secrets.CICD_GITHUB_TOKEN }}
      PULL_REQUEST: ${{ github.event.number }}
    if: success() || failure()
    needs: [run-unit-tests-job, run-curl-tests-job, run-integration-tests-job]
    steps:
      - name: GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
        if: env.DEBUG == 'true'
      - name: Set Common Vars
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "BUILD_ID=${{ github.head_ref }}" >> $GITHUB_ENV
          else
            echo "BUILD_ID=$(basename ${{ github.ref }})" >> $GITHUB_ENV
          fi
      - name: Notify through CI/CD slack action
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: dotcms/cicd-slack-action@master
        with:
          github-user: ${{ github.actor }}
          branch: ${{ env.BUILD_ID }}
