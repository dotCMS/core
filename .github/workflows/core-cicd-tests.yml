name: Core
on:
  push:
    branches:
      - none

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:

  build-jdk11:
    name: "Initial JDK 11 Build"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache Maven Repository
        id: cache-maven
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: mavencore-${{ steps.get-date.outputs.date }}
      - name: Cache Node
        id: cache-node
        uses: actions/cache@v3
        with:
          path: |
            core-web/node_modules
            core-web/installs
          key: node-${{ steps.get-date.outputs.date }}
      - name: Build and Test with Maven
        run: ./mvnw --show-version -DskipTests=true -DskipITs=true clean install --file pom.xml
      - name: Tar Maven Repo
        shell: bash
        run: tar -czf maven-repo.tgz -C ~ .m2/repository
      - name: Persist Maven Repo
        uses: actions/upload-artifact@v3
        with:
          name: maven-repo
          path: maven-repo.tgz
      - name: Delete Local Artifacts From Cache
        shell: bash
        run: rm -r ~/.m2/repository/com/dotcms
      - name: Upload build reports
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: "build-reports-Initial JDK 11 Build" #Should not be picked up for JunitReports
          path: |
            target/build-report.json
            LICENSE
          retention-days: 2





  postman-tests-setup-job:
    name: dotCMS image setup
    runs-on: ubuntu-latest
    needs: build-jdk11
    outputs:
      dotcms_image: ${{ steps.common-vars.outputs.dotcms_image }}
    steps:
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v4.0.0

      - id: common-vars
        name: Common vars
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == 'pull_request' ]]; then
            BUILD_ID=${GITHUB_HEAD_REF}
          else
            BUILD_ID=$(basename "${GITHUB_REF}")
          fi
          if [[ -z "${GITHUB_SHA}" ]]; then
            BUILD_HASH=$(git log -1 --pretty=%h)
          else
            BUILD_HASH=${GITHUB_SHA::7}
          fi
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
          echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV
          echo "dotcms_image=ghcr.io/dotcms/core:cicd-${BUILD_HASH}" >> $GITHUB_OUTPUT

      - id: docker-login
        name: Login to GHCR
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ vars.ACTION_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build dotCMS image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./docker/dotcms
          push: true
          tags: ${{ steps.common-vars.outputs.dotcms_image }}
          platforms: amd64
          build-args: |
            BUILD_FROM=COMMIT
            BUILD_ID=${{ env.BUILD_ID }}

  run-postman-tests-job:
    name: Run Postman Tests
    runs-on: ubuntu-latest
    needs: postman-tests-setup-job
    if: "github.repository == 'dotCMS/core' || !endsWith(github.ref, '/master')"
    strategy:
      fail-fast: false
      matrix:
        collection_group: ['graphql', 'workflow', 'template', 'page', 'container', 'pp', 'experiment', '*']
    steps:
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v3

      - run: |
          npm install --location=global newman

      - id: docker-login
        name: Login to GHCR
        uses: docker/login-action@v3.0.0
        with:
          registry: ghcr.io
          username: ${{ vars.ACTION_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - id: resolve-postman-collections
        uses: ./.github/actions/resolve-postman-collections
        with:
          current: ${{ matrix.collection_group }}

      - name: Prepare license
        run: |
          mkdir -p dotcms-postman/license
          touch dotcms-postman/license/license.dat
          echo "${{ secrets.DOTCMS_LICENSE }}" > dotcms-postman/license/license.dat
          chmod 777 dotcms-postman/license/license.dat

      - id: run-postman-tests
        name: Run Postman Tests
        timeout-minutes: 90
        run: |
          collections="${{ steps.resolve-postman-collections.outputs.collections_to_run }}"
          #export DOTCMS_IMAGE="${{ needs.postman-tests-setup-job.outputs.dotcms_image }}"
          export DOTCMS_IMAGE='dotcms/dotcms:latest'
          
          cmd="./mvnw $JVM_TEST_MAVEN_OPTS verify -pl :dotcms-postman -Dpostman.collections=\"${collections}\""
          echo "Running command: $cmd"
          eval $cmd
        env:
          JVM_TEST_MAVEN_OPTS: "-e -B"

      - name: Prepare reports archive (if maven failed)
        if: failure()
        shell: bash
        run: find . -name '*-reports' -type d | tar -czf test-reports.tgz -T -

      - name: Upload failure Archive (if maven failed)
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: test-reports-postman-${{ matrix.collection_group }}
          path: 'test-reports.tgz'

      - name: failsafe-postman-tests  # Uploads will be merged with same name
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: "build-reports-postman-tests - ${{ matrix.collection_group }}"
          path: |
            **/target/*-reports/TEST-*.xml
            target/build-report.json
            LICENSE
          retention-days: 2

  postman-tests-complete-job:
    name: Close Postman Tests
    runs-on: ubuntu-latest
    needs: [postman-tests-setup-job, run-postman-tests-job]
    if: (success() || failure())
    steps:
      -
        id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v3
      -
        id: cleanup-package
        name: Clean up CICD packages
        uses: ./.github/actions/cleanup-gh-packages
        with:
          delete_version: ${{ needs.postman-tests-setup-job.outputs.dotcms_image }}
          access_token: ${{ secrets.GHCR_TOKEN }}
