name: Core
on:
  pull_request:
    paths:
      - '.cicd/**'
      - '.github/**'
      - 'cicd/**'
      - 'docker/**'
      - '!docker/dotcms-compose-examples/**'
      - 'dotCMS/**'
      - '!dotCMS/src/main/webapp/html'
      - 'pom.xml'
      - 'tools/**'
  push:
    branches:
      - master
      - release-*
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  postman-tests-setup-job:
    name: Postman Matrix Setup
    runs-on: ubuntu-latest
    outputs:
      built_image_name: ${{ steps.build-dotcms-image.outputs.built_image_name }}
    steps:
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v3
      - id: read-cicd-local-env
        name: Read CICD local library
        run: source ${GITHUB_WORKSPACE}/cicd/local-env.sh
      - id: docker-login
        name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_USER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - id: build-dotcms-image
        name: Build DotCMS docker image
        uses: ./.github/actions/build-docker-image
        with:
          build_id: ${{ env.BUILD_ID }}
          image_name: ghcr.io/dotcms/core:cicd-${{ env.BUILD_HASH }}
          push: true
      - id: github-init-test-results
        name: Github init tests results
        uses: ./.github/actions/publish-test-results
        with:
          build_id: ${{ env.BUILD_ID }}
          build_hash: ${{ env.BUILD_HASH }}
          test_type: postman
          mode: init
          pull_request: ${{ github.event.number }}
          cicd_github_token: ${{ secrets.CICD_GITHUB_TOKEN }}

  run-postman-tests-job:
    name: Run Postman Tests
    runs-on: ubuntu-latest
    needs: postman-tests-setup-job
    if: success()
    outputs:
      tests_results_status: ${{ steps.run-postman-tests.outputs.tests_results_status }}
      tests_results_skip_report: ${{ steps.run-postman-tests.outputs.tests_results_skip_report }}
      tests_results_report_url: ${{ steps.github-publish-postman-tests.outputs.tests_report_url }}
      tests_results_log_url: ${{ steps.github-publish-postman-tests.outputs.test_logs_url }}
    strategy:
      fail-fast: false
      matrix:
        parallel_collection: ['graphql', 'workflow', 'template', 'page', 'container', 'pp', 'experiment', 'container', '*']
    steps:
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v3
      - id: read-cicd-local-env
        name: Read CICD local library
        run: source ${GITHUB_WORKSPACE}/cicd/local-env.sh
      - id: get-commit-message
        name: Get commit message
        uses: dotcms/get-commit-message@master
        with:
          accessToken: ${{ secrets.GITHUB_TOKEN }}
      - id: docker-login
        name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ env.GITHUB_USER }}
          password: ${{ secrets.GHCR_TOKEN }}
      - id: run-postman-tests
        name: Run Postman Tests
        timeout-minutes: 90
        uses: ./.github/actions/run-postman-tests
        with:
          built_image_name: ${{ needs.postman-tests-setup-job.outputs.built_image_name }}
          license_key: ${{ secrets.DOTCMS_LICENSE }}
          tests: ${{ steps.get-commit-message.outputs.commit_message }}
          parallel_collection: ${{ matrix.parallel_collection }}
          export_report: true
      - id: github-publish-postman-tests
        name: Github publish postman tests
        uses: ./.github/actions/publish-test-results
        with:
          build_id: ${{ env.BUILD_ID }}
          build_hash: ${{ env.BUILD_HASH }}
          test_type: postman
          pull_request: ${{ github.event.number }}
          tests_results_status: ${{ steps.run-postman-tests.outputs.tests_results_status }}
          tests_results_location: ${{ steps.run-postman-tests.outputs.tests_results_location }}
          tests_results_report_location: ${{ steps.run-postman-tests.outputs.tests_results_report_location }}
          tests_results_log_location: ${{ github.WORKSPACE }}/dotCMS/*.log
          cicd_github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
          include: ALL
          run_identifier: ${{ steps.run-postman-tests.outputs.normalized_parallel_collection }}
        if: (success() || failure()) && steps.run-postman-tests.outputs.tests_results_skip_report != 'true'

  postman-tests-complete-job:
    name: Close Postman Tests
    runs-on: ubuntu-latest
    needs: run-postman-tests-job
    if: (success() || failure()) && needs.run-postman-tests-job.outputs.tests_results_skip_report != 'true'
    steps:
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v3
      - id: read-cicd-local-env
        name: Read CICD local library
        run: source ${GITHUB_WORKSPACE}/cicd/local-env.sh
      - id: cleanup-package
        name: Clean up CICD packages
        uses: ./.github/actions/cleanup-gh-packages
        with:
          delete_version: ${{ needs.postman-tests-setup-job.outputs.built_image_name }}
          access_token: ${{ secrets.GHCR_TOKEN }}
      - id: github-close-test-results
        name: Github close tests results
        uses: ./.github/actions/publish-test-results
        with:
          build_id: ${{ env.BUILD_ID }}
          build_hash: ${{ env.BUILD_HASH }}
          test_type: postman
          mode: close
          pull_request: ${{ github.event.number }}
          tests_results_location: ${{ github.workspace }}/dotCMS/build/test-results/postmanTest
          cicd_github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
      - id: github-status
        name: Send Github Status
        uses: ./.github/actions/github-status
        with:
          test_type: postman
          test_results_status: ${{ needs.run-postman-tests-job.outputs.tests_results_status }}
          pull_request: ${{ github.event.number }}
          github_user: ${{ env.GITHUB_USER }}
          cicd_github_token: ${{ secrets.CICD_GITHUB_TOKEN }}
          tests_report_url: ${{ steps.github-close-test-results.outputs.tests_report_url }}
        if: (success() || failure()) && steps.github-close-test-results.outputs.tests_report_url != ''

  test-results-handler-job:
    name: Tests Results Handler
    runs-on: ubuntu-latest
    needs: [run-postman-tests-job]
    if: (success() || failure()) && (needs.run-unit-tests-job.outputs.tests_results_report_url != '' || needs.run-integration-tests-job.outputs.postgres_tests_results_report_url != '' || needs.run-postman-tests-job.outputs.tests_results_report_url != '')
    steps:
      - id: fetch-core
        name: Fetch Core Repo
        uses: actions/checkout@v3
      - id: tests-status-aggregator
        name: Tests status aggregator
        uses: ./.github/actions/tests-status-aggregator
        with:
          postman_tests_results_status: ${{ needs.run-postman-tests-job.outputs.tests_results_status }}
          postman_tests_results_report_url: ${{ needs.run-postman-tests-job.outputs.tests_results_report_url }}
          postman_tests_results_log_url: ${{ needs.run-postman-tests-job.outputs.tests_results_log_url }}
      - id: tests-results-slack
        name: Tests results Slack notification
        if: steps.tests-status-aggregator.outputs.status != ''
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.CORE_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_ICON: https://avatars.slack-edge.com/2020-09-21/1362682893351_5b474f175640cf5f5912_72.png
          SLACK_COLOR: ${{ steps.tests-status-aggregator.outputs.color }}
          SLACK_TITLE: ${{ steps.tests-status-aggregator.outputs.status }}
          SLACK_MESSAGE: ${{ steps.tests-status-aggregator.outputs.message }}
          SLACK_FOOTER: ${{ env.PULL_REQUEST_URL }}
