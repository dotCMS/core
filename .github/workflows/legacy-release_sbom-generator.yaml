# Generate SBOM for the latest version of dotCMS and put into core-test-repo
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      dotcms_version:
        description: 'Enter the dotCMS version (vYY.MM.DD)'
        required: true
        default: ''

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Ensure write access to contents

    steps:
      - name: Checkout core-test-results repository
        uses: actions/checkout@v3
        with:
          repository: dotCMS/core-test-results
          token: ${{ secrets.GITHUB_TOKEN }}
          path: core-test-results
        continue-on-error: false

      - name: Get dotCMS release version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            latest_tag=${{ github.event.release.tag_name }}
            echo "Extracted tag from release: $latest_tag"
          else
            latest_tag=${{ github.event.inputs.dotcms_version }}
            echo "Using provided version: $latest_tag"
          fi
          formatted_tag=$(echo "$latest_tag" | sed -e 's/^dotcms-cli-//' -e 's/^v//')
          echo "Formatted tag: $formatted_tag"
          echo "DOTCMS_VERSION=$formatted_tag" >> $GITHUB_ENV
        continue-on-error: false

      - name: Pull and run dotCMS Docker image
        run: |
          echo "Pulling Docker image: dotcms/dotcms:${{ env.DOTCMS_VERSION }}"
          if docker pull dotcms/dotcms:${{ env.DOTCMS_VERSION }}; then
            echo "Docker image pulled successfully."
          else
            echo "Failed to pull Docker image." >&2
            exit 1
          fi
          
          echo "Running Docker image: dotcms/dotcms:${{ env.DOTCMS_VERSION }}"
          if docker run -d -p 8082:8082 dotcms/dotcms:${{ env.DOTCMS_VERSION }}; then
            echo "Docker container started successfully."
          else
            echo "Failed to start Docker container." >&2
            exit 1
          fi
        continue-on-error: false

      - name: Install pipx
        run: |
          echo "Installing pipx..."
          if pip install pipx; then
            echo "pipx installed successfully."
          else
            echo "Failed to install pipx." >&2
            exit 1
          fi
        continue-on-error: false

      - name: Scan Docker Image with Syft
        run: |
          echo "Scanning Docker image with Syft..."
          if pipx run anchore_syft dotcms/dotcms:${{ env.DOTCMS_VERSION }} -o cyclonedx-xml > core-test-results/sbom/cyclonedx.json; then
            echo "SBOM created successfully."
          else
            echo "Failed to create SBOM." >&2
            exit 1
          fi
        continue-on-error: false

      - name: Rename SBOM file with dotCMS version
        run: |
          echo "Renaming SBOM file..."
          mkdir -p core-test-results/sbom
          if mv core-test-results/sbom/cyclonedx.json core-test-results/sbom/dotcms-${{ env.DOTCMS_VERSION }}.json; then
            echo "SBOM file renamed successfully."
          else
            echo "Failed to rename SBOM file." >&2
            exit 1
          fi
        continue-on-error: false

      - name: Configure Git
        run: |
          echo "Configuring Git..."
          git config --global user.email "action@github.com"
          git config --global user.name "Github Actions"
        continue-on-error: false

      - name: Commit and push results to core-test-results repository
        run: |
          echo "Committing and pushing results..."
          cd core-test-results
          if git add sbom/dotcms-${{ env.DOTCMS_VERSION }}.json; then
            echo "File added to git."
          else
            echo "Failed to add file to git." >&2
            exit 1
          fi

          if git commit -m "Add SBOM for dotCMS version ${{ env.DOTCMS_VERSION }}" || echo "No changes to commit"; then
            echo "Commit successful."
          else
            echo "Failed to commit changes." >&2
            exit 1
          fi

          if git push origin master; then
            echo "Push successful."
          else
            echo "Failed to push changes." >&2
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false
