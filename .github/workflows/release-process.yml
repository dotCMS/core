name: Release Process
on:
  push:
    branches:
      - dont-run-this-again
env:
  BRANCHING_MODEL: trunk-based

jobs:
  release-process:
    if: ${{ !startsWith(github.event.release.name, 'dotcms-cli') }}
    name: Release process automation
    runs-on: ubuntu-20.04
    outputs:
      build_id: ${{ steps.set-common-vars.outputs.build_id }}
      build_hash: ${{ steps.set-common-vars.outputs.build_hash }}
      release_version: ${{ steps.set-common-vars.outputs.release_version }}
      is_release: ${{ steps.set-common-vars.outputs.is_release }}
      is_lts: ${{ steps.set-common-vars.outputs.is_lts }}
      release_label: ${{ steps.set-common-vars.outputs.release_label }}
    env:
      DOT_CICD_BRANCH: master
      GITHUB_USER_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      REPO_USERNAME: ${{ secrets.EE_REPO_USERNAME }}
      REPO_PASSWORD: ${{ secrets.EE_REPO_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      NODE_VERSION: 16
    steps:
      - env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Checkout core
        uses: actions/checkout@v4
      - uses: ./.github/actions/cleanup-runner
      - name: Set Common Vars
        id: set-common-vars
        run: |
          BUILD_ID=$(basename "${{ github.ref }}")
          
          if [[ "${BRANCHING_MODEL}" == 'trunk-based' ]]; then
            BUILD_HASH=${GITHUB_SHA::7}
            RELEASE_VERSION=${{ github.event.release.tag_name }}
          else
            BUILD_HASH=$(git log -1 --pretty=%h)
            BUILD_HASH=${BUILD_HASH::7}
            eval $(cat dotCMS/gradle.properties| grep dotcmsReleaseVersion)
            RELEASE_VERSION="${dotcmsReleaseVersion}"
          fi

          if [[ ${BUILD_ID} =~ ^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^v[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ ]]; then
            IS_RELEASE=true
          else
            IS_RELEASE=false
          fi

          RELEASE_NAME="${{ github.event.release.name }}"
          if [[ -n "${RELEASE_NAME}" && "${RELEASE_NAME^^}" =~ [[:blank:]].?LTS$ ]]; then
            IS_LTS=true
            RELEASE_LABEL=lts
          fi
          
          echo "BUILD_ID=${BUILD_ID}" >> $GITHUB_ENV
          echo "build_id=${BUILD_ID}" >> $GITHUB_OUTPUT
          echo "BUILD_HASH=${BUILD_HASH}" >> $GITHUB_ENV
          echo "build_hash=${BUILD_HASH}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "IS_RELEASE=${IS_RELEASE}" >> $GITHUB_ENV
          echo "is_release=${IS_RELEASE}" >> $GITHUB_OUTPUT
          echo "IS_LTS=${IS_LTS}" >> $GITHUB_ENV
          echo "is_lts=${IS_LTS}" >> $GITHUB_OUTPUT
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "release_label=${RELEASE_LABEL}" >> $GITHUB_OUTPUT
      - name: Prepare dot-cicd
        run: |
          sh -c "$(curl -fsSL https://raw.githubusercontent.com/dotCMS/dot-cicd/${DOT_CICD_BRANCH}/seed/install-dot-cicd.sh)"
      - name: Run DotCMS Release Docker Image
        run: |
          ../dotcicd/library/pipeline.sh runRelease

  publish-release-image:
    name: Publish release image
    runs-on: ubuntu-latest
    needs: release-process
    if: success()
    outputs:
      formatted_tags: ${{ steps.discover-docker-tags.outputs.formatted_tags }}
    steps:
      - name: Checkout core
        uses: actions/checkout@v4
      - uses: ./.github/actions/cleanup-runner
      - name: Set Common Vars
        run: |
          BUILD_ID=${{ needs.release-process.outputs.build_id }}
          IS_RELEASE=${{ needs.release-process.outputs.is_release }}
          IS_LTS=${{ needs.release-process.outputs.is_lts }}
          
          PLATFORMS=linux/amd64
          if [[ ${BUILD_ID} =~ ^release-[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$|^v[0-9]{2}.[0-9]{2}(.[0-9]{1,2})?$ ]]; then
            PLATFORMS="${PLATFORMS},linux/arm64"
          fi

          if [[ "${IS_RELEASE}" == 'true' && "${IS_LTS}" != 'true' ]]; then
            ALSO_LATEST=true
          else
            ALSO_LATEST=false
          fi

          echo "ALSO_LATEST=${ALSO_LATEST}" >> $GITHUB_ENV
          echo "PLATFORMS=${PLATFORMS}" >> $GITHUB_ENV
      - name: Discover docker tags
        id: discover-docker-tags
        uses: dotcms/discover-docker-tags-action@v2.0
        with:
          version: ${{ needs.release-process.outputs.release_version }}
          hash: ${{ needs.release-process.outputs.build_hash }}
          label: ${{ needs.release-process.outputs.release_label }}
          update_stable: ${{ needs.release-process.outputs.is_release }}
          also_latest: ${{ env.ALSO_LATEST }}
          image_name: dotcms/dotcms
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.0.0
        with:
          platforms: amd64,arm64
        if: needs.release-process.outputs.is_release == 'true'
      - name: Docker setup buildx
        uses: docker/setup-buildx-action@v3.0.0
        with:
          platforms: ${{ env.PLATFORMS }}
          driver-opts: |
            image=moby/buildkit:v0.12.2
        if: needs.release-process.outputs.is_release == 'true'
      - name: Docker Hub login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
        if: needs.release-process.outputs.is_release == 'true'
      - name: Pre build
        run: |
          docker system prune --volumes -af
      - name: Build and push
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./docker/dotcms
          push: ${{ needs.release-process.outputs.is_release == 'true' }}
          tags: ${{ steps.discover-docker-tags.outputs.discovered_tags }}
          platforms: ${{ env.PLATFORMS }}
          build-args: |
            BUILD_FROM=TAG
            BUILD_ID=${{ needs.release-process.outputs.build_id }}
        if: success()

  release-wrap:
    name: Release wrap-up
    runs-on: ubuntu-latest
    needs: [release-process, publish-release-image]
    if: success()
    env:
      FETCH_VALUE: 'Next Release'
    steps:
      - name: Checkout core
        uses: actions/checkout@v4
      - uses: ./.github/actions/cleanup-runner
      - name: Fetch `Next Release` issues
        id: fetch-next-release-issues
        uses: ./.github/actions/issue-fetcher
        with:
          fetch_operation: 'WITH_LABELS'
          fetch_value: ${{ env.FETCH_VALUE }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Clear next release issues
        uses: ./.github/actions/issue-labeler
        with:
          issues_json: ${{ steps.fetch-next-release-issues.outputs.issues }}
          labels: ${{ env.FETCH_VALUE }}
          operation: 'REMOVE'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Label current release issues
        uses: ./.github/actions/issue-labeler
        with:
          issues_json: ${{ steps.fetch-next-release-issues.outputs.issues }}
          labels: 'Release ${{ needs.release-process.outputs.release_version }}'
          operation: 'ADD'
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.RELEASE_SLACK_WEBHOOK }}
          SLACK_USERNAME: dotBot
          SLACK_TITLE: "Important news!"
          SLACK_MSG_AUTHOR: " "
          MSG_MINIMAL: true
          SLACK_FOOTER: ""
          SLACK_ICON: https://avatars.slack-edge.com/temp/2021-12-08/2830145934625_e4e464d502865ff576e4.png
          SLACK_MESSAGE: "<!channel> This automated script is excited to announce the release of a new version of dotCMS `${{ needs.release-process.outputs.build_id }}` :rocket:\n:docker: Produced images: [${{ needs.publish-release-image.outputs.formatted_tags }}]"
        if: success() && needs.release-process.outputs.is_release == 'true'
