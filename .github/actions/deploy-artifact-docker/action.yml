name: 'Deploy Docker Artifact'
description: 'Build and push a docker image to a registry from a Docker context passed from a run'
inputs:
  docker_platforms:
    description: 'Docker platforms to build the image on'
    required: false
    default: 'linux/amd64'
  docker_registry:
    description: 'Docker registry to push the image to (DOCKER.IO, GHCR.IO, BOTH)'
    required: false
    default: 'DOCKER.IO'
  build_run_id:
    description: 'The run id of the build to pull the artifact from'
    required: true
  commit_id:
    description: 'The commit id that triggered the build'
    required: true
  ref:
    description: 'The branch or type of build to tag the image with'
    required: true
  snapshot:
    description: 'tag the image as a snapshot'
    default: 'false'
  latest:
    description: 'Tag the image as latest'
    default: 'false'
  docker_tag:
    description: 'The docker tag to use for the image'
    required: true
  do_deploy:
    description: 'Actually do the final deploy, set to false for testing'
    required: true
    default: 'true'
  docker_io_username:
    description: 'Docker.io username'
    required: false
  docker_io_token:
    description: 'Docker.io token'
    required: false
  ghcr_io_username:
    description: 'GHCR.io username'
    required: false
  ghcr_io_token:
    description: 'GHCR.io token'
    required: false
  github_token:
    description: 'github token'
    required: true
outputs:
  tags:
    description: "The tags that were used to build the image"
    value: ${{ steps.meta.outputs.tags }}
runs:
  using: "composite"
  steps:
    - run: echo 'GitHub context'
      shell: bash
    - name: Download Docker Build Context
      uses: actions/download-artifact@v4
      with:
        name: docker-build-context
        path: ${{ github.workspace }}
        run-id: ${{ inputs.build_run_id }}
        github-token: ${{ inputs.github_token }}

    - name: Set Common Vars
      shell: bash
      id: set-common-vars
      env:
        SNAPSHOT: ${{ inputs.snapshot }}
        LATEST: ${{ inputs.latest }}
        REF: ${{ inputs.ref }}
      run: |
        if [ "$REF" = "release" ]; then
          tag_prefix=""
        else
          tag_prefix="${REF}_"
        fi
        
        # Initialize a bash variable to hold the full tags
        full_tags=""
        
        # Now use environment variables instead of GitHub Actions expressions
        if [ "$SNAPSHOT" = "true" ] && [ "$LATEST" = "true" ]; then
          latest_snapshot="true"
        else
          latest_snapshot="false"
        fi
        
        # Continue with conditional tag additions
        full_tags+="type=raw,value=${tag_prefix}{{sha}},enable=true\n"
        full_tags+="type=raw,value=${tag_prefix}latest,enable=$LATEST\n"
        full_tags+="type=raw,value=${tag_prefix}_SNAPSHOT,enable=$SNAPSHOT\n"
        full_tags+="type=raw,value=${tag_prefix}latest_SNAPSHOT,enable=$latest_snapshot\n"
        
        echo "full_tags=$full_tags"
        
        # Set the full_tags environment variable (optional, if needed elsewhere)
        echo "full_tags=$full_tags" >> $GITHUB_ENV
        # Output the full tags for the next steps, properly escaped for GitHub Actions
        echo "full_tags_output=$(echo "$full_tags" | sed 's/$/%0A/g')" >> $GITHUB_OUTPUT

    - name: Docker.io login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ inputs.docker_io_username }}
        password: ${{ inputs.docker_io_token }}
      if: (inputs.docker_registry == 'DOCKER.IO' || inputs.docker_registry == 'BOTH') && inputs.do_deploy == 'true'

    - name: GHCR.io login
      uses: docker/login-action@v3.0.0
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr_io_username }}
        password: ${{ inputs.ghcr_io_token }}
      if: (inputs.docker_registry == 'GHCR.IO' || inputs.docker_registry == 'BOTH') && inputs.do_deploy == 'true'

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3.0.0
      with:
        image: tonistiigi/binfmt:latest
        platforms: ${{ inputs.docker_platforms }}

    - name: Docker Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          dotcms/dotcms
        tags: ${{ steps.set-common-vars.outputs.full_tags_output }}
      if: success()

    - name: Debug Docker Metadata
      shell: bash
      run: |
        echo "${{ fromJSON(steps.meta.outputs.json) }}"
        echo "tags=$(echo ${{ steps.meta.outputs.tags }} | tr '\n' ' ')" >> $GITHUB_OUTPUT
        echo "version=${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT
      if: success()

    - name: Docker Setup Buildx
      uses: docker/setup-buildx-action@v3.0.0
      with:
        version: latest
        platforms: ${{ inputs.docker_platforms }}
        driver-opts: |
          image=moby/buildkit:v0.12.2

    - name: Setup Context
      run: |
        mkdir -p docker-context
        tar -xvf docker-build.tar -C docker-context
      shell: bash

    - name: Build/Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./docker-context
        tags: ${{ inputs.docker_tag }}
        platforms: ${{ inputs.docker_platforms }}
        pull: true
        push: ${{ inputs.do_deploy }}
        cache-from: type=gha
        cache-to: type=gha,mode=max