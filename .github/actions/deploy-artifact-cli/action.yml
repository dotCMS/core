name: 'Deploy CLI Artifact'
description: 'Deploy the dotCMS CLI artifacts to Artifactory'
inputs:
  branch:
    description: 'Branch to build from'
    required: true
  artifactory-repo-username:
    description: 'Artifactory Repository Username'
    required: true
  artifactory-repo-password:
    description: 'Artifactory Repository Password'
    required: true
  github-token:
    description: 'GitHub Token'
    required: true
  build-run-id:
    description: 'The run id of the build to pull the artifact from'
    required: true
  commit-id:
    description: 'The commit id that triggered the build'
    required: true

runs:
  using: "composite"
  steps:
    - name: 'Set up JDK'
      uses: actions/setup-java@v4
      with:
        java-version: 11
        distribution: temurin

    - name: 'Get Date'
      id: get-date
      run: |
        echo "date=$(/bin/date -u "+%Y-%m")" >> $GITHUB_OUTPUT
      shell: bash

    - name: 'Download all build artifacts'
      id: download-cli-artifacts
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/tools/dotcms-cli/cli/target
        pattern: cli-artifacts-*
        run-id: ${{ inputs.build-run-id }}
        github-token: ${{ inputs.github-token }}

    - name: 'List CLI Artifacts'
      run: |
        ls -R ${{ github.workspace }}/tools/dotcms-cli/cli/target
      shell: bash

    - name: 'Maven settings.xml setup'
      uses: whelk-io/maven-settings-xml-action@v22
      with:
        servers: '[{ "id": "dotcms-libs", "username": "${{ inputs.artifactory-repo-username }}", "password": "${{ inputs.artifactory-repo-password }}" }, { "id": "dotcms-libs-snapshot", "username": "${{ inputs.artifactory-repo-username }}", "password": "${{ inputs.artifactory-repo-password }}" }]'

#    Cannot just deploy the CLI artifacts as the CLI is not a standalone artifact We should deploy all the artifacts not just cli
#    We should create a separate deploy-artifact-artifactory action that will deploy all the artifacts or the monorepo as a whole
#    deploy target will rebuild and package the artifacts we can download the maven github artifact and call the maven-deploy-plugin directly
#    or through a profile.

#  - name: 'Deploy CLI Artifacts'
#      run: |
#        JVM_TEST_MAVEN_OPTS="-e -B --no-transfer-progress -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"
#        ./mvnw -ntp \
#          ${JVM_TEST_MAVEN_OPTS} \
#          -Dprod=true \
#          -DskipTests=true \
#          -DskipITs=true \
#          deploy \
#          -pl :dotcms-cli
#      shell: bash
