name: 'Organization Membership Check'
description: 'Checks if a user is a member of the dotCMS organization'

inputs:
  username:
    description: 'GitHub username to check'
    required: true
  github_token:
    description: 'Fine-grained GitHub token with organization membership read permissions'
    required: true

outputs:
  is_member:
    description: 'true if user is a member, false otherwise'
    value: ${{ steps.check-membership.outputs.is_member }}
  membership_status:
    description: 'Membership status (member, non-member, error)'
    value: ${{ steps.check-membership.outputs.membership_status }}

runs:
  using: 'composite'
  steps:
    - name: Check Organization Membership
      id: check-membership
      shell: bash
      run: |
        echo "Checking organization membership for user: ${{ inputs.username }} in dotCMS organization"

        # Use GitHub CLI to check organization membership
        # This uses a fine-grained token with organization membership read permissions

        set +e  # Don't exit on error, we want to handle it gracefully

        # Check organization membership using GitHub API
        #
        # IMPORTANT: We check the HTTP status code (via exit code) rather than parsing
        # the response body because GitHub's membership API has specific behavior:
        #
        # HTTP 200 (exit code 0) = User IS a member (regardless of response content)
        #   - Public member: Returns user object with populated fields
        #   - Private member: Returns empty response body (but still 200 OK)
        #
        # HTTP 404 (exit code 1) = User is NOT a member
        #   - Returns {"message":"Not Found",...} error response
        #
        # This approach correctly handles both public and private organization members
        # without needing to distinguish between their visibility settings.

        response=$(gh api orgs/dotCMS/members/${{ inputs.username }} \
          --header "Authorization: token ${{ inputs.github_token }}" 2>/dev/null)
        api_exit_code=$?

        if [ $api_exit_code -eq 0 ]; then
          # HTTP 200: User is a member (public or private)
          # We check response content only for logging clarity, not authorization logic
          if [ -n "$response" ]; then
            echo "✅ User ${{ inputs.username }} is a member of dotCMS (public membership)"
          else
            echo "✅ User ${{ inputs.username }} is a member of dotCMS (private membership)"
          fi
          echo "is_member=true" >> $GITHUB_OUTPUT
          echo "membership_status=member" >> $GITHUB_OUTPUT
        else
          # HTTP 404 or other error: User is not a member

          echo "❌ User ${{ inputs.username }} is not a member of dotCMS (API exit code: $api_exit_code)"
          echo "is_member=false" >> $GITHUB_OUTPUT
          echo "membership_status=non-member" >> $GITHUB_OUTPUT
        fi

        # Log the result for debugging (without leaking membership details)
        membership_result=$(if [ "$(cat $GITHUB_OUTPUT | grep 'is_member=true')" ]; then echo "AUTHORIZED"; else echo "UNAUTHORIZED"; fi)
        echo "::notice::Organization membership check result: $membership_result for ${{ inputs.username }}"
      env:
        GITHUB_TOKEN: ${{ github.token }}