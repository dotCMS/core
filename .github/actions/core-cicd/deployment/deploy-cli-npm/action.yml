name: 'CLI Publish NPM Package'
description: 'Package the dotCMS CLI as an NPM project.'
inputs:
  ref:
    description: 'Branch to build from'
    required: false
    default: 'main'
  github-token:
    description: 'GitHub Token'
    required: true
  npm-token:
    description: 'NPM Token'
    required: true
  npm-package-name:
    description: 'NPM package name'
    required: false
    default: 'dotcli'
  npm-package-scope:
    description: 'NPM package scope'
    required: false
    default: '@dotcms'
  node-version:
    description: 'Node.js version'
    required: false
    default: '19'
  cli-artifact-run-id:
    default: ${{ github.run_id }}
    description: 'The run id of the cli artifacts'
    required: false
outputs:
  npm-package-version:
    description: 'NPM package version'
    value: ${{ steps.npm-version-tag.outputs.npm-package-version }}
  npm-package-version-tag:
    description: 'NPM package version tag'
    value: ${{ steps.npm-version-tag.outputs.npm-package-version-tag }}

runs:
  using: "composite"
  steps:
    - name: 'Checkout'
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}

    - name: 'Set up Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: 'Install Jinja2'
      run: pip install jinja2-cli
      shell: bash


    - name: 'Download all cli build artifacts.'
      id: download-cli-artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: cli-artifacts-*
        path: ${{ github.workspace }}/artifacts
        github-token: ${{ inputs.github-token }} # token with actions:read permissions on target repo
        merge-multiple: true
        run-id: ${{ inputs.cli-artifact-run-id }} # CLI Artifacts currently always from the same run-id and never from merge queue

    - name: 'List CLI Artifacts'
      run: |
        echo "::group::CLI Artifacts"
        echo "Artifacts"
        ls -R ${{ github.workspace }}/artifacts
        echo "::endgroup::"
      shell: bash


    - name: 'Extract package version'
      id: project
      run: |
        echo "::group::Extract package version"
        version=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout -pl :dotcms-cli)
        echo "::debug::PROJECT VERSION: $version"
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "::endgroup::"
      shell: bash
    # Determines the NPM package version and tag
    # Distinguishes between snapshots and releases

    - name: 'Dynamic configuration of NPM package Version and Tag'
      id: npm-version-tag
      run: |
        echo "::group::NPM package Version and Tag"
        MVN_PACKAGE_VERSION=$(echo ${{ steps.project.outputs.version }} | tr '[:lower:]' '[:upper:]')
        PACKAGE_FULL_NAME=${{ inputs.npm-package-scope }}/${{ inputs.npm-package-name }}

        # Check if the npm package exists
        if ! npm view $PACKAGE_FULL_NAME &> /dev/null; then
          echo "::error::The package $PACKAGE_FULL_NAME does not exist on npm."
          exit 1
        fi

        # Check if the package is a snapshot
        REGEX="([0-9]+\.[0-9]+\.[0-9]+)-SNAPSHOT"

        if [[ $MVN_PACKAGE_VERSION =~ $REGEX ]]; then
          echo "::debug::Snapshot version found."

          NPM_PACKAGE_VERSION_TAG="rc"
          MVN_BASE_VERSION="${BASH_REMATCH[1]}"

          # Use regular expression to extract version components
          if [[ $MVN_BASE_VERSION =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR=$(echo "${BASH_REMATCH[1]}" | sed "s/\b0\+\([1-9]\)/\1/g")
            MINOR=$(echo "${BASH_REMATCH[2]}" | sed "s/\b0\+\([1-9]\)/\1/g")
            PATCH=$(echo "${BASH_REMATCH[3]}" | sed "s/\b0\+\([1-9]\)/\1/g")
            VERSION_NPM_FORMAT="${MAJOR}.${MINOR}.${PATCH}"

            echo "::debug::VERSION_NPM_FORMAT: ${VERSION_NPM_FORMAT}"
          else
            echo "::error::Invalid Maven version format: $MVN_BASE_VERSION"
            exit 1
          fi

          echo "VERSION_NPM_FORMAT: ${VERSION_NPM_FORMAT}"
          # Get last RC versions
          LATEST_RC_VERSIONS=$(npm view $PACKAGE_FULL_NAME versions --json)
          echo "LATEST_RC_VERSIONS: ${LATEST_RC_VERSIONS}"

          # Extract max RC version
          MAX_RC_VERSION=$(echo $LATEST_RC_VERSIONS | jq -r --arg filter $VERSION_NPM_FORMAT-rc 'map(.| select(. | contains($filter)) | sub($filter; "") | tonumber ) | max')
          echo "MAX_RC_VERSION: ${MAX_RC_VERSION}"
        
          if [[ $MAX_RC_VERSION != null ]]; then
            RC_SUFFIX="-rc$(( $MAX_RC_VERSION + 1 ))"
          else
            RC_SUFFIX="-rc1"
          fi;

          NPM_PACKAGE_VERSION=${MVN_BASE_VERSION}${RC_SUFFIX}
        else
          echo "::debug::Release version found."
          NPM_PACKAGE_VERSION_TAG="latest"
          NPM_PACKAGE_VERSION=${MVN_PACKAGE_VERSION}
        fi;
        echo "::debug::NPM_PACKAGE_VERSION: $NPM_PACKAGE_VERSION"
        echo "::debug::NPM_PACKAGE_VERSION_TAG: $NPM_PACKAGE_VERSION_TAG"

        echo "npm-package-version=$NPM_PACKAGE_VERSION" >> $GITHUB_OUTPUT
        echo "npm-package-version-tag=$NPM_PACKAGE_VERSION_TAG" >> $GITHUB_OUTPUT
        echo "::endgroup::"
      shell: bash


    # Sets up the NPM package
    # Creates the bin folder with the binaries
    # Adds the postinstall.js script
    # Generates the package.json file with Jinja2

    - name: 'NPM Package setup'
      working-directory: ${{ github.workspace }}/tools/dotcms-cli/npm/
      env:
        NPM_PACKAGE_NAME: ${{ inputs.npm-package-name }}
        NPM_PACKAGE_VERSION: ${{ steps.npm-version-tag.outputs.npm-package-version }}
        MVN_PACKAGE_NAME: dotcms-cli
        MVN_PACKAGE_VERSION: ${{ steps.project.outputs.version }}
      run: |
        echo "::group::NPM Package setup"
        echo "Adding bin folder with all the binaries"
        mkdir -p bin
        find ${{ github.workspace }}/artifacts/ -name "*.zip" -exec unzip -d bin {} \;

        echo "Adding wrapper script"
        mv src/postinstall.js.seed src/postinstall.js

        echo "Adding README.md file"
        cp ${{ github.workspace }}/tools/dotcms-cli/README.md .

        echo "Adding package.json file"
        jinja2 package.j2 -D packageName=${MVN_PACKAGE_NAME} -D npmPackageName=${NPM_PACKAGE_NAME} -D npmPackageVersion=${NPM_PACKAGE_VERSION} -D packageVersion=${MVN_PACKAGE_VERSION} --format json -o package.json
        rm -f package.j2

        cat package.json
        cat src/postinstall.js
        echo "::endgroup::"
      shell: bash

    - name: 'NPM Package tree'
      run: ls -R ${{ github.workspace }}/tools/dotcms-cli/npm/
      shell: bash

    - name: 'Validate NPM package'
      working-directory: ${{ github.workspace }}/tools/dotcms-cli/npm
      run: |
        echo "::group::NPM package contents"
        if [ ! -f package.json ]; then
          echo "::error::NPM package not found. Exiting..."
          exit 1
        else
          echo "::notice::NPM package found. Proceeding..."
          cat package.json
        fi
        echo "::endgroup::"
      shell: bash

    - name: 'Publish to NPM registry'
      working-directory: ${{ github.workspace }}/tools/dotcms-cli/npm
      env:
        NPM_AUTH_TOKEN: ${{ inputs.npm-token }}
        NPM_PACKAGE_VERSION_TAG: ${{ steps.npm-version-tag.outputs.npm-package-version-tag }}
      run: |
        echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > ~/.npmrc
        npm publish --access public --tag ${NPM_PACKAGE_VERSION_TAG}
      shell: bash
