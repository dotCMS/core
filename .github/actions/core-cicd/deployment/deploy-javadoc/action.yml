name: Deploy Artifact Javadoc
description: Deploys the Javadoc artifact to the GitHub Packages registry
inputs:
  ref:
    description: 'Branch to build from'
    required: false
    default: 'main'
  github-token:
    description: 'GitHub Token'
    required: true
  release-version:
    description: 'The version of the release'
    required: true
  artifact-run-id:
    description: 'The run id of the core artifacts'    
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  aws-region:
    description: 'AWS region'
    default: 'us-east-1'
    required: true

runs:
  using: "composite"
  steps:
    - name: 'Checkout'
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}

    - uses: ./.github/actions/core-cicd/maven-job
      id: maven-clean
      with:        
        stage-name: "Clean Build"
        maven-args: "clean install -DskipTests"
        generate-docker: false
        cleanup-runner: true
        github-token: ${{ inputs.github-token }}
      if: inputs.artifact-run-id == ''

    - uses: ./.github/actions/core-cicd/maven-job
      id: maven-javadoc
      with:        
        stage-name: "Deploy Javadoc"
        maven-args: "javadoc:javadoc -pl :dotcms-core"
        generate-docker: false
        cleanup-runner: true
        restore-classes: true
        artifacts-from: ${{ inputs.artifact-run-id }}
        github-token: ${{ inputs.github-token }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }} 

    - name: Generate/Push Javadoc
      if: success()
      run: |
        echo "::group::Generate/Push Javadoc"
        site_dir=./dotCMS/target/site
        javadoc_dir=${site_dir}/javadocs
        s3_uri=s3://static.dotcms.com/docs/${{ inputs.release-version }}/javadocs
        mv ${site_dir}/apidocs ${javadoc_dir}
        # ls -R $javadoc_dir
        echo "Running: aws s3 cp ${javadoc_dir} ${s3_uri} --recursive"
        aws s3 cp ${javadoc_dir} ${s3_uri} --recursive
        echo "::endgroup::"
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.aws-access-key-id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws-secret-access-key }}
      shell: bash